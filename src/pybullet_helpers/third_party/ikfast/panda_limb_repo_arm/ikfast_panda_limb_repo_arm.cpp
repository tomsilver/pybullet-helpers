/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2024-08-18 03:42:05.482325
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include "Python.h"

#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.707106781186547)*x9);
x13=((0.384)*x4);
x14=((0.707106781186547)*x8);
x15=((0.207)*x5);
x16=((0.707106781186548)*x8);
x17=((0.0825)*x2);
x18=((0.207)*x7);
x19=((0.088)*x0);
x20=((0.088)*x6);
x21=((1.0)*x7);
x22=((0.707106781186548)*x9);
x23=((0.316)*x3);
x24=((0.088)*x7);
x25=((1.0)*x0);
x26=((0.0825)*x7);
x27=(x3*x4);
x28=(x0*x1);
x29=(x1*x2);
x30=((-1.0)*x10);
x31=(x2*x3);
x32=(x1*x4);
x33=(x10*x6);
x34=(x11*x6);
x35=((-1.0)*x11);
x36=(x25*x32);
x37=(x21*x32);
x38=((((-1.0)*x31))+x32);
x39=(x27+x29);
x40=(x38*x5);
x41=(x11*x39);
x42=(x38*x6);
x43=(((x0*x27))+((x2*x28)));
x44=((((-1.0)*x36))+((x0*x31)));
x45=(x7*((x27+x29)));
x46=((((-1.0)*x37))+((x31*x7)));
x47=(x11*x44);
x48=(x43*x6);
x49=(x11*x46);
x50=(x45*x6);
x51=(((x6*x7))+((x43*x5)));
x52=((((-1.0)*x21*x5))+x48);
x53=(((x0*x5))+x50);
x54=((((-1.0)*x25*x6))+((x45*x5)));
x55=(x54*x8);
x56=(x41+((x33*x38)));
x57=(((x10*x52))+x47);
x58=(((x10*x53))+x49);
x59=(((x35*x44))+((x30*x52)));
x60=(((x35*x46))+((x30*x53)));
eerot[0]=(((x16*x57))+(((-1.0)*x12*x59))+(((-1.0)*x14*x51))+((x22*x51)));
eerot[1]=(((x12*x51))+((x14*x57))+((x16*x51))+((x22*x59)));
eerot[2]=(((x10*(((((-1.0)*x25*x31))+x36))))+((x11*x52)));
IkReal x61=(x0*x31);
IkReal x62=((1.0)*x28);
eetrans[0]=((((-1.0)*x13*x62))+(((-1.0)*x17*x62))+((x10*(((((0.207)*x28*x4))+(((-0.207)*x61))))))+((x0*x23))+(((0.384)*x61))+((x10*((((x20*x43))+(((-1.0)*x24*x5))))))+(((0.0825)*x28))+(((-0.0825)*x0*x27))+((x11*((((x19*x31))+(((-1.0)*x19*x32))))))+((x11*(((((0.207)*x48))+(((-1.0)*x15*x7)))))));
eerot[3]=(((x16*x58))+(((-1.0)*x12*x60))+(((-1.0)*x14*x54))+((x22*x54)));
eerot[4]=(((x12*x54))+((x14*x58))+((x16*x54))+((x22*x60)));
eerot[5]=(((x10*((x37+(((-1.0)*x21*x31))))))+((x11*x53)));
IkReal x63=((1.0)*x1*x7);
eetrans[1]=((((-1.0)*x13*x63))+((x11*(((((-1.0)*x24*x32))+((x24*x31))))))+(((-1.0)*x17*x63))+((x11*((((x0*x15))+(((0.207)*x50))))))+((x1*x26))+((x10*((((x20*x45))+((x19*x5))))))+((x23*x7))+(((0.384)*x31*x7))+((x10*(((((-1.0)*x18*x31))+((x18*x32))))))+(((-1.0)*x26*x27)));
eerot[6]=((((-1.0)*x12*(((((-1.0)*x41))+(((-1.0)*x33*x38))))))+((x16*x56))+((x22*x40))+(((-1.0)*x14*x40)));
eerot[7]=(((x14*x56))+((x22*((((x35*x39))+((x30*x42))))))+((x16*x40))+((x12*x40)));
eerot[8]=(((x34*x38))+((x10*(((((-1.0)*x27))+(((-1.0)*x29)))))));
eetrans[2]=((0.333)+((x33*(((((-0.088)*x31))+(((0.088)*x32))))))+(((0.384)*x29))+((x34*(((((-0.207)*x31))+(((0.207)*x32))))))+((x11*(((((0.088)*x29))+(((0.088)*x27))))))+((x10*(((((-0.207)*x27))+(((-0.207)*x29))))))+((x17*x3))+(((-0.0825)*x3))+(((-0.0825)*x32))+(((0.316)*x1))+((x13*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.707106781186547)*r01))+(((0.707106781186548)*r00)));
new_r01=((((-0.707106781186547)*r00))+(((0.707106781186548)*r01)));
new_r02=r02;
new_px=((((-0.207)*r02))+px);
new_r10=((((0.707106781186547)*r11))+(((0.707106781186548)*r10)));
new_r11=((((0.707106781186548)*r11))+(((-0.707106781186547)*r10)));
new_r12=r12;
new_py=((((-0.207)*r12))+py);
new_r20=((((0.707106781186547)*r21))+(((0.707106781186548)*r20)));
new_r21=((((0.707106781186548)*r21))+(((-0.707106781186547)*r20)));
new_r22=r22;
new_pz=((-0.333)+pz+(((-0.207)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x64=((1.0)*px);
IkReal x65=((1.0)*pz);
IkReal x66=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x66))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x65)));
rxp0_2=((((-1.0)*r10*x64))+((py*r00)));
rxp1_0=((((-1.0)*r21*x66))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x65)));
rxp1_2=((((-1.0)*r11*x64))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x66)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x65)));
rxp2_2=((((-1.0)*r12*x64))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=(rxp2_2+(((-0.088)*r21)));
IkReal x68=((0.088)*r21);
IkReal x69=((1.0)*pp);
IkReal x70=((0.011)*npx);
IkReal x71=((0.768)*npz);
IkReal x72=((0.165)*npy);
IkReal x73=((0.341)*npx);
IkReal x74=((4.0)*rxp1_2);
IkReal x75=((2.0)*rxp0_2);
IkReal x76=((0.33)*npz);
IkReal x77=((1.536)*npx);
IkReal x78=((0.176)*r20);
IkReal x79=((1.0)*rxp2_2);
IkReal x80=((-0.176)*r20);
IkReal x81=(rxp2_2+x68);
IkReal x82=((-0.165)*npy);
IkReal x83=((-0.33)*npx);
IkReal x84=((-2.0)*rxp0_2);
IkReal x85=((-3.072)*npy);
IkReal x86=((((-1.0)*x79))+x68);
IkReal x87=((-0.682)*npy);
IkReal x88=((-0.022)*npy);
IkReal x89=((-0.040824)+x71);
IkReal x90=((-0.069864)+x71);
IkReal x91=((-0.135168)+x76);
IkReal x92=(x71+x69);
IkReal x93=((((-1.0)*x79))+(((-1.0)*x68)));
op[0]=x67;
op[1]=x67;
op[2]=x80;
op[3]=x80;
op[4]=x81;
op[5]=x81;
op[6]=((-0.040824)+x70+(((-1.0)*x92)));
op[7]=x82;
op[8]=x88;
op[9]=x83;
op[10]=((-0.040824)+(((-1.0)*x70))+(((-1.0)*x92)));
op[11]=x72;
op[12]=x82;
op[13]=((-0.069864)+x73+(((-1.0)*x92)));
op[14]=x83;
op[15]=x87;
op[16]=x72;
op[17]=((-0.069864)+(((-1.0)*x73))+(((-1.0)*x92)));
op[18]=0;
op[19]=x67;
op[20]=0;
op[21]=x80;
op[22]=0;
op[23]=x81;
op[24]=x84;
op[25]=x84;
op[26]=x74;
op[27]=x74;
op[28]=x75;
op[29]=x75;
op[30]=((-0.135168)+(((-1.0)*x76))+x77);
op[31]=0;
op[32]=x85;
op[33]=0;
op[34]=((-0.135168)+(((-1.0)*x76))+(((-1.0)*x77)));
op[35]=0;
op[36]=0;
op[37]=(x77+x91);
op[38]=0;
op[39]=x85;
op[40]=0;
op[41]=((((-1.0)*x77))+x91);
op[42]=0;
op[43]=x84;
op[44]=0;
op[45]=x74;
op[46]=0;
op[47]=x75;
op[48]=x86;
op[49]=x86;
op[50]=x78;
op[51]=x78;
op[52]=x93;
op[53]=x93;
op[54]=(x73+x90+(((-1.0)*x69)));
op[55]=x82;
op[56]=x87;
op[57]=x83;
op[58]=((((-1.0)*x73))+x90+(((-1.0)*x69)));
op[59]=x72;
op[60]=x82;
op[61]=(x70+x89+(((-1.0)*x69)));
op[62]=x83;
op[63]=x88;
op[64]=x72;
op[65]=((((-1.0)*x70))+x89+(((-1.0)*x69)));
op[66]=0;
op[67]=x86;
op[68]=0;
op[69]=x78;
op[70]=0;
op[71]=x93;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x94=htj4*htj4;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj4array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x96.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x96.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x97=htj5*htj5;
CheckValue<IkReal> x98=IKPowWithIntegerCheck(((1.0)+x97),-1);
if(!x98.valid){
continue;
}
cj5array[numsolutions]=((x98.value)*(((1.0)+(((-1.0)*x97)))));
CheckValue<IkReal> x99=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x99.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x99.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x100=htj3*htj3;
CheckValue<IkReal> x101=IKPowWithIntegerCheck(((1.0)+x100),-1);
if(!x101.valid){
continue;
}
cj3array[numsolutions]=((x101.value)*(((1.0)+(((-1.0)*x100)))));
CheckValue<IkReal> x102=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x102.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x102.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x103=((11.0)*cj3);
IkReal x104=((125.0)*cj3);
IkReal x105=(cj5*rxp1_2);
IkReal x106=(rxp0_2*sj5);
j0eval[0]=((((-11.3636363636364)*x105))+(((-11.3636363636364)*x106))+(((-1.0)*r22)));
j0eval[1]=((IKabs((((cj5*r10*x103))+(((-1.0)*r11*sj5*x103))+(((-1.0)*py*x104)))))+(IKabs(((((-1.0)*px*x104))+((cj5*r00*x103))+(((-1.0)*r01*sj5*x103))))));
j0eval[2]=IKsign(((((-0.088)*r22))+(((-1.0)*x106))+(((-1.0)*x105))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x107=(cj3*cj4);
IkReal x108=(cj3*sj4);
IkReal x109=((1.0)*cj5);
IkReal x110=(((r22*sj4))+(((-1.0)*cj4*r21*sj5))+((cj4*cj5*r20)));
j0eval[0]=x110;
j0eval[1]=IKsign(x110);
j0eval[2]=((IKabs((((r02*x107))+(((-1.0)*r00*x108*x109))+((r01*sj5*x108)))))+(IKabs((((r11*sj5*x108))+(((-1.0)*r10*x108*x109))+((r12*x107))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x111=((125.0)*sj3);
IkReal x112=((11.3636363636364)*cj4);
IkReal x113=(rxp1_2*sj5);
IkReal x114=((11.0)*sj3);
IkReal x115=(cj5*rxp0_2);
IkReal x116=(rxp2_2*sj4);
IkReal x117=(cj5*r21*sj4);
IkReal x118=(r20*sj4*sj5);
j0eval[0]=((((-1.0)*x112*x113))+((x112*x115))+(((11.3636363636364)*x116))+(((-1.0)*x117))+(((-1.0)*x118)));
j0eval[1]=((IKabs(((((-1.0)*px*x111))+((cj5*r00*x114))+(((-1.0)*r01*sj5*x114)))))+(IKabs((((cj5*r10*x114))+(((-1.0)*r11*sj5*x114))+(((-1.0)*py*x111))))));
j0eval[2]=IKsign((x116+((cj4*x115))+(((-0.088)*x117))+(((-0.088)*x118))+(((-1.0)*cj4*x113))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x119=(cj5*rxp1_2);
IkReal x120=((0.088)*sj5);
IkReal x121=(rxp0_2*sj5);
IkReal x122=((0.088)*cj5);
j0eval[0]=((((-11.3636363636364)*x119))+(((-1.0)*r22))+(((-11.3636363636364)*x121)));
j0eval[1]=((IKabs(((((-1.0)*r11*x120))+(((-1.0)*py))+((r10*x122)))))+(IKabs((((r00*x122))+(((-1.0)*px))+(((-1.0)*r01*x120))))));
j0eval[2]=IKsign(((((-0.088)*r22))+(((-1.0)*x121))+(((-1.0)*x119))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x123=(sj4*sj5);
IkReal x124=((1.0)*cj5*sj4);
IkReal x125=(((r22*sj4))+(((-1.0)*cj4*r21*sj5))+((cj4*cj5*r20)));
j0eval[0]=x125;
j0eval[1]=IKsign(x125);
j0eval[2]=((IKabs(((((-1.0)*r10*x124))+((r11*x123))+((cj4*r12)))))+(IKabs(((((-1.0)*r00*x124))+((r01*x123))+((cj4*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x126=((1.0)*cj5);
IkReal x127=(cj4*sj5);
IkReal x128=((1.0)*sj4);
IkReal x129=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x126)));
j0eval[0]=x129;
j0eval[1]=IKsign(x129);
j0eval[2]=((IKabs(((((-1.0)*cj4*r10*x126))+(((-1.0)*r12*x128))+((r11*x127)))))+(IKabs(((((-1.0)*cj4*r00*x126))+((r01*x127))+(((-1.0)*r02*x128))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x130=((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))));
if((x130) < -0.00001)
continue;
IkReal x131=IKabs(IKsqrt(x130));
IkReal x137 = x130;
if(IKabs(x137)==0){
continue;
}
IkReal x132=pow(x137,-0.5);
IkReal x133=((11.3636363636364)*x132);
CheckValue<IkReal> x138=IKPowWithIntegerCheck(x131,-1);
if(!x138.valid){
continue;
}
IkReal x134=x138.value;
IkReal x135=(r22*x134);
if((((1.0)+(((-1.0)*(x135*x135))))) < -0.00001)
continue;
IkReal x136=IKsqrt(((1.0)+(((-1.0)*(x135*x135)))));
if( (x135) < -1-IKFAST_SINCOS_THRESH || (x135) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x139.valid){
continue;
}
IkReal gconst6=((IKasin(x135))+(((-1.0)*(x139.value))));
IkReal gconst7=(((rxp1_2*x133*x136))+(((-1.0)*rxp0_2*x133*x135)));
IkReal gconst8=((((-1.0)*rxp0_2*x133*x136))+(((-1.0)*rxp1_2*x133*x135)));
CheckValue<IkReal> x140 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x140.valid){
continue;
}
if((((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x141=IKPowWithIntegerCheck(IKabs(IKsqrt(((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2)))))),-1);
if(!x141.valid){
continue;
}
if( ((r22*(x141.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x141.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x140.value)+(((-1.0)*(IKasin((r22*(x141.value))))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x142=((0.088)*gconst7);
IkReal x143=((0.088)*gconst8);
CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x142))+((r10*x143)))),IkReal((((r00*x143))+(((-1.0)*r01*x142))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x144.valid){
continue;
}
CheckValue<IkReal> x145=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*rxp1_2))+((r22*(((((-1.0)*gconst8*x143))+(((-1.0)*gconst7*x142))))))+(((-1.0)*gconst7*rxp0_2)))),-1);
if(!x145.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x144.value)+(((1.5707963267949)*(x145.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x146=IKsin(j0);
IkReal x147=IKcos(j0);
IkReal x148=(gconst8*sj4);
IkReal x149=((1.0)*cj4);
IkReal x150=((1.0)*sj4);
IkReal x151=((1.0)*gconst7);
IkReal x152=(gconst8*x146);
IkReal x153=(r12*x147);
IkReal x154=(r02*x146);
IkReal x155=(r00*x146);
IkReal x156=((1.0)*r10*x147);
IkReal x157=(gconst7*r01*x146);
IkReal x158=((1.0)*gconst8*x147);
IkReal x159=(gconst7*r11*x147);
evalcond[0]=((-1.0)+((r01*x152))+(((-1.0)*r11*x158))+((gconst7*x155))+(((-1.0)*r10*x147*x151)));
evalcond[1]=((((-1.0)*r01*x158))+(((-1.0)*r00*x147*x151))+(((-1.0)*r11*x152))+(((-1.0)*r10*x146*x151)));
evalcond[2]=((((-0.088)*r00*x152))+(((0.088)*gconst8*r10*x147))+(((-0.088)*x159))+(((0.088)*x157))+(((-1.0)*py*x147))+((px*x146)));
evalcond[3]=(((cj4*x153))+((sj4*x159))+(((-1.0)*x150*x157))+(((-1.0)*x148*x156))+((x148*x155))+(((-1.0)*x149*x154)));
evalcond[4]=(((cj4*x159))+((sj4*x154))+(((-1.0)*x150*x153))+((cj4*r00*x152))+(((-1.0)*gconst8*r10*x147*x149))+(((-1.0)*x149*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x160=x130;
if((x160) < -0.00001)
continue;
IkReal x161=IKabs(IKsqrt(x160));
IkReal x168 = x160;
if(IKabs(x168)==0){
continue;
}
IkReal x162=pow(x168,-0.5);
IkReal x163=((11.3636363636364)*x162);
CheckValue<IkReal> x169=IKPowWithIntegerCheck(x161,-1);
if(!x169.valid){
continue;
}
IkReal x164=x169.value;
IkReal x165=(r22*x164);
if((((1.0)+(((-1.0)*(x165*x165))))) < -0.00001)
continue;
IkReal x166=IKsqrt(((1.0)+(((-1.0)*(x165*x165)))));
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
if( (x165) < -1-IKFAST_SINCOS_THRESH || (x165) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x167=((((-1.0)*(x170.value)))+(IKasin(x165)));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst7;
cj5=gconst8;
j5=x167;
IkReal gconst6=x167;
IkReal gconst7=((((-1.0)*rxp0_2*x163*x165))+((rxp1_2*x163*x166)));
IkReal gconst8=((((-1.0)*rxp1_2*x163*x165))+(((-1.0)*rxp0_2*x163*x166)));
IkReal x171=((4.608)*pz);
IkReal x172=((12.0)*pz);
IkReal x173=(py*sj0);
IkReal x174=(cj0*px);
IkReal x175=((0.08712)*gconst8);
IkReal x176=(cj0*r00);
IkReal x177=(cj4*r22);
IkReal x178=(gconst8*r20);
IkReal x179=((4.608)*sj4);
IkReal x180=((1.536)*sj4);
IkReal x181=(r22*sj4);
IkReal x182=(gconst7*r21);
IkReal x183=((1.851147)*sj4);
IkReal x184=(r10*sj0);
IkReal x185=((0.617049)*sj4);
IkReal x186=((0.02904)*gconst8);
IkReal x187=((1.851147)*x177);
IkReal x188=((0.405504)*x182);
IkReal x189=((4.608)*x177);
IkReal x190=((0.99)*x181);
IkReal x191=((1.056)*x182);
IkReal x192=(cj4*x178);
IkReal x193=(gconst7*r11*sj0);
IkReal x194=(cj0*gconst7*r01);
IkReal x195=(x175*x176);
IkReal x196=(x175*x184);
IkReal x197=(x182*x183);
IkReal x198=((0.99)*x192);
IkReal x199=(x179*x182);
IkReal x200=(((x178*x179))+(((0.99)*cj4*x182))+(((1.056)*x178)));
IkReal x201=(x172+x199+x198+x191+x190+x189);
IkReal x202=(x171+x197+x196+x195+x187+x188);
IkReal x203=(((x178*x183))+(((0.405504)*x178))+(((0.99)*x173))+(((0.99)*x174))+(((0.08712)*x194))+(((0.08712)*x193)));
j1eval[0]=((4.488)+(IKabs(((0.458151)+(((-1.0)*x178*x185))+((x176*x186))+(((-0.135168)*x178))+(((0.135168)*x182))+((x184*x186))+(((0.617049)*x177))+(((-0.33)*x173))+(((-0.33)*x174))+(((1.536)*pz))+(((-0.02904)*x194))+(((-0.02904)*x193))+((x182*x185)))))+(IKabs(((-0.458151)+(((-1.0)*x203))+x202)))+(IKabs(((0.458151)+(((-1.0)*x203))+x202)))+(IKabs(((1.264)+(((-1.0)*x200))+x201)))+(IKabs(((1.264)+(((-1.0)*x178*x180))+(((-0.352)*x178))+((x180*x182))+(((-0.33)*cj4*x182))+(((4.0)*pz))+(((1.536)*x177))+(((0.352)*x182))+(((0.33)*x181))+(((0.33)*x192)))))+(IKabs(((-1.264)+(((-1.0)*x200))+x201))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x204=((12.0)*pz);
IkReal x205=((4.0)*pz);
IkReal x206=(gconst8*r20);
IkReal x207=((0.99)*cj4);
IkReal x208=((1.536)*sj4);
IkReal x209=(cj4*r22);
IkReal x210=(r22*sj4);
IkReal x211=((0.33)*cj4);
IkReal x212=(gconst7*r21);
IkReal x213=((4.608)*sj4);
IkReal x214=((4.608)*x209);
IkReal x215=((0.99)*x210);
IkReal x216=((1.056)*x212);
IkReal x217=((0.352)*x212);
IkReal x218=((1.536)*x209);
IkReal x219=((0.33)*x210);
IkReal x220=(x206*x207);
IkReal x221=(x212*x213);
IkReal x222=(x208*x212);
IkReal x223=(x206*x211);
IkReal x224=(((x206*x213))+((x207*x212))+(((1.056)*x206)));
IkReal x225=(((x211*x212))+((x206*x208))+(((0.352)*x206)));
IkReal x226=(x217+x218+x219+x223+x222+x205);
IkReal x227=(x214+x215+x216+x221+x220+x204);
op[0]=((1.264)+x226+(((-1.0)*x225)));
op[1]=0.66;
op[2]=((1.264)+x227+(((-1.0)*x224)));
op[3]=1.32;
op[4]=((-1.264)+x227+(((-1.0)*x224)));
op[5]=0.66;
op[6]=((-1.264)+x226+(((-1.0)*x225)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x228=((1.536)*pz);
IkReal x229=((4.608)*pz);
IkReal x230=(py*sj0);
IkReal x231=(cj0*px);
IkReal x232=((0.08712)*gconst8);
IkReal x233=(cj0*r00);
IkReal x234=(cj4*r22);
IkReal x235=(r10*sj0);
IkReal x236=(gconst8*r20);
IkReal x237=((0.02904)*gconst8);
IkReal x238=(gconst7*r21);
IkReal x239=((0.135168)*x238);
IkReal x240=((0.617049)*x234);
IkReal x241=((1.851147)*x234);
IkReal x242=((0.405504)*x238);
IkReal x243=(gconst7*r11*sj0);
IkReal x244=(sj4*x238);
IkReal x245=(cj0*gconst7*r01);
IkReal x246=(x235*x237);
IkReal x247=(x233*x237);
IkReal x248=((0.617049)*x244);
IkReal x249=(x232*x233);
IkReal x250=(x232*x235);
IkReal x251=((1.851147)*x244);
IkReal x252=(x250+x251+x229+x242+x241+x249);
IkReal x253=(x228+x239+x240+x247+x246+x248);
IkReal x254=((((1.851147)*sj4*x236))+(((0.08712)*x245))+(((0.08712)*x243))+(((0.99)*x230))+(((0.99)*x231))+(((0.405504)*x236)));
IkReal x255=((((0.33)*x230))+(((0.33)*x231))+(((0.135168)*x236))+(((0.617049)*sj4*x236))+(((0.02904)*x245))+(((0.02904)*x243)));
j1evalpoly[0]=((-0.458151)+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x253+(((-1.0)*x255))))))+(((0.462)*htj1))+x253+(((htj1*htj1*htj1*htj1)*(((0.458151)+x252+(((-1.0)*x254))))))+(((0.924)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.458151)+x252+(((-1.0)*x254))))))+(((-1.0)*x255)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x256=(gconst7*r21);
IkReal x257=(sj1*sj4);
IkReal x258=((1.0)*r22);
IkReal x259=(gconst8*r20);
IkReal x260=(cj4*sj1);
IkReal x261=(cj1*sj4);
IkReal x262=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*x256*x257))+(((-1.0)*x258*x260))+((r22*x261))+((cj1*cj4*x259))+((x257*x259))+(((-1.0)*x256*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*cj4*x258))+((x259*x261))+(((-1.0)*x257*x258))+(((-1.0)*x259*x260))+(((-1.0)*x256*x261))+((x256*x260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x256*x257))+(((-1.0)*x258*x260))+((r22*x261))+((cj1*cj4*x259))+((x257*x259))+(((-1.0)*x256*x262))))+IKsqr(((((-1.0)*cj1*cj4*x258))+((x259*x261))+(((-1.0)*x257*x258))+(((-1.0)*x259*x260))+(((-1.0)*x256*x261))+((x256*x260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x256*x257))+(((-1.0)*x258*x260))+((r22*x261))+((cj1*cj4*x259))+((x257*x259))+(((-1.0)*x256*x262))), ((((-1.0)*cj1*cj4*x258))+((x259*x261))+(((-1.0)*x257*x258))+(((-1.0)*x259*x260))+(((-1.0)*x256*x261))+((x256*x260))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x263=IKsin(j2);
IkReal x264=IKcos(j2);
IkReal x265=((1.0)*cj4);
IkReal x266=(gconst7*r21);
IkReal x267=((1.0)*sj4);
IkReal x268=(gconst8*r20);
IkReal x269=(r12*sj0);
IkReal x270=(cj0*r02);
IkReal x271=(sj1*x264);
IkReal x272=(cj1*x264);
IkReal x273=(cj0*gconst8*r00);
IkReal x274=(gconst7*r11*sj0);
IkReal x275=((0.0825)*x263);
IkReal x276=(cj0*gconst7*r01);
IkReal x277=((0.384)*x263);
IkReal x278=((1.0)*x263);
IkReal x279=(gconst8*r10*sj0);
IkReal x280=(cj1*x278);
evalcond[0]=(((r22*sj4))+((cj4*x268))+x271+(((-1.0)*x280))+(((-1.0)*x265*x266)));
evalcond[1]=((((-1.0)*sj1*x278))+(((-1.0)*x272))+(((-1.0)*x266*x267))+(((-1.0)*r22*x265))+((sj4*x268)));
evalcond[2]=((((-1.0)*sj1*x277))+(((-0.088)*x268))+(((0.088)*x266))+(((-0.0825)*x271))+((cj1*x275))+pz+(((-0.384)*x272))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=(((cj4*x270))+((cj4*x269))+x271+(((-1.0)*x280))+(((-1.0)*x267*x279))+(((-1.0)*x267*x273))+((sj4*x274))+((sj4*x276)));
evalcond[4]=(((cj4*x274))+((cj4*x276))+x272+(((-1.0)*x265*x273))+(((-1.0)*x265*x279))+(((-1.0)*x267*x269))+(((-1.0)*x267*x270))+((sj1*x263)));
evalcond[5]=((((-1.0)*sj1*x275))+(((-0.088)*x276))+(((-0.088)*x274))+(((0.384)*x271))+(((-1.0)*cj1*x277))+(((-0.0825)*x272))+(((0.088)*x279))+(((0.088)*x273))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x281=((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))));
if((x281) < -0.00001)
continue;
IkReal x282=IKabs(IKsqrt(x281));
IkReal x288 = x281;
if(IKabs(x288)==0){
continue;
}
IkReal x283=pow(x288,-0.5);
IkReal x284=((11.3636363636364)*x283);
CheckValue<IkReal> x289=IKPowWithIntegerCheck(x282,-1);
if(!x289.valid){
continue;
}
IkReal x285=x289.value;
IkReal x286=(r22*x285);
if((((1.0)+(((-1.0)*(x286*x286))))) < -0.00001)
continue;
IkReal x287=IKsqrt(((1.0)+(((-1.0)*(x286*x286)))));
if( (x286) < -1-IKFAST_SINCOS_THRESH || (x286) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x290 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x290.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(x286))))+(((-1.0)*(x290.value))));
IkReal gconst10=((((-1.0)*rxp0_2*x284*x286))+(((-1.0)*rxp1_2*x284*x287)));
IkReal gconst11=((((-1.0)*rxp1_2*x284*x286))+((rxp0_2*x284*x287)));
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
if((((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKabs(IKsqrt(((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2)))))),-1);
if(!x292.valid){
continue;
}
if( ((r22*(x292.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x292.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x291.value)+(IKasin((r22*(x292.value))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x293=((0.088)*gconst10);
IkReal x294=((0.088)*gconst11);
CheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*rxp1_2))+((r22*(((((-1.0)*gconst10*x293))+(((-1.0)*gconst11*x294))))))+(((-1.0)*gconst10*rxp0_2)))),-1);
if(!x295.valid){
continue;
}
CheckValue<IkReal> x296 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x294))+(((-1.0)*r11*x293)))),IkReal(((((-1.0)*px))+((r00*x294))+(((-1.0)*r01*x293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x296.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x295.value)))+(x296.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x297=IKsin(j0);
IkReal x298=IKcos(j0);
IkReal x299=((1.0)*r01);
IkReal x300=((1.0)*r11);
IkReal x301=((1.0)*r10);
IkReal x302=(gconst10*x297);
IkReal x303=(gconst11*x297);
IkReal x304=(r02*x297);
IkReal x305=(gconst11*x298);
IkReal x306=(gconst10*x298);
IkReal x307=(r12*x298);
evalcond[0]=((-1.0)+(((-1.0)*x301*x306))+(((-1.0)*x300*x305))+((r01*x303))+((r00*x302)));
evalcond[1]=((((-1.0)*x301*x302))+(((-1.0)*r00*x306))+(((-1.0)*x299*x305))+(((-1.0)*x300*x303)));
evalcond[2]=((((-1.0)*py*x298))+(((-0.088)*r00*x303))+(((0.088)*r10*x305))+((px*x297))+(((-0.088)*r11*x306))+(((0.088)*r01*x302)));
evalcond[3]=((((-1.0)*sj4*x299*x302))+((r00*sj4*x303))+((r11*sj4*x306))+(((-1.0)*sj4*x301*x305))+((cj4*x307))+(((-1.0)*cj4*x304)));
evalcond[4]=((((-1.0)*sj4*x307))+((cj4*r00*x303))+(((-1.0)*cj4*x299*x302))+((cj4*r11*x306))+((sj4*x304))+(((-1.0)*cj4*x301*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x308=x281;
if((x308) < -0.00001)
continue;
IkReal x309=IKabs(IKsqrt(x308));
IkReal x316 = x308;
if(IKabs(x316)==0){
continue;
}
IkReal x310=pow(x316,-0.5);
IkReal x311=((11.3636363636364)*x310);
CheckValue<IkReal> x317=IKPowWithIntegerCheck(x309,-1);
if(!x317.valid){
continue;
}
IkReal x312=x317.value;
IkReal x313=(r22*x312);
if((((1.0)+(((-1.0)*(x313*x313))))) < -0.00001)
continue;
IkReal x314=IKsqrt(((1.0)+(((-1.0)*(x313*x313)))));
CheckValue<IkReal> x318 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x318.valid){
continue;
}
if( (x313) < -1-IKFAST_SINCOS_THRESH || (x313) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x315=((((1.0)*(x318.value)))+(((1.0)*(IKasin(x313)))));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x315)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x315)));
IkReal gconst10=((((-1.0)*rxp1_2*x311*x314))+(((-1.0)*rxp0_2*x311*x313)));
IkReal gconst11=((((-1.0)*rxp1_2*x311*x313))+((rxp0_2*x311*x314)));
IkReal x319=((12.0)*pz);
IkReal x320=((4.608)*pz);
IkReal x321=(py*sj0);
IkReal x322=(cj0*px);
IkReal x323=(gconst11*r20);
IkReal x324=((0.99)*cj4);
IkReal x325=(gconst10*r21);
IkReal x326=((0.02904)*cj0);
IkReal x327=(gconst10*r01);
IkReal x328=(cj4*r22);
IkReal x329=((0.33)*cj4);
IkReal x330=((1.851147)*sj4);
IkReal x331=(r22*sj4);
IkReal x332=((4.608)*sj4);
IkReal x333=(gconst11*r00);
IkReal x334=((0.02904)*sj0);
IkReal x335=(gconst11*r10);
IkReal x336=(gconst10*r11);
IkReal x337=((0.08712)*sj0);
IkReal x338=((0.08712)*cj0);
IkReal x339=((1.536)*sj4);
IkReal x340=((0.617049)*sj4);
IkReal x341=((4.608)*x328);
IkReal x342=((1.056)*x325);
IkReal x343=((0.99)*x331);
IkReal x344=((0.405504)*x325);
IkReal x345=((1.851147)*x328);
IkReal x346=(x325*x332);
IkReal x347=(x323*x324);
IkReal x348=(x333*x338);
IkReal x349=(x325*x330);
IkReal x350=(x335*x337);
IkReal x351=(((x324*x325))+((x323*x332))+(((1.056)*x323)));
IkReal x352=(x319+x342+x343+x341+x346+x347);
IkReal x353=(x320+x350+x344+x345+x348+x349);
IkReal x354=(((x336*x337))+(((0.99)*x321))+(((0.99)*x322))+((x327*x338))+((x323*x330))+(((0.405504)*x323)));
j1eval[0]=((4.488)+(IKabs(((1.264)+(((0.33)*x331))+((x323*x329))+(((1.536)*x328))+(((4.0)*pz))+(((-1.0)*x325*x329))+(((0.352)*x325))+(((-0.352)*x323))+(((-1.0)*x323*x339))+((x325*x339)))))+(IKabs(((-0.458151)+(((-1.0)*x354))+x353)))+(IKabs(((0.458151)+(((-0.33)*x321))+(((-0.33)*x322))+((x334*x335))+((x325*x340))+(((-1.0)*x326*x327))+(((0.135168)*x325))+(((-0.135168)*x323))+(((-1.0)*x323*x340))+(((0.617049)*x328))+((x326*x333))+(((1.536)*pz))+(((-1.0)*x334*x336)))))+(IKabs(((0.458151)+(((-1.0)*x354))+x353)))+(IKabs(((1.264)+(((-1.0)*x351))+x352)))+(IKabs(((-1.264)+(((-1.0)*x351))+x352))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x355=((12.0)*pz);
IkReal x356=((4.0)*pz);
IkReal x357=(cj4*r22);
IkReal x358=((0.99)*cj4);
IkReal x359=(gconst10*r21);
IkReal x360=(gconst11*r20);
IkReal x361=(r22*sj4);
IkReal x362=((0.33)*cj4);
IkReal x363=((4.608)*x357);
IkReal x364=((1.056)*x359);
IkReal x365=((0.99)*x361);
IkReal x366=((1.536)*x357);
IkReal x367=((0.33)*x361);
IkReal x368=((0.352)*x359);
IkReal x369=(sj4*x359);
IkReal x370=((4.608)*x369);
IkReal x371=(x358*x360);
IkReal x372=((1.536)*x369);
IkReal x373=(x360*x362);
IkReal x374=(((x358*x359))+(((4.608)*sj4*x360))+(((1.056)*x360)));
IkReal x375=((((0.352)*x360))+((x359*x362))+(((1.536)*sj4*x360)));
IkReal x376=(x356+x373+x372+x368+x366+x367);
IkReal x377=(x355+x371+x370+x363+x364+x365);
op[0]=((1.264)+(((-1.0)*x375))+x376);
op[1]=0.66;
op[2]=((1.264)+(((-1.0)*x374))+x377);
op[3]=1.32;
op[4]=((-1.264)+(((-1.0)*x374))+x377);
op[5]=0.66;
op[6]=((-1.264)+(((-1.0)*x375))+x376);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x378=((4.608)*pz);
IkReal x379=((1.536)*pz);
IkReal x380=(py*sj0);
IkReal x381=(gconst11*r20);
IkReal x382=((1.851147)*sj4);
IkReal x383=(cj0*px);
IkReal x384=((0.02904)*cj0);
IkReal x385=(gconst11*r00);
IkReal x386=(gconst10*r01);
IkReal x387=(gconst10*r21);
IkReal x388=(cj4*r22);
IkReal x389=((0.02904)*sj0);
IkReal x390=(gconst11*r10);
IkReal x391=(gconst10*r11);
IkReal x392=((0.08712)*sj0);
IkReal x393=((0.08712)*cj0);
IkReal x394=((0.617049)*sj4);
IkReal x395=((0.405504)*x387);
IkReal x396=((1.851147)*x388);
IkReal x397=((0.617049)*x388);
IkReal x398=((0.135168)*x387);
IkReal x399=(x385*x393);
IkReal x400=(x382*x387);
IkReal x401=(x390*x392);
IkReal x402=(x387*x394);
IkReal x403=(x384*x385);
IkReal x404=(x389*x390);
IkReal x405=(x379+x397+x398+x403+x402+x404);
IkReal x406=(x378+x395+x396+x399+x401+x400);
IkReal x407=((((0.405504)*x381))+((x391*x392))+(((0.99)*x383))+(((0.99)*x380))+((x381*x382))+((x386*x393)));
IkReal x408=((((0.135168)*x381))+(((0.33)*x383))+(((0.33)*x380))+((x384*x386))+((x381*x394))+((x389*x391)));
j1evalpoly[0]=((-0.458151)+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.458151)+x406+(((-1.0)*x407))))))+(((htj1*htj1)*(((-0.458151)+x406+(((-1.0)*x407))))))+(((0.924)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x405+(((-1.0)*x408))))))+x405+(((-1.0)*x408)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x409=((1.0)*r22);
IkReal x410=(cj1*cj4);
IkReal x411=(sj1*sj4);
IkReal x412=(cj4*sj1);
IkReal x413=(gconst11*r20);
IkReal x414=(cj1*sj4);
IkReal x415=((1.0)*gconst10*r21);
if( IKabs((((x411*x413))+((x410*x413))+((r22*x414))+(((-1.0)*x411*x415))+(((-1.0)*x410*x415))+(((-1.0)*x409*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst10*r21*x412))+((x413*x414))+(((-1.0)*x412*x413))+(((-1.0)*x414*x415))+(((-1.0)*x409*x410))+(((-1.0)*x409*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x411*x413))+((x410*x413))+((r22*x414))+(((-1.0)*x411*x415))+(((-1.0)*x410*x415))+(((-1.0)*x409*x412))))+IKsqr((((gconst10*r21*x412))+((x413*x414))+(((-1.0)*x412*x413))+(((-1.0)*x414*x415))+(((-1.0)*x409*x410))+(((-1.0)*x409*x411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x411*x413))+((x410*x413))+((r22*x414))+(((-1.0)*x411*x415))+(((-1.0)*x410*x415))+(((-1.0)*x409*x412))), (((gconst10*r21*x412))+((x413*x414))+(((-1.0)*x412*x413))+(((-1.0)*x414*x415))+(((-1.0)*x409*x410))+(((-1.0)*x409*x411))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x416=IKsin(j2);
IkReal x417=IKcos(j2);
IkReal x418=(cj0*sj4);
IkReal x419=(gconst10*r01);
IkReal x420=(gconst10*r21);
IkReal x421=(gconst11*r00);
IkReal x422=((0.088)*cj0);
IkReal x423=((1.0)*cj0);
IkReal x424=((1.0)*sj4);
IkReal x425=((1.0)*cj4);
IkReal x426=(r12*sj0);
IkReal x427=(cj0*cj4);
IkReal x428=(gconst11*r20);
IkReal x429=(sj1*x417);
IkReal x430=(cj1*x417);
IkReal x431=(gconst11*r10*sj0);
IkReal x432=((0.0825)*x416);
IkReal x433=((0.384)*x416);
IkReal x434=(gconst10*r11*sj0);
IkReal x435=((1.0)*x416);
IkReal x436=(cj1*x435);
evalcond[0]=((((-1.0)*x436))+(((-1.0)*x420*x425))+((r22*sj4))+((cj4*x428))+x429);
evalcond[1]=((((-1.0)*sj1*x435))+(((-1.0)*x420*x424))+((sj4*x428))+(((-1.0)*x430))+(((-1.0)*r22*x425)));
evalcond[2]=((((-1.0)*sj1*x433))+((cj1*x432))+(((0.088)*x420))+(((-0.384)*x430))+pz+(((-0.0825)*x429))+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-0.088)*x428)));
evalcond[3]=(((sj4*x434))+(((-1.0)*x436))+((r02*x427))+((cj4*x426))+(((-1.0)*x418*x421))+(((-1.0)*x424*x431))+x429+((x418*x419)));
evalcond[4]=(((sj1*x416))+((cj4*x434))+((x419*x427))+x430+(((-1.0)*cj4*x421*x423))+(((-1.0)*x424*x426))+(((-1.0)*x425*x431))+(((-1.0)*r02*x418)));
evalcond[5]=((((-1.0)*sj1*x432))+(((-1.0)*px*x423))+(((0.384)*x429))+(((-1.0)*cj1*x433))+(((0.088)*x431))+(((-0.0825)*x430))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*x419*x422))+(((0.316)*sj1))+(((-0.088)*x434))+((x421*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x437=((1.0)*cj5);
IkReal x438=(cj4*sj5);
IkReal x439=((1.0)*sj4);
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x439))+(((-1.0)*cj4*r10*x437))+((r11*x438)))),IkReal(((((-1.0)*cj4*r00*x437))+(((-1.0)*r02*x439))+((r01*x438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
CheckValue<IkReal> x441=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*r20*sj4*x437))+((cj4*r22)))),-1);
if(!x441.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x440.value)+(((1.5707963267949)*(x441.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x442=IKsin(j0);
IkReal x443=IKcos(j0);
IkReal x444=(r11*sj5);
IkReal x445=((1.0)*r10);
IkReal x446=(cj5*r01);
IkReal x447=((1.0)*r01);
IkReal x448=(cj5*r11);
IkReal x449=(sj4*x443);
IkReal x450=(sj5*x442);
IkReal x451=((1.0)*x443);
IkReal x452=(cj4*x443);
IkReal x453=((1.0)*x442);
IkReal x454=((0.088)*x443);
IkReal x455=(cj5*r00*x442);
evalcond[0]=((-1.0)+(((-1.0)*sj5*x443*x445))+((x442*x446))+((r00*x450))+(((-1.0)*x448*x451)));
evalcond[1]=((((-1.0)*x446*x451))+(((-1.0)*r00*sj5*x451))+(((-1.0)*x445*x450))+(((-1.0)*x448*x453)));
evalcond[2]=(((cj5*r10*x454))+(((0.088)*r01*x450))+((px*x442))+(((-1.0)*py*x451))+(((-0.088)*x455))+(((-1.0)*x444*x454)));
evalcond[3]=(((sj4*x455))+(((-1.0)*cj5*x445*x449))+(((-1.0)*sj4*x447*x450))+((x444*x449))+((r12*x452))+(((-1.0)*cj4*r02*x453)));
evalcond[4]=((((-1.0)*r12*x449))+((cj4*x455))+((r02*sj4*x442))+(((-1.0)*cj4*x447*x450))+(((-1.0)*cj5*x445*x452))+((x444*x452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x456=((12.0)*pz);
IkReal x457=((4.608)*pz);
IkReal x458=((0.08712)*sj0);
IkReal x459=(cj5*r10);
IkReal x460=(cj4*r22);
IkReal x461=((0.02904)*cj0);
IkReal x462=(cj5*r00);
IkReal x463=(py*sj0);
IkReal x464=(cj5*r20);
IkReal x465=((0.33)*cj4);
IkReal x466=(cj0*px);
IkReal x467=(r21*sj5);
IkReal x468=((1.851147)*sj4);
IkReal x469=((1.536)*sj4);
IkReal x470=(r22*sj4);
IkReal x471=((4.608)*sj4);
IkReal x472=((0.617049)*sj4);
IkReal x473=((0.99)*cj4);
IkReal x474=(r11*sj5);
IkReal x475=((0.02904)*sj0);
IkReal x476=(r01*sj5);
IkReal x477=((0.08712)*cj0);
IkReal x478=((4.608)*x460);
IkReal x479=((1.056)*x467);
IkReal x480=((0.99)*x470);
IkReal x481=((0.405504)*x467);
IkReal x482=((1.851147)*x460);
IkReal x483=(x464*x473);
IkReal x484=(x467*x471);
IkReal x485=(x462*x477);
IkReal x486=(x467*x468);
IkReal x487=(x458*x459);
IkReal x488=(((x467*x473))+((x464*x471))+(((1.056)*x464)));
IkReal x489=(x480+x483+x484+x456+x478+x479);
IkReal x490=(x481+x482+x485+x487+x486+x457);
IkReal x491=((((0.99)*x463))+(((0.99)*x466))+(((0.405504)*x464))+((x458*x474))+((x464*x468))+((x476*x477)));
j1eval[0]=((4.488)+(IKabs(((-1.264)+(((-1.0)*x488))+x489)))+(IKabs(((0.458151)+(((-1.0)*x491))+x490)))+(IKabs(((1.264)+(((-1.0)*x488))+x489)))+(IKabs(((1.264)+(((0.352)*x467))+(((-1.0)*x465*x467))+(((-0.352)*x464))+(((4.0)*pz))+(((-1.0)*x464*x469))+(((1.536)*x460))+((x467*x469))+((x464*x465))+(((0.33)*x470)))))+(IKabs(((0.458151)+((x459*x475))+(((-0.135168)*x464))+((x461*x462))+(((0.135168)*x467))+(((0.617049)*x460))+(((-0.33)*x466))+(((-0.33)*x463))+(((-1.0)*x464*x472))+((x467*x472))+(((-1.0)*x461*x476))+(((1.536)*pz))+(((-1.0)*x474*x475)))))+(IKabs(((-0.458151)+(((-1.0)*x491))+x490))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x492=((12.0)*pz);
IkReal x493=((4.0)*pz);
IkReal x494=(cj5*r20);
IkReal x495=(r21*sj5);
IkReal x496=((0.33)*cj4);
IkReal x497=((4.608)*sj4);
IkReal x498=(cj4*r22);
IkReal x499=(r22*sj4);
IkReal x500=((0.99)*cj4);
IkReal x501=((1.536)*sj4);
IkReal x502=((4.608)*x498);
IkReal x503=((1.056)*x495);
IkReal x504=((0.99)*x499);
IkReal x505=((1.536)*x498);
IkReal x506=((0.33)*x499);
IkReal x507=((0.352)*x495);
IkReal x508=(x494*x500);
IkReal x509=(x495*x497);
IkReal x510=(x495*x501);
IkReal x511=(x494*x496);
IkReal x512=(((x495*x500))+((x494*x497))+(((1.056)*x494)));
IkReal x513=(((x494*x501))+((x495*x496))+(((0.352)*x494)));
IkReal x514=(x493+x505+x506+x507+x511+x510);
IkReal x515=(x492+x508+x509+x502+x503+x504);
op[0]=((1.264)+x514+(((-1.0)*x513)));
op[1]=0.66;
op[2]=((1.264)+x515+(((-1.0)*x512)));
op[3]=1.32;
op[4]=((-1.264)+x515+(((-1.0)*x512)));
op[5]=0.66;
op[6]=((-1.264)+x514+(((-1.0)*x513)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x516=((1.536)*pz);
IkReal x517=((4.608)*pz);
IkReal x518=((0.08712)*sj0);
IkReal x519=(cj5*r10);
IkReal x520=(py*sj0);
IkReal x521=(cj0*px);
IkReal x522=(cj5*r20);
IkReal x523=(cj4*r22);
IkReal x524=(r21*sj5);
IkReal x525=(r11*sj5);
IkReal x526=((0.02904)*sj0);
IkReal x527=((0.135168)*x524);
IkReal x528=((0.617049)*x523);
IkReal x529=((0.405504)*x524);
IkReal x530=((1.851147)*x523);
IkReal x531=(cj0*cj5*r00);
IkReal x532=(sj4*x524);
IkReal x533=(cj0*r01*sj5);
IkReal x534=((0.02904)*x531);
IkReal x535=(x519*x526);
IkReal x536=((0.08712)*x531);
IkReal x537=((1.851147)*x532);
IkReal x538=(x518*x519);
IkReal x539=((0.617049)*x532);
IkReal x540=(x530+x537+x536+x538+x529+x517);
IkReal x541=(x535+x534+x539+x527+x528+x516);
IkReal x542=((((1.851147)*sj4*x522))+((x518*x525))+(((0.405504)*x522))+(((0.99)*x520))+(((0.99)*x521))+(((0.08712)*x533)));
IkReal x543=((((0.02904)*x533))+(((0.135168)*x522))+((x525*x526))+(((0.617049)*sj4*x522))+(((0.33)*x521))+(((0.33)*x520)));
j1evalpoly[0]=((-0.458151)+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x542))+x540))))+(((0.462)*htj1))+(((-1.0)*x543))+(((0.924)*(htj1*htj1*htj1)))+x541+(((htj1*htj1)*(((-0.458151)+(((-1.0)*x542))+x540))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x543))+x541)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x544=(r21*sj5);
IkReal x545=(cj1*sj4);
IkReal x546=(cj5*r20);
IkReal x547=(sj1*sj4);
IkReal x548=(cj4*sj1);
IkReal x549=((1.0)*cj1*cj4);
IkReal x550=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x544*x549))+(((-1.0)*x544*x547))+((r22*x545))+((cj1*cj4*x546))+(((-1.0)*r22*x548))+((x546*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x549))+(((-1.0)*x544*x545))+((x544*x548))+(((-1.0)*x546*x548))+((x545*x546))+(((-1.0)*r22*x547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x544*x549))+(((-1.0)*x544*x547))+((r22*x545))+((cj1*cj4*x546))+(((-1.0)*r22*x548))+((x546*x547))))+IKsqr(((((-1.0)*r22*x549))+(((-1.0)*x544*x545))+((x544*x548))+(((-1.0)*x546*x548))+((x545*x546))+(((-1.0)*r22*x547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x544*x549))+(((-1.0)*x544*x547))+((r22*x545))+((cj1*cj4*x546))+(((-1.0)*r22*x548))+((x546*x547))), ((((-1.0)*r22*x549))+(((-1.0)*x544*x545))+((x544*x548))+(((-1.0)*x546*x548))+((x545*x546))+(((-1.0)*r22*x547))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x551=IKsin(j2);
IkReal x552=IKcos(j2);
IkReal x553=(r10*sj0);
IkReal x554=(cj0*r00);
IkReal x555=((1.0)*sj0);
IkReal x556=((1.0)*cj4);
IkReal x557=((0.088)*sj5);
IkReal x558=(r11*sj0);
IkReal x559=(cj5*r20);
IkReal x560=(r21*sj5);
IkReal x561=((1.0)*cj0);
IkReal x562=((0.088)*cj5);
IkReal x563=(sj1*x552);
IkReal x564=(cj1*x552);
IkReal x565=((1.0)*cj5*sj4);
IkReal x566=((0.0825)*x551);
IkReal x567=((0.384)*x551);
IkReal x568=((1.0)*x551);
IkReal x569=(cj0*r01*sj5);
IkReal x570=(cj1*x568);
evalcond[0]=(((cj4*x559))+((r22*sj4))+(((-1.0)*x556*x560))+(((-1.0)*x570))+x563);
evalcond[1]=(((sj4*x559))+(((-1.0)*r22*x556))+(((-1.0)*sj4*x560))+(((-1.0)*x564))+(((-1.0)*sj1*x568)));
evalcond[2]=(((cj1*x566))+(((-0.0825)*x563))+pz+(((-0.384)*x564))+(((-1.0)*sj1*x567))+(((0.0825)*sj1))+((r21*x557))+(((-0.088)*x559))+(((-0.316)*cj1)));
evalcond[3]=(((sj4*sj5*x558))+((cj0*cj4*r02))+((sj4*x569))+(((-1.0)*x570))+x563+(((-1.0)*x554*x565))+(((-1.0)*x553*x565))+((cj4*r12*sj0)));
evalcond[4]=(((sj1*x551))+(((-1.0)*cj5*x553*x556))+x564+(((-1.0)*r02*sj4*x561))+(((-1.0)*r12*sj4*x555))+((cj4*x569))+(((-1.0)*cj5*x554*x556))+((cj4*sj5*x558)));
evalcond[5]=((((-0.0825)*x564))+(((0.384)*x563))+(((-1.0)*cj0*r01*x557))+((x553*x562))+(((-1.0)*cj1*x567))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*py*x555))+(((-1.0)*sj1*x566))+((x554*x562))+(((-1.0)*x557*x558))+(((-1.0)*px*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x571=(sj4*sj5);
IkReal x572=((1.0)*cj5*sj4);
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign((((r22*sj4))+(((-1.0)*cj4*r21*sj5))+((cj4*cj5*r20)))),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x572))+((cj4*r12))+((r11*x571)))),IkReal((((r01*x571))+(((-1.0)*r00*x572))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x575=IKsin(j0);
IkReal x576=IKcos(j0);
IkReal x577=(r11*sj5);
IkReal x578=((1.0)*r10);
IkReal x579=(cj5*r01);
IkReal x580=((1.0)*r01);
IkReal x581=(cj5*r11);
IkReal x582=(sj4*x576);
IkReal x583=(sj5*x575);
IkReal x584=((1.0)*x576);
IkReal x585=(cj4*x576);
IkReal x586=((1.0)*x575);
IkReal x587=((0.088)*x576);
IkReal x588=(cj5*r00*x575);
evalcond[0]=((-1.0)+(((-1.0)*sj5*x576*x578))+((x575*x579))+((r00*x583))+(((-1.0)*x581*x584)));
evalcond[1]=((((-1.0)*x578*x583))+(((-1.0)*x579*x584))+(((-1.0)*r00*sj5*x584))+(((-1.0)*x581*x586)));
evalcond[2]=((((0.088)*r01*x583))+(((-1.0)*py*x584))+(((-0.088)*x588))+((px*x575))+(((-1.0)*x577*x587))+((cj5*r10*x587)));
evalcond[3]=((((-1.0)*cj4*r02*x586))+((x577*x582))+((r12*x585))+(((-1.0)*sj4*x580*x583))+(((-1.0)*cj5*x578*x582))+((sj4*x588)));
evalcond[4]=((((-1.0)*cj4*x580*x583))+((x577*x585))+((r02*sj4*x575))+((cj4*x588))+(((-1.0)*cj5*x578*x585))+(((-1.0)*r12*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x589=((12.0)*pz);
IkReal x590=((4.608)*pz);
IkReal x591=((0.08712)*sj0);
IkReal x592=(cj5*r10);
IkReal x593=(cj4*r22);
IkReal x594=((0.02904)*cj0);
IkReal x595=(cj5*r00);
IkReal x596=(py*sj0);
IkReal x597=(cj5*r20);
IkReal x598=((0.33)*cj4);
IkReal x599=(cj0*px);
IkReal x600=(r21*sj5);
IkReal x601=((1.851147)*sj4);
IkReal x602=((1.536)*sj4);
IkReal x603=(r22*sj4);
IkReal x604=((4.608)*sj4);
IkReal x605=((0.617049)*sj4);
IkReal x606=((0.99)*cj4);
IkReal x607=(r11*sj5);
IkReal x608=((0.02904)*sj0);
IkReal x609=(r01*sj5);
IkReal x610=((0.08712)*cj0);
IkReal x611=((4.608)*x593);
IkReal x612=((1.056)*x600);
IkReal x613=((0.99)*x603);
IkReal x614=((0.405504)*x600);
IkReal x615=((1.851147)*x593);
IkReal x616=(x597*x606);
IkReal x617=(x600*x604);
IkReal x618=(x595*x610);
IkReal x619=(x600*x601);
IkReal x620=(x591*x592);
IkReal x621=(((x600*x606))+((x597*x604))+(((1.056)*x597)));
IkReal x622=(x589+x616+x617+x611+x612+x613);
IkReal x623=(x590+x618+x619+x614+x615+x620);
IkReal x624=(((x591*x607))+((x597*x601))+(((0.405504)*x597))+(((0.99)*x596))+(((0.99)*x599))+((x609*x610)));
j1eval[0]=((4.488)+(IKabs(((-1.264)+(((-1.0)*x621))+x622)))+(IKabs(((0.458151)+(((-0.33)*x596))+(((-0.33)*x599))+((x594*x595))+(((-0.135168)*x597))+(((-1.0)*x597*x605))+((x600*x605))+((x592*x608))+(((0.135168)*x600))+(((1.536)*pz))+(((-1.0)*x607*x608))+(((0.617049)*x593))+(((-1.0)*x594*x609)))))+(IKabs(((0.458151)+(((-1.0)*x624))+x623)))+(IKabs(((1.264)+(((-0.352)*x597))+(((4.0)*pz))+(((0.33)*x603))+(((-1.0)*x597*x602))+((x600*x602))+(((-1.0)*x598*x600))+(((1.536)*x593))+((x597*x598))+(((0.352)*x600)))))+(IKabs(((1.264)+(((-1.0)*x621))+x622)))+(IKabs(((-0.458151)+(((-1.0)*x624))+x623))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x625=((12.0)*pz);
IkReal x626=((4.0)*pz);
IkReal x627=(cj5*r20);
IkReal x628=(r21*sj5);
IkReal x629=((0.33)*cj4);
IkReal x630=((4.608)*sj4);
IkReal x631=(cj4*r22);
IkReal x632=(r22*sj4);
IkReal x633=((0.99)*cj4);
IkReal x634=((1.536)*sj4);
IkReal x635=((4.608)*x631);
IkReal x636=((1.056)*x628);
IkReal x637=((0.99)*x632);
IkReal x638=((1.536)*x631);
IkReal x639=((0.33)*x632);
IkReal x640=((0.352)*x628);
IkReal x641=(x627*x633);
IkReal x642=(x628*x630);
IkReal x643=(x628*x634);
IkReal x644=(x627*x629);
IkReal x645=(((x628*x633))+(((1.056)*x627))+((x627*x630)));
IkReal x646=(((x628*x629))+(((0.352)*x627))+((x627*x634)));
IkReal x647=(x644+x643+x640+x626+x638+x639);
IkReal x648=(x642+x641+x625+x636+x637+x635);
op[0]=((1.264)+(((-1.0)*x646))+x647);
op[1]=0.66;
op[2]=((1.264)+(((-1.0)*x645))+x648);
op[3]=1.32;
op[4]=((-1.264)+(((-1.0)*x645))+x648);
op[5]=0.66;
op[6]=((-1.264)+(((-1.0)*x646))+x647);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x649=((1.536)*pz);
IkReal x650=((4.608)*pz);
IkReal x651=((0.08712)*sj0);
IkReal x652=(cj5*r10);
IkReal x653=(py*sj0);
IkReal x654=(cj0*px);
IkReal x655=(cj5*r20);
IkReal x656=(cj4*r22);
IkReal x657=(r21*sj5);
IkReal x658=(r11*sj5);
IkReal x659=((0.02904)*sj0);
IkReal x660=((0.135168)*x657);
IkReal x661=((0.617049)*x656);
IkReal x662=((0.405504)*x657);
IkReal x663=((1.851147)*x656);
IkReal x664=(cj0*cj5*r00);
IkReal x665=(sj4*x657);
IkReal x666=(cj0*r01*sj5);
IkReal x667=((0.02904)*x664);
IkReal x668=(x652*x659);
IkReal x669=((0.08712)*x664);
IkReal x670=((1.851147)*x665);
IkReal x671=(x651*x652);
IkReal x672=((0.617049)*x665);
IkReal x673=(x650+x669+x663+x662+x670+x671);
IkReal x674=(x649+x668+x661+x660+x667+x672);
IkReal x675=(((x651*x658))+(((0.99)*x654))+(((0.99)*x653))+(((1.851147)*sj4*x655))+(((0.405504)*x655))+(((0.08712)*x666)));
IkReal x676=((((0.33)*x653))+(((0.33)*x654))+(((0.135168)*x655))+(((0.617049)*sj4*x655))+(((0.02904)*x666))+((x658*x659)));
j1evalpoly[0]=((-0.458151)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x674+(((-1.0)*x676))))))+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.458151)+x673+(((-1.0)*x675))))))+(((0.924)*(htj1*htj1*htj1)))+x674+(((htj1*htj1)*(((-0.458151)+x673+(((-1.0)*x675))))))+(((-1.0)*x676)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x677=(r21*sj5);
IkReal x678=(cj1*sj4);
IkReal x679=(cj5*r20);
IkReal x680=(sj1*sj4);
IkReal x681=(cj4*sj1);
IkReal x682=((1.0)*cj1*cj4);
IkReal x683=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*r22*x681))+((r22*x678))+((x679*x680))+(((-1.0)*x677*x680))+(((-1.0)*x677*x682))+((cj1*cj4*x679)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x680))+((x677*x681))+(((-1.0)*x677*x678))+((x678*x679))+(((-1.0)*x679*x681))+(((-1.0)*r22*x682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x681))+((r22*x678))+((x679*x680))+(((-1.0)*x677*x680))+(((-1.0)*x677*x682))+((cj1*cj4*x679))))+IKsqr(((((-1.0)*r22*x680))+((x677*x681))+(((-1.0)*x677*x678))+((x678*x679))+(((-1.0)*x679*x681))+(((-1.0)*r22*x682))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x681))+((r22*x678))+((x679*x680))+(((-1.0)*x677*x680))+(((-1.0)*x677*x682))+((cj1*cj4*x679))), ((((-1.0)*r22*x680))+((x677*x681))+(((-1.0)*x677*x678))+((x678*x679))+(((-1.0)*x679*x681))+(((-1.0)*r22*x682))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x684=IKsin(j2);
IkReal x685=IKcos(j2);
IkReal x686=(r10*sj0);
IkReal x687=(cj0*r00);
IkReal x688=((1.0)*sj0);
IkReal x689=((1.0)*cj4);
IkReal x690=((0.088)*sj5);
IkReal x691=(r11*sj0);
IkReal x692=(cj5*r20);
IkReal x693=(r21*sj5);
IkReal x694=((1.0)*cj0);
IkReal x695=((0.088)*cj5);
IkReal x696=(sj1*x685);
IkReal x697=(cj1*x685);
IkReal x698=((1.0)*cj5*sj4);
IkReal x699=((0.0825)*x684);
IkReal x700=((0.384)*x684);
IkReal x701=((1.0)*x684);
IkReal x702=(cj0*r01*sj5);
IkReal x703=(cj1*x701);
evalcond[0]=(((cj4*x692))+((r22*sj4))+(((-1.0)*x703))+x696+(((-1.0)*x689*x693)));
evalcond[1]=(((sj4*x692))+(((-1.0)*sj1*x701))+(((-1.0)*r22*x689))+(((-1.0)*sj4*x693))+(((-1.0)*x697)));
evalcond[2]=((((-0.0825)*x696))+((cj1*x699))+(((-0.384)*x697))+(((-0.088)*x692))+pz+((r21*x690))+(((-1.0)*sj1*x700))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=((((-1.0)*x687*x698))+((sj4*sj5*x691))+((cj0*cj4*r02))+(((-1.0)*x703))+x696+(((-1.0)*x686*x698))+((cj4*r12*sj0))+((sj4*x702)));
evalcond[4]=(((cj4*x702))+((cj4*sj5*x691))+(((-1.0)*r12*sj4*x688))+x697+(((-1.0)*r02*sj4*x694))+((sj1*x684))+(((-1.0)*cj5*x687*x689))+(((-1.0)*cj5*x686*x689)));
evalcond[5]=((((-0.0825)*x697))+(((-1.0)*sj1*x699))+((x687*x695))+((x686*x695))+(((-1.0)*cj0*r01*x690))+(((-1.0)*cj1*x700))+(((-1.0)*px*x694))+(((0.0825)*cj1))+(((0.384)*x696))+(((-1.0)*x690*x691))+(((0.316)*sj1))+(((-1.0)*py*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x704=((0.088)*sj5);
IkReal x705=((0.088)*cj5);
CheckValue<IkReal> x706 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x704))+(((-1.0)*py))+((r10*x705)))),IkReal((((r00*x705))+(((-1.0)*px))+(((-1.0)*r01*x704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.088)*r22)))),-1);
if(!x707.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x706.value)+(((1.5707963267949)*(x707.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x708=IKsin(j0);
IkReal x709=IKcos(j0);
IkReal x710=(r11*sj5);
IkReal x711=((1.0)*r10);
IkReal x712=(cj5*r01);
IkReal x713=((1.0)*r01);
IkReal x714=(cj5*r11);
IkReal x715=(sj4*x709);
IkReal x716=(sj5*x708);
IkReal x717=((1.0)*x709);
IkReal x718=(cj4*x709);
IkReal x719=((1.0)*x708);
IkReal x720=((0.088)*x709);
IkReal x721=(cj5*r00*x708);
evalcond[0]=((-1.0)+(((-1.0)*x714*x717))+((r00*x716))+(((-1.0)*sj5*x709*x711))+((x708*x712)));
evalcond[1]=((((-1.0)*x714*x719))+(((-1.0)*x711*x716))+(((-1.0)*r00*sj5*x717))+(((-1.0)*x712*x717)));
evalcond[2]=((((-1.0)*x710*x720))+(((0.088)*r01*x716))+((px*x708))+(((-0.088)*x721))+((cj5*r10*x720))+(((-1.0)*py*x717)));
evalcond[3]=(((x710*x715))+(((-1.0)*cj4*r02*x719))+(((-1.0)*sj4*x713*x716))+((r12*x718))+((sj4*x721))+(((-1.0)*cj5*x711*x715)));
evalcond[4]=(((cj4*x721))+(((-1.0)*r12*x715))+((x710*x718))+((r02*sj4*x708))+(((-1.0)*cj5*x711*x718))+(((-1.0)*cj4*x713*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x722=((12.0)*pz);
IkReal x723=((4.608)*pz);
IkReal x724=((0.08712)*sj0);
IkReal x725=(cj5*r10);
IkReal x726=(cj4*r22);
IkReal x727=((0.02904)*cj0);
IkReal x728=(cj5*r00);
IkReal x729=(py*sj0);
IkReal x730=(cj5*r20);
IkReal x731=((0.33)*cj4);
IkReal x732=(cj0*px);
IkReal x733=(r21*sj5);
IkReal x734=((1.851147)*sj4);
IkReal x735=((1.536)*sj4);
IkReal x736=(r22*sj4);
IkReal x737=((4.608)*sj4);
IkReal x738=((0.617049)*sj4);
IkReal x739=((0.99)*cj4);
IkReal x740=(r11*sj5);
IkReal x741=((0.02904)*sj0);
IkReal x742=(r01*sj5);
IkReal x743=((0.08712)*cj0);
IkReal x744=((4.608)*x726);
IkReal x745=((1.056)*x733);
IkReal x746=((0.99)*x736);
IkReal x747=((0.405504)*x733);
IkReal x748=((1.851147)*x726);
IkReal x749=(x730*x739);
IkReal x750=(x733*x737);
IkReal x751=(x728*x743);
IkReal x752=(x733*x734);
IkReal x753=(x724*x725);
IkReal x754=((((1.056)*x730))+((x733*x739))+((x730*x737)));
IkReal x755=(x722+x750+x746+x744+x745+x749);
IkReal x756=(x723+x751+x753+x752+x747+x748);
IkReal x757=(((x742*x743))+(((0.99)*x729))+(((0.99)*x732))+(((0.405504)*x730))+((x724*x740))+((x730*x734)));
j1eval[0]=((4.488)+(IKabs(((-1.264)+x755+(((-1.0)*x754)))))+(IKabs(((1.264)+(((-0.352)*x730))+(((4.0)*pz))+(((-1.0)*x731*x733))+(((0.33)*x736))+(((0.352)*x733))+((x733*x735))+(((-1.0)*x730*x735))+(((1.536)*x726))+((x730*x731)))))+(IKabs(((1.264)+x755+(((-1.0)*x754)))))+(IKabs(((0.458151)+(((-0.135168)*x730))+((x727*x728))+(((-1.0)*x727*x742))+(((0.135168)*x733))+((x725*x741))+((x733*x738))+(((-0.33)*x729))+(((-0.33)*x732))+(((-1.0)*x730*x738))+(((-1.0)*x740*x741))+(((1.536)*pz))+(((0.617049)*x726)))))+(IKabs(((-0.458151)+x756+(((-1.0)*x757)))))+(IKabs(((0.458151)+x756+(((-1.0)*x757))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x758=((12.0)*pz);
IkReal x759=((4.0)*pz);
IkReal x760=(cj5*r20);
IkReal x761=(r21*sj5);
IkReal x762=((0.33)*cj4);
IkReal x763=((4.608)*sj4);
IkReal x764=(cj4*r22);
IkReal x765=(r22*sj4);
IkReal x766=((0.99)*cj4);
IkReal x767=((1.536)*sj4);
IkReal x768=((4.608)*x764);
IkReal x769=((1.056)*x761);
IkReal x770=((0.99)*x765);
IkReal x771=((1.536)*x764);
IkReal x772=((0.33)*x765);
IkReal x773=((0.352)*x761);
IkReal x774=(x760*x766);
IkReal x775=(x761*x763);
IkReal x776=(x761*x767);
IkReal x777=(x760*x762);
IkReal x778=(((x760*x763))+((x761*x766))+(((1.056)*x760)));
IkReal x779=((((0.352)*x760))+((x760*x767))+((x761*x762)));
IkReal x780=(x759+x773+x772+x771+x777+x776);
IkReal x781=(x758+x770+x775+x774+x768+x769);
op[0]=((1.264)+x780+(((-1.0)*x779)));
op[1]=0.66;
op[2]=((1.264)+x781+(((-1.0)*x778)));
op[3]=1.32;
op[4]=((-1.264)+x781+(((-1.0)*x778)));
op[5]=0.66;
op[6]=((-1.264)+x780+(((-1.0)*x779)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x782=((1.536)*pz);
IkReal x783=((4.608)*pz);
IkReal x784=((0.08712)*sj0);
IkReal x785=(cj5*r10);
IkReal x786=(py*sj0);
IkReal x787=(cj0*px);
IkReal x788=(cj5*r20);
IkReal x789=(cj4*r22);
IkReal x790=(r21*sj5);
IkReal x791=(r11*sj5);
IkReal x792=((0.02904)*sj0);
IkReal x793=((0.135168)*x790);
IkReal x794=((0.617049)*x789);
IkReal x795=((0.405504)*x790);
IkReal x796=((1.851147)*x789);
IkReal x797=(cj0*cj5*r00);
IkReal x798=(sj4*x790);
IkReal x799=(cj0*r01*sj5);
IkReal x800=((0.02904)*x797);
IkReal x801=(x785*x792);
IkReal x802=((0.08712)*x797);
IkReal x803=((1.851147)*x798);
IkReal x804=(x784*x785);
IkReal x805=((0.617049)*x798);
IkReal x806=(x795+x796+x783+x804+x803+x802);
IkReal x807=(x793+x794+x782+x805+x801+x800);
IkReal x808=((((0.08712)*x799))+(((0.405504)*x788))+((x784*x791))+(((1.851147)*sj4*x788))+(((0.99)*x786))+(((0.99)*x787)));
IkReal x809=((((0.617049)*sj4*x788))+(((0.33)*x787))+(((0.33)*x786))+(((0.135168)*x788))+((x791*x792))+(((0.02904)*x799)));
j1evalpoly[0]=((-0.458151)+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.458151)+x806+(((-1.0)*x808))))))+(((0.462)*htj1))+(((htj1*htj1)*(((-0.458151)+x806+(((-1.0)*x808))))))+(((0.924)*(htj1*htj1*htj1)))+x807+(((-1.0)*x809))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x807+(((-1.0)*x809)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x810=(r21*sj5);
IkReal x811=(cj1*sj4);
IkReal x812=(cj5*r20);
IkReal x813=(sj1*sj4);
IkReal x814=(cj4*sj1);
IkReal x815=((1.0)*cj1*cj4);
IkReal x816=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x810*x813))+((x812*x813))+((cj1*cj4*x812))+(((-1.0)*x810*x815))+(((-1.0)*r22*x814))+((r22*x811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x810*x811))+(((-1.0)*x812*x814))+((x810*x814))+((x811*x812))+(((-1.0)*r22*x813))+(((-1.0)*r22*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x810*x813))+((x812*x813))+((cj1*cj4*x812))+(((-1.0)*x810*x815))+(((-1.0)*r22*x814))+((r22*x811))))+IKsqr(((((-1.0)*x810*x811))+(((-1.0)*x812*x814))+((x810*x814))+((x811*x812))+(((-1.0)*r22*x813))+(((-1.0)*r22*x815))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x810*x813))+((x812*x813))+((cj1*cj4*x812))+(((-1.0)*x810*x815))+(((-1.0)*r22*x814))+((r22*x811))), ((((-1.0)*x810*x811))+(((-1.0)*x812*x814))+((x810*x814))+((x811*x812))+(((-1.0)*r22*x813))+(((-1.0)*r22*x815))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x817=IKsin(j2);
IkReal x818=IKcos(j2);
IkReal x819=(r10*sj0);
IkReal x820=(cj0*r00);
IkReal x821=((1.0)*sj0);
IkReal x822=((1.0)*cj4);
IkReal x823=((0.088)*sj5);
IkReal x824=(r11*sj0);
IkReal x825=(cj5*r20);
IkReal x826=(r21*sj5);
IkReal x827=((1.0)*cj0);
IkReal x828=((0.088)*cj5);
IkReal x829=(sj1*x818);
IkReal x830=(cj1*x818);
IkReal x831=((1.0)*cj5*sj4);
IkReal x832=((0.0825)*x817);
IkReal x833=((0.384)*x817);
IkReal x834=((1.0)*x817);
IkReal x835=(cj0*r01*sj5);
IkReal x836=(cj1*x834);
evalcond[0]=((((-1.0)*x822*x826))+((r22*sj4))+((cj4*x825))+(((-1.0)*x836))+x829);
evalcond[1]=((((-1.0)*sj1*x834))+(((-1.0)*sj4*x826))+(((-1.0)*r22*x822))+(((-1.0)*x830))+((sj4*x825)));
evalcond[2]=(((r21*x823))+(((-1.0)*sj1*x833))+(((-0.0825)*x829))+(((-0.088)*x825))+(((-0.384)*x830))+pz+(((0.0825)*sj1))+(((-0.316)*cj1))+((cj1*x832)));
evalcond[3]=(((sj4*sj5*x824))+(((-1.0)*x820*x831))+((sj4*x835))+(((-1.0)*x819*x831))+((cj0*cj4*r02))+(((-1.0)*x836))+x829+((cj4*r12*sj0)));
evalcond[4]=(((sj1*x817))+((cj4*sj5*x824))+(((-1.0)*cj5*x819*x822))+(((-1.0)*r12*sj4*x821))+((cj4*x835))+(((-1.0)*cj5*x820*x822))+x830+(((-1.0)*r02*sj4*x827)));
evalcond[5]=((((-1.0)*sj1*x832))+((x820*x828))+(((-1.0)*py*x821))+(((-1.0)*x823*x824))+((x819*x828))+(((-0.0825)*x830))+(((-1.0)*px*x827))+(((0.0825)*cj1))+(((0.316)*sj1))+(((0.384)*x829))+(((-1.0)*cj1*x833))+(((-1.0)*cj0*r01*x823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x837=(cj5*rxp1_2);
IkReal x838=((0.088)*sj5);
IkReal x839=(rxp0_2*sj5);
IkReal x840=((0.088)*cj5);
j0eval[0]=((((11.3636363636364)*x839))+(((11.3636363636364)*x837))+r22);
j0eval[1]=((IKabs((((r00*x840))+(((-1.0)*px))+(((-1.0)*r01*x838)))))+(IKabs(((((-1.0)*py))+((r10*x840))+(((-1.0)*r11*x838))))));
j0eval[2]=IKsign(((((0.088)*r22))+x837+x839));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x841=(sj4*sj5);
IkReal x842=((1.0)*cj5*sj4);
IkReal x843=(((cj4*r21*sj5))+(((-1.0)*cj4*cj5*r20))+(((-1.0)*r22*sj4)));
j0eval[0]=x843;
j0eval[1]=((IKabs(((((-1.0)*r10*x842))+((r11*x841))+((cj4*r12)))))+(IKabs((((r01*x841))+(((-1.0)*r00*x842))+((cj4*r02))))));
j0eval[2]=IKsign(x843);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x844=r20*r20;
IkReal x845=cj5*cj5;
IkReal x846=((1.0)+(((-1.0)*x845*(r21*r21)))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x844))+((x844*x845)));
j0eval[0]=x846;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x846);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x847=((11.3636363636364)*rxp0_2);
IkReal x848=((11.3636363636364)*rxp1_2);
IkReal x849=((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))));
if((x849) < -0.00001)
continue;
IkReal x850=IKabs(IKsqrt(x849));
IkReal x856 = x849;
if(IKabs(x856)==0){
continue;
}
IkReal x851=pow(x856,-0.5);
CheckValue<IkReal> x857=IKPowWithIntegerCheck(x850,-1);
if(!x857.valid){
continue;
}
IkReal x852=x857.value;
IkReal x853=(r22*x852);
if((((1.0)+(((-1.0)*(x853*x853))))) < -0.00001)
continue;
IkReal x854=IKsqrt(((1.0)+(((-1.0)*(x853*x853)))));
IkReal x855=(x851*x854);
CheckValue<IkReal> x858 = IKatan2WithCheck(IkReal(x848),IkReal(x847),IKFAST_ATAN2_MAGTHRESH);
if(!x858.valid){
continue;
}
if( (x853) < -1-IKFAST_SINCOS_THRESH || (x853) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst12=((((-1.0)*(x858.value)))+(((-1.0)*(IKasin(x853)))));
IkReal gconst13=((((-1.0)*x848*x855))+(((-1.0)*x847*x851*x853)));
IkReal gconst14=(((x847*x855))+(((-1.0)*x848*x851*x853)));
if((((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x859=IKPowWithIntegerCheck(IKabs(IKsqrt(((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2)))))),-1);
if(!x859.valid){
continue;
}
if( ((r22*(x859.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x859.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal(((11.3636363636364)*rxp1_2)),IkReal(((11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin((r22*(x859.value))))+(x860.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x861=((0.088)*gconst14);
IkReal x862=((0.088)*gconst13);
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign((((gconst13*rxp0_2))+((r22*((((gconst14*x861))+((gconst13*x862))))))+((gconst14*rxp1_2)))),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal((((r10*x861))+(((-1.0)*py))+(((-1.0)*r11*x862)))),IkReal((((r00*x861))+(((-1.0)*r01*x862))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x865=IKsin(j0);
IkReal x866=IKcos(j0);
IkReal x867=((1.0)*sj4);
IkReal x868=((1.0)*r10);
IkReal x869=((1.0)*cj4);
IkReal x870=((1.0)*r11);
IkReal x871=(gconst14*x865);
IkReal x872=(r12*x866);
IkReal x873=(gconst13*x865);
IkReal x874=(gconst14*x866);
IkReal x875=(r02*x865);
IkReal x876=((1.0)*x866);
IkReal x877=(gconst13*r11*x866);
evalcond[0]=((1.0)+((r01*x871))+((r00*x873))+(((-1.0)*gconst13*x866*x868))+(((-1.0)*x870*x874)));
evalcond[1]=((((-1.0)*r01*x874))+(((-1.0)*gconst13*r00*x876))+(((-1.0)*x868*x873))+(((-1.0)*x870*x871)));
evalcond[2]=((((-0.088)*r00*x871))+(((-1.0)*py*x876))+(((-0.088)*x877))+((px*x865))+(((0.088)*r01*x873))+(((0.088)*r10*x874)));
evalcond[3]=((((-1.0)*x869*x875))+(((-1.0)*r10*x867*x874))+((cj4*x872))+((sj4*x877))+(((-1.0)*r01*x867*x873))+((r00*sj4*x871)));
evalcond[4]=((((-1.0)*r01*x869*x873))+(((-1.0)*cj4*x868*x874))+((cj4*r00*x871))+((cj4*x877))+((sj4*x875))+(((-1.0)*x867*x872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x878=((11.3636363636364)*rxp0_2);
IkReal x879=((11.3636363636364)*rxp1_2);
IkReal x880=x849;
if((x880) < -0.00001)
continue;
IkReal x881=IKabs(IKsqrt(x880));
IkReal x888 = x880;
if(IKabs(x888)==0){
continue;
}
IkReal x882=pow(x888,-0.5);
CheckValue<IkReal> x889=IKPowWithIntegerCheck(x881,-1);
if(!x889.valid){
continue;
}
IkReal x883=x889.value;
IkReal x884=(r22*x883);
if((((1.0)+(((-1.0)*(x884*x884))))) < -0.00001)
continue;
IkReal x885=IKsqrt(((1.0)+(((-1.0)*(x884*x884)))));
if( (x884) < -1-IKFAST_SINCOS_THRESH || (x884) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x890 = IKatan2WithCheck(IkReal(x879),IkReal(x878),IKFAST_ATAN2_MAGTHRESH);
if(!x890.valid){
continue;
}
IkReal x886=((((-1.0)*(IKasin(x884))))+(((-1.0)*(x890.value))));
IkReal x887=(x882*x885);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst13;
cj5=gconst14;
j5=x886;
IkReal gconst12=x886;
IkReal gconst13=((((-1.0)*x878*x882*x884))+(((-1.0)*x879*x887)));
IkReal gconst14=(((x878*x887))+(((-1.0)*x879*x882*x884)));
IkReal x891=((4.608)*pz);
IkReal x892=(gconst13*r21);
IkReal x893=((0.99)*cj4);
IkReal x894=((0.08712)*gconst13);
IkReal x895=(r11*sj0);
IkReal x896=(cj0*px);
IkReal x897=(py*sj0);
IkReal x898=(gconst14*r20);
IkReal x899=((1.851147)*sj4);
IkReal x900=(cj0*r01);
IkReal x901=(cj4*r22);
IkReal x902=((0.33)*cj4);
IkReal x903=((0.02904)*gconst14);
IkReal x904=(r10*sj0);
IkReal x905=(cj0*r00);
IkReal x906=((0.08712)*gconst14);
IkReal x907=(r22*sj4);
IkReal x908=((1.536)*sj4);
IkReal x909=((0.617049)*sj4);
IkReal x910=((0.02904)*gconst13);
IkReal x911=((4.608)*sj4);
IkReal x912=((0.99)*x907);
IkReal x913=((1.056)*x898);
IkReal x914=((1.851147)*x901);
IkReal x915=((0.405504)*x892);
IkReal x916=(x898*x911);
IkReal x917=(x893*x898);
IkReal x918=(x904*x906);
IkReal x919=(x905*x906);
IkReal x920=(x892*x899);
IkReal x921=(x913+x912+x917+x916);
IkReal x922=((((12.0)*pz))+((x892*x911))+((x892*x893))+(((4.608)*x901))+(((1.056)*x892)));
IkReal x923=(x891+x920+x919+x918+x915+x914);
IkReal x924=(((x898*x899))+((x894*x895))+((x894*x900))+(((0.99)*x896))+(((0.99)*x897))+(((0.405504)*x898)));
j1eval[0]=((4.488)+(IKabs(((-1.264)+(((-1.536)*x901))+(((-0.352)*x892))+(((-1.0)*x892*x902))+(((-1.0)*x892*x908))+(((0.352)*x898))+((x898*x902))+((x898*x908))+(((-4.0)*pz))+(((0.33)*x907)))))+(IKabs(((-0.458151)+(((-1.0)*x924))+x923)))+(IKabs(((0.458151)+(((-1.0)*x924))+x923)))+(IKabs(((-1.264)+(((-1.0)*x922))+x921)))+(IKabs(((1.264)+(((-1.0)*x922))+x921)))+(IKabs(((0.458151)+((x903*x905))+((x903*x904))+(((-0.135168)*x898))+((x892*x909))+(((-1.0)*x898*x909))+(((-1.0)*x900*x910))+(((1.536)*pz))+(((0.135168)*x892))+(((-1.0)*x895*x910))+(((0.617049)*x901))+(((-0.33)*x897))+(((-0.33)*x896))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x925=(gconst13*r21);
IkReal x926=((0.99)*cj4);
IkReal x927=((1.536)*sj4);
IkReal x928=(gconst14*r20);
IkReal x929=(cj4*r22);
IkReal x930=((0.33)*cj4);
IkReal x931=(r22*sj4);
IkReal x932=((4.608)*sj4);
IkReal x933=((0.99)*x931);
IkReal x934=((1.056)*x928);
IkReal x935=((0.352)*x928);
IkReal x936=((0.33)*x931);
IkReal x937=(x928*x932);
IkReal x938=(x926*x928);
IkReal x939=(x928*x930);
IkReal x940=(x927*x928);
IkReal x941=(x939+x935+x936+x940);
IkReal x942=(x938+x934+x937+x933);
IkReal x943=((((1.056)*x925))+(((12.0)*pz))+(((4.608)*x929))+((x925*x932))+((x925*x926)));
IkReal x944=((((1.536)*x929))+(((4.0)*pz))+(((0.352)*x925))+((x925*x930))+((x925*x927)));
op[0]=((-1.264)+(((-1.0)*x944))+x941);
op[1]=-0.66;
op[2]=((-1.264)+(((-1.0)*x943))+x942);
op[3]=-1.32;
op[4]=((1.264)+(((-1.0)*x943))+x942);
op[5]=-0.66;
op[6]=((1.264)+(((-1.0)*x944))+x941);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x945=((4.608)*pz);
IkReal x946=((1.536)*pz);
IkReal x947=(py*sj0);
IkReal x948=((0.08712)*gconst13);
IkReal x949=(r11*sj0);
IkReal x950=(cj0*px);
IkReal x951=((1.851147)*sj4);
IkReal x952=(gconst14*r20);
IkReal x953=(cj0*r01);
IkReal x954=(cj4*r22);
IkReal x955=((0.02904)*gconst14);
IkReal x956=(r10*sj0);
IkReal x957=(cj0*r00);
IkReal x958=((0.08712)*gconst14);
IkReal x959=(gconst13*r21);
IkReal x960=((0.617049)*sj4);
IkReal x961=((0.02904)*gconst13);
IkReal x962=((0.617049)*x954);
IkReal x963=((1.851147)*x954);
IkReal x964=((0.405504)*x959);
IkReal x965=((0.135168)*x959);
IkReal x966=(x959*x960);
IkReal x967=(x955*x957);
IkReal x968=(x956*x958);
IkReal x969=(x957*x958);
IkReal x970=(x951*x959);
IkReal x971=(x955*x956);
IkReal x972=(x971+x962+x966+x967+x965+x946);
IkReal x973=(x970+x963+x964+x968+x969+x945);
IkReal x974=(((x951*x952))+(((0.99)*x950))+((x948*x949))+(((0.405504)*x952))+((x948*x953))+(((0.99)*x947)));
IkReal x975=(((x952*x960))+(((0.33)*x950))+(((0.33)*x947))+((x949*x961))+(((0.135168)*x952))+((x953*x961)));
j1evalpoly[0]=((-0.458151)+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x972+(((-1.0)*x975))))))+(((0.924)*(htj1*htj1*htj1)))+x972+(((htj1*htj1)*(((-0.458151)+x973+(((-1.0)*x974))))))+(((htj1*htj1*htj1*htj1)*(((0.458151)+x973+(((-1.0)*x974))))))+(((-1.0)*x975)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x976=((1.0)*cj4);
IkReal x977=(gconst13*r21);
IkReal x978=(r22*sj4);
IkReal x979=((1.0)*cj1);
IkReal x980=(sj1*sj4);
IkReal x981=(gconst14*r20);
IkReal x982=(r22*x976);
IkReal x983=(cj1*x981);
if( IKabs((((cj1*cj4*x977))+(((-1.0)*x977*x980))+(((-1.0)*x978*x979))+(((-1.0)*sj1*x982))+(((-1.0)*x976*x983))+((x980*x981)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x982))+(((-1.0)*sj4*x977*x979))+((cj4*sj1*x981))+((sj4*x983))+((sj1*x978))+(((-1.0)*sj1*x976*x977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*cj4*x977))+(((-1.0)*x977*x980))+(((-1.0)*x978*x979))+(((-1.0)*sj1*x982))+(((-1.0)*x976*x983))+((x980*x981))))+IKsqr(((((-1.0)*cj1*x982))+(((-1.0)*sj4*x977*x979))+((cj4*sj1*x981))+((sj4*x983))+((sj1*x978))+(((-1.0)*sj1*x976*x977))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*cj4*x977))+(((-1.0)*x977*x980))+(((-1.0)*x978*x979))+(((-1.0)*sj1*x982))+(((-1.0)*x976*x983))+((x980*x981))), ((((-1.0)*cj1*x982))+(((-1.0)*sj4*x977*x979))+((cj4*sj1*x981))+((sj4*x983))+((sj1*x978))+(((-1.0)*sj1*x976*x977))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x984=IKsin(j2);
IkReal x985=IKcos(j2);
IkReal x986=(gconst13*r21);
IkReal x987=((1.0)*sj1);
IkReal x988=((1.0)*sj4);
IkReal x989=((1.0)*cj4);
IkReal x990=(r12*sj0);
IkReal x991=(gconst14*r20);
IkReal x992=((0.384)*sj1);
IkReal x993=(cj0*r02);
IkReal x994=(cj1*x985);
IkReal x995=((0.0825)*x984);
IkReal x996=(gconst14*r10*sj0);
IkReal x997=(cj1*x984);
IkReal x998=(gconst13*r11*sj0);
IkReal x999=(sj1*x985);
IkReal x1000=(cj0*gconst14*r00);
IkReal x1001=(cj0*gconst13*r01);
IkReal x1002=(x984*x987);
IkReal x1003=((1.0)*x994);
IkReal x1004=(x1003+x1002);
evalcond[0]=(((cj4*x991))+((r22*sj4))+(((-1.0)*x986*x989))+x997+(((-1.0)*x985*x987)));
evalcond[1]=(((sj4*x991))+(((-1.0)*x1004))+(((-1.0)*x986*x988))+(((-1.0)*r22*x989)));
evalcond[2]=((((-0.0825)*x999))+((cj1*x995))+(((-1.0)*x984*x992))+(((-0.088)*x991))+(((0.088)*x986))+pz+(((-0.384)*x994))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=(((sj4*x1001))+(((-1.0)*x997))+((sj4*x998))+(((-1.0)*x1000*x988))+((cj4*x990))+((cj4*x993))+x999+(((-1.0)*x988*x996)));
evalcond[4]=((((-1.0)*x1000*x989))+(((-1.0)*x1004))+((cj4*x998))+((cj4*x1001))+(((-1.0)*x989*x996))+(((-1.0)*x988*x990))+(((-1.0)*x988*x993)));
evalcond[5]=((((-0.0825)*x994))+(((-1.0)*sj1*x995))+(((0.088)*x996))+(((-0.088)*x998))+(((0.088)*x1000))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-0.384)*x997))+(((-0.088)*x1001))+((x985*x992))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1005=((11.3636363636364)*rxp0_2);
IkReal x1006=((11.3636363636364)*rxp1_2);
IkReal x1007=((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))));
if((x1007) < -0.00001)
continue;
IkReal x1008=IKabs(IKsqrt(x1007));
IkReal x1014 = x1007;
if(IKabs(x1014)==0){
continue;
}
IkReal x1009=pow(x1014,-0.5);
CheckValue<IkReal> x1015=IKPowWithIntegerCheck(x1008,-1);
if(!x1015.valid){
continue;
}
IkReal x1010=x1015.value;
IkReal x1011=(r22*x1010);
if((((1.0)+(((-1.0)*(x1011*x1011))))) < -0.00001)
continue;
IkReal x1012=IKsqrt(((1.0)+(((-1.0)*(x1011*x1011)))));
IkReal x1013=(x1009*x1012);
if( (x1011) < -1-IKFAST_SINCOS_THRESH || (x1011) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1016 = IKatan2WithCheck(IkReal(x1006),IkReal(x1005),IKFAST_ATAN2_MAGTHRESH);
if(!x1016.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(IKasin(x1011))+(((-1.0)*(x1016.value))));
IkReal gconst16=(((x1006*x1013))+(((-1.0)*x1005*x1009*x1011)));
IkReal gconst17=((((-1.0)*x1006*x1009*x1011))+(((-1.0)*x1005*x1013)));
if((((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x1017=IKPowWithIntegerCheck(IKabs(IKsqrt(((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2)))))),-1);
if(!x1017.valid){
continue;
}
if( ((r22*(x1017.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x1017.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(((11.3636363636364)*rxp1_2)),IkReal(((11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((r22*(x1017.value))))))+(x1018.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1019=((0.088)*gconst16);
IkReal x1020=((0.088)*gconst17);
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(IKsign((((gconst17*rxp1_2))+((gconst16*rxp0_2))+((r22*((((gconst17*x1020))+((gconst16*x1019)))))))),-1);
if(!x1021.valid){
continue;
}
CheckValue<IkReal> x1022 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x1019))+((r10*x1020)))),IkReal(((((-1.0)*px))+(((-1.0)*r01*x1019))+((r00*x1020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1022.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1021.value)))+(x1022.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1023=IKsin(j0);
IkReal x1024=IKcos(j0);
IkReal x1025=(gconst16*r00);
IkReal x1026=(gconst17*r11);
IkReal x1027=(gconst16*r10);
IkReal x1028=(gconst17*r01);
IkReal x1029=(gconst17*sj4);
IkReal x1030=(gconst16*r01);
IkReal x1031=(cj4*gconst17);
IkReal x1032=((0.088)*gconst17);
IkReal x1033=((1.0)*x1024);
IkReal x1034=((1.0)*x1023);
IkReal x1035=(r00*x1023);
IkReal x1036=(gconst16*r11*x1024);
evalcond[0]=((1.0)+(((-1.0)*x1027*x1033))+(((-1.0)*x1026*x1033))+((x1023*x1028))+((x1023*x1025)));
evalcond[1]=((((-1.0)*x1027*x1034))+(((-1.0)*x1025*x1033))+(((-1.0)*x1028*x1033))+(((-1.0)*x1026*x1034)));
evalcond[2]=((((-1.0)*x1032*x1035))+(((-1.0)*py*x1033))+((r10*x1024*x1032))+(((0.088)*x1023*x1030))+((px*x1023))+(((-0.088)*x1036)));
evalcond[3]=((((-1.0)*sj4*x1030*x1034))+((sj4*x1036))+((x1029*x1035))+(((-1.0)*cj4*r02*x1034))+((cj4*r12*x1024))+(((-1.0)*r10*x1029*x1033)));
evalcond[4]=(((x1031*x1035))+((cj4*x1036))+(((-1.0)*r12*sj4*x1033))+(((-1.0)*cj4*x1030*x1034))+((r02*sj4*x1023))+(((-1.0)*r10*x1031*x1033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1037=((11.3636363636364)*rxp0_2);
IkReal x1038=((11.3636363636364)*rxp1_2);
CheckValue<IkReal> x1048 = IKatan2WithCheck(IkReal(x1038),IkReal(x1037),IKFAST_ATAN2_MAGTHRESH);
if(!x1048.valid){
continue;
}
IkReal x1039=((1.0)*(x1048.value));
IkReal x1040=x1007;
if((x1040) < -0.00001)
continue;
IkReal x1041=IKabs(IKsqrt(x1040));
IkReal x1049 = x1040;
if(IKabs(x1049)==0){
continue;
}
IkReal x1042=pow(x1049,-0.5);
CheckValue<IkReal> x1050=IKPowWithIntegerCheck(x1041,-1);
if(!x1050.valid){
continue;
}
IkReal x1043=x1050.value;
IkReal x1044=(r22*x1043);
if( (x1044) < -1-IKFAST_SINCOS_THRESH || (x1044) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1045=IKasin(x1044);
if((((1.0)+(((-1.0)*(x1044*x1044))))) < -0.00001)
continue;
IkReal x1046=IKsqrt(((1.0)+(((-1.0)*(x1044*x1044)))));
IkReal x1047=(x1042*x1046);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1039))+x1045);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1039))+x1045);
IkReal gconst16=(((x1038*x1047))+(((-1.0)*x1037*x1042*x1044)));
IkReal gconst17=((((-1.0)*x1038*x1042*x1044))+(((-1.0)*x1037*x1047)));
IkReal x1051=((4.608)*pz);
IkReal x1052=(py*sj0);
IkReal x1053=(gconst16*r21);
IkReal x1054=((0.33)*cj4);
IkReal x1055=(cj0*px);
IkReal x1056=((0.08712)*gconst17);
IkReal x1057=(r10*sj0);
IkReal x1058=((1.851147)*sj4);
IkReal x1059=(gconst17*r20);
IkReal x1060=((0.99)*cj4);
IkReal x1061=(cj0*r00);
IkReal x1062=(cj4*r22);
IkReal x1063=((1.536)*sj4);
IkReal x1064=((0.08712)*gconst16);
IkReal x1065=(cj0*r01);
IkReal x1066=((4.608)*sj4);
IkReal x1067=(r22*sj4);
IkReal x1068=((0.617049)*sj4);
IkReal x1069=((0.02904)*gconst17);
IkReal x1070=(r11*sj0);
IkReal x1071=((0.02904)*gconst16);
IkReal x1072=((0.99)*x1067);
IkReal x1073=((1.056)*x1059);
IkReal x1074=((0.405504)*x1053);
IkReal x1075=((1.851147)*x1062);
IkReal x1076=(x1059*x1066);
IkReal x1077=(x1059*x1060);
IkReal x1078=(x1053*x1058);
IkReal x1079=(x1056*x1061);
IkReal x1080=(x1056*x1057);
IkReal x1081=(x1076+x1077+x1072+x1073);
IkReal x1082=((((12.0)*pz))+(((1.056)*x1053))+((x1053*x1066))+((x1053*x1060))+(((4.608)*x1062)));
IkReal x1083=(x1051+x1078+x1079+x1074+x1075+x1080);
IkReal x1084=((((0.99)*x1052))+(((0.99)*x1055))+(((0.405504)*x1059))+((x1064*x1065))+((x1058*x1059))+((x1064*x1070)));
j1eval[0]=((4.488)+(IKabs(((0.458151)+((x1061*x1069))+(((-1.0)*x1059*x1068))+(((-1.0)*x1070*x1071))+(((0.617049)*x1062))+((x1057*x1069))+((x1053*x1068))+(((0.135168)*x1053))+(((1.536)*pz))+(((-1.0)*x1065*x1071))+(((-0.33)*x1055))+(((-0.33)*x1052))+(((-0.135168)*x1059)))))+(IKabs(((-0.458151)+x1083+(((-1.0)*x1084)))))+(IKabs(((1.264)+x1081+(((-1.0)*x1082)))))+(IKabs(((-1.264)+(((-1.536)*x1062))+((x1054*x1059))+(((0.352)*x1059))+(((-0.352)*x1053))+(((-1.0)*x1053*x1054))+((x1059*x1063))+(((-4.0)*pz))+(((0.33)*x1067))+(((-1.0)*x1053*x1063)))))+(IKabs(((-1.264)+x1081+(((-1.0)*x1082)))))+(IKabs(((0.458151)+x1083+(((-1.0)*x1084))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1085=(gconst16*r21);
IkReal x1086=((0.33)*cj4);
IkReal x1087=(gconst17*r20);
IkReal x1088=((4.608)*sj4);
IkReal x1089=(cj4*r22);
IkReal x1090=(r22*sj4);
IkReal x1091=((1.536)*sj4);
IkReal x1092=((0.99)*cj4);
IkReal x1093=((0.99)*x1090);
IkReal x1094=((1.056)*x1087);
IkReal x1095=((0.352)*x1087);
IkReal x1096=((0.33)*x1090);
IkReal x1097=(x1087*x1088);
IkReal x1098=(x1087*x1092);
IkReal x1099=(x1086*x1087);
IkReal x1100=(x1087*x1091);
IkReal x1101=(x1094+x1097+x1093+x1098);
IkReal x1102=(x1100+x1095+x1096+x1099);
IkReal x1103=((((12.0)*pz))+((x1085*x1092))+(((4.608)*x1089))+(((1.056)*x1085))+((x1085*x1088)));
IkReal x1104=(((x1085*x1091))+(((4.0)*pz))+(((0.352)*x1085))+(((1.536)*x1089))+((x1085*x1086)));
op[0]=((-1.264)+x1102+(((-1.0)*x1104)));
op[1]=-0.66;
op[2]=((-1.264)+x1101+(((-1.0)*x1103)));
op[3]=-1.32;
op[4]=((1.264)+x1101+(((-1.0)*x1103)));
op[5]=-0.66;
op[6]=((1.264)+x1102+(((-1.0)*x1104)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1105=((1.536)*pz);
IkReal x1106=((4.608)*pz);
IkReal x1107=(py*sj0);
IkReal x1108=(cj0*px);
IkReal x1109=((0.08712)*sj0);
IkReal x1110=(gconst17*r10);
IkReal x1111=(gconst16*r21);
IkReal x1112=((1.851147)*sj4);
IkReal x1113=(gconst17*r20);
IkReal x1114=(cj4*r22);
IkReal x1115=((0.08712)*cj0);
IkReal x1116=(gconst16*r01);
IkReal x1117=(gconst17*r00);
IkReal x1118=((0.02904)*cj0);
IkReal x1119=((0.617049)*sj4);
IkReal x1120=(gconst16*r11);
IkReal x1121=((0.02904)*sj0);
IkReal x1122=((0.135168)*x1111);
IkReal x1123=((0.617049)*x1114);
IkReal x1124=((0.405504)*x1111);
IkReal x1125=((1.851147)*x1114);
IkReal x1126=(x1111*x1119);
IkReal x1127=(x1110*x1121);
IkReal x1128=(x1117*x1118);
IkReal x1129=(x1111*x1112);
IkReal x1130=(x1115*x1117);
IkReal x1131=(x1109*x1110);
IkReal x1132=(x1106+x1129+x1124+x1125+x1131+x1130);
IkReal x1133=(x1105+x1128+x1122+x1123+x1126+x1127);
IkReal x1134=(((x1112*x1113))+(((0.99)*x1107))+(((0.99)*x1108))+((x1109*x1120))+((x1115*x1116))+(((0.405504)*x1113)));
IkReal x1135=((((0.135168)*x1113))+((x1113*x1119))+((x1120*x1121))+((x1116*x1118))+(((0.33)*x1108))+(((0.33)*x1107)));
j1evalpoly[0]=((-0.458151)+x1133+(((htj1*htj1*htj1*htj1)*(((0.458151)+x1132+(((-1.0)*x1134))))))+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((0.924)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x1133+(((-1.0)*x1135))))))+(((-1.0)*x1135))+(((htj1*htj1)*(((-0.458151)+x1132+(((-1.0)*x1134)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1136=(gconst16*r21);
IkReal x1137=((1.0)*sj1);
IkReal x1138=(gconst17*r20);
IkReal x1139=(r22*sj4);
IkReal x1140=(cj1*sj4);
IkReal x1141=((1.0)*cj1*cj4);
if( IKabs(((((-1.0)*cj4*r22*x1137))+(((-1.0)*sj4*x1136*x1137))+((cj1*cj4*x1136))+(((-1.0)*cj1*x1139))+((sj1*sj4*x1138))+(((-1.0)*x1138*x1141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1136*x1140))+(((-1.0)*cj4*x1136*x1137))+((cj4*sj1*x1138))+((sj1*x1139))+(((-1.0)*r22*x1141))+((x1138*x1140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r22*x1137))+(((-1.0)*sj4*x1136*x1137))+((cj1*cj4*x1136))+(((-1.0)*cj1*x1139))+((sj1*sj4*x1138))+(((-1.0)*x1138*x1141))))+IKsqr(((((-1.0)*x1136*x1140))+(((-1.0)*cj4*x1136*x1137))+((cj4*sj1*x1138))+((sj1*x1139))+(((-1.0)*r22*x1141))+((x1138*x1140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r22*x1137))+(((-1.0)*sj4*x1136*x1137))+((cj1*cj4*x1136))+(((-1.0)*cj1*x1139))+((sj1*sj4*x1138))+(((-1.0)*x1138*x1141))), ((((-1.0)*x1136*x1140))+(((-1.0)*cj4*x1136*x1137))+((cj4*sj1*x1138))+((sj1*x1139))+(((-1.0)*r22*x1141))+((x1138*x1140))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1142=IKsin(j2);
IkReal x1143=IKcos(j2);
IkReal x1144=(gconst17*r20);
IkReal x1145=(gconst16*sj4);
IkReal x1146=(cj0*r01);
IkReal x1147=((1.0)*sj1);
IkReal x1148=(gconst17*r10);
IkReal x1149=((1.0)*cj4);
IkReal x1150=(r11*sj0);
IkReal x1151=((1.0)*cj0);
IkReal x1152=((0.088)*gconst16);
IkReal x1153=(cj4*gconst16);
IkReal x1154=(cj1*x1143);
IkReal x1155=(cj1*x1142);
IkReal x1156=(cj0*gconst17*r00);
IkReal x1157=((1.0)*sj0*sj4);
IkReal x1158=(sj1*x1142);
IkReal x1159=(sj1*x1143);
IkReal x1160=(x1142*x1147);
IkReal x1161=((1.0)*x1154);
IkReal x1162=(x1160+x1161);
evalcond[0]=(x1155+(((-1.0)*x1143*x1147))+((r22*sj4))+(((-1.0)*gconst16*r21*x1149))+((cj4*x1144)));
evalcond[1]=(((sj4*x1144))+(((-1.0)*r21*x1145))+(((-1.0)*x1162))+(((-1.0)*r22*x1149)));
evalcond[2]=((((-0.0825)*x1159))+(((-0.384)*x1154))+(((-0.384)*x1158))+(((0.0825)*x1155))+(((-0.088)*x1144))+pz+(((0.0825)*sj1))+((r21*x1152))+(((-0.316)*cj1)));
evalcond[3]=(((x1145*x1146))+x1159+(((-1.0)*gconst17*r00*sj4*x1151))+((cj0*cj4*r02))+(((-1.0)*x1155))+(((-1.0)*x1148*x1157))+((x1145*x1150))+((cj4*r12*sj0)));
evalcond[4]=(((x1146*x1153))+(((-1.0)*x1149*x1156))+(((-1.0)*sj0*x1148*x1149))+(((-1.0)*r02*sj4*x1151))+((x1150*x1153))+(((-1.0)*r12*x1157))+(((-1.0)*x1162)));
evalcond[5]=((((-1.0)*px*x1151))+(((0.088)*x1156))+(((-0.0825)*x1158))+(((-0.0825)*x1154))+(((-0.384)*x1155))+(((0.088)*sj0*x1148))+(((0.384)*x1159))+(((-1.0)*x1146*x1152))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-1.0)*x1150*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1163=cj5*cj5;
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
CheckValue<IkReal> x1165=IKPowWithIntegerCheck(IKsign(((1.0)+(((r20*r20)*(((-1.0)+x1163))))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1163*(r21*r21))))),-1);
if(!x1165.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1164.value)+(((1.5707963267949)*(x1165.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1166=IKsin(j0);
IkReal x1167=IKcos(j0);
IkReal x1168=(r11*sj5);
IkReal x1169=((1.0)*r10);
IkReal x1170=(cj5*r01);
IkReal x1171=((1.0)*r01);
IkReal x1172=(cj5*r11);
IkReal x1173=(sj4*x1167);
IkReal x1174=(sj5*x1166);
IkReal x1175=((1.0)*x1167);
IkReal x1176=(cj4*x1167);
IkReal x1177=((1.0)*x1166);
IkReal x1178=((0.088)*x1167);
IkReal x1179=(cj5*r00*x1166);
evalcond[0]=((1.0)+((x1166*x1170))+((r00*x1174))+(((-1.0)*x1172*x1175))+(((-1.0)*sj5*x1167*x1169)));
evalcond[1]=((((-1.0)*x1172*x1177))+(((-1.0)*x1170*x1175))+(((-1.0)*x1169*x1174))+(((-1.0)*r00*sj5*x1175)));
evalcond[2]=(((px*x1166))+(((-0.088)*x1179))+(((-1.0)*x1168*x1178))+(((-1.0)*py*x1175))+((cj5*r10*x1178))+(((0.088)*r01*x1174)));
evalcond[3]=(((x1168*x1173))+(((-1.0)*cj5*x1169*x1173))+(((-1.0)*sj4*x1171*x1174))+((r12*x1176))+(((-1.0)*cj4*r02*x1177))+((sj4*x1179)));
evalcond[4]=(((x1168*x1176))+(((-1.0)*cj5*x1169*x1176))+(((-1.0)*cj4*x1171*x1174))+((cj4*x1179))+(((-1.0)*r12*x1173))+((r02*sj4*x1166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1180=((4.608)*pz);
IkReal x1181=((0.08712)*cj5);
IkReal x1182=(r10*sj0);
IkReal x1183=(cj0*px);
IkReal x1184=(py*sj0);
IkReal x1185=(cj5*r20);
IkReal x1186=((0.33)*cj4);
IkReal x1187=((0.02904)*cj0);
IkReal x1188=(r01*sj5);
IkReal x1189=(r21*sj5);
IkReal x1190=((1.851147)*sj4);
IkReal x1191=((1.536)*sj4);
IkReal x1192=(cj4*r22);
IkReal x1193=(r22*sj4);
IkReal x1194=((4.608)*sj4);
IkReal x1195=((0.617049)*sj4);
IkReal x1196=((0.99)*cj4);
IkReal x1197=((0.405504)*x1189);
IkReal x1198=((1.851147)*x1192);
IkReal x1199=((0.99)*x1193);
IkReal x1200=((1.056)*x1185);
IkReal x1201=(r11*sj0*sj5);
IkReal x1202=(cj0*r00*x1181);
IkReal x1203=(x1189*x1190);
IkReal x1204=(x1181*x1182);
IkReal x1205=(x1185*x1194);
IkReal x1206=(x1185*x1196);
IkReal x1207=(x1199+x1205+x1206+x1200);
IkReal x1208=((((4.608)*x1192))+(((12.0)*pz))+((x1189*x1196))+((x1189*x1194))+(((1.056)*x1189)));
IkReal x1209=(x1180+x1198+x1197+x1204+x1203+x1202);
IkReal x1210=((((0.99)*x1184))+(((0.99)*x1183))+((x1185*x1190))+(((0.08712)*cj0*x1188))+(((0.405504)*x1185))+(((0.08712)*x1201)));
j1eval[0]=((4.488)+(IKabs(((1.264)+x1207+(((-1.0)*x1208)))))+(IKabs(((-1.264)+(((0.33)*x1193))+(((-1.0)*x1189*x1191))+(((-0.352)*x1189))+(((0.352)*x1185))+(((-1.0)*x1186*x1189))+((x1185*x1186))+((x1185*x1191))+(((-1.536)*x1192))+(((-4.0)*pz)))))+(IKabs(((0.458151)+(((-0.02904)*x1201))+(((-0.33)*x1183))+(((-0.33)*x1184))+(((0.617049)*x1192))+(((0.135168)*x1189))+((x1189*x1195))+(((-0.135168)*x1185))+(((-1.0)*x1187*x1188))+(((0.02904)*cj5*x1182))+((cj5*r00*x1187))+(((-1.0)*x1185*x1195))+(((1.536)*pz)))))+(IKabs(((-0.458151)+x1209+(((-1.0)*x1210)))))+(IKabs(((0.458151)+x1209+(((-1.0)*x1210)))))+(IKabs(((-1.264)+x1207+(((-1.0)*x1208))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1211=(cj5*r20);
IkReal x1212=((4.608)*sj4);
IkReal x1213=(r21*sj5);
IkReal x1214=((0.33)*cj4);
IkReal x1215=(cj4*r22);
IkReal x1216=(r22*sj4);
IkReal x1217=((0.99)*cj4);
IkReal x1218=((1.536)*sj4);
IkReal x1219=((0.99)*x1216);
IkReal x1220=((1.056)*x1211);
IkReal x1221=((0.352)*x1211);
IkReal x1222=((0.33)*x1216);
IkReal x1223=(x1211*x1212);
IkReal x1224=(x1211*x1217);
IkReal x1225=(x1211*x1214);
IkReal x1226=(x1211*x1218);
IkReal x1227=(x1226+x1225+x1222+x1221);
IkReal x1228=(x1224+x1223+x1220+x1219);
IkReal x1229=(((x1212*x1213))+(((4.608)*x1215))+(((12.0)*pz))+((x1213*x1217))+(((1.056)*x1213)));
IkReal x1230=((((0.352)*x1213))+((x1213*x1218))+((x1213*x1214))+(((4.0)*pz))+(((1.536)*x1215)));
op[0]=((-1.264)+x1227+(((-1.0)*x1230)));
op[1]=-0.66;
op[2]=((-1.264)+x1228+(((-1.0)*x1229)));
op[3]=-1.32;
op[4]=((1.264)+x1228+(((-1.0)*x1229)));
op[5]=-0.66;
op[6]=((1.264)+x1227+(((-1.0)*x1230)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1231=((1.536)*pz);
IkReal x1232=((4.608)*pz);
IkReal x1233=((0.08712)*sj0);
IkReal x1234=(cj5*r10);
IkReal x1235=(py*sj0);
IkReal x1236=(cj0*px);
IkReal x1237=(cj5*r20);
IkReal x1238=(cj4*r22);
IkReal x1239=(r21*sj5);
IkReal x1240=(r11*sj5);
IkReal x1241=((0.02904)*sj0);
IkReal x1242=((0.135168)*x1239);
IkReal x1243=((0.617049)*x1238);
IkReal x1244=((0.405504)*x1239);
IkReal x1245=((1.851147)*x1238);
IkReal x1246=(cj0*cj5*r00);
IkReal x1247=(sj4*x1239);
IkReal x1248=(cj0*r01*sj5);
IkReal x1249=((0.02904)*x1246);
IkReal x1250=(x1234*x1241);
IkReal x1251=((0.08712)*x1246);
IkReal x1252=((1.851147)*x1247);
IkReal x1253=(x1233*x1234);
IkReal x1254=((0.617049)*x1247);
IkReal x1255=(x1245+x1244+x1252+x1253+x1251+x1232);
IkReal x1256=(x1243+x1242+x1249+x1254+x1250+x1231);
IkReal x1257=((((1.851147)*sj4*x1237))+(((0.08712)*x1248))+((x1233*x1240))+(((0.99)*x1235))+(((0.99)*x1236))+(((0.405504)*x1237)));
IkReal x1258=(((x1240*x1241))+(((0.02904)*x1248))+(((0.617049)*sj4*x1237))+(((0.135168)*x1237))+(((0.33)*x1235))+(((0.33)*x1236)));
j1evalpoly[0]=((-0.458151)+(((-1.0)*x1258))+x1256+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x1258))+x1256))))+(((htj1*htj1)*(((-0.458151)+(((-1.0)*x1257))+x1255))))+(((0.924)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x1257))+x1255)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1259=(cj1*cj4);
IkReal x1260=(r21*sj5);
IkReal x1261=((1.0)*r22);
IkReal x1262=(cj1*sj4);
IkReal x1263=(cj5*r20);
IkReal x1264=(cj4*sj1);
IkReal x1265=(sj1*sj4);
if( IKabs(((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((x1259*x1260))+((x1263*x1265))+(((-1.0)*x1259*x1263))+(((-1.0)*x1260*x1265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1265))+((x1262*x1263))+((x1263*x1264))+(((-1.0)*x1260*x1264))+(((-1.0)*x1260*x1262))+(((-1.0)*x1259*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((x1259*x1260))+((x1263*x1265))+(((-1.0)*x1259*x1263))+(((-1.0)*x1260*x1265))))+IKsqr((((r22*x1265))+((x1262*x1263))+((x1263*x1264))+(((-1.0)*x1260*x1264))+(((-1.0)*x1260*x1262))+(((-1.0)*x1259*x1261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((x1259*x1260))+((x1263*x1265))+(((-1.0)*x1259*x1263))+(((-1.0)*x1260*x1265))), (((r22*x1265))+((x1262*x1263))+((x1263*x1264))+(((-1.0)*x1260*x1264))+(((-1.0)*x1260*x1262))+(((-1.0)*x1259*x1261))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1266=IKsin(j2);
IkReal x1267=IKcos(j2);
IkReal x1268=(r10*sj0);
IkReal x1269=(cj0*r00);
IkReal x1270=((1.0)*cj4);
IkReal x1271=((0.088)*sj5);
IkReal x1272=(r11*sj0);
IkReal x1273=((1.0)*sj1);
IkReal x1274=(cj5*r20);
IkReal x1275=((1.0)*sj4);
IkReal x1276=(r12*sj0);
IkReal x1277=(r21*sj5);
IkReal x1278=(cj0*r02);
IkReal x1279=((0.088)*cj5);
IkReal x1280=(cj1*x1267);
IkReal x1281=(cj5*x1275);
IkReal x1282=(cj1*x1266);
IkReal x1283=(sj1*x1266);
IkReal x1284=(cj0*r01*sj5);
IkReal x1285=(sj1*x1267);
IkReal x1286=(x1266*x1273);
IkReal x1287=((1.0)*x1280);
IkReal x1288=(x1287+x1286);
evalcond[0]=(x1282+(((-1.0)*x1267*x1273))+((r22*sj4))+(((-1.0)*x1270*x1277))+((cj4*x1274)));
evalcond[1]=((((-1.0)*x1275*x1277))+(((-1.0)*r22*x1270))+((sj4*x1274))+(((-1.0)*x1288)));
evalcond[2]=((((-0.0825)*x1285))+((r21*x1271))+(((0.0825)*x1282))+pz+(((-0.088)*x1274))+(((0.0825)*sj1))+(((-0.384)*x1283))+(((-0.384)*x1280))+(((-0.316)*cj1)));
evalcond[3]=((((-1.0)*x1282))+x1285+((sj4*x1284))+(((-1.0)*x1269*x1281))+((sj4*sj5*x1272))+(((-1.0)*x1268*x1281))+((cj4*x1276))+((cj4*x1278)));
evalcond[4]=((((-1.0)*cj5*x1268*x1270))+((cj4*x1284))+(((-1.0)*x1275*x1278))+(((-1.0)*x1275*x1276))+(((-1.0)*cj5*x1269*x1270))+(((-1.0)*x1288))+((cj4*sj5*x1272)));
evalcond[5]=((((-0.0825)*x1280))+(((-0.0825)*x1283))+((x1269*x1279))+(((-1.0)*x1271*x1272))+(((0.384)*x1285))+((x1268*x1279))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-1.0)*cj0*r01*x1271))+(((-0.384)*x1282))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1289=(sj4*sj5);
IkReal x1290=((1.0)*cj5*sj4);
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal((((r11*x1289))+((cj4*r12))+(((-1.0)*r10*x1290)))),IkReal(((((-1.0)*r00*x1290))+((r01*x1289))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+(((-1.0)*cj4*cj5*r20))+(((-1.0)*r22*sj4)))),-1);
if(!x1292.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1291.value)+(((1.5707963267949)*(x1292.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1293=IKsin(j0);
IkReal x1294=IKcos(j0);
IkReal x1295=(r11*sj5);
IkReal x1296=((1.0)*r10);
IkReal x1297=(cj5*r01);
IkReal x1298=((1.0)*r01);
IkReal x1299=(cj5*r11);
IkReal x1300=(sj4*x1294);
IkReal x1301=(sj5*x1293);
IkReal x1302=((1.0)*x1294);
IkReal x1303=(cj4*x1294);
IkReal x1304=((1.0)*x1293);
IkReal x1305=((0.088)*x1294);
IkReal x1306=(cj5*r00*x1293);
evalcond[0]=((1.0)+(((-1.0)*x1299*x1302))+((x1293*x1297))+(((-1.0)*sj5*x1294*x1296))+((r00*x1301)));
evalcond[1]=((((-1.0)*x1299*x1304))+(((-1.0)*x1297*x1302))+(((-1.0)*r00*sj5*x1302))+(((-1.0)*x1296*x1301)));
evalcond[2]=(((cj5*r10*x1305))+(((0.088)*r01*x1301))+(((-0.088)*x1306))+(((-1.0)*x1295*x1305))+(((-1.0)*py*x1302))+((px*x1293)));
evalcond[3]=((((-1.0)*cj5*x1296*x1300))+((r12*x1303))+((x1295*x1300))+(((-1.0)*sj4*x1298*x1301))+(((-1.0)*cj4*r02*x1304))+((sj4*x1306)));
evalcond[4]=((((-1.0)*cj5*x1296*x1303))+(((-1.0)*r12*x1300))+((cj4*x1306))+((x1295*x1303))+(((-1.0)*cj4*x1298*x1301))+((r02*sj4*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1307=((4.608)*pz);
IkReal x1308=((0.08712)*cj5);
IkReal x1309=(r10*sj0);
IkReal x1310=(cj0*px);
IkReal x1311=(py*sj0);
IkReal x1312=(cj5*r20);
IkReal x1313=((0.33)*cj4);
IkReal x1314=((0.02904)*cj0);
IkReal x1315=(r01*sj5);
IkReal x1316=(r21*sj5);
IkReal x1317=((1.851147)*sj4);
IkReal x1318=((1.536)*sj4);
IkReal x1319=(cj4*r22);
IkReal x1320=(r22*sj4);
IkReal x1321=((4.608)*sj4);
IkReal x1322=((0.617049)*sj4);
IkReal x1323=((0.99)*cj4);
IkReal x1324=((0.405504)*x1316);
IkReal x1325=((1.851147)*x1319);
IkReal x1326=((0.99)*x1320);
IkReal x1327=((1.056)*x1312);
IkReal x1328=(r11*sj0*sj5);
IkReal x1329=(cj0*r00*x1308);
IkReal x1330=(x1316*x1317);
IkReal x1331=(x1308*x1309);
IkReal x1332=(x1312*x1321);
IkReal x1333=(x1312*x1323);
IkReal x1334=(x1326+x1327+x1333+x1332);
IkReal x1335=(((x1316*x1321))+((x1316*x1323))+(((12.0)*pz))+(((1.056)*x1316))+(((4.608)*x1319)));
IkReal x1336=(x1307+x1324+x1325+x1329+x1331+x1330);
IkReal x1337=((((0.08712)*x1328))+(((0.08712)*cj0*x1315))+(((0.405504)*x1312))+(((0.99)*x1311))+(((0.99)*x1310))+((x1312*x1317)));
j1eval[0]=((4.488)+(IKabs(((0.458151)+x1336+(((-1.0)*x1337)))))+(IKabs(((0.458151)+(((-1.0)*x1312*x1322))+(((-0.33)*x1311))+(((-0.33)*x1310))+((x1316*x1322))+(((0.02904)*cj5*x1309))+(((0.135168)*x1316))+(((-0.02904)*x1328))+(((-1.0)*x1314*x1315))+((cj5*r00*x1314))+(((0.617049)*x1319))+(((-0.135168)*x1312))+(((1.536)*pz)))))+(IKabs(((1.264)+x1334+(((-1.0)*x1335)))))+(IKabs(((-0.458151)+x1336+(((-1.0)*x1337)))))+(IKabs(((-1.264)+x1334+(((-1.0)*x1335)))))+(IKabs(((-1.264)+(((-1.0)*x1313*x1316))+(((0.33)*x1320))+(((-0.352)*x1316))+(((0.352)*x1312))+(((-1.536)*x1319))+(((-4.0)*pz))+(((-1.0)*x1316*x1318))+((x1312*x1318))+((x1312*x1313))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1338=(cj5*r20);
IkReal x1339=((4.608)*sj4);
IkReal x1340=(r21*sj5);
IkReal x1341=((0.33)*cj4);
IkReal x1342=(cj4*r22);
IkReal x1343=(r22*sj4);
IkReal x1344=((0.99)*cj4);
IkReal x1345=((1.536)*sj4);
IkReal x1346=((0.99)*x1343);
IkReal x1347=((1.056)*x1338);
IkReal x1348=((0.352)*x1338);
IkReal x1349=((0.33)*x1343);
IkReal x1350=(x1338*x1339);
IkReal x1351=(x1338*x1344);
IkReal x1352=(x1338*x1341);
IkReal x1353=(x1338*x1345);
IkReal x1354=(x1348+x1349+x1353+x1352);
IkReal x1355=(x1346+x1347+x1351+x1350);
IkReal x1356=((((12.0)*pz))+((x1339*x1340))+(((4.608)*x1342))+((x1340*x1344))+(((1.056)*x1340)));
IkReal x1357=((((4.0)*pz))+(((1.536)*x1342))+((x1340*x1345))+((x1340*x1341))+(((0.352)*x1340)));
op[0]=((-1.264)+x1354+(((-1.0)*x1357)));
op[1]=-0.66;
op[2]=((-1.264)+x1355+(((-1.0)*x1356)));
op[3]=-1.32;
op[4]=((1.264)+x1355+(((-1.0)*x1356)));
op[5]=-0.66;
op[6]=((1.264)+x1354+(((-1.0)*x1357)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1358=((1.536)*pz);
IkReal x1359=((4.608)*pz);
IkReal x1360=((0.08712)*sj0);
IkReal x1361=(cj5*r10);
IkReal x1362=(py*sj0);
IkReal x1363=(cj0*px);
IkReal x1364=(cj5*r20);
IkReal x1365=(cj4*r22);
IkReal x1366=(r21*sj5);
IkReal x1367=(r11*sj5);
IkReal x1368=((0.02904)*sj0);
IkReal x1369=((0.135168)*x1366);
IkReal x1370=((0.617049)*x1365);
IkReal x1371=((0.405504)*x1366);
IkReal x1372=((1.851147)*x1365);
IkReal x1373=(cj0*cj5*r00);
IkReal x1374=(sj4*x1366);
IkReal x1375=(cj0*r01*sj5);
IkReal x1376=((0.02904)*x1373);
IkReal x1377=(x1361*x1368);
IkReal x1378=((0.08712)*x1373);
IkReal x1379=((1.851147)*x1374);
IkReal x1380=(x1360*x1361);
IkReal x1381=((0.617049)*x1374);
IkReal x1382=(x1359+x1371+x1372+x1379+x1378+x1380);
IkReal x1383=(x1358+x1369+x1370+x1377+x1376+x1381);
IkReal x1384=((((0.405504)*x1364))+((x1360*x1367))+(((0.99)*x1362))+(((0.99)*x1363))+(((0.08712)*x1375))+(((1.851147)*sj4*x1364)));
IkReal x1385=(((x1367*x1368))+(((0.02904)*x1375))+(((0.135168)*x1364))+(((0.33)*x1362))+(((0.33)*x1363))+(((0.617049)*sj4*x1364)));
j1evalpoly[0]=((-0.458151)+(((-1.0)*x1385))+x1383+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((htj1*htj1)*(((-0.458151)+(((-1.0)*x1384))+x1382))))+(((0.924)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x1385))+x1383))))+(((htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x1384))+x1382)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1386=(cj1*cj4);
IkReal x1387=(r21*sj5);
IkReal x1388=((1.0)*r22);
IkReal x1389=(cj1*sj4);
IkReal x1390=(cj5*r20);
IkReal x1391=(cj4*sj1);
IkReal x1392=(sj1*sj4);
if( IKabs(((((-1.0)*x1386*x1390))+((x1390*x1392))+(((-1.0)*x1387*x1392))+((x1386*x1387))+(((-1.0)*x1388*x1391))+(((-1.0)*x1388*x1389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1387*x1389))+((x1390*x1391))+(((-1.0)*x1387*x1391))+((x1389*x1390))+((r22*x1392))+(((-1.0)*x1386*x1388)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1386*x1390))+((x1390*x1392))+(((-1.0)*x1387*x1392))+((x1386*x1387))+(((-1.0)*x1388*x1391))+(((-1.0)*x1388*x1389))))+IKsqr(((((-1.0)*x1387*x1389))+((x1390*x1391))+(((-1.0)*x1387*x1391))+((x1389*x1390))+((r22*x1392))+(((-1.0)*x1386*x1388))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1386*x1390))+((x1390*x1392))+(((-1.0)*x1387*x1392))+((x1386*x1387))+(((-1.0)*x1388*x1391))+(((-1.0)*x1388*x1389))), ((((-1.0)*x1387*x1389))+((x1390*x1391))+(((-1.0)*x1387*x1391))+((x1389*x1390))+((r22*x1392))+(((-1.0)*x1386*x1388))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1393=IKsin(j2);
IkReal x1394=IKcos(j2);
IkReal x1395=(r10*sj0);
IkReal x1396=(cj0*r00);
IkReal x1397=((1.0)*cj4);
IkReal x1398=((0.088)*sj5);
IkReal x1399=(r11*sj0);
IkReal x1400=((1.0)*sj1);
IkReal x1401=(cj5*r20);
IkReal x1402=((1.0)*sj4);
IkReal x1403=(r12*sj0);
IkReal x1404=(r21*sj5);
IkReal x1405=(cj0*r02);
IkReal x1406=((0.088)*cj5);
IkReal x1407=(cj1*x1394);
IkReal x1408=(cj5*x1402);
IkReal x1409=(cj1*x1393);
IkReal x1410=(sj1*x1393);
IkReal x1411=(cj0*r01*sj5);
IkReal x1412=(sj1*x1394);
IkReal x1413=(x1393*x1400);
IkReal x1414=((1.0)*x1407);
IkReal x1415=(x1413+x1414);
evalcond[0]=(((r22*sj4))+((cj4*x1401))+x1409+(((-1.0)*x1397*x1404))+(((-1.0)*x1394*x1400)));
evalcond[1]=((((-1.0)*x1415))+(((-1.0)*x1402*x1404))+(((-1.0)*r22*x1397))+((sj4*x1401)));
evalcond[2]=((((-0.384)*x1410))+((r21*x1398))+(((-0.0825)*x1412))+pz+(((-0.088)*x1401))+(((0.0825)*x1409))+(((-0.384)*x1407))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=((((-1.0)*x1409))+((cj4*x1403))+((cj4*x1405))+((sj4*x1411))+x1412+(((-1.0)*x1396*x1408))+((sj4*sj5*x1399))+(((-1.0)*x1395*x1408)));
evalcond[4]=((((-1.0)*x1415))+((cj4*x1411))+(((-1.0)*x1402*x1405))+(((-1.0)*x1402*x1403))+((cj4*sj5*x1399))+(((-1.0)*cj5*x1396*x1397))+(((-1.0)*cj5*x1395*x1397)));
evalcond[5]=((((-1.0)*cj0*r01*x1398))+((x1396*x1406))+(((-0.0825)*x1410))+((x1395*x1406))+(((-0.0825)*x1407))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-0.384)*x1409))+(((-1.0)*x1398*x1399))+(((0.384)*x1412))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1416=((0.088)*sj5);
IkReal x1417=((0.088)*cj5);
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+(((0.088)*r22))+((rxp0_2*sj5)))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x1416))+((r10*x1417)))),IkReal((((r00*x1417))+(((-1.0)*px))+(((-1.0)*r01*x1416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1420=IKsin(j0);
IkReal x1421=IKcos(j0);
IkReal x1422=(r11*sj5);
IkReal x1423=((1.0)*r10);
IkReal x1424=(cj5*r01);
IkReal x1425=((1.0)*r01);
IkReal x1426=(cj5*r11);
IkReal x1427=(sj4*x1421);
IkReal x1428=(sj5*x1420);
IkReal x1429=((1.0)*x1421);
IkReal x1430=(cj4*x1421);
IkReal x1431=((1.0)*x1420);
IkReal x1432=((0.088)*x1421);
IkReal x1433=(cj5*r00*x1420);
evalcond[0]=((1.0)+(((-1.0)*x1426*x1429))+((r00*x1428))+((x1420*x1424))+(((-1.0)*sj5*x1421*x1423)));
evalcond[1]=((((-1.0)*x1424*x1429))+(((-1.0)*x1423*x1428))+(((-1.0)*x1426*x1431))+(((-1.0)*r00*sj5*x1429)));
evalcond[2]=((((-1.0)*x1422*x1432))+(((-1.0)*py*x1429))+(((-0.088)*x1433))+((px*x1420))+((cj5*r10*x1432))+(((0.088)*r01*x1428)));
evalcond[3]=(((x1422*x1427))+((r12*x1430))+(((-1.0)*sj4*x1425*x1428))+(((-1.0)*cj4*r02*x1431))+(((-1.0)*cj5*x1423*x1427))+((sj4*x1433)));
evalcond[4]=((((-1.0)*r12*x1427))+((cj4*x1433))+((x1422*x1430))+(((-1.0)*cj4*x1425*x1428))+(((-1.0)*cj5*x1423*x1430))+((r02*sj4*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1434=((4.608)*pz);
IkReal x1435=((0.08712)*cj5);
IkReal x1436=(r10*sj0);
IkReal x1437=(cj0*px);
IkReal x1438=(py*sj0);
IkReal x1439=(cj5*r20);
IkReal x1440=((0.33)*cj4);
IkReal x1441=((0.02904)*cj0);
IkReal x1442=(r01*sj5);
IkReal x1443=(r21*sj5);
IkReal x1444=((1.851147)*sj4);
IkReal x1445=((1.536)*sj4);
IkReal x1446=(cj4*r22);
IkReal x1447=(r22*sj4);
IkReal x1448=((4.608)*sj4);
IkReal x1449=((0.617049)*sj4);
IkReal x1450=((0.99)*cj4);
IkReal x1451=((0.405504)*x1443);
IkReal x1452=((1.851147)*x1446);
IkReal x1453=((0.99)*x1447);
IkReal x1454=((1.056)*x1439);
IkReal x1455=(r11*sj0*sj5);
IkReal x1456=(cj0*r00*x1435);
IkReal x1457=(x1443*x1444);
IkReal x1458=(x1435*x1436);
IkReal x1459=(x1439*x1448);
IkReal x1460=(x1439*x1450);
IkReal x1461=(x1460+x1454+x1453+x1459);
IkReal x1462=(((x1443*x1448))+(((12.0)*pz))+(((4.608)*x1446))+(((1.056)*x1443))+((x1443*x1450)));
IkReal x1463=(x1434+x1456+x1457+x1451+x1452+x1458);
IkReal x1464=((((0.08712)*cj0*x1442))+(((0.08712)*x1455))+((x1439*x1444))+(((0.99)*x1437))+(((0.99)*x1438))+(((0.405504)*x1439)));
j1eval[0]=((4.488)+(IKabs(((-0.458151)+(((-1.0)*x1464))+x1463)))+(IKabs(((1.264)+(((-1.0)*x1462))+x1461)))+(IKabs(((-1.264)+(((-1.0)*x1462))+x1461)))+(IKabs(((0.458151)+((x1443*x1449))+(((0.617049)*x1446))+(((-0.02904)*x1455))+(((-0.135168)*x1439))+(((-1.0)*x1439*x1449))+(((-1.0)*x1441*x1442))+((cj5*r00*x1441))+(((-0.33)*x1437))+(((-0.33)*x1438))+(((0.02904)*cj5*x1436))+(((0.135168)*x1443))+(((1.536)*pz)))))+(IKabs(((0.458151)+(((-1.0)*x1464))+x1463)))+(IKabs(((-1.264)+((x1439*x1445))+((x1439*x1440))+(((-0.352)*x1443))+(((0.33)*x1447))+(((-4.0)*pz))+(((-1.0)*x1443*x1445))+(((-1.536)*x1446))+(((-1.0)*x1440*x1443))+(((0.352)*x1439))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1465=(cj5*r20);
IkReal x1466=((4.608)*sj4);
IkReal x1467=(r21*sj5);
IkReal x1468=((0.33)*cj4);
IkReal x1469=(cj4*r22);
IkReal x1470=(r22*sj4);
IkReal x1471=((0.99)*cj4);
IkReal x1472=((1.536)*sj4);
IkReal x1473=((0.99)*x1470);
IkReal x1474=((1.056)*x1465);
IkReal x1475=((0.352)*x1465);
IkReal x1476=((0.33)*x1470);
IkReal x1477=(x1465*x1466);
IkReal x1478=(x1465*x1471);
IkReal x1479=(x1465*x1468);
IkReal x1480=(x1465*x1472);
IkReal x1481=(x1476+x1475+x1479+x1480);
IkReal x1482=(x1473+x1477+x1474+x1478);
IkReal x1483=((((4.608)*x1469))+(((12.0)*pz))+((x1467*x1471))+((x1466*x1467))+(((1.056)*x1467)));
IkReal x1484=((((0.352)*x1467))+(((4.0)*pz))+((x1467*x1472))+(((1.536)*x1469))+((x1467*x1468)));
op[0]=((-1.264)+(((-1.0)*x1484))+x1481);
op[1]=-0.66;
op[2]=((-1.264)+(((-1.0)*x1483))+x1482);
op[3]=-1.32;
op[4]=((1.264)+(((-1.0)*x1483))+x1482);
op[5]=-0.66;
op[6]=((1.264)+(((-1.0)*x1484))+x1481);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1485=((1.536)*pz);
IkReal x1486=((4.608)*pz);
IkReal x1487=((0.08712)*sj0);
IkReal x1488=(cj5*r10);
IkReal x1489=(py*sj0);
IkReal x1490=(cj0*px);
IkReal x1491=(cj5*r20);
IkReal x1492=(cj4*r22);
IkReal x1493=(r21*sj5);
IkReal x1494=(r11*sj5);
IkReal x1495=((0.02904)*sj0);
IkReal x1496=((0.135168)*x1493);
IkReal x1497=((0.617049)*x1492);
IkReal x1498=((0.405504)*x1493);
IkReal x1499=((1.851147)*x1492);
IkReal x1500=(cj0*cj5*r00);
IkReal x1501=(sj4*x1493);
IkReal x1502=(cj0*r01*sj5);
IkReal x1503=((0.02904)*x1500);
IkReal x1504=(x1488*x1495);
IkReal x1505=((0.08712)*x1500);
IkReal x1506=((1.851147)*x1501);
IkReal x1507=(x1487*x1488);
IkReal x1508=((0.617049)*x1501);
IkReal x1509=(x1506+x1507+x1505+x1498+x1499+x1486);
IkReal x1510=(x1503+x1504+x1508+x1496+x1497+x1485);
IkReal x1511=((((0.405504)*x1491))+((x1487*x1494))+(((0.08712)*x1502))+(((1.851147)*sj4*x1491))+(((0.99)*x1489))+(((0.99)*x1490)));
IkReal x1512=((((0.33)*x1489))+(((0.33)*x1490))+(((0.135168)*x1491))+((x1494*x1495))+(((0.02904)*x1502))+(((0.617049)*sj4*x1491)));
j1evalpoly[0]=((-0.458151)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x1512))+x1510))))+(((-1.0)*x1512))+(((htj1*htj1)*(((-0.458151)+(((-1.0)*x1511))+x1509))))+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((0.462)*htj1))+(((0.924)*(htj1*htj1*htj1)))+x1510+(((htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x1511))+x1509)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1513=(cj1*cj4);
IkReal x1514=(r21*sj5);
IkReal x1515=((1.0)*r22);
IkReal x1516=(cj1*sj4);
IkReal x1517=(cj5*r20);
IkReal x1518=(cj4*sj1);
IkReal x1519=(sj1*sj4);
if( IKabs((((x1513*x1514))+(((-1.0)*x1515*x1516))+(((-1.0)*x1515*x1518))+(((-1.0)*x1513*x1517))+((x1517*x1519))+(((-1.0)*x1514*x1519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1513*x1515))+((x1516*x1517))+((x1517*x1518))+((r22*x1519))+(((-1.0)*x1514*x1518))+(((-1.0)*x1514*x1516)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1513*x1514))+(((-1.0)*x1515*x1516))+(((-1.0)*x1515*x1518))+(((-1.0)*x1513*x1517))+((x1517*x1519))+(((-1.0)*x1514*x1519))))+IKsqr(((((-1.0)*x1513*x1515))+((x1516*x1517))+((x1517*x1518))+((r22*x1519))+(((-1.0)*x1514*x1518))+(((-1.0)*x1514*x1516))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1513*x1514))+(((-1.0)*x1515*x1516))+(((-1.0)*x1515*x1518))+(((-1.0)*x1513*x1517))+((x1517*x1519))+(((-1.0)*x1514*x1519))), ((((-1.0)*x1513*x1515))+((x1516*x1517))+((x1517*x1518))+((r22*x1519))+(((-1.0)*x1514*x1518))+(((-1.0)*x1514*x1516))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1520=IKsin(j2);
IkReal x1521=IKcos(j2);
IkReal x1522=(r10*sj0);
IkReal x1523=(cj0*r00);
IkReal x1524=((1.0)*cj4);
IkReal x1525=((0.088)*sj5);
IkReal x1526=(r11*sj0);
IkReal x1527=((1.0)*sj1);
IkReal x1528=(cj5*r20);
IkReal x1529=((1.0)*sj4);
IkReal x1530=(r12*sj0);
IkReal x1531=(r21*sj5);
IkReal x1532=(cj0*r02);
IkReal x1533=((0.088)*cj5);
IkReal x1534=(cj1*x1521);
IkReal x1535=(cj5*x1529);
IkReal x1536=(cj1*x1520);
IkReal x1537=(sj1*x1520);
IkReal x1538=(cj0*r01*sj5);
IkReal x1539=(sj1*x1521);
IkReal x1540=(x1520*x1527);
IkReal x1541=((1.0)*x1534);
IkReal x1542=(x1540+x1541);
evalcond[0]=((((-1.0)*x1524*x1531))+((r22*sj4))+x1536+((cj4*x1528))+(((-1.0)*x1521*x1527)));
evalcond[1]=((((-1.0)*x1529*x1531))+(((-1.0)*r22*x1524))+((sj4*x1528))+(((-1.0)*x1542)));
evalcond[2]=((((-0.088)*x1528))+(((-0.0825)*x1539))+((r21*x1525))+pz+(((-0.384)*x1537))+(((-0.384)*x1534))+(((0.0825)*x1536))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=((((-1.0)*x1536))+((sj4*sj5*x1526))+x1539+(((-1.0)*x1522*x1535))+((cj4*x1530))+((cj4*x1532))+((sj4*x1538))+(((-1.0)*x1523*x1535)));
evalcond[4]=((((-1.0)*x1529*x1532))+(((-1.0)*x1529*x1530))+(((-1.0)*cj5*x1523*x1524))+(((-1.0)*cj5*x1522*x1524))+((cj4*x1538))+((cj4*sj5*x1526))+(((-1.0)*x1542)));
evalcond[5]=((((-1.0)*cj0*r01*x1525))+(((-1.0)*x1525*x1526))+((x1523*x1533))+((x1522*x1533))+(((-0.0825)*x1534))+(((-0.0825)*x1537))+(((0.384)*x1539))+(((-0.384)*x1536))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1543=((1.0)*cj5);
IkReal x1544=((1.0)*sj5);
IkReal x1545=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1543)));
j0eval[0]=x1545;
j0eval[1]=((IKabs(((((-1.0)*r10*x1544))+(((-1.0)*r11*x1543)))))+(IKabs(((((-1.0)*r01*x1543))+(((-1.0)*r00*x1544))))));
j0eval[2]=IKsign(x1545);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1546=(sj4*sj5);
IkReal x1547=((1.0)*cj5*sj4);
IkReal x1548=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x1548;
j0eval[1]=IKsign(x1548);
j0eval[2]=((IKabs(((((-1.0)*r00*x1547))+((r01*x1546))+((cj4*r02)))))+(IKabs((((r11*x1546))+(((-1.0)*r10*x1547))+((cj4*r12))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1549=((0.088)*sj5);
IkReal x1550=(rxp2_2*sj4);
IkReal x1551=(r20*sj4);
IkReal x1552=((0.088)*cj5);
IkReal x1553=(cj5*r21*sj4);
IkReal x1554=(cj4*rxp1_2*sj5);
IkReal x1555=(cj4*cj5*rxp0_2);
j0eval[0]=((((11.3636363636364)*x1550))+(((11.3636363636364)*x1555))+(((-1.0)*x1553))+(((-11.3636363636364)*x1554))+(((-1.0)*sj5*x1551)));
j0eval[1]=((IKabs(((((-1.0)*py))+(((-1.0)*r11*x1549))+((r10*x1552)))))+(IKabs((((r00*x1552))+(((-1.0)*px))+(((-1.0)*r01*x1549))))));
j0eval[2]=IKsign(((((-1.0)*x1554))+(((-1.0)*x1549*x1551))+x1550+x1555+(((-1.0)*r21*sj4*x1552))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1557 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1557)==0){
continue;
}
IkReal x1556=pow(x1557,-0.5);
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
IkReal gconst18=((-1.0)*(x1558.value));
IkReal gconst19=((-1.0)*r21*x1556);
IkReal gconst20=(r20*x1556);
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1559.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
IkReal x1560=((-1.0)*(x1562.value));
IkReal x1561=x1556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1560;
IkReal gconst18=x1560;
IkReal gconst19=((-1.0)*r21*x1561);
IkReal gconst20=(r20*x1561);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
IkReal x1563=((-1.0)*(x1565.value));
IkReal x1564=x1556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1563;
IkReal gconst18=x1563;
IkReal gconst19=((-1.0)*r21*x1564);
IkReal gconst20=(r20*x1564);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
IkReal x1566=((-1.0)*(x1568.value));
IkReal x1567=x1556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1566;
IkReal gconst18=x1566;
IkReal gconst19=((-1.0)*r21*x1567);
IkReal gconst20=(r20*x1567);
IkReal x1569=(rxp2_2*sj4);
IkReal x1570=x1556;
IkReal x1571=(cj4*r21*rxp1_2*x1570);
IkReal x1572=(cj4*r20*rxp0_2*x1570);
j0eval[0]=((((11.3636363636364)*x1572))+(((11.3636363636364)*x1571))+(((11.3636363636364)*x1569)));
j0eval[1]=IKsign((x1569+x1572+x1571));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1573=((0.088)*gconst20);
IkReal x1574=((0.088)*gconst19);
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x1574))+((cj4*gconst20*rxp0_2))+(((-1.0)*r21*sj4*x1573))+(((-1.0)*cj4*gconst19*rxp1_2))+((rxp2_2*sj4)))),-1);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x1574))+((r10*x1573)))),IkReal(((((-1.0)*px))+(((-1.0)*r01*x1574))+((r00*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1575.value)))+(x1576.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1577=IKsin(j0);
IkReal x1578=IKcos(j0);
IkReal x1579=((1.0)*sj4);
IkReal x1580=(gconst20*r10);
IkReal x1581=(cj4*r11);
IkReal x1582=((1.0)*cj4);
IkReal x1583=(r01*x1577);
IkReal x1584=(r12*x1578);
IkReal x1585=(gconst19*x1578);
IkReal x1586=(gconst19*x1577);
IkReal x1587=(cj4*gconst20*r00);
IkReal x1588=((1.0)*x1578);
IkReal x1589=(x1577*x1582);
IkReal x1590=(gconst20*r00*x1577);
evalcond[0]=((((-1.0)*r10*x1585))+(((-1.0)*gconst20*r11*x1588))+((gconst20*x1583))+((r00*x1586)));
evalcond[1]=((((-0.088)*r11*x1585))+(((-1.0)*py*x1588))+(((-0.088)*x1590))+((px*x1577))+(((0.088)*x1578*x1580))+(((0.088)*gconst19*x1583)));
evalcond[2]=(((cj4*x1584))+(((-1.0)*x1578*x1579*x1580))+((r11*sj4*x1585))+(((-1.0)*r02*x1589))+((sj4*x1590))+(((-1.0)*gconst19*x1579*x1583)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*x1582*x1583))+(((-1.0)*x1579*x1584))+((r02*sj4*x1577))+((x1577*x1587))+(((-1.0)*x1578*x1580*x1582))+((x1581*x1585)));
evalcond[4]=((((-1.0)*x1580*x1589))+(((-1.0)*r02*x1578*x1579))+(((-1.0)*gconst20*r00*x1578*x1582))+((cj4*r01*x1585))+(((-1.0)*r12*x1577*x1579))+((x1581*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1593.valid){
continue;
}
IkReal x1591=((-1.0)*(x1593.value));
IkReal x1592=x1556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1591;
IkReal gconst18=x1591;
IkReal gconst19=((-1.0)*r21*x1592);
IkReal gconst20=(r20*x1592);
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(cj4,-1);
if(!x1629.valid){
continue;
}
IkReal x1594=x1629.value;
IkReal x1595=((6000.0)*pz);
IkReal x1596=((2000.0)*pz);
IkReal x1597=((165.0)*cj0);
IkReal x1598=(cj4*r02);
IkReal x1599=(gconst19*r20);
IkReal x1600=(cj4*r22);
IkReal x1601=(gconst19*sj4);
IkReal x1602=((495.0)*gconst20);
IkReal x1603=((495.0)*cj0);
IkReal x1604=((165.0)*sj0);
IkReal x1605=(cj4*r12);
IkReal x1606=(r10*sj4);
IkReal x1607=((495.0)*sj0);
IkReal x1608=(r00*sj4);
IkReal x1609=((2304.0)*x1600);
IkReal x1610=((768.0)*x1600);
IkReal x1611=(gconst20*r20*sj4);
IkReal x1612=(r22*sj4*x1594);
IkReal x1613=((2304.0)*x1611);
IkReal x1614=((528.0)*x1612);
IkReal x1615=((2304.0)*r21*x1601);
IkReal x1616=((768.0)*x1611);
IkReal x1617=((176.0)*x1612);
IkReal x1618=((768.0)*r21*x1601);
IkReal x1619=(cj0*x1602*x1608);
IkReal x1620=(sj0*x1602*x1606);
IkReal x1621=((-632.0)+x1616);
IkReal x1622=((632.0)+x1613);
IkReal x1623=((-632.0)+x1613);
IkReal x1624=(x1620+x1619);
IkReal x1625=(x1614+x1615+x1609+x1595);
IkReal x1626=(x1618+x1617+x1610+x1596);
IkReal x1627=(x1625+((r21*x1602))+(((495.0)*x1599)));
IkReal x1628=(((r11*x1601*x1607))+x1625+((x1598*x1603))+((x1605*x1607))+((r01*x1601*x1603)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs((x1621+(((-1.0)*x1626))+(((-165.0)*gconst20*r21))+(((-165.0)*x1599)))))))+(((0.000378787878787879)*(IKabs((x1622+(((-1.0)*x1627)))))))+(((0.000378787878787879)*(IKabs((x1621+(((-1.0)*x1626))+((gconst20*x1597*x1608))+((gconst20*x1604*x1606))+(((-1.0)*r11*x1601*x1604))+(((-1.0)*r01*x1597*x1601))+(((-1.0)*x1597*x1598))+(((-1.0)*x1604*x1605)))))))+(((0.000378787878787879)*(IKabs((x1623+x1624+(((-1.0)*x1628)))))))+(((0.000378787878787879)*(IKabs((x1622+x1624+(((-1.0)*x1628)))))))+(((0.000378787878787879)*(IKabs((x1623+(((-1.0)*x1627))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(cj4,-1);
if(!x1657.valid){
continue;
}
IkReal x1630=x1657.value;
IkReal x1631=((632.0)*cj4);
IkReal x1632=cj4*cj4;
IkReal x1633=(r22*sj4);
IkReal x1634=(cj4*r21);
IkReal x1635=(cj4*pz);
IkReal x1636=(gconst19*sj4);
IkReal x1637=(cj4*r20);
IkReal x1638=((0.002)*x1630);
IkReal x1639=(gconst20*sj4);
IkReal x1640=((528.0)*x1633);
IkReal x1641=((6000.0)*x1635);
IkReal x1642=((2000.0)*x1635);
IkReal x1643=((176.0)*x1633);
IkReal x1644=(r22*x1632);
IkReal x1645=((495.0)*gconst20*x1634);
IkReal x1646=((495.0)*gconst19*x1637);
IkReal x1647=((2304.0)*x1644);
IkReal x1648=((165.0)*gconst19*x1637);
IkReal x1649=((165.0)*gconst20*x1634);
IkReal x1650=((768.0)*x1644);
IkReal x1651=((2304.0)*x1637*x1639);
IkReal x1652=((2304.0)*x1634*x1636);
IkReal x1653=((768.0)*x1637*x1639);
IkReal x1654=((768.0)*x1634*x1636);
IkReal x1655=(x1650+x1654+x1643+x1642+x1649+x1648);
IkReal x1656=(x1652+x1645+x1647+x1646+x1641+x1640);
op[0]=(x1638*((x1653+(((-1.0)*x1631))+(((-1.0)*x1655)))));
op[1]=-0.66;
op[2]=(x1638*((x1651+(((-1.0)*x1631))+(((-1.0)*x1656)))));
op[3]=-1.32;
op[4]=(x1638*((x1651+x1631+(((-1.0)*x1656)))));
op[5]=-0.66;
op[6]=(x1638*((x1653+x1631+(((-1.0)*x1655)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1658=cj4*cj4;
CheckValue<IkReal> x1700=IKPowWithIntegerCheck(cj4,-1);
if(!x1700.valid){
continue;
}
IkReal x1659=x1700.value;
IkReal x1660=((632.0)*cj4);
IkReal x1661=((165.0)*cj0);
IkReal x1662=((165.0)*sj0);
IkReal x1663=((495.0)*sj0);
IkReal x1664=(cj4*pz);
IkReal x1665=((0.002)*x1659);
IkReal x1666=(r22*sj4);
IkReal x1667=((495.0)*cj0);
IkReal x1668=((2000.0)*x1664);
IkReal x1669=((176.0)*x1666);
IkReal x1670=((528.0)*x1666);
IkReal x1671=((6000.0)*x1664);
IkReal x1672=(cj4*gconst19*sj4);
IkReal x1673=(r02*x1658);
IkReal x1674=(cj4*gconst20*sj4);
IkReal x1675=(r22*x1658);
IkReal x1676=(r12*x1658);
IkReal x1677=((768.0)*x1675);
IkReal x1678=((2304.0)*x1675);
IkReal x1679=(r10*x1674);
IkReal x1680=((768.0)*r20*x1674);
IkReal x1681=(x1661*x1673);
IkReal x1682=((768.0)*r21*x1672);
IkReal x1683=(x1662*x1676);
IkReal x1684=((2304.0)*r20*x1674);
IkReal x1685=(x1667*x1673);
IkReal x1686=(x1663*x1676);
IkReal x1687=((2304.0)*r21*x1672);
IkReal x1688=(r00*x1661*x1674);
IkReal x1689=(x1662*x1679);
IkReal x1690=(r01*x1661*x1672);
IkReal x1691=(r11*x1662*x1672);
IkReal x1692=(r00*x1667*x1674);
IkReal x1693=(x1663*x1679);
IkReal x1694=(r11*x1663*x1672);
IkReal x1695=(r01*x1667*x1672);
IkReal x1696=(x1692+x1693+x1684);
IkReal x1697=(x1680+x1689+x1688);
IkReal x1698=(x1678+x1670+x1671+x1694+x1695+x1685+x1687+x1686);
IkReal x1699=(x1669+x1668+x1677+x1690+x1691+x1681+x1683+x1682);
j1evalpoly[0]=((((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x1665*(((((-1.0)*x1699))+x1660+x1697))))+((x1665*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1699))+x1697+(((-1.0)*x1660))))))+((x1665*(htj1*htj1*htj1*htj1)*(((((-1.0)*x1698))+x1696+(((-1.0)*x1660))))))+((x1665*(htj1*htj1)*(((((-1.0)*x1698))+x1660+x1696)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1701=(sj1*sj4);
IkReal x1702=(gconst20*r20);
IkReal x1703=(gconst19*r20);
IkReal x1704=(cj1*sj4);
IkReal x1705=((1.0)*sj1);
IkReal x1706=(gconst20*r21);
IkReal x1707=((1.0)*cj4*r22);
IkReal x1708=((1.0)*gconst19*r21);
if( IKabs((((cj1*x1703))+((cj1*x1706))+(((-1.0)*cj4*r22*x1705))+((x1701*x1702))+(((-1.0)*x1701*x1708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x1707))+(((-1.0)*x1704*x1708))+(((-1.0)*x1705*x1706))+(((-1.0)*x1703*x1705))+((x1702*x1704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1703))+((cj1*x1706))+(((-1.0)*cj4*r22*x1705))+((x1701*x1702))+(((-1.0)*x1701*x1708))))+IKsqr(((((-1.0)*cj1*x1707))+(((-1.0)*x1704*x1708))+(((-1.0)*x1705*x1706))+(((-1.0)*x1703*x1705))+((x1702*x1704))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1703))+((cj1*x1706))+(((-1.0)*cj4*r22*x1705))+((x1701*x1702))+(((-1.0)*x1701*x1708))), ((((-1.0)*cj1*x1707))+(((-1.0)*x1704*x1708))+(((-1.0)*x1705*x1706))+(((-1.0)*x1703*x1705))+((x1702*x1704))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1709=IKsin(j2);
IkReal x1710=IKcos(j2);
IkReal x1711=(gconst19*sj4);
IkReal x1712=(r11*sj0);
IkReal x1713=((1.0)*sj0);
IkReal x1714=((0.088)*cj0);
IkReal x1715=(gconst20*r10);
IkReal x1716=((1.0)*cj0);
IkReal x1717=(sj1*x1710);
IkReal x1718=(cj1*x1710);
IkReal x1719=(gconst20*x1716);
IkReal x1720=((0.0825)*x1709);
IkReal x1721=(sj1*x1709);
IkReal x1722=(cj1*x1709);
IkReal x1723=((1.0)*x1722);
evalcond[0]=(x1717+((gconst20*r21))+((gconst19*r20))+(((-1.0)*x1723)));
evalcond[1]=(((gconst20*r20*sj4))+(((-1.0)*x1718))+(((-1.0)*r21*x1711))+(((-1.0)*cj4*r22))+(((-1.0)*x1721)));
evalcond[2]=(x1721+x1718+(((-1.0)*gconst19*r10*x1713))+(((-1.0)*gconst19*r00*x1716))+(((-1.0)*r01*x1719))+(((-1.0)*gconst20*x1712)));
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(cj4,-1);
if(!x1724.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x1724.value)))+(((-0.384)*x1718))+pz+((cj1*x1720))+(((-0.384)*x1721))+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-0.0825)*x1717)));
evalcond[4]=(x1717+(((-1.0)*r00*sj4*x1719))+(((-1.0)*sj4*x1713*x1715))+((cj0*r01*x1711))+((cj0*cj4*r02))+((x1711*x1712))+(((-1.0)*x1723))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*px*x1716))+(((0.384)*x1717))+(((0.088)*sj0*x1715))+((gconst20*r00*x1714))+(((-0.088)*gconst19*x1712))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.384)*x1722))+(((-1.0)*gconst19*r01*x1714))+(((-1.0)*sj1*x1720))+(((-1.0)*py*x1713))+(((-0.0825)*x1718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1725=((1.0)*gconst20);
IkReal x1726=((1.0)*gconst19);
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1725))+(((-1.0)*r10*x1726)))),IkReal(((((-1.0)*r01*x1725))+(((-1.0)*r00*x1726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(IKsign((((gconst19*r21*sj4))+(((-1.0)*r20*sj4*x1725))+((r22*((((cj4*(gconst20*gconst20)))+((cj4*(gconst19*gconst19))))))))),-1);
if(!x1728.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1727.value)+(((1.5707963267949)*(x1728.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1729=IKsin(j0);
IkReal x1730=IKcos(j0);
IkReal x1731=((1.0)*sj4);
IkReal x1732=(gconst20*r10);
IkReal x1733=(cj4*r11);
IkReal x1734=((1.0)*cj4);
IkReal x1735=(r01*x1729);
IkReal x1736=(r12*x1730);
IkReal x1737=(gconst19*x1730);
IkReal x1738=(gconst19*x1729);
IkReal x1739=(cj4*gconst20*r00);
IkReal x1740=((1.0)*x1730);
IkReal x1741=(x1729*x1734);
IkReal x1742=(gconst20*r00*x1729);
evalcond[0]=(((r00*x1738))+(((-1.0)*gconst20*r11*x1740))+((gconst20*x1735))+(((-1.0)*r10*x1737)));
evalcond[1]=((((0.088)*gconst19*x1735))+((px*x1729))+(((0.088)*x1730*x1732))+(((-1.0)*py*x1740))+(((-0.088)*x1742))+(((-0.088)*r11*x1737)));
evalcond[2]=((((-1.0)*gconst19*x1731*x1735))+(((-1.0)*x1730*x1731*x1732))+((sj4*x1742))+((cj4*x1736))+((r11*sj4*x1737))+(((-1.0)*r02*x1741)));
evalcond[3]=((1.0)+(((-1.0)*x1731*x1736))+((r02*sj4*x1729))+((x1729*x1739))+(((-1.0)*x1730*x1732*x1734))+((x1733*x1737))+(((-1.0)*gconst19*x1734*x1735)));
evalcond[4]=((((-1.0)*x1732*x1741))+(((-1.0)*r12*x1729*x1731))+((cj4*r01*x1737))+((x1733*x1738))+(((-1.0)*gconst20*r00*x1730*x1734))+(((-1.0)*r02*x1730*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1745 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1745.valid){
continue;
}
IkReal x1743=((-1.0)*(x1745.value));
IkReal x1744=x1556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1743;
IkReal gconst18=x1743;
IkReal gconst19=((-1.0)*r21*x1744);
IkReal gconst20=(r20*x1744);
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(cj4,-1);
if(!x1781.valid){
continue;
}
IkReal x1746=x1781.value;
IkReal x1747=((6000.0)*pz);
IkReal x1748=((2000.0)*pz);
IkReal x1749=((165.0)*cj0);
IkReal x1750=(cj4*r02);
IkReal x1751=(gconst19*r20);
IkReal x1752=(cj4*r22);
IkReal x1753=(gconst19*sj4);
IkReal x1754=((495.0)*gconst20);
IkReal x1755=((495.0)*cj0);
IkReal x1756=((165.0)*sj0);
IkReal x1757=(cj4*r12);
IkReal x1758=(r10*sj4);
IkReal x1759=((495.0)*sj0);
IkReal x1760=(r00*sj4);
IkReal x1761=((2304.0)*x1752);
IkReal x1762=((768.0)*x1752);
IkReal x1763=(gconst20*r20*sj4);
IkReal x1764=(r22*sj4*x1746);
IkReal x1765=((2304.0)*x1763);
IkReal x1766=((528.0)*x1764);
IkReal x1767=((2304.0)*r21*x1753);
IkReal x1768=((768.0)*x1763);
IkReal x1769=((176.0)*x1764);
IkReal x1770=((768.0)*r21*x1753);
IkReal x1771=(cj0*x1754*x1760);
IkReal x1772=(sj0*x1754*x1758);
IkReal x1773=((-632.0)+x1768);
IkReal x1774=((632.0)+x1765);
IkReal x1775=((-632.0)+x1765);
IkReal x1776=(x1771+x1772);
IkReal x1777=(x1761+x1766+x1767+x1747);
IkReal x1778=(x1769+x1762+x1770+x1748);
IkReal x1779=(x1777+(((495.0)*x1751))+((r21*x1754)));
IkReal x1780=(x1777+((x1750*x1755))+((r01*x1753*x1755))+((r11*x1753*x1759))+((x1757*x1759)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs((x1775+(((-1.0)*x1779)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x1780))+x1775+x1776)))))+(((0.000378787878787879)*(IKabs((x1773+(((-165.0)*x1751))+(((-1.0)*x1778))+(((-165.0)*gconst20*r21)))))))+(((0.000378787878787879)*(IKabs((x1774+(((-1.0)*x1779)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*r11*x1753*x1756))+(((-1.0)*x1756*x1757))+x1773+((gconst20*x1749*x1760))+(((-1.0)*x1749*x1750))+(((-1.0)*r01*x1749*x1753))+((gconst20*x1756*x1758))+(((-1.0)*x1778)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x1780))+x1774+x1776))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(cj4,-1);
if(!x1809.valid){
continue;
}
IkReal x1782=x1809.value;
IkReal x1783=((632.0)*cj4);
IkReal x1784=cj4*cj4;
IkReal x1785=(r22*sj4);
IkReal x1786=(cj4*r21);
IkReal x1787=(cj4*pz);
IkReal x1788=(gconst19*sj4);
IkReal x1789=(cj4*r20);
IkReal x1790=((0.002)*x1782);
IkReal x1791=(gconst20*sj4);
IkReal x1792=((528.0)*x1785);
IkReal x1793=((6000.0)*x1787);
IkReal x1794=((2000.0)*x1787);
IkReal x1795=((176.0)*x1785);
IkReal x1796=(r22*x1784);
IkReal x1797=((495.0)*gconst20*x1786);
IkReal x1798=((495.0)*gconst19*x1789);
IkReal x1799=((2304.0)*x1796);
IkReal x1800=((165.0)*gconst19*x1789);
IkReal x1801=((165.0)*gconst20*x1786);
IkReal x1802=((768.0)*x1796);
IkReal x1803=((2304.0)*x1789*x1791);
IkReal x1804=((2304.0)*x1786*x1788);
IkReal x1805=((768.0)*x1789*x1791);
IkReal x1806=((768.0)*x1786*x1788);
IkReal x1807=(x1795+x1794+x1806+x1802+x1801+x1800);
IkReal x1808=(x1799+x1798+x1793+x1792+x1797+x1804);
op[0]=(x1790*(((((-1.0)*x1783))+(((-1.0)*x1807))+x1805)));
op[1]=-0.66;
op[2]=(x1790*(((((-1.0)*x1783))+(((-1.0)*x1808))+x1803)));
op[3]=-1.32;
op[4]=(x1790*((x1783+(((-1.0)*x1808))+x1803)));
op[5]=-0.66;
op[6]=(x1790*((x1783+(((-1.0)*x1807))+x1805)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1810=cj4*cj4;
CheckValue<IkReal> x1852=IKPowWithIntegerCheck(cj4,-1);
if(!x1852.valid){
continue;
}
IkReal x1811=x1852.value;
IkReal x1812=((632.0)*cj4);
IkReal x1813=((165.0)*cj0);
IkReal x1814=((165.0)*sj0);
IkReal x1815=((495.0)*sj0);
IkReal x1816=(cj4*pz);
IkReal x1817=((0.002)*x1811);
IkReal x1818=(r22*sj4);
IkReal x1819=((495.0)*cj0);
IkReal x1820=((2000.0)*x1816);
IkReal x1821=((176.0)*x1818);
IkReal x1822=((528.0)*x1818);
IkReal x1823=((6000.0)*x1816);
IkReal x1824=(cj4*gconst19*sj4);
IkReal x1825=(r02*x1810);
IkReal x1826=(cj4*gconst20*sj4);
IkReal x1827=(r22*x1810);
IkReal x1828=(r12*x1810);
IkReal x1829=((768.0)*x1827);
IkReal x1830=((2304.0)*x1827);
IkReal x1831=(r10*x1826);
IkReal x1832=((768.0)*r20*x1826);
IkReal x1833=(x1813*x1825);
IkReal x1834=((768.0)*r21*x1824);
IkReal x1835=(x1814*x1828);
IkReal x1836=((2304.0)*r20*x1826);
IkReal x1837=(x1819*x1825);
IkReal x1838=(x1815*x1828);
IkReal x1839=((2304.0)*r21*x1824);
IkReal x1840=(r00*x1813*x1826);
IkReal x1841=(x1814*x1831);
IkReal x1842=(r01*x1813*x1824);
IkReal x1843=(r11*x1814*x1824);
IkReal x1844=(r00*x1819*x1826);
IkReal x1845=(x1815*x1831);
IkReal x1846=(r11*x1815*x1824);
IkReal x1847=(r01*x1819*x1824);
IkReal x1848=(x1845+x1844+x1836);
IkReal x1849=(x1841+x1840+x1832);
IkReal x1850=(x1823+x1822+x1847+x1846+x1830+x1837+x1838+x1839);
IkReal x1851=(x1829+x1821+x1820+x1843+x1842+x1833+x1834+x1835);
j1evalpoly[0]=((((-1.32)*(htj1*htj1*htj1)))+((x1817*(htj1*htj1*htj1*htj1)*(((((-1.0)*x1812))+x1848+(((-1.0)*x1850))))))+((x1817*((x1849+x1812+(((-1.0)*x1851))))))+((x1817*(htj1*htj1)*((x1848+x1812+(((-1.0)*x1850))))))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x1817*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1812))+x1849+(((-1.0)*x1851)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1853=(sj1*sj4);
IkReal x1854=(gconst20*r20);
IkReal x1855=(gconst19*r20);
IkReal x1856=(cj1*sj4);
IkReal x1857=((1.0)*sj1);
IkReal x1858=(gconst20*r21);
IkReal x1859=((1.0)*cj4*r22);
IkReal x1860=((1.0)*gconst19*r21);
if( IKabs(((((-1.0)*x1853*x1860))+(((-1.0)*cj4*r22*x1857))+((cj1*x1858))+((cj1*x1855))+((x1853*x1854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1856*x1860))+(((-1.0)*x1857*x1858))+((x1854*x1856))+(((-1.0)*x1855*x1857))+(((-1.0)*cj1*x1859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1853*x1860))+(((-1.0)*cj4*r22*x1857))+((cj1*x1858))+((cj1*x1855))+((x1853*x1854))))+IKsqr(((((-1.0)*x1856*x1860))+(((-1.0)*x1857*x1858))+((x1854*x1856))+(((-1.0)*x1855*x1857))+(((-1.0)*cj1*x1859))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1853*x1860))+(((-1.0)*cj4*r22*x1857))+((cj1*x1858))+((cj1*x1855))+((x1853*x1854))), ((((-1.0)*x1856*x1860))+(((-1.0)*x1857*x1858))+((x1854*x1856))+(((-1.0)*x1855*x1857))+(((-1.0)*cj1*x1859))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1861=IKsin(j2);
IkReal x1862=IKcos(j2);
IkReal x1863=(gconst19*sj4);
IkReal x1864=(r11*sj0);
IkReal x1865=((1.0)*sj0);
IkReal x1866=((0.088)*cj0);
IkReal x1867=(gconst20*r10);
IkReal x1868=((1.0)*cj0);
IkReal x1869=(sj1*x1862);
IkReal x1870=(cj1*x1862);
IkReal x1871=(gconst20*x1868);
IkReal x1872=((0.0825)*x1861);
IkReal x1873=(sj1*x1861);
IkReal x1874=(cj1*x1861);
IkReal x1875=((1.0)*x1874);
evalcond[0]=((((-1.0)*x1875))+((gconst20*r21))+((gconst19*r20))+x1869);
evalcond[1]=(((gconst20*r20*sj4))+(((-1.0)*r21*x1863))+(((-1.0)*x1873))+(((-1.0)*x1870))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*gconst19*r10*x1865))+(((-1.0)*gconst19*r00*x1868))+(((-1.0)*r01*x1871))+x1873+x1870+(((-1.0)*gconst20*x1864)));
CheckValue<IkReal> x1876=IKPowWithIntegerCheck(cj4,-1);
if(!x1876.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x1876.value)))+(((-0.384)*x1870))+(((-0.384)*x1873))+pz+((cj1*x1872))+(((-0.0825)*x1869))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*x1875))+(((-1.0)*sj4*x1865*x1867))+(((-1.0)*r00*sj4*x1871))+((cj0*cj4*r02))+((x1863*x1864))+((cj0*r01*x1863))+x1869+((cj4*r12*sj0)));
evalcond[5]=((((0.384)*x1869))+(((-1.0)*px*x1868))+(((-1.0)*sj1*x1872))+(((0.088)*sj0*x1867))+(((-0.088)*gconst19*x1864))+(((-0.384)*x1874))+(((-0.0825)*x1870))+((gconst20*r00*x1866))+(((0.0825)*cj1))+(((-1.0)*py*x1865))+(((0.316)*sj1))+(((-1.0)*gconst19*r01*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1877=(gconst19*sj4);
IkReal x1878=((1.0)*gconst20*sj4);
CheckValue<IkReal> x1879 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1878))+((cj4*r12))+((r11*x1877)))),IkReal(((((-1.0)*r00*x1878))+((r01*x1877))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1879.valid){
continue;
}
CheckValue<IkReal> x1880=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x1880.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1879.value)+(((1.5707963267949)*(x1880.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1881=IKsin(j0);
IkReal x1882=IKcos(j0);
IkReal x1883=((1.0)*sj4);
IkReal x1884=(gconst20*r10);
IkReal x1885=(cj4*r11);
IkReal x1886=((1.0)*cj4);
IkReal x1887=(r01*x1881);
IkReal x1888=(r12*x1882);
IkReal x1889=(gconst19*x1882);
IkReal x1890=(gconst19*x1881);
IkReal x1891=(cj4*gconst20*r00);
IkReal x1892=((1.0)*x1882);
IkReal x1893=(x1881*x1886);
IkReal x1894=(gconst20*r00*x1881);
evalcond[0]=(((r00*x1890))+(((-1.0)*r10*x1889))+((gconst20*x1887))+(((-1.0)*gconst20*r11*x1892)));
evalcond[1]=((((0.088)*gconst19*x1887))+(((-0.088)*x1894))+((px*x1881))+(((-0.088)*r11*x1889))+(((0.088)*x1882*x1884))+(((-1.0)*py*x1892)));
evalcond[2]=((((-1.0)*r02*x1893))+((cj4*x1888))+(((-1.0)*gconst19*x1883*x1887))+((r11*sj4*x1889))+((sj4*x1894))+(((-1.0)*x1882*x1883*x1884)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*x1886*x1887))+(((-1.0)*x1883*x1888))+((x1881*x1891))+((r02*sj4*x1881))+((x1885*x1889))+(((-1.0)*x1882*x1884*x1886)));
evalcond[4]=(((x1885*x1890))+(((-1.0)*r02*x1882*x1883))+((cj4*r01*x1889))+(((-1.0)*gconst20*r00*x1882*x1886))+(((-1.0)*x1884*x1893))+(((-1.0)*r12*x1881*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
IkReal x1895=((-1.0)*(x1897.value));
IkReal x1896=x1556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1895;
IkReal gconst18=x1895;
IkReal gconst19=((-1.0)*r21*x1896);
IkReal gconst20=(r20*x1896);
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(cj4,-1);
if(!x1933.valid){
continue;
}
IkReal x1898=x1933.value;
IkReal x1899=((6000.0)*pz);
IkReal x1900=((2000.0)*pz);
IkReal x1901=((165.0)*cj0);
IkReal x1902=(cj4*r02);
IkReal x1903=(gconst19*r20);
IkReal x1904=(cj4*r22);
IkReal x1905=(gconst19*sj4);
IkReal x1906=((495.0)*gconst20);
IkReal x1907=((495.0)*cj0);
IkReal x1908=((165.0)*sj0);
IkReal x1909=(cj4*r12);
IkReal x1910=(r10*sj4);
IkReal x1911=((495.0)*sj0);
IkReal x1912=(r00*sj4);
IkReal x1913=((2304.0)*x1904);
IkReal x1914=((768.0)*x1904);
IkReal x1915=(gconst20*r20*sj4);
IkReal x1916=(r22*sj4*x1898);
IkReal x1917=((2304.0)*x1915);
IkReal x1918=((528.0)*x1916);
IkReal x1919=((2304.0)*r21*x1905);
IkReal x1920=((768.0)*x1915);
IkReal x1921=((176.0)*x1916);
IkReal x1922=((768.0)*r21*x1905);
IkReal x1923=(cj0*x1906*x1912);
IkReal x1924=(sj0*x1906*x1910);
IkReal x1925=((-632.0)+x1920);
IkReal x1926=((632.0)+x1917);
IkReal x1927=((-632.0)+x1917);
IkReal x1928=(x1923+x1924);
IkReal x1929=(x1919+x1918+x1913+x1899);
IkReal x1930=(x1921+x1922+x1900+x1914);
IkReal x1931=(((r21*x1906))+(((495.0)*x1903))+x1929);
IkReal x1932=(((r11*x1905*x1911))+((r01*x1905*x1907))+x1929+((x1909*x1911))+((x1902*x1907)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((((-165.0)*x1903))+x1925+(((-165.0)*gconst20*r21))+(((-1.0)*x1930)))))))+(((0.000378787878787879)*(IKabs((x1926+x1928+(((-1.0)*x1932)))))))+(((0.000378787878787879)*(IKabs((x1926+(((-1.0)*x1931)))))))+(((0.000378787878787879)*(IKabs((x1927+x1928+(((-1.0)*x1932)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*r01*x1901*x1905))+(((-1.0)*x1901*x1902))+(((-1.0)*r11*x1905*x1908))+x1925+((gconst20*x1908*x1910))+(((-1.0)*x1908*x1909))+((gconst20*x1901*x1912))+(((-1.0)*x1930)))))))+(((0.000378787878787879)*(IKabs((x1927+(((-1.0)*x1931))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1961=IKPowWithIntegerCheck(cj4,-1);
if(!x1961.valid){
continue;
}
IkReal x1934=x1961.value;
IkReal x1935=((632.0)*cj4);
IkReal x1936=cj4*cj4;
IkReal x1937=(r22*sj4);
IkReal x1938=(cj4*r21);
IkReal x1939=(cj4*pz);
IkReal x1940=(gconst19*sj4);
IkReal x1941=(cj4*r20);
IkReal x1942=((0.002)*x1934);
IkReal x1943=(gconst20*sj4);
IkReal x1944=((528.0)*x1937);
IkReal x1945=((6000.0)*x1939);
IkReal x1946=((2000.0)*x1939);
IkReal x1947=((176.0)*x1937);
IkReal x1948=(r22*x1936);
IkReal x1949=((495.0)*gconst20*x1938);
IkReal x1950=((495.0)*gconst19*x1941);
IkReal x1951=((2304.0)*x1948);
IkReal x1952=((165.0)*gconst19*x1941);
IkReal x1953=((165.0)*gconst20*x1938);
IkReal x1954=((768.0)*x1948);
IkReal x1955=((2304.0)*x1941*x1943);
IkReal x1956=((2304.0)*x1938*x1940);
IkReal x1957=((768.0)*x1941*x1943);
IkReal x1958=((768.0)*x1938*x1940);
IkReal x1959=(x1946+x1947+x1954+x1953+x1952+x1958);
IkReal x1960=(x1949+x1944+x1945+x1956+x1951+x1950);
op[0]=(x1942*(((((-1.0)*x1959))+x1957+(((-1.0)*x1935)))));
op[1]=-0.66;
op[2]=(x1942*(((((-1.0)*x1960))+x1955+(((-1.0)*x1935)))));
op[3]=-1.32;
op[4]=(x1942*(((((-1.0)*x1960))+x1935+x1955)));
op[5]=-0.66;
op[6]=(x1942*(((((-1.0)*x1959))+x1935+x1957)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1962=cj4*cj4;
CheckValue<IkReal> x2004=IKPowWithIntegerCheck(cj4,-1);
if(!x2004.valid){
continue;
}
IkReal x1963=x2004.value;
IkReal x1964=((632.0)*cj4);
IkReal x1965=((165.0)*cj0);
IkReal x1966=((165.0)*sj0);
IkReal x1967=((495.0)*sj0);
IkReal x1968=(cj4*pz);
IkReal x1969=((0.002)*x1963);
IkReal x1970=(r22*sj4);
IkReal x1971=((495.0)*cj0);
IkReal x1972=((2000.0)*x1968);
IkReal x1973=((176.0)*x1970);
IkReal x1974=((528.0)*x1970);
IkReal x1975=((6000.0)*x1968);
IkReal x1976=(cj4*gconst19*sj4);
IkReal x1977=(r02*x1962);
IkReal x1978=(cj4*gconst20*sj4);
IkReal x1979=(r22*x1962);
IkReal x1980=(r12*x1962);
IkReal x1981=((768.0)*x1979);
IkReal x1982=((2304.0)*x1979);
IkReal x1983=(r10*x1978);
IkReal x1984=((768.0)*r20*x1978);
IkReal x1985=(x1965*x1977);
IkReal x1986=((768.0)*r21*x1976);
IkReal x1987=(x1966*x1980);
IkReal x1988=((2304.0)*r20*x1978);
IkReal x1989=(x1971*x1977);
IkReal x1990=(x1967*x1980);
IkReal x1991=((2304.0)*r21*x1976);
IkReal x1992=(r00*x1965*x1978);
IkReal x1993=(x1966*x1983);
IkReal x1994=(r01*x1965*x1976);
IkReal x1995=(r11*x1966*x1976);
IkReal x1996=(r00*x1971*x1978);
IkReal x1997=(x1967*x1983);
IkReal x1998=(r11*x1967*x1976);
IkReal x1999=(r01*x1971*x1976);
IkReal x2000=(x1988+x1997+x1996);
IkReal x2001=(x1984+x1993+x1992);
IkReal x2002=(x1982+x1989+x1991+x1990+x1999+x1998+x1975+x1974);
IkReal x2003=(x1986+x1987+x1985+x1981+x1995+x1994+x1973+x1972);
j1evalpoly[0]=((((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x1969*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2001+(((-1.0)*x1964))+(((-1.0)*x2003))))))+((x1969*(htj1*htj1)*((x2000+x1964+(((-1.0)*x2002))))))+((x1969*(htj1*htj1*htj1*htj1)*((x2000+(((-1.0)*x1964))+(((-1.0)*x2002))))))+((x1969*((x2001+x1964+(((-1.0)*x2003)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2005=(sj1*sj4);
IkReal x2006=(gconst20*r20);
IkReal x2007=(gconst19*r20);
IkReal x2008=(cj1*sj4);
IkReal x2009=((1.0)*sj1);
IkReal x2010=(gconst20*r21);
IkReal x2011=((1.0)*cj4*r22);
IkReal x2012=((1.0)*gconst19*r21);
if( IKabs((((cj1*x2010))+(((-1.0)*x2005*x2012))+(((-1.0)*cj4*r22*x2009))+((x2005*x2006))+((cj1*x2007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2008*x2012))+(((-1.0)*x2009*x2010))+(((-1.0)*x2007*x2009))+(((-1.0)*cj1*x2011))+((x2006*x2008)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2010))+(((-1.0)*x2005*x2012))+(((-1.0)*cj4*r22*x2009))+((x2005*x2006))+((cj1*x2007))))+IKsqr(((((-1.0)*x2008*x2012))+(((-1.0)*x2009*x2010))+(((-1.0)*x2007*x2009))+(((-1.0)*cj1*x2011))+((x2006*x2008))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2010))+(((-1.0)*x2005*x2012))+(((-1.0)*cj4*r22*x2009))+((x2005*x2006))+((cj1*x2007))), ((((-1.0)*x2008*x2012))+(((-1.0)*x2009*x2010))+(((-1.0)*x2007*x2009))+(((-1.0)*cj1*x2011))+((x2006*x2008))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2013=IKsin(j2);
IkReal x2014=IKcos(j2);
IkReal x2015=(gconst19*sj4);
IkReal x2016=(r11*sj0);
IkReal x2017=((1.0)*sj0);
IkReal x2018=((0.088)*cj0);
IkReal x2019=(gconst20*r10);
IkReal x2020=((1.0)*cj0);
IkReal x2021=(sj1*x2014);
IkReal x2022=(cj1*x2014);
IkReal x2023=(gconst20*x2020);
IkReal x2024=((0.0825)*x2013);
IkReal x2025=(sj1*x2013);
IkReal x2026=(cj1*x2013);
IkReal x2027=((1.0)*x2026);
evalcond[0]=(x2021+((gconst20*r21))+((gconst19*r20))+(((-1.0)*x2027)));
evalcond[1]=(((gconst20*r20*sj4))+(((-1.0)*r21*x2015))+(((-1.0)*x2022))+(((-1.0)*x2025))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*gconst19*r10*x2017))+(((-1.0)*r01*x2023))+x2025+x2022+(((-1.0)*gconst20*x2016))+(((-1.0)*gconst19*r00*x2020)));
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(cj4,-1);
if(!x2028.valid){
continue;
}
evalcond[3]=((((-0.384)*x2025))+(((-0.384)*x2022))+(((0.088)*r22*sj4*(x2028.value)))+(((-0.0825)*x2021))+pz+((cj1*x2024))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((x2015*x2016))+((cj0*r01*x2015))+x2021+(((-1.0)*sj4*x2017*x2019))+((cj0*cj4*r02))+(((-1.0)*x2027))+(((-1.0)*r00*sj4*x2023))+((cj4*r12*sj0)));
evalcond[5]=((((-0.384)*x2026))+(((-1.0)*gconst19*r01*x2018))+((gconst20*r00*x2018))+(((0.088)*sj0*x2019))+(((-1.0)*py*x2017))+(((-1.0)*px*x2020))+(((-1.0)*sj1*x2024))+(((-0.0825)*x2022))+(((0.0825)*cj1))+(((0.384)*x2021))+(((0.316)*sj1))+(((-0.088)*gconst19*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2030 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2030)==0){
continue;
}
IkReal x2029=pow(x2030,-0.5);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x2031.value))));
IkReal gconst22=((1.0)*r21*x2029);
IkReal gconst23=((-1.0)*r20*x2029);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2032.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
IkReal x2033=((1.0)*(x2035.value));
IkReal x2034=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2033)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2033)));
IkReal gconst22=((1.0)*r21*x2034);
IkReal gconst23=((-1.0)*r20*x2034);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
IkReal x2036=((1.0)*(x2038.value));
IkReal x2037=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2036)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2036)));
IkReal gconst22=((1.0)*r21*x2037);
IkReal gconst23=((-1.0)*r20*x2037);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
IkReal x2039=((1.0)*(x2041.value));
IkReal x2040=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2039)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2039)));
IkReal gconst22=((1.0)*r21*x2040);
IkReal gconst23=((-1.0)*r20*x2040);
IkReal x2042=(r21*rxp1_2);
IkReal x2043=(rxp2_2*sj4);
IkReal x2044=(r20*rxp0_2);
IkReal x2045=x2029;
IkReal x2046=(cj4*x2045);
j0eval[0]=((((-11.3636363636364)*x2044*x2046))+(((-11.3636363636364)*x2042*x2046))+(((11.3636363636364)*x2043)));
j0eval[1]=IKsign(((((-1.0)*x2042*x2046))+x2043+(((-1.0)*x2044*x2046))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2047=((0.088)*gconst22);
IkReal x2048=((0.088)*gconst23);
CheckValue<IkReal> x2049 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x2048))+(((-1.0)*r11*x2047)))),IkReal(((((-1.0)*px))+(((-1.0)*r01*x2047))+((r00*x2048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2049.valid){
continue;
}
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign((((cj4*gconst23*rxp0_2))+(((-1.0)*r20*sj4*x2047))+(((-1.0)*r21*sj4*x2048))+(((-1.0)*cj4*gconst22*rxp1_2))+((rxp2_2*sj4)))),-1);
if(!x2050.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2049.value)+(((1.5707963267949)*(x2050.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2051=IKsin(j0);
IkReal x2052=IKcos(j0);
IkReal x2053=(gconst22*r01);
IkReal x2054=((1.0)*r10);
IkReal x2055=((1.0)*cj4);
IkReal x2056=((0.088)*gconst23);
IkReal x2057=(cj4*r11);
IkReal x2058=(gconst22*x2052);
IkReal x2059=(r00*x2051);
IkReal x2060=(sj4*x2052);
IkReal x2061=(cj4*x2052);
IkReal x2062=(gconst23*x2052);
IkReal x2063=(r02*x2051);
IkReal x2064=((1.0)*sj4*x2051);
IkReal x2065=(cj4*gconst23*x2051);
evalcond[0]=((((-1.0)*x2054*x2058))+((gconst22*x2059))+((gconst23*r01*x2051))+(((-1.0)*r11*x2062)));
evalcond[1]=((((-1.0)*py*x2052))+(((-0.088)*r11*x2058))+((r10*x2052*x2056))+((px*x2051))+(((-1.0)*x2056*x2059))+(((0.088)*x2051*x2053)));
evalcond[2]=(((gconst23*sj4*x2059))+((r11*sj4*x2058))+((r12*x2061))+(((-1.0)*x2053*x2064))+(((-1.0)*x2055*x2063))+(((-1.0)*gconst23*x2054*x2060)));
evalcond[3]=((1.0)+(((-1.0)*x2051*x2053*x2055))+((cj4*gconst23*x2059))+((sj4*x2063))+(((-1.0)*r12*x2060))+((x2057*x2058))+(((-1.0)*gconst23*x2054*x2061)));
evalcond[4]=((((-1.0)*r12*x2064))+(((-1.0)*r02*x2060))+(((-1.0)*r00*x2055*x2062))+(((-1.0)*x2054*x2065))+((gconst22*x2051*x2057))+((x2053*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
IkReal x2066=((1.0)*(x2068.value));
IkReal x2067=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2066)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2066)));
IkReal gconst22=((1.0)*r21*x2067);
IkReal gconst23=((-1.0)*r20*x2067);
IkReal x2069=((6000.0)*pz);
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(cj4,-1);
if(!x2102.valid){
continue;
}
IkReal x2070=x2102.value;
IkReal x2071=((2000.0)*pz);
IkReal x2072=((165.0)*cj0);
IkReal x2073=(cj4*r02);
IkReal x2074=(gconst22*sj4);
IkReal x2075=(cj4*r22);
IkReal x2076=(gconst23*sj4);
IkReal x2077=((495.0)*cj0);
IkReal x2078=(gconst23*r21);
IkReal x2079=((495.0)*sj0);
IkReal x2080=((165.0)*sj0);
IkReal x2081=(gconst22*r20);
IkReal x2082=(cj4*r12);
IkReal x2083=((2304.0)*x2075);
IkReal x2084=((768.0)*x2075);
IkReal x2085=(r22*sj4*x2070);
IkReal x2086=((2304.0)*r20*x2076);
IkReal x2087=((528.0)*x2085);
IkReal x2088=((2304.0)*r21*x2074);
IkReal x2089=((768.0)*r20*x2076);
IkReal x2090=((176.0)*x2085);
IkReal x2091=((768.0)*r21*x2074);
IkReal x2092=(r10*x2076*x2079);
IkReal x2093=(r00*x2076*x2077);
IkReal x2094=((632.0)+x2086);
IkReal x2095=((-632.0)+x2086);
IkReal x2096=((-632.0)+x2089);
IkReal x2097=(x2093+x2092);
IkReal x2098=(x2069+x2088+x2083+x2087);
IkReal x2099=(x2071+x2091+x2090+x2084);
IkReal x2100=((((495.0)*x2081))+x2098+(((495.0)*x2078)));
IkReal x2101=(x2098+((r01*x2074*x2077))+((r11*x2074*x2079))+((x2079*x2082))+((x2073*x2077)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((((-1.0)*x2100))+x2095)))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2100))+x2094)))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2101))+x2094+x2097)))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2099))+(((-1.0)*r01*x2072*x2074))+x2096+((r00*x2072*x2076))+(((-1.0)*r11*x2074*x2080))+(((-1.0)*x2080*x2082))+(((-1.0)*x2072*x2073))+((r10*x2076*x2080)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2101))+x2095+x2097)))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2099))+x2096+(((-165.0)*x2081))+(((-165.0)*x2078))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2131=IKPowWithIntegerCheck(cj4,-1);
if(!x2131.valid){
continue;
}
IkReal x2103=x2131.value;
IkReal x2104=((632.0)*cj4);
IkReal x2105=cj4*cj4;
IkReal x2106=(r22*sj4);
IkReal x2107=(cj4*pz);
IkReal x2108=(cj4*r21);
IkReal x2109=((2304.0)*sj4);
IkReal x2110=((0.002)*x2103);
IkReal x2111=((768.0)*sj4);
IkReal x2112=((528.0)*x2106);
IkReal x2113=((6000.0)*x2107);
IkReal x2114=((2000.0)*x2107);
IkReal x2115=((176.0)*x2106);
IkReal x2116=(r22*x2105);
IkReal x2117=(cj4*gconst23*r20);
IkReal x2118=(cj4*gconst22*r20);
IkReal x2119=((495.0)*x2118);
IkReal x2120=((495.0)*gconst23*x2108);
IkReal x2121=((2304.0)*x2116);
IkReal x2122=((165.0)*gconst23*x2108);
IkReal x2123=((165.0)*x2118);
IkReal x2124=((768.0)*x2116);
IkReal x2125=(x2109*x2117);
IkReal x2126=(gconst22*x2108*x2109);
IkReal x2127=(x2111*x2117);
IkReal x2128=(gconst22*x2108*x2111);
IkReal x2129=(x2123+x2122+x2124+x2128+x2114+x2115);
IkReal x2130=(x2121+x2120+x2126+x2119+x2112+x2113);
op[0]=(x2110*(((((-1.0)*x2104))+x2127+(((-1.0)*x2129)))));
op[1]=-0.66;
op[2]=(x2110*(((((-1.0)*x2130))+(((-1.0)*x2104))+x2125)));
op[3]=-1.32;
op[4]=(x2110*(((((-1.0)*x2130))+x2125+x2104)));
op[5]=-0.66;
op[6]=(x2110*((x2127+x2104+(((-1.0)*x2129)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2132=cj4*cj4;
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(cj4,-1);
if(!x2175.valid){
continue;
}
IkReal x2133=x2175.value;
IkReal x2134=((632.0)*cj4);
IkReal x2135=((165.0)*cj0);
IkReal x2136=((0.002)*x2133);
IkReal x2137=((495.0)*sj0);
IkReal x2138=(cj4*pz);
IkReal x2139=((495.0)*cj0);
IkReal x2140=(r22*sj4);
IkReal x2141=((165.0)*sj0);
IkReal x2142=((528.0)*x2140);
IkReal x2143=((6000.0)*x2138);
IkReal x2144=((2000.0)*x2138);
IkReal x2145=((176.0)*x2140);
IkReal x2146=(cj4*gconst22*sj4);
IkReal x2147=(r12*x2132);
IkReal x2148=(r22*x2132);
IkReal x2149=(r02*x2132);
IkReal x2150=((2304.0)*x2148);
IkReal x2151=((768.0)*x2148);
IkReal x2152=(cj4*gconst23*r20*sj4);
IkReal x2153=(cj4*gconst23*r10*sj4);
IkReal x2154=(cj4*gconst23*r00*sj4);
IkReal x2155=((2304.0)*x2152);
IkReal x2156=(x2139*x2149);
IkReal x2157=((2304.0)*r21*x2146);
IkReal x2158=(x2137*x2147);
IkReal x2159=((768.0)*x2152);
IkReal x2160=((768.0)*r21*x2146);
IkReal x2161=(x2135*x2149);
IkReal x2162=(x2141*x2147);
IkReal x2163=(x2139*x2154);
IkReal x2164=(x2137*x2153);
IkReal x2165=(r01*x2139*x2146);
IkReal x2166=(r11*x2137*x2146);
IkReal x2167=(x2141*x2153);
IkReal x2168=(x2135*x2154);
IkReal x2169=(r01*x2135*x2146);
IkReal x2170=(r11*x2141*x2146);
IkReal x2171=(x2168+x2167+x2159);
IkReal x2172=(x2164+x2163+x2155);
IkReal x2173=(x2170+x2169+x2161+x2160+x2162+x2151+x2145+x2144);
IkReal x2174=(x2165+x2166+x2156+x2157+x2150+x2158+x2143+x2142);
j1evalpoly[0]=(((x2136*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2134))+x2171+(((-1.0)*x2173))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x2136*(htj1*htj1)*((x2172+x2134+(((-1.0)*x2174))))))+((x2136*((x2171+x2134+(((-1.0)*x2173))))))+((x2136*(htj1*htj1*htj1*htj1)*(((((-1.0)*x2134))+x2172+(((-1.0)*x2174)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2176=((1.0)*cj1);
IkReal x2177=(cj4*r22);
IkReal x2178=(cj1*gconst23);
IkReal x2179=(r20*sj4);
IkReal x2180=((1.0)*sj1);
IkReal x2181=(gconst22*r20);
IkReal x2182=(gconst22*r21*sj4);
if( IKabs((((r21*x2178))+(((-1.0)*x2180*x2182))+((cj1*x2181))+(((-1.0)*x2177*x2180))+((gconst23*sj1*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2176*x2177))+(((-1.0)*gconst23*r21*x2180))+(((-1.0)*x2180*x2181))+(((-1.0)*x2176*x2182))+((x2178*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2178))+(((-1.0)*x2180*x2182))+((cj1*x2181))+(((-1.0)*x2177*x2180))+((gconst23*sj1*x2179))))+IKsqr(((((-1.0)*x2176*x2177))+(((-1.0)*gconst23*r21*x2180))+(((-1.0)*x2180*x2181))+(((-1.0)*x2176*x2182))+((x2178*x2179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2178))+(((-1.0)*x2180*x2182))+((cj1*x2181))+(((-1.0)*x2177*x2180))+((gconst23*sj1*x2179))), ((((-1.0)*x2176*x2177))+(((-1.0)*gconst23*r21*x2180))+(((-1.0)*x2180*x2181))+(((-1.0)*x2176*x2182))+((x2178*x2179))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2183=IKsin(j2);
IkReal x2184=IKcos(j2);
IkReal x2185=((1.0)*gconst23);
IkReal x2186=(r11*sj0);
IkReal x2187=(cj0*sj4);
IkReal x2188=(gconst22*r01);
IkReal x2189=((1.0)*sj0);
IkReal x2190=(gconst22*sj4);
IkReal x2191=(r10*sj0);
IkReal x2192=((0.088)*gconst23);
IkReal x2193=((1.0)*cj0);
IkReal x2194=(sj1*x2184);
IkReal x2195=(cj1*x2184);
IkReal x2196=((0.0825)*x2183);
IkReal x2197=(sj1*x2183);
IkReal x2198=(cj1*x2183);
IkReal x2199=((1.0)*x2198);
evalcond[0]=(x2194+((gconst22*r20))+(((-1.0)*x2199))+((gconst23*r21)));
evalcond[1]=((((-1.0)*x2195))+(((-1.0)*x2197))+((gconst23*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*x2190)));
evalcond[2]=(x2195+x2197+(((-1.0)*cj0*r01*x2185))+(((-1.0)*x2185*x2186))+(((-1.0)*gconst22*r10*x2189))+(((-1.0)*gconst22*r00*x2193)));
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(cj4,-1);
if(!x2200.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x2200.value)))+((cj1*x2196))+pz+(((0.0825)*sj1))+(((-0.0825)*x2194))+(((-0.384)*x2197))+(((-0.384)*x2195))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*sj4*x2185*x2191))+(((-1.0)*r00*x2185*x2187))+((x2186*x2190))+x2194+((cj0*cj4*r02))+((x2187*x2188))+(((-1.0)*x2199))+((cj4*r12*sj0)));
evalcond[5]=(((x2191*x2192))+((cj0*r00*x2192))+(((-1.0)*py*x2189))+(((-0.088)*gconst22*x2186))+(((-0.088)*cj0*x2188))+(((-1.0)*sj1*x2196))+(((0.384)*x2194))+(((0.0825)*cj1))+(((-1.0)*px*x2193))+(((0.316)*sj1))+(((-0.0825)*x2195))+(((-0.384)*x2198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2201=((1.0)*gconst23);
IkReal x2202=((1.0)*gconst22);
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(IKsign((((gconst22*r21*sj4))+((r22*((((cj4*(gconst23*gconst23)))+((cj4*(gconst22*gconst22)))))))+(((-1.0)*r20*sj4*x2201)))),-1);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2202))+(((-1.0)*r11*x2201)))),IkReal(((((-1.0)*r00*x2202))+(((-1.0)*r01*x2201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2203.value)))+(x2204.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2205=IKsin(j0);
IkReal x2206=IKcos(j0);
IkReal x2207=(gconst22*r01);
IkReal x2208=((1.0)*r10);
IkReal x2209=((1.0)*cj4);
IkReal x2210=((0.088)*gconst23);
IkReal x2211=(cj4*r11);
IkReal x2212=(gconst22*x2206);
IkReal x2213=(r00*x2205);
IkReal x2214=(sj4*x2206);
IkReal x2215=(cj4*x2206);
IkReal x2216=(gconst23*x2206);
IkReal x2217=(r02*x2205);
IkReal x2218=((1.0)*sj4*x2205);
IkReal x2219=(cj4*gconst23*x2205);
evalcond[0]=((((-1.0)*r11*x2216))+(((-1.0)*x2208*x2212))+((gconst23*r01*x2205))+((gconst22*x2213)));
evalcond[1]=((((-1.0)*x2210*x2213))+(((-0.088)*r11*x2212))+(((-1.0)*py*x2206))+(((0.088)*x2205*x2207))+((px*x2205))+((r10*x2206*x2210)));
evalcond[2]=((((-1.0)*x2207*x2218))+((r12*x2215))+((gconst23*sj4*x2213))+(((-1.0)*gconst23*x2208*x2214))+((r11*sj4*x2212))+(((-1.0)*x2209*x2217)));
evalcond[3]=((1.0)+(((-1.0)*x2205*x2207*x2209))+((cj4*gconst23*x2213))+(((-1.0)*gconst23*x2208*x2215))+((x2211*x2212))+((sj4*x2217))+(((-1.0)*r12*x2214)));
evalcond[4]=((((-1.0)*x2208*x2219))+(((-1.0)*r02*x2214))+(((-1.0)*r12*x2218))+((gconst22*x2205*x2211))+((x2207*x2215))+(((-1.0)*r00*x2209*x2216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal x2220=((1.0)*(x2222.value));
IkReal x2221=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2220)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2220)));
IkReal gconst22=((1.0)*r21*x2221);
IkReal gconst23=((-1.0)*r20*x2221);
IkReal x2223=((6000.0)*pz);
CheckValue<IkReal> x2256=IKPowWithIntegerCheck(cj4,-1);
if(!x2256.valid){
continue;
}
IkReal x2224=x2256.value;
IkReal x2225=((2000.0)*pz);
IkReal x2226=((165.0)*cj0);
IkReal x2227=(cj4*r02);
IkReal x2228=(gconst22*sj4);
IkReal x2229=(cj4*r22);
IkReal x2230=(gconst23*sj4);
IkReal x2231=((495.0)*cj0);
IkReal x2232=(gconst23*r21);
IkReal x2233=((495.0)*sj0);
IkReal x2234=((165.0)*sj0);
IkReal x2235=(gconst22*r20);
IkReal x2236=(cj4*r12);
IkReal x2237=((2304.0)*x2229);
IkReal x2238=((768.0)*x2229);
IkReal x2239=(r22*sj4*x2224);
IkReal x2240=((2304.0)*r20*x2230);
IkReal x2241=((528.0)*x2239);
IkReal x2242=((2304.0)*r21*x2228);
IkReal x2243=((768.0)*r20*x2230);
IkReal x2244=((176.0)*x2239);
IkReal x2245=((768.0)*r21*x2228);
IkReal x2246=(r10*x2230*x2233);
IkReal x2247=(r00*x2230*x2231);
IkReal x2248=((632.0)+x2240);
IkReal x2249=((-632.0)+x2240);
IkReal x2250=((-632.0)+x2243);
IkReal x2251=(x2246+x2247);
IkReal x2252=(x2223+x2237+x2241+x2242);
IkReal x2253=(x2225+x2238+x2244+x2245);
IkReal x2254=(x2252+(((495.0)*x2232))+(((495.0)*x2235)));
IkReal x2255=(((r11*x2228*x2233))+x2252+((r01*x2228*x2231))+((x2227*x2231))+((x2233*x2236)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs((x2248+x2251+(((-1.0)*x2255)))))))+(((0.000378787878787879)*(IKabs((x2248+(((-1.0)*x2254)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2226*x2227))+(((-1.0)*x2234*x2236))+x2250+((r00*x2226*x2230))+(((-1.0)*x2253))+(((-1.0)*r01*x2226*x2228))+(((-1.0)*r11*x2228*x2234))+((r10*x2230*x2234)))))))+(((0.000378787878787879)*(IKabs((x2249+(((-1.0)*x2254)))))))+(((0.000378787878787879)*(IKabs(((((-165.0)*x2232))+(((-165.0)*x2235))+x2250+(((-1.0)*x2253)))))))+(((0.000378787878787879)*(IKabs((x2249+x2251+(((-1.0)*x2255))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(cj4,-1);
if(!x2285.valid){
continue;
}
IkReal x2257=x2285.value;
IkReal x2258=((632.0)*cj4);
IkReal x2259=cj4*cj4;
IkReal x2260=(r22*sj4);
IkReal x2261=(cj4*pz);
IkReal x2262=(cj4*r21);
IkReal x2263=((2304.0)*sj4);
IkReal x2264=((0.002)*x2257);
IkReal x2265=((768.0)*sj4);
IkReal x2266=((528.0)*x2260);
IkReal x2267=((6000.0)*x2261);
IkReal x2268=((2000.0)*x2261);
IkReal x2269=((176.0)*x2260);
IkReal x2270=(r22*x2259);
IkReal x2271=(cj4*gconst23*r20);
IkReal x2272=(cj4*gconst22*r20);
IkReal x2273=((495.0)*x2272);
IkReal x2274=((495.0)*gconst23*x2262);
IkReal x2275=((2304.0)*x2270);
IkReal x2276=((165.0)*gconst23*x2262);
IkReal x2277=((165.0)*x2272);
IkReal x2278=((768.0)*x2270);
IkReal x2279=(x2263*x2271);
IkReal x2280=(gconst22*x2262*x2263);
IkReal x2281=(x2265*x2271);
IkReal x2282=(gconst22*x2262*x2265);
IkReal x2283=(x2282+x2268+x2269+x2277+x2276+x2278);
IkReal x2284=(x2280+x2266+x2267+x2275+x2274+x2273);
op[0]=(x2264*((x2281+(((-1.0)*x2283))+(((-1.0)*x2258)))));
op[1]=-0.66;
op[2]=(x2264*((x2279+(((-1.0)*x2284))+(((-1.0)*x2258)))));
op[3]=-1.32;
op[4]=(x2264*((x2279+x2258+(((-1.0)*x2284)))));
op[5]=-0.66;
op[6]=(x2264*((x2281+x2258+(((-1.0)*x2283)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2286=cj4*cj4;
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(cj4,-1);
if(!x2329.valid){
continue;
}
IkReal x2287=x2329.value;
IkReal x2288=((632.0)*cj4);
IkReal x2289=((165.0)*cj0);
IkReal x2290=((0.002)*x2287);
IkReal x2291=((495.0)*sj0);
IkReal x2292=(cj4*pz);
IkReal x2293=((495.0)*cj0);
IkReal x2294=(r22*sj4);
IkReal x2295=((165.0)*sj0);
IkReal x2296=((528.0)*x2294);
IkReal x2297=((6000.0)*x2292);
IkReal x2298=((2000.0)*x2292);
IkReal x2299=((176.0)*x2294);
IkReal x2300=(cj4*gconst22*sj4);
IkReal x2301=(r12*x2286);
IkReal x2302=(r22*x2286);
IkReal x2303=(r02*x2286);
IkReal x2304=((2304.0)*x2302);
IkReal x2305=((768.0)*x2302);
IkReal x2306=(cj4*gconst23*r20*sj4);
IkReal x2307=(cj4*gconst23*r10*sj4);
IkReal x2308=(cj4*gconst23*r00*sj4);
IkReal x2309=((2304.0)*x2306);
IkReal x2310=(x2293*x2303);
IkReal x2311=((2304.0)*r21*x2300);
IkReal x2312=(x2291*x2301);
IkReal x2313=((768.0)*x2306);
IkReal x2314=((768.0)*r21*x2300);
IkReal x2315=(x2289*x2303);
IkReal x2316=(x2295*x2301);
IkReal x2317=(x2293*x2308);
IkReal x2318=(x2291*x2307);
IkReal x2319=(r01*x2293*x2300);
IkReal x2320=(r11*x2291*x2300);
IkReal x2321=(x2295*x2307);
IkReal x2322=(x2289*x2308);
IkReal x2323=(r01*x2289*x2300);
IkReal x2324=(r11*x2295*x2300);
IkReal x2325=(x2322+x2321+x2313);
IkReal x2326=(x2318+x2317+x2309);
IkReal x2327=(x2299+x2298+x2323+x2324+x2316+x2314+x2315+x2305);
IkReal x2328=(x2297+x2296+x2320+x2319+x2312+x2310+x2311+x2304);
j1evalpoly[0]=(((x2290*((x2288+x2325+(((-1.0)*x2327))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x2290*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2325+(((-1.0)*x2288))+(((-1.0)*x2327))))))+((x2290*(htj1*htj1)*((x2288+x2326+(((-1.0)*x2328))))))+((x2290*(htj1*htj1*htj1*htj1)*((x2326+(((-1.0)*x2288))+(((-1.0)*x2328)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2330=((1.0)*cj1);
IkReal x2331=(cj4*r22);
IkReal x2332=(cj1*gconst23);
IkReal x2333=(r20*sj4);
IkReal x2334=((1.0)*sj1);
IkReal x2335=(gconst22*r20);
IkReal x2336=(gconst22*r21*sj4);
if( IKabs((((r21*x2332))+((gconst23*sj1*x2333))+(((-1.0)*x2331*x2334))+((cj1*x2335))+(((-1.0)*x2334*x2336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2332*x2333))+(((-1.0)*x2334*x2335))+(((-1.0)*gconst23*r21*x2334))+(((-1.0)*x2330*x2336))+(((-1.0)*x2330*x2331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2332))+((gconst23*sj1*x2333))+(((-1.0)*x2331*x2334))+((cj1*x2335))+(((-1.0)*x2334*x2336))))+IKsqr((((x2332*x2333))+(((-1.0)*x2334*x2335))+(((-1.0)*gconst23*r21*x2334))+(((-1.0)*x2330*x2336))+(((-1.0)*x2330*x2331))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2332))+((gconst23*sj1*x2333))+(((-1.0)*x2331*x2334))+((cj1*x2335))+(((-1.0)*x2334*x2336))), (((x2332*x2333))+(((-1.0)*x2334*x2335))+(((-1.0)*gconst23*r21*x2334))+(((-1.0)*x2330*x2336))+(((-1.0)*x2330*x2331))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2337=IKsin(j2);
IkReal x2338=IKcos(j2);
IkReal x2339=((1.0)*gconst23);
IkReal x2340=(r11*sj0);
IkReal x2341=(cj0*sj4);
IkReal x2342=(gconst22*r01);
IkReal x2343=((1.0)*sj0);
IkReal x2344=(gconst22*sj4);
IkReal x2345=(r10*sj0);
IkReal x2346=((0.088)*gconst23);
IkReal x2347=((1.0)*cj0);
IkReal x2348=(sj1*x2338);
IkReal x2349=(cj1*x2338);
IkReal x2350=((0.0825)*x2337);
IkReal x2351=(sj1*x2337);
IkReal x2352=(cj1*x2337);
IkReal x2353=((1.0)*x2352);
evalcond[0]=(x2348+((gconst22*r20))+((gconst23*r21))+(((-1.0)*x2353)));
evalcond[1]=((((-1.0)*x2351))+(((-1.0)*r21*x2344))+(((-1.0)*x2349))+((gconst23*r20*sj4))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*cj0*r01*x2339))+(((-1.0)*x2339*x2340))+x2351+x2349+(((-1.0)*gconst22*r10*x2343))+(((-1.0)*gconst22*r00*x2347)));
CheckValue<IkReal> x2354=IKPowWithIntegerCheck(cj4,-1);
if(!x2354.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x2354.value)))+(((-0.0825)*x2348))+((cj1*x2350))+pz+(((-0.384)*x2349))+(((-0.384)*x2351))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((x2340*x2344))+x2348+((x2341*x2342))+(((-1.0)*r00*x2339*x2341))+((cj0*cj4*r02))+(((-1.0)*sj4*x2339*x2345))+(((-1.0)*x2353))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*py*x2343))+((x2345*x2346))+(((-1.0)*sj1*x2350))+(((-0.0825)*x2349))+(((-1.0)*px*x2347))+(((-0.088)*gconst22*x2340))+((cj0*r00*x2346))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.088)*cj0*x2342))+(((-0.384)*x2352))+(((0.384)*x2348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2355=(gconst22*sj4);
IkReal x2356=((1.0)*gconst23*sj4);
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x2357.valid){
continue;
}
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal((((r11*x2355))+(((-1.0)*r10*x2356))+((cj4*r12)))),IkReal((((r01*x2355))+(((-1.0)*r00*x2356))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2357.value)))+(x2358.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2359=IKsin(j0);
IkReal x2360=IKcos(j0);
IkReal x2361=(gconst22*r01);
IkReal x2362=((1.0)*r10);
IkReal x2363=((1.0)*cj4);
IkReal x2364=((0.088)*gconst23);
IkReal x2365=(cj4*r11);
IkReal x2366=(gconst22*x2360);
IkReal x2367=(r00*x2359);
IkReal x2368=(sj4*x2360);
IkReal x2369=(cj4*x2360);
IkReal x2370=(gconst23*x2360);
IkReal x2371=(r02*x2359);
IkReal x2372=((1.0)*sj4*x2359);
IkReal x2373=(cj4*gconst23*x2359);
evalcond[0]=(((gconst23*r01*x2359))+(((-1.0)*x2362*x2366))+(((-1.0)*r11*x2370))+((gconst22*x2367)));
evalcond[1]=(((px*x2359))+((r10*x2360*x2364))+(((-1.0)*x2364*x2367))+(((-1.0)*py*x2360))+(((0.088)*x2359*x2361))+(((-0.088)*r11*x2366)));
evalcond[2]=(((r11*sj4*x2366))+((r12*x2369))+((gconst23*sj4*x2367))+(((-1.0)*gconst23*x2362*x2368))+(((-1.0)*x2361*x2372))+(((-1.0)*x2363*x2371)));
evalcond[3]=((1.0)+((cj4*gconst23*x2367))+(((-1.0)*r12*x2368))+((x2365*x2366))+(((-1.0)*gconst23*x2362*x2369))+((sj4*x2371))+(((-1.0)*x2359*x2361*x2363)));
evalcond[4]=((((-1.0)*r02*x2368))+(((-1.0)*r00*x2363*x2370))+((gconst22*x2359*x2365))+((x2361*x2369))+(((-1.0)*x2362*x2373))+(((-1.0)*r12*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2376 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2376.valid){
continue;
}
IkReal x2374=((1.0)*(x2376.value));
IkReal x2375=x2029;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2374)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2374)));
IkReal gconst22=((1.0)*r21*x2375);
IkReal gconst23=((-1.0)*r20*x2375);
IkReal x2377=((6000.0)*pz);
CheckValue<IkReal> x2410=IKPowWithIntegerCheck(cj4,-1);
if(!x2410.valid){
continue;
}
IkReal x2378=x2410.value;
IkReal x2379=((2000.0)*pz);
IkReal x2380=((165.0)*cj0);
IkReal x2381=(cj4*r02);
IkReal x2382=(gconst22*sj4);
IkReal x2383=(cj4*r22);
IkReal x2384=(gconst23*sj4);
IkReal x2385=((495.0)*cj0);
IkReal x2386=(gconst23*r21);
IkReal x2387=((495.0)*sj0);
IkReal x2388=((165.0)*sj0);
IkReal x2389=(gconst22*r20);
IkReal x2390=(cj4*r12);
IkReal x2391=((2304.0)*x2383);
IkReal x2392=((768.0)*x2383);
IkReal x2393=(r22*sj4*x2378);
IkReal x2394=((2304.0)*r20*x2384);
IkReal x2395=((528.0)*x2393);
IkReal x2396=((2304.0)*r21*x2382);
IkReal x2397=((768.0)*r20*x2384);
IkReal x2398=((176.0)*x2393);
IkReal x2399=((768.0)*r21*x2382);
IkReal x2400=(r10*x2384*x2387);
IkReal x2401=(r00*x2384*x2385);
IkReal x2402=((632.0)+x2394);
IkReal x2403=((-632.0)+x2394);
IkReal x2404=((-632.0)+x2397);
IkReal x2405=(x2400+x2401);
IkReal x2406=(x2396+x2395+x2391+x2377);
IkReal x2407=(x2392+x2398+x2399+x2379);
IkReal x2408=(x2406+(((495.0)*x2386))+(((495.0)*x2389)));
IkReal x2409=(((x2387*x2390))+x2406+((x2381*x2385))+((r01*x2382*x2385))+((r11*x2382*x2387)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs((x2405+x2402+(((-1.0)*x2409)))))))+(((0.000378787878787879)*(IKabs(((((-1.0)*x2380*x2381))+x2404+(((-1.0)*r01*x2380*x2382))+(((-1.0)*x2407))+((r00*x2380*x2384))+((r10*x2384*x2388))+(((-1.0)*x2388*x2390))+(((-1.0)*r11*x2382*x2388)))))))+(((0.000378787878787879)*(IKabs((x2403+(((-1.0)*x2408)))))))+(((0.000378787878787879)*(IKabs((x2402+(((-1.0)*x2408)))))))+(((0.000378787878787879)*(IKabs((x2404+(((-1.0)*x2407))+(((-165.0)*x2386))+(((-165.0)*x2389)))))))+(((0.000378787878787879)*(IKabs((x2405+x2403+(((-1.0)*x2409))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2439=IKPowWithIntegerCheck(cj4,-1);
if(!x2439.valid){
continue;
}
IkReal x2411=x2439.value;
IkReal x2412=((632.0)*cj4);
IkReal x2413=cj4*cj4;
IkReal x2414=(r22*sj4);
IkReal x2415=(cj4*pz);
IkReal x2416=(cj4*r21);
IkReal x2417=((2304.0)*sj4);
IkReal x2418=((0.002)*x2411);
IkReal x2419=((768.0)*sj4);
IkReal x2420=((528.0)*x2414);
IkReal x2421=((6000.0)*x2415);
IkReal x2422=((2000.0)*x2415);
IkReal x2423=((176.0)*x2414);
IkReal x2424=(r22*x2413);
IkReal x2425=(cj4*gconst23*r20);
IkReal x2426=(cj4*gconst22*r20);
IkReal x2427=((495.0)*x2426);
IkReal x2428=((495.0)*gconst23*x2416);
IkReal x2429=((2304.0)*x2424);
IkReal x2430=((165.0)*gconst23*x2416);
IkReal x2431=((165.0)*x2426);
IkReal x2432=((768.0)*x2424);
IkReal x2433=(x2417*x2425);
IkReal x2434=(gconst22*x2416*x2417);
IkReal x2435=(x2419*x2425);
IkReal x2436=(gconst22*x2416*x2419);
IkReal x2437=(x2432+x2431+x2430+x2436+x2422+x2423);
IkReal x2438=(x2434+x2428+x2429+x2420+x2421+x2427);
op[0]=(x2418*((x2435+(((-1.0)*x2437))+(((-1.0)*x2412)))));
op[1]=-0.66;
op[2]=(x2418*((x2433+(((-1.0)*x2438))+(((-1.0)*x2412)))));
op[3]=-1.32;
op[4]=(x2418*((x2433+x2412+(((-1.0)*x2438)))));
op[5]=-0.66;
op[6]=(x2418*((x2435+x2412+(((-1.0)*x2437)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2440=cj4*cj4;
CheckValue<IkReal> x2483=IKPowWithIntegerCheck(cj4,-1);
if(!x2483.valid){
continue;
}
IkReal x2441=x2483.value;
IkReal x2442=((632.0)*cj4);
IkReal x2443=((165.0)*cj0);
IkReal x2444=((0.002)*x2441);
IkReal x2445=((495.0)*sj0);
IkReal x2446=(cj4*pz);
IkReal x2447=((495.0)*cj0);
IkReal x2448=(r22*sj4);
IkReal x2449=((165.0)*sj0);
IkReal x2450=((528.0)*x2448);
IkReal x2451=((6000.0)*x2446);
IkReal x2452=((2000.0)*x2446);
IkReal x2453=((176.0)*x2448);
IkReal x2454=(cj4*gconst22*sj4);
IkReal x2455=(r12*x2440);
IkReal x2456=(r22*x2440);
IkReal x2457=(r02*x2440);
IkReal x2458=((2304.0)*x2456);
IkReal x2459=((768.0)*x2456);
IkReal x2460=(cj4*gconst23*r20*sj4);
IkReal x2461=(cj4*gconst23*r10*sj4);
IkReal x2462=(cj4*gconst23*r00*sj4);
IkReal x2463=((2304.0)*x2460);
IkReal x2464=(x2447*x2457);
IkReal x2465=((2304.0)*r21*x2454);
IkReal x2466=(x2445*x2455);
IkReal x2467=((768.0)*x2460);
IkReal x2468=((768.0)*r21*x2454);
IkReal x2469=(x2443*x2457);
IkReal x2470=(x2449*x2455);
IkReal x2471=(x2447*x2462);
IkReal x2472=(x2445*x2461);
IkReal x2473=(r01*x2447*x2454);
IkReal x2474=(r11*x2445*x2454);
IkReal x2475=(x2449*x2461);
IkReal x2476=(x2443*x2462);
IkReal x2477=(r01*x2443*x2454);
IkReal x2478=(r11*x2449*x2454);
IkReal x2479=(x2467+x2476+x2475);
IkReal x2480=(x2463+x2472+x2471);
IkReal x2481=(x2468+x2469+x2477+x2470+x2478+x2459+x2453+x2452);
IkReal x2482=(x2464+x2465+x2466+x2474+x2473+x2458+x2451+x2450);
j1evalpoly[0]=(((x2444*(htj1*htj1*htj1*htj1)*((x2480+(((-1.0)*x2482))+(((-1.0)*x2442))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x2444*(htj1*htj1)*((x2480+x2442+(((-1.0)*x2482))))))+((x2444*((x2479+x2442+(((-1.0)*x2481))))))+((x2444*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2479+(((-1.0)*x2481))+(((-1.0)*x2442)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2484=((1.0)*cj1);
IkReal x2485=(cj4*r22);
IkReal x2486=(cj1*gconst23);
IkReal x2487=(r20*sj4);
IkReal x2488=((1.0)*sj1);
IkReal x2489=(gconst22*r20);
IkReal x2490=(gconst22*r21*sj4);
if( IKabs((((gconst23*sj1*x2487))+((cj1*x2489))+(((-1.0)*x2485*x2488))+(((-1.0)*x2488*x2490))+((r21*x2486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst23*r21*x2488))+(((-1.0)*x2488*x2489))+(((-1.0)*x2484*x2490))+((x2486*x2487))+(((-1.0)*x2484*x2485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst23*sj1*x2487))+((cj1*x2489))+(((-1.0)*x2485*x2488))+(((-1.0)*x2488*x2490))+((r21*x2486))))+IKsqr(((((-1.0)*gconst23*r21*x2488))+(((-1.0)*x2488*x2489))+(((-1.0)*x2484*x2490))+((x2486*x2487))+(((-1.0)*x2484*x2485))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((gconst23*sj1*x2487))+((cj1*x2489))+(((-1.0)*x2485*x2488))+(((-1.0)*x2488*x2490))+((r21*x2486))), ((((-1.0)*gconst23*r21*x2488))+(((-1.0)*x2488*x2489))+(((-1.0)*x2484*x2490))+((x2486*x2487))+(((-1.0)*x2484*x2485))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2491=IKsin(j2);
IkReal x2492=IKcos(j2);
IkReal x2493=((1.0)*gconst23);
IkReal x2494=(r11*sj0);
IkReal x2495=(cj0*sj4);
IkReal x2496=(gconst22*r01);
IkReal x2497=((1.0)*sj0);
IkReal x2498=(gconst22*sj4);
IkReal x2499=(r10*sj0);
IkReal x2500=((0.088)*gconst23);
IkReal x2501=((1.0)*cj0);
IkReal x2502=(sj1*x2492);
IkReal x2503=(cj1*x2492);
IkReal x2504=((0.0825)*x2491);
IkReal x2505=(sj1*x2491);
IkReal x2506=(cj1*x2491);
IkReal x2507=((1.0)*x2506);
evalcond[0]=((((-1.0)*x2507))+x2502+((gconst22*r20))+((gconst23*r21)));
evalcond[1]=(((gconst23*r20*sj4))+(((-1.0)*r21*x2498))+(((-1.0)*x2503))+(((-1.0)*x2505))+(((-1.0)*cj4*r22)));
evalcond[2]=(x2505+x2503+(((-1.0)*gconst22*r00*x2501))+(((-1.0)*x2493*x2494))+(((-1.0)*cj0*r01*x2493))+(((-1.0)*gconst22*r10*x2497)));
CheckValue<IkReal> x2508=IKPowWithIntegerCheck(cj4,-1);
if(!x2508.valid){
continue;
}
evalcond[3]=((((-0.384)*x2503))+(((-0.384)*x2505))+(((0.088)*r22*sj4*(x2508.value)))+((cj1*x2504))+pz+(((0.0825)*sj1))+(((-0.0825)*x2502))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*r00*x2493*x2495))+(((-1.0)*x2507))+x2502+((x2494*x2498))+((x2495*x2496))+((cj0*cj4*r02))+(((-1.0)*sj4*x2493*x2499))+((cj4*r12*sj0)));
evalcond[5]=((((-0.384)*x2506))+(((-0.088)*gconst22*x2494))+(((-1.0)*py*x2497))+(((-0.088)*cj0*x2496))+((x2499*x2500))+(((-1.0)*px*x2501))+(((0.0825)*cj1))+(((0.316)*sj1))+((cj0*r00*x2500))+(((-0.0825)*x2503))+(((-1.0)*sj1*x2504))+(((0.384)*x2502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2509=((0.088)*sj5);
IkReal x2510=((0.088)*cj5);
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal((((r10*x2510))+(((-1.0)*r11*x2509))+(((-1.0)*py)))),IkReal(((((-1.0)*r01*x2509))+(((-1.0)*px))+((r00*x2510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x2510))+(((-1.0)*r20*sj4*x2509))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x2512.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2511.value)+(((1.5707963267949)*(x2512.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2513=IKsin(j0);
IkReal x2514=IKcos(j0);
IkReal x2515=(r11*sj5);
IkReal x2516=((1.0)*r02);
IkReal x2517=((1.0)*r12);
IkReal x2518=((1.0)*r01);
IkReal x2519=((1.0)*r10);
IkReal x2520=(sj4*x2514);
IkReal x2521=(sj5*x2513);
IkReal x2522=(cj5*x2513);
IkReal x2523=(cj4*x2514);
IkReal x2524=(sj4*x2513);
IkReal x2525=(cj4*x2513);
IkReal x2526=((0.088)*x2514);
IkReal x2527=((1.0)*x2514);
evalcond[0]=((((-1.0)*cj5*r11*x2527))+((r00*x2521))+((r01*x2522))+(((-1.0)*sj5*x2514*x2519)));
evalcond[1]=((((-1.0)*x2515*x2526))+(((-1.0)*py*x2527))+((px*x2513))+(((-0.088)*r00*x2522))+(((0.088)*r01*x2521))+((cj5*r10*x2526)));
evalcond[2]=(((x2515*x2520))+(((-1.0)*cj5*x2519*x2520))+((r12*x2523))+(((-1.0)*x2516*x2525))+((r00*sj4*x2522))+(((-1.0)*sj4*x2518*x2521)));
evalcond[3]=((1.0)+((r02*x2524))+((x2515*x2523))+(((-1.0)*cj5*x2519*x2523))+(((-1.0)*cj4*x2518*x2521))+(((-1.0)*x2517*x2520))+((cj4*r00*x2522)));
evalcond[4]=(((x2515*x2525))+((r01*sj5*x2523))+(((-1.0)*x2516*x2520))+(((-1.0)*cj5*r00*x2523))+(((-1.0)*x2517*x2524))+(((-1.0)*cj4*x2519*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(cj4,-1);
if(!x2553.valid){
continue;
}
IkReal x2528=x2553.value;
IkReal x2529=(cj5*r21);
IkReal x2530=(cj4*r22);
IkReal x2531=((0.352)*sj0);
IkReal x2532=(r11*sj5);
IkReal x2533=(cj0*px);
IkReal x2534=((1.056)*cj5);
IkReal x2535=(cj0*r00);
IkReal x2536=(py*sj0);
IkReal x2537=(r20*sj5);
IkReal x2538=((12.0)*x2533);
IkReal x2539=((4.608)*x2537);
IkReal x2540=((12.0)*x2536);
IkReal x2541=((4.608)*x2529);
IkReal x2542=(r21*sj4*sj5);
IkReal x2543=(cj5*r20*sj4);
IkReal x2544=(cj0*r01*sj5);
IkReal x2545=(r22*sj4*x2528);
IkReal x2546=((0.99)*x2543);
IkReal x2547=((1.056)*x2544);
IkReal x2548=((1.056)*sj0*x2532);
IkReal x2549=((2304.0)*x2543);
IkReal x2550=((((0.99)*x2542))+((r10*sj0*x2534))+(((0.99)*x2530))+((x2534*x2535)));
IkReal x2551=((((2304.0)*x2530))+(((495.0)*x2537))+(((528.0)*x2545))+(((495.0)*x2529))+(((2304.0)*x2542))+(((6000.0)*pz)));
IkReal x2552=(x2541+x2540+x2547+x2546+x2548+x2538+x2539);
j1eval[0]=((12.752)+(((0.002)*(IKabs(((-632.0)+(((-768.0)*x2530))+(((-176.0)*x2545))+(((-165.0)*x2537))+(((768.0)*x2543))+(((-768.0)*x2542))+(((-165.0)*x2529))+(((-2000.0)*pz)))))))+(((0.002)*(IKabs(((632.0)+x2549+(((-1.0)*x2551)))))))+(IKabs(((-0.33)+x2552+(((-1.0)*x2550)))))+(IKabs(((0.33)+x2552+(((-1.0)*x2550)))))+(IKabs(((0.33)+(((-0.352)*cj5*x2535))+(((1.536)*x2529))+((x2531*x2532))+(((-1.0)*cj5*r10*x2531))+(((4.0)*x2536))+(((4.0)*x2533))+(((0.352)*x2544))+(((-0.33)*x2530))+(((1.536)*x2537))+(((0.33)*x2543))+(((-0.33)*x2542)))))+(((0.002)*(IKabs(((-632.0)+x2549+(((-1.0)*x2551))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2582=IKPowWithIntegerCheck(cj4,-1);
if(!x2582.valid){
continue;
}
IkReal x2554=x2582.value;
IkReal x2555=((632.0)*cj4);
IkReal x2556=cj4*cj4;
IkReal x2557=(r22*sj4);
IkReal x2558=(cj4*pz);
IkReal x2559=(cj4*cj5);
IkReal x2560=((0.002)*x2554);
IkReal x2561=((768.0)*sj4);
IkReal x2562=((2304.0)*sj4);
IkReal x2563=((528.0)*x2557);
IkReal x2564=((6000.0)*x2558);
IkReal x2565=((2000.0)*x2558);
IkReal x2566=((176.0)*x2557);
IkReal x2567=(cj4*r20*sj5);
IkReal x2568=(r22*x2556);
IkReal x2569=(cj4*r21*sj5);
IkReal x2570=((495.0)*r21*x2559);
IkReal x2571=((495.0)*x2567);
IkReal x2572=((2304.0)*x2568);
IkReal x2573=((165.0)*x2567);
IkReal x2574=((165.0)*r21*x2559);
IkReal x2575=((768.0)*x2568);
IkReal x2576=(r20*x2559*x2562);
IkReal x2577=(x2562*x2569);
IkReal x2578=(r20*x2559*x2561);
IkReal x2579=(x2561*x2569);
IkReal x2580=(x2563+x2564+x2577+x2572+x2570+x2571);
IkReal x2581=(x2565+x2566+x2579+x2574+x2575+x2573);
op[0]=(x2560*((x2578+(((-1.0)*x2581))+(((-1.0)*x2555)))));
op[1]=-0.66;
op[2]=(x2560*((x2576+(((-1.0)*x2580))+(((-1.0)*x2555)))));
op[3]=-1.32;
op[4]=(x2560*((x2555+x2576+(((-1.0)*x2580)))));
op[5]=-0.66;
op[6]=(x2560*((x2555+x2578+(((-1.0)*x2581)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2583=(cj5*r21);
IkReal x2584=((0.33)*sj4);
IkReal x2585=(r21*sj5);
IkReal x2586=((0.352)*sj0);
IkReal x2587=(r11*sj5);
IkReal x2588=(cj0*px);
IkReal x2589=(cj5*r20);
IkReal x2590=((0.99)*sj4);
IkReal x2591=((1.056)*cj5);
IkReal x2592=(cj0*r00);
IkReal x2593=(py*sj0);
IkReal x2594=(r20*sj5);
IkReal x2595=(cj4*r22);
IkReal x2596=((4.0)*x2588);
IkReal x2597=((1.536)*x2594);
IkReal x2598=((12.0)*x2588);
IkReal x2599=((4.608)*x2594);
IkReal x2600=((12.0)*x2593);
IkReal x2601=((4.608)*x2583);
IkReal x2602=((1.536)*x2583);
IkReal x2603=((4.0)*x2593);
IkReal x2604=((0.33)*x2595);
IkReal x2605=(cj0*r01*sj5);
IkReal x2606=((0.352)*x2605);
IkReal x2607=(x2584*x2589);
IkReal x2608=(x2589*x2590);
IkReal x2609=((1.056)*x2605);
IkReal x2610=((1.056)*sj0*x2587);
IkReal x2611=(x2586*x2587);
IkReal x2612=((0.352)*cj5*x2592);
IkReal x2613=(x2584*x2585);
IkReal x2614=(cj5*r10*x2586);
IkReal x2615=(((r10*sj0*x2591))+(((0.99)*x2595))+((x2591*x2592))+((x2585*x2590)));
IkReal x2616=(x2604+x2614+x2613+x2612);
IkReal x2617=(x2596+x2597+x2606+x2607+x2602+x2603+x2611);
IkReal x2618=(x2598+x2599+x2600+x2601+x2608+x2609+x2610);
j1evalpoly[0]=((-0.33)+(((htj1*htj1*htj1*htj1)*(((0.33)+(((-1.0)*x2615))+x2618))))+(((-2.528)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.33)+(((-1.0)*x2616))+x2617))))+(((-2.528)*htj1))+(((htj1*htj1)*(((-0.33)+(((-1.0)*x2615))+x2618))))+(((-1.0)*x2616))+(((-5.056)*(htj1*htj1*htj1)))+x2617);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2619=((1.0)*sj1);
IkReal x2620=(r20*sj5);
IkReal x2621=(cj1*sj4);
IkReal x2622=(cj5*r20);
IkReal x2623=(cj5*r21);
IkReal x2624=(r21*sj5);
IkReal x2625=((1.0)*cj4*r22);
if( IKabs((((sj1*sj4*x2622))+(((-1.0)*sj4*x2619*x2624))+(((-1.0)*cj4*r22*x2619))+((cj1*x2623))+((cj1*x2620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2619*x2623))+(((-1.0)*x2619*x2620))+(((-1.0)*x2621*x2624))+((x2621*x2622))+(((-1.0)*cj1*x2625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x2622))+(((-1.0)*sj4*x2619*x2624))+(((-1.0)*cj4*r22*x2619))+((cj1*x2623))+((cj1*x2620))))+IKsqr(((((-1.0)*x2619*x2623))+(((-1.0)*x2619*x2620))+(((-1.0)*x2621*x2624))+((x2621*x2622))+(((-1.0)*cj1*x2625))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x2622))+(((-1.0)*sj4*x2619*x2624))+(((-1.0)*cj4*r22*x2619))+((cj1*x2623))+((cj1*x2620))), ((((-1.0)*x2619*x2623))+(((-1.0)*x2619*x2620))+(((-1.0)*x2621*x2624))+((x2621*x2622))+(((-1.0)*cj1*x2625))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2626=IKsin(j2);
IkReal x2627=IKcos(j2);
IkReal x2628=((1.0)*sj0);
IkReal x2629=(cj5*sj4);
IkReal x2630=((1.0)*cj0);
IkReal x2631=((0.088)*cj5);
IkReal x2632=(sj1*x2627);
IkReal x2633=(cj1*x2627);
IkReal x2634=(r11*sj0*sj5);
IkReal x2635=((0.0825)*x2626);
IkReal x2636=(sj1*x2626);
IkReal x2637=(cj0*r01*sj5);
IkReal x2638=(cj1*x2626);
IkReal x2639=((1.0)*x2638);
evalcond[0]=(((cj5*r21))+(((-1.0)*x2639))+((r20*sj5))+x2632);
evalcond[1]=(((r20*x2629))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22))+(((-1.0)*x2636))+(((-1.0)*x2633)));
evalcond[2]=((((-1.0)*r00*sj5*x2630))+(((-1.0)*cj5*r11*x2628))+(((-1.0)*cj5*r01*x2630))+(((-1.0)*r10*sj5*x2628))+x2636+x2633);
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(cj4,-1);
if(!x2640.valid){
continue;
}
evalcond[3]=(((cj1*x2635))+(((0.088)*r22*sj4*(x2640.value)))+(((-0.0825)*x2632))+pz+(((-0.384)*x2633))+(((-0.384)*x2636))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((sj4*x2637))+((sj4*x2634))+(((-1.0)*r10*x2628*x2629))+(((-1.0)*x2639))+((cj0*cj4*r02))+(((-1.0)*r00*x2629*x2630))+((cj4*r12*sj0))+x2632);
evalcond[5]=((((-0.0825)*x2633))+((r10*sj0*x2631))+(((-1.0)*px*x2630))+(((-1.0)*sj1*x2635))+(((-1.0)*py*x2628))+(((-0.088)*x2637))+(((-0.088)*x2634))+((cj0*r00*x2631))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.384)*x2638))+(((0.384)*x2632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2641=(sj4*sj5);
IkReal x2642=((1.0)*cj5*sj4);
CheckValue<IkReal> x2643=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2643.valid){
continue;
}
CheckValue<IkReal> x2644 = IKatan2WithCheck(IkReal((((r11*x2641))+(((-1.0)*r10*x2642))+((cj4*r12)))),IkReal(((((-1.0)*r00*x2642))+((r01*x2641))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2644.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2643.value)))+(x2644.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2645=IKsin(j0);
IkReal x2646=IKcos(j0);
IkReal x2647=(r11*sj5);
IkReal x2648=((1.0)*r02);
IkReal x2649=((1.0)*r12);
IkReal x2650=((1.0)*r01);
IkReal x2651=((1.0)*r10);
IkReal x2652=(sj4*x2646);
IkReal x2653=(sj5*x2645);
IkReal x2654=(cj5*x2645);
IkReal x2655=(cj4*x2646);
IkReal x2656=(sj4*x2645);
IkReal x2657=(cj4*x2645);
IkReal x2658=((0.088)*x2646);
IkReal x2659=((1.0)*x2646);
evalcond[0]=((((-1.0)*cj5*r11*x2659))+(((-1.0)*sj5*x2646*x2651))+((r00*x2653))+((r01*x2654)));
evalcond[1]=((((-1.0)*py*x2659))+((px*x2645))+(((-1.0)*x2647*x2658))+(((0.088)*r01*x2653))+((cj5*r10*x2658))+(((-0.088)*r00*x2654)));
evalcond[2]=(((r12*x2655))+(((-1.0)*cj5*x2651*x2652))+((r00*sj4*x2654))+(((-1.0)*sj4*x2650*x2653))+(((-1.0)*x2648*x2657))+((x2647*x2652)));
evalcond[3]=((1.0)+((cj4*r00*x2654))+(((-1.0)*cj5*x2651*x2655))+((r02*x2656))+(((-1.0)*cj4*x2650*x2653))+(((-1.0)*x2649*x2652))+((x2647*x2655)));
evalcond[4]=((((-1.0)*cj5*r00*x2655))+((r01*sj5*x2655))+(((-1.0)*cj4*x2651*x2654))+(((-1.0)*x2649*x2656))+(((-1.0)*x2648*x2652))+((x2647*x2657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(cj4,-1);
if(!x2685.valid){
continue;
}
IkReal x2660=x2685.value;
IkReal x2661=(cj5*r21);
IkReal x2662=(cj4*r22);
IkReal x2663=((0.352)*sj0);
IkReal x2664=(r11*sj5);
IkReal x2665=(cj0*px);
IkReal x2666=((1.056)*cj5);
IkReal x2667=(cj0*r00);
IkReal x2668=(py*sj0);
IkReal x2669=(r20*sj5);
IkReal x2670=((12.0)*x2665);
IkReal x2671=((4.608)*x2669);
IkReal x2672=((12.0)*x2668);
IkReal x2673=((4.608)*x2661);
IkReal x2674=(r21*sj4*sj5);
IkReal x2675=(cj5*r20*sj4);
IkReal x2676=(cj0*r01*sj5);
IkReal x2677=(r22*sj4*x2660);
IkReal x2678=((0.99)*x2675);
IkReal x2679=((1.056)*x2676);
IkReal x2680=((1.056)*sj0*x2664);
IkReal x2681=((2304.0)*x2675);
IkReal x2682=(((x2666*x2667))+(((0.99)*x2662))+(((0.99)*x2674))+((r10*sj0*x2666)));
IkReal x2683=((((2304.0)*x2662))+(((2304.0)*x2674))+(((495.0)*x2661))+(((495.0)*x2669))+(((528.0)*x2677))+(((6000.0)*pz)));
IkReal x2684=(x2671+x2670+x2673+x2672+x2679+x2678+x2680);
j1eval[0]=((12.752)+(IKabs(((0.33)+(((-1.0)*x2682))+x2684)))+(IKabs(((-0.33)+(((-1.0)*x2682))+x2684)))+(((0.002)*(IKabs(((-632.0)+(((-1.0)*x2683))+x2681)))))+(IKabs(((0.33)+(((0.33)*x2675))+(((-0.33)*x2674))+(((-0.33)*x2662))+(((1.536)*x2661))+(((1.536)*x2669))+(((-1.0)*cj5*r10*x2663))+((x2663*x2664))+(((-0.352)*cj5*x2667))+(((4.0)*x2668))+(((4.0)*x2665))+(((0.352)*x2676)))))+(((0.002)*(IKabs(((632.0)+(((-1.0)*x2683))+x2681)))))+(((0.002)*(IKabs(((-632.0)+(((768.0)*x2675))+(((-768.0)*x2674))+(((-176.0)*x2677))+(((-768.0)*x2662))+(((-2000.0)*pz))+(((-165.0)*x2661))+(((-165.0)*x2669))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(cj4,-1);
if(!x2714.valid){
continue;
}
IkReal x2686=x2714.value;
IkReal x2687=((632.0)*cj4);
IkReal x2688=cj4*cj4;
IkReal x2689=(r22*sj4);
IkReal x2690=(cj4*pz);
IkReal x2691=(cj4*cj5);
IkReal x2692=((0.002)*x2686);
IkReal x2693=((768.0)*sj4);
IkReal x2694=((2304.0)*sj4);
IkReal x2695=((528.0)*x2689);
IkReal x2696=((6000.0)*x2690);
IkReal x2697=((2000.0)*x2690);
IkReal x2698=((176.0)*x2689);
IkReal x2699=(cj4*r20*sj5);
IkReal x2700=(r22*x2688);
IkReal x2701=(cj4*r21*sj5);
IkReal x2702=((495.0)*r21*x2691);
IkReal x2703=((495.0)*x2699);
IkReal x2704=((2304.0)*x2700);
IkReal x2705=((165.0)*x2699);
IkReal x2706=((165.0)*r21*x2691);
IkReal x2707=((768.0)*x2700);
IkReal x2708=(r20*x2691*x2694);
IkReal x2709=(x2694*x2701);
IkReal x2710=(r20*x2691*x2693);
IkReal x2711=(x2693*x2701);
IkReal x2712=(x2709+x2704+x2703+x2702+x2696+x2695);
IkReal x2713=(x2711+x2705+x2707+x2706+x2698+x2697);
op[0]=(x2692*((x2710+(((-1.0)*x2713))+(((-1.0)*x2687)))));
op[1]=-0.66;
op[2]=(x2692*((x2708+(((-1.0)*x2712))+(((-1.0)*x2687)))));
op[3]=-1.32;
op[4]=(x2692*((x2708+(((-1.0)*x2712))+x2687)));
op[5]=-0.66;
op[6]=(x2692*((x2710+(((-1.0)*x2713))+x2687)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2715=(cj5*r21);
IkReal x2716=((0.33)*sj4);
IkReal x2717=(r21*sj5);
IkReal x2718=((0.352)*sj0);
IkReal x2719=(r11*sj5);
IkReal x2720=(cj0*px);
IkReal x2721=(cj5*r20);
IkReal x2722=((0.99)*sj4);
IkReal x2723=((1.056)*cj5);
IkReal x2724=(cj0*r00);
IkReal x2725=(py*sj0);
IkReal x2726=(r20*sj5);
IkReal x2727=(cj4*r22);
IkReal x2728=((4.0)*x2720);
IkReal x2729=((1.536)*x2726);
IkReal x2730=((12.0)*x2720);
IkReal x2731=((4.608)*x2726);
IkReal x2732=((12.0)*x2725);
IkReal x2733=((4.608)*x2715);
IkReal x2734=((1.536)*x2715);
IkReal x2735=((4.0)*x2725);
IkReal x2736=((0.33)*x2727);
IkReal x2737=(cj0*r01*sj5);
IkReal x2738=((0.352)*x2737);
IkReal x2739=(x2716*x2721);
IkReal x2740=(x2721*x2722);
IkReal x2741=((1.056)*x2737);
IkReal x2742=((1.056)*sj0*x2719);
IkReal x2743=(x2718*x2719);
IkReal x2744=((0.352)*cj5*x2724);
IkReal x2745=(x2716*x2717);
IkReal x2746=(cj5*r10*x2718);
IkReal x2747=(((x2717*x2722))+(((0.99)*x2727))+((x2723*x2724))+((r10*sj0*x2723)));
IkReal x2748=(x2745+x2744+x2746+x2736);
IkReal x2749=(x2743+x2734+x2735+x2738+x2739+x2729+x2728);
IkReal x2750=(x2741+x2740+x2742+x2730+x2731+x2732+x2733);
j1evalpoly[0]=((-0.33)+(((htj1*htj1)*(((-0.33)+x2750+(((-1.0)*x2747))))))+x2749+(((-2.528)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.33)+x2750+(((-1.0)*x2747))))))+(((-2.528)*htj1))+(((-1.0)*x2748))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.33)+x2749+(((-1.0)*x2748))))))+(((-5.056)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2751=((1.0)*sj1);
IkReal x2752=(r20*sj5);
IkReal x2753=(cj1*sj4);
IkReal x2754=(cj5*r20);
IkReal x2755=(cj5*r21);
IkReal x2756=(r21*sj5);
IkReal x2757=((1.0)*cj4*r22);
if( IKabs((((sj1*sj4*x2754))+(((-1.0)*cj4*r22*x2751))+((cj1*x2752))+((cj1*x2755))+(((-1.0)*sj4*x2751*x2756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2753*x2754))+(((-1.0)*x2753*x2756))+(((-1.0)*cj1*x2757))+(((-1.0)*x2751*x2755))+(((-1.0)*x2751*x2752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x2754))+(((-1.0)*cj4*r22*x2751))+((cj1*x2752))+((cj1*x2755))+(((-1.0)*sj4*x2751*x2756))))+IKsqr((((x2753*x2754))+(((-1.0)*x2753*x2756))+(((-1.0)*cj1*x2757))+(((-1.0)*x2751*x2755))+(((-1.0)*x2751*x2752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x2754))+(((-1.0)*cj4*r22*x2751))+((cj1*x2752))+((cj1*x2755))+(((-1.0)*sj4*x2751*x2756))), (((x2753*x2754))+(((-1.0)*x2753*x2756))+(((-1.0)*cj1*x2757))+(((-1.0)*x2751*x2755))+(((-1.0)*x2751*x2752))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2758=IKsin(j2);
IkReal x2759=IKcos(j2);
IkReal x2760=((1.0)*sj0);
IkReal x2761=(cj5*sj4);
IkReal x2762=((1.0)*cj0);
IkReal x2763=((0.088)*cj5);
IkReal x2764=(sj1*x2759);
IkReal x2765=(cj1*x2759);
IkReal x2766=(r11*sj0*sj5);
IkReal x2767=((0.0825)*x2758);
IkReal x2768=(sj1*x2758);
IkReal x2769=(cj0*r01*sj5);
IkReal x2770=(cj1*x2758);
IkReal x2771=((1.0)*x2770);
evalcond[0]=(x2764+((cj5*r21))+(((-1.0)*x2771))+((r20*sj5)));
evalcond[1]=((((-1.0)*x2768))+(((-1.0)*x2765))+((r20*x2761))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=(x2768+x2765+(((-1.0)*cj5*r11*x2760))+(((-1.0)*r00*sj5*x2762))+(((-1.0)*r10*sj5*x2760))+(((-1.0)*cj5*r01*x2762)));
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(cj4,-1);
if(!x2772.valid){
continue;
}
evalcond[3]=(((cj1*x2767))+(((0.088)*r22*sj4*(x2772.value)))+(((-0.0825)*x2764))+pz+(((0.0825)*sj1))+(((-0.384)*x2765))+(((-0.384)*x2768))+(((-0.316)*cj1)));
evalcond[4]=(x2764+((sj4*x2766))+((sj4*x2769))+((cj0*cj4*r02))+(((-1.0)*x2771))+(((-1.0)*r10*x2760*x2761))+(((-1.0)*r00*x2761*x2762))+((cj4*r12*sj0)));
evalcond[5]=((((-0.0825)*x2765))+(((-1.0)*py*x2760))+(((-0.088)*x2769))+(((-0.088)*x2766))+((cj0*r00*x2763))+(((0.384)*x2764))+(((-1.0)*px*x2762))+((r10*sj0*x2763))+(((-0.384)*x2770))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*sj1*x2767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2773=((1.0)*cj5);
IkReal x2774=((1.0)*sj5);
CheckValue<IkReal> x2775 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2774))+(((-1.0)*r11*x2773)))),IkReal(((((-1.0)*r01*x2773))+(((-1.0)*r00*x2774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x2773)))),-1);
if(!x2776.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2775.value)+(((1.5707963267949)*(x2776.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2777=IKsin(j0);
IkReal x2778=IKcos(j0);
IkReal x2779=(r11*sj5);
IkReal x2780=((1.0)*r02);
IkReal x2781=((1.0)*r12);
IkReal x2782=((1.0)*r01);
IkReal x2783=((1.0)*r10);
IkReal x2784=(sj4*x2778);
IkReal x2785=(sj5*x2777);
IkReal x2786=(cj5*x2777);
IkReal x2787=(cj4*x2778);
IkReal x2788=(sj4*x2777);
IkReal x2789=(cj4*x2777);
IkReal x2790=((0.088)*x2778);
IkReal x2791=((1.0)*x2778);
evalcond[0]=((((-1.0)*sj5*x2778*x2783))+((r01*x2786))+(((-1.0)*cj5*r11*x2791))+((r00*x2785)));
evalcond[1]=((((0.088)*r01*x2785))+((cj5*r10*x2790))+((px*x2777))+(((-1.0)*x2779*x2790))+(((-0.088)*r00*x2786))+(((-1.0)*py*x2791)));
evalcond[2]=(((x2779*x2784))+(((-1.0)*sj4*x2782*x2785))+(((-1.0)*x2780*x2789))+((r12*x2787))+((r00*sj4*x2786))+(((-1.0)*cj5*x2783*x2784)));
evalcond[3]=((1.0)+((x2779*x2787))+(((-1.0)*x2781*x2784))+((r02*x2788))+(((-1.0)*cj5*x2783*x2787))+(((-1.0)*cj4*x2782*x2785))+((cj4*r00*x2786)));
evalcond[4]=(((x2779*x2789))+(((-1.0)*x2781*x2788))+((r01*sj5*x2787))+(((-1.0)*x2780*x2784))+(((-1.0)*cj5*r00*x2787))+(((-1.0)*cj4*x2783*x2786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(cj4,-1);
if(!x2817.valid){
continue;
}
IkReal x2792=x2817.value;
IkReal x2793=(cj5*r21);
IkReal x2794=(cj4*r22);
IkReal x2795=((0.352)*sj0);
IkReal x2796=(r11*sj5);
IkReal x2797=(cj0*px);
IkReal x2798=((1.056)*cj5);
IkReal x2799=(cj0*r00);
IkReal x2800=(py*sj0);
IkReal x2801=(r20*sj5);
IkReal x2802=((12.0)*x2797);
IkReal x2803=((4.608)*x2801);
IkReal x2804=((12.0)*x2800);
IkReal x2805=((4.608)*x2793);
IkReal x2806=(r21*sj4*sj5);
IkReal x2807=(cj5*r20*sj4);
IkReal x2808=(cj0*r01*sj5);
IkReal x2809=(r22*sj4*x2792);
IkReal x2810=((0.99)*x2807);
IkReal x2811=((1.056)*x2808);
IkReal x2812=((1.056)*sj0*x2796);
IkReal x2813=((2304.0)*x2807);
IkReal x2814=((((0.99)*x2806))+((r10*sj0*x2798))+((x2798*x2799))+(((0.99)*x2794)));
IkReal x2815=((((2304.0)*x2806))+(((495.0)*x2793))+(((495.0)*x2801))+(((2304.0)*x2794))+(((528.0)*x2809))+(((6000.0)*pz)));
IkReal x2816=(x2802+x2803+x2804+x2805+x2811+x2810+x2812);
j1eval[0]=((12.752)+(IKabs(((0.33)+(((-1.0)*x2814))+x2816)))+(((0.002)*(IKabs(((-632.0)+(((-768.0)*x2806))+(((-176.0)*x2809))+(((-768.0)*x2794))+(((768.0)*x2807))+(((-165.0)*x2793))+(((-165.0)*x2801))+(((-2000.0)*pz)))))))+(((0.002)*(IKabs(((632.0)+(((-1.0)*x2815))+x2813)))))+(IKabs(((0.33)+(((0.352)*x2808))+(((0.33)*x2807))+((x2795*x2796))+(((-0.33)*x2806))+(((4.0)*x2797))+(((-1.0)*cj5*r10*x2795))+(((-0.352)*cj5*x2799))+(((-0.33)*x2794))+(((4.0)*x2800))+(((1.536)*x2801))+(((1.536)*x2793)))))+(IKabs(((-0.33)+(((-1.0)*x2814))+x2816)))+(((0.002)*(IKabs(((-632.0)+(((-1.0)*x2815))+x2813))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2846=IKPowWithIntegerCheck(cj4,-1);
if(!x2846.valid){
continue;
}
IkReal x2818=x2846.value;
IkReal x2819=((632.0)*cj4);
IkReal x2820=cj4*cj4;
IkReal x2821=(r22*sj4);
IkReal x2822=(cj4*pz);
IkReal x2823=(cj4*cj5);
IkReal x2824=((0.002)*x2818);
IkReal x2825=((768.0)*sj4);
IkReal x2826=((2304.0)*sj4);
IkReal x2827=((528.0)*x2821);
IkReal x2828=((6000.0)*x2822);
IkReal x2829=((2000.0)*x2822);
IkReal x2830=((176.0)*x2821);
IkReal x2831=(cj4*r20*sj5);
IkReal x2832=(r22*x2820);
IkReal x2833=(cj4*r21*sj5);
IkReal x2834=((495.0)*r21*x2823);
IkReal x2835=((495.0)*x2831);
IkReal x2836=((2304.0)*x2832);
IkReal x2837=((165.0)*x2831);
IkReal x2838=((165.0)*r21*x2823);
IkReal x2839=((768.0)*x2832);
IkReal x2840=(r20*x2823*x2826);
IkReal x2841=(x2826*x2833);
IkReal x2842=(r20*x2823*x2825);
IkReal x2843=(x2825*x2833);
IkReal x2844=(x2841+x2836+x2835+x2834+x2828+x2827);
IkReal x2845=(x2843+x2839+x2838+x2837+x2830+x2829);
op[0]=(x2824*(((((-1.0)*x2819))+x2842+(((-1.0)*x2845)))));
op[1]=-0.66;
op[2]=(x2824*(((((-1.0)*x2819))+x2840+(((-1.0)*x2844)))));
op[3]=-1.32;
op[4]=(x2824*((x2840+x2819+(((-1.0)*x2844)))));
op[5]=-0.66;
op[6]=(x2824*((x2842+x2819+(((-1.0)*x2845)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2847=(cj5*r21);
IkReal x2848=((0.33)*sj4);
IkReal x2849=(r21*sj5);
IkReal x2850=((0.352)*sj0);
IkReal x2851=(r11*sj5);
IkReal x2852=(cj0*px);
IkReal x2853=(cj5*r20);
IkReal x2854=((0.99)*sj4);
IkReal x2855=((1.056)*cj5);
IkReal x2856=(cj0*r00);
IkReal x2857=(py*sj0);
IkReal x2858=(r20*sj5);
IkReal x2859=(cj4*r22);
IkReal x2860=((4.0)*x2852);
IkReal x2861=((1.536)*x2858);
IkReal x2862=((12.0)*x2852);
IkReal x2863=((4.608)*x2858);
IkReal x2864=((12.0)*x2857);
IkReal x2865=((4.608)*x2847);
IkReal x2866=((1.536)*x2847);
IkReal x2867=((4.0)*x2857);
IkReal x2868=((0.33)*x2859);
IkReal x2869=(cj0*r01*sj5);
IkReal x2870=((0.352)*x2869);
IkReal x2871=(x2848*x2853);
IkReal x2872=(x2853*x2854);
IkReal x2873=((1.056)*x2869);
IkReal x2874=((1.056)*sj0*x2851);
IkReal x2875=(x2850*x2851);
IkReal x2876=((0.352)*cj5*x2856);
IkReal x2877=(x2848*x2849);
IkReal x2878=(cj5*r10*x2850);
IkReal x2879=(((x2855*x2856))+((x2849*x2854))+((r10*sj0*x2855))+(((0.99)*x2859)));
IkReal x2880=(x2868+x2877+x2876+x2878);
IkReal x2881=(x2860+x2861+x2866+x2867+x2871+x2870+x2875);
IkReal x2882=(x2862+x2863+x2864+x2865+x2873+x2872+x2874);
j1evalpoly[0]=((-0.33)+(((htj1*htj1*htj1*htj1)*(((0.33)+(((-1.0)*x2879))+x2882))))+(((-2.528)*(htj1*htj1*htj1*htj1*htj1)))+(((-2.528)*htj1))+(((-1.0)*x2880))+x2881+(((-5.056)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.33)+(((-1.0)*x2879))+x2882))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.33)+(((-1.0)*x2880))+x2881)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2883=((1.0)*sj1);
IkReal x2884=(r20*sj5);
IkReal x2885=(cj1*sj4);
IkReal x2886=(cj5*r20);
IkReal x2887=(cj5*r21);
IkReal x2888=(r21*sj5);
IkReal x2889=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*sj4*x2883*x2888))+((cj1*x2887))+((cj1*x2884))+(((-1.0)*cj4*r22*x2883))+((sj1*sj4*x2886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2883*x2887))+(((-1.0)*x2883*x2884))+((x2885*x2886))+(((-1.0)*cj1*x2889))+(((-1.0)*x2885*x2888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x2883*x2888))+((cj1*x2887))+((cj1*x2884))+(((-1.0)*cj4*r22*x2883))+((sj1*sj4*x2886))))+IKsqr(((((-1.0)*x2883*x2887))+(((-1.0)*x2883*x2884))+((x2885*x2886))+(((-1.0)*cj1*x2889))+(((-1.0)*x2885*x2888))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x2883*x2888))+((cj1*x2887))+((cj1*x2884))+(((-1.0)*cj4*r22*x2883))+((sj1*sj4*x2886))), ((((-1.0)*x2883*x2887))+(((-1.0)*x2883*x2884))+((x2885*x2886))+(((-1.0)*cj1*x2889))+(((-1.0)*x2885*x2888))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2890=IKsin(j2);
IkReal x2891=IKcos(j2);
IkReal x2892=((1.0)*sj0);
IkReal x2893=(cj5*sj4);
IkReal x2894=((1.0)*cj0);
IkReal x2895=((0.088)*cj5);
IkReal x2896=(sj1*x2891);
IkReal x2897=(cj1*x2891);
IkReal x2898=(r11*sj0*sj5);
IkReal x2899=((0.0825)*x2890);
IkReal x2900=(sj1*x2890);
IkReal x2901=(cj0*r01*sj5);
IkReal x2902=(cj1*x2890);
IkReal x2903=((1.0)*x2902);
evalcond[0]=(((cj5*r21))+(((-1.0)*x2903))+x2896+((r20*sj5)));
evalcond[1]=((((-1.0)*x2897))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22))+(((-1.0)*x2900))+((r20*x2893)));
evalcond[2]=((((-1.0)*r10*sj5*x2892))+(((-1.0)*cj5*r11*x2892))+x2897+(((-1.0)*r00*sj5*x2894))+x2900+(((-1.0)*cj5*r01*x2894)));
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(cj4,-1);
if(!x2904.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x2904.value)))+(((-0.0825)*x2896))+pz+((cj1*x2899))+(((-0.384)*x2897))+(((-0.384)*x2900))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*r00*x2893*x2894))+((cj0*cj4*r02))+(((-1.0)*x2903))+((sj4*x2898))+(((-1.0)*r10*x2892*x2893))+x2896+((sj4*x2901))+((cj4*r12*sj0)));
evalcond[5]=((((-0.088)*x2901))+((r10*sj0*x2895))+(((-0.0825)*x2897))+(((-1.0)*px*x2894))+(((-0.088)*x2898))+((cj0*r00*x2895))+(((0.384)*x2896))+(((-1.0)*sj1*x2899))+(((0.0825)*cj1))+(((-1.0)*py*x2892))+(((0.316)*sj1))+(((-0.384)*x2902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2905=((1.0)*cj5);
IkReal x2906=((1.0)*sj5);
IkReal x2907=((((-1.0)*r21*sj4*x2906))+((cj5*r20*sj4))+(((-1.0)*cj4*r22)));
j0eval[0]=x2907;
j0eval[1]=((IKabs(((((-1.0)*r00*x2906))+(((-1.0)*r01*x2905)))))+(IKabs(((((-1.0)*r10*x2906))+(((-1.0)*r11*x2905))))));
j0eval[2]=IKsign(x2907);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2908=(sj4*sj5);
IkReal x2909=((1.0)*cj5*sj4);
IkReal x2910=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x2910;
j0eval[1]=IKsign(x2910);
j0eval[2]=((IKabs(((((-1.0)*r10*x2909))+((r11*x2908))+((cj4*r12)))))+(IKabs((((r01*x2908))+(((-1.0)*r00*x2909))+((cj4*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2911=((0.088)*sj5);
IkReal x2912=((0.088)*cj5);
IkReal x2913=(r21*sj4);
IkReal x2914=(rxp2_2*sj4);
IkReal x2915=(r20*sj4);
IkReal x2916=(cj4*cj5*rxp0_2);
IkReal x2917=(cj4*rxp1_2*sj5);
j0eval[0]=(((sj5*x2915))+(((-11.3636363636364)*x2914))+(((-11.3636363636364)*x2916))+(((11.3636363636364)*x2917))+((cj5*x2913)));
j0eval[1]=((IKabs((((r00*x2912))+(((-1.0)*px))+(((-1.0)*r01*x2911)))))+(IKabs(((((-1.0)*r11*x2911))+(((-1.0)*py))+((r10*x2912))))));
j0eval[2]=IKsign((((x2912*x2913))+((x2911*x2915))+(((-1.0)*x2914))+(((-1.0)*x2916))+x2917));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2918=((-1.0)*r20);
IkReal x2920 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2920)==0){
continue;
}
IkReal x2919=pow(x2920,-0.5);
CheckValue<IkReal> x2921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2918),IKFAST_ATAN2_MAGTHRESH);
if(!x2921.valid){
continue;
}
IkReal gconst24=((-1.0)*(x2921.value));
IkReal gconst25=(r21*x2919);
IkReal gconst26=(x2918*x2919);
CheckValue<IkReal> x2922 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x2923=((-1.0)*r20);
IkReal x2924=x2919;
CheckValue<IkReal> x2926 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2923),IKFAST_ATAN2_MAGTHRESH);
if(!x2926.valid){
continue;
}
IkReal x2925=((-1.0)*(x2926.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2925;
IkReal gconst24=x2925;
IkReal gconst25=(r21*x2924);
IkReal gconst26=(x2923*x2924);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2927=((-1.0)*r20);
IkReal x2928=x2919;
CheckValue<IkReal> x2930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2927),IKFAST_ATAN2_MAGTHRESH);
if(!x2930.valid){
continue;
}
IkReal x2929=((-1.0)*(x2930.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2929;
IkReal gconst24=x2929;
IkReal gconst25=(r21*x2928);
IkReal gconst26=(x2927*x2928);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2931=((-1.0)*r20);
IkReal x2932=x2919;
CheckValue<IkReal> x2934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2931),IKFAST_ATAN2_MAGTHRESH);
if(!x2934.valid){
continue;
}
IkReal x2933=((-1.0)*(x2934.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2933;
IkReal gconst24=x2933;
IkReal gconst25=(r21*x2932);
IkReal gconst26=(x2931*x2932);
IkReal x2935=(rxp2_2*sj4);
IkReal x2936=x2919;
IkReal x2937=(cj4*r21*rxp1_2*x2936);
IkReal x2938=(cj4*r20*rxp0_2*x2936);
j0eval[0]=((((-11.3636363636364)*x2935))+(((11.3636363636364)*x2938))+(((11.3636363636364)*x2937)));
j0eval[1]=IKsign(((((-1.0)*x2935))+x2938+x2937));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2939=((0.088)*gconst26);
IkReal x2940=((0.088)*gconst25);
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign((((cj4*gconst25*rxp1_2))+(((-1.0)*rxp2_2*sj4))+((r20*sj4*x2940))+(((-1.0)*cj4*gconst26*rxp0_2))+((r21*sj4*x2939)))),-1);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal((((r10*x2939))+(((-1.0)*r11*x2940))+(((-1.0)*py)))),IkReal((((r00*x2939))+(((-1.0)*r01*x2940))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2941.value)))+(x2942.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2943=IKsin(j0);
IkReal x2944=IKcos(j0);
IkReal x2945=(gconst25*r11);
IkReal x2946=((1.0)*gconst26);
IkReal x2947=(r02*sj4);
IkReal x2948=(r12*sj4);
IkReal x2949=(gconst26*r00);
IkReal x2950=(gconst25*r01);
IkReal x2951=(cj4*x2943);
IkReal x2952=((1.0)*x2944);
IkReal x2953=(cj4*x2944);
IkReal x2954=((1.0)*x2943);
IkReal x2955=(gconst25*x2943);
IkReal x2956=((0.088)*x2944);
IkReal x2957=(sj4*x2944);
evalcond[0]=((((-1.0)*gconst25*r10*x2952))+(((-1.0)*r11*x2944*x2946))+((r00*x2955))+((gconst26*r01*x2943)));
evalcond[1]=(((px*x2943))+(((-0.088)*x2943*x2949))+((gconst26*r10*x2956))+(((0.088)*x2943*x2950))+(((-1.0)*py*x2952))+(((-1.0)*x2945*x2956)));
evalcond[2]=(((x2945*x2957))+((sj4*x2943*x2949))+(((-1.0)*r10*x2946*x2957))+(((-1.0)*sj4*x2950*x2954))+((r12*x2953))+(((-1.0)*r02*x2951)));
evalcond[3]=((-1.0)+(((-1.0)*x2948*x2952))+((x2945*x2953))+(((-1.0)*r10*x2946*x2953))+((x2949*x2951))+((x2943*x2947))+(((-1.0)*x2950*x2951)));
evalcond[4]=((((-1.0)*x2947*x2952))+(((-1.0)*x2948*x2954))+((x2950*x2953))+((x2945*x2951))+(((-1.0)*r00*x2946*x2953))+(((-1.0)*r10*x2946*x2951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2958=((-1.0)*r20);
IkReal x2959=x2919;
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2958),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
IkReal x2960=((-1.0)*(x2961.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2960;
IkReal gconst24=x2960;
IkReal gconst25=(r21*x2959);
IkReal gconst26=(x2958*x2959);
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(cj4,-1);
if(!x2995.valid){
continue;
}
IkReal x2962=x2995.value;
IkReal x2963=((6000.0)*pz);
IkReal x2964=((2000.0)*pz);
IkReal x2965=(gconst26*r00);
IkReal x2966=(gconst25*r01);
IkReal x2967=(cj4*r22);
IkReal x2968=(gconst26*sj4);
IkReal x2969=((495.0)*gconst25);
IkReal x2970=((165.0)*sj0);
IkReal x2971=(r11*sj4);
IkReal x2972=((495.0)*sj0);
IkReal x2973=(gconst26*r21);
IkReal x2974=(cj4*r12);
IkReal x2975=((2304.0)*x2967);
IkReal x2976=((768.0)*x2967);
IkReal x2977=((165.0)*cj0*sj4);
IkReal x2978=(cj0*cj4*r02);
IkReal x2979=(gconst25*r21*sj4);
IkReal x2980=(r22*sj4*x2962);
IkReal x2981=((495.0)*cj0*sj4);
IkReal x2982=((528.0)*x2980);
IkReal x2983=((2304.0)*x2979);
IkReal x2984=((2304.0)*r20*x2968);
IkReal x2985=((768.0)*r20*x2968);
IkReal x2986=((176.0)*x2980);
IkReal x2987=((768.0)*x2979);
IkReal x2988=(x2965*x2981);
IkReal x2989=(r10*x2968*x2972);
IkReal x2990=((((495.0)*x2973))+((r20*x2969))+x2984);
IkReal x2991=(x2987+x2986+x2976+x2964);
IkReal x2992=(x2983+x2982+x2975+x2963);
IkReal x2993=(x2989+x2988+x2984);
IkReal x2994=((((495.0)*x2978))+((x2966*x2981))+((sj0*x2969*x2971))+x2992+((x2972*x2974)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x2985))+(((-165.0)*x2973))+x2991+(((-165.0)*gconst25*r20)))))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x2990))+x2992)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x2994))+x2993)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x2991))+(((-165.0)*x2978))+(((-1.0)*gconst25*x2970*x2971))+((x2965*x2977))+((r10*x2968*x2970))+x2985+(((-1.0)*x2966*x2977))+(((-1.0)*x2970*x2974)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x2990))+x2992)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x2994))+x2993))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3025=IKPowWithIntegerCheck(cj4,-1);
if(!x3025.valid){
continue;
}
IkReal x2996=x3025.value;
IkReal x2997=((632.0)*cj4);
IkReal x2998=cj4*cj4;
IkReal x2999=(r22*sj4);
IkReal x3000=(cj4*r20);
IkReal x3001=(cj4*pz);
IkReal x3002=((0.002)*x2996);
IkReal x3003=(gconst26*sj4);
IkReal x3004=((528.0)*x2999);
IkReal x3005=((6000.0)*x3001);
IkReal x3006=((2000.0)*x3001);
IkReal x3007=((176.0)*x2999);
IkReal x3008=(cj4*gconst26*r21);
IkReal x3009=(r22*x2998);
IkReal x3010=((2304.0)*x3009);
IkReal x3011=((495.0)*x3008);
IkReal x3012=((495.0)*gconst25*x3000);
IkReal x3013=((768.0)*x3009);
IkReal x3014=((165.0)*x3008);
IkReal x3015=((165.0)*gconst25*x3000);
IkReal x3016=(cj4*gconst25*r21*sj4);
IkReal x3017=((2304.0)*x3016);
IkReal x3018=((2304.0)*x3000*x3003);
IkReal x3019=((768.0)*x3016);
IkReal x3020=((768.0)*x3000*x3003);
IkReal x3021=(x3014+x3015+x3020);
IkReal x3022=(x3018+x3012+x3011);
IkReal x3023=(x3010+x3017+x3005+x3004);
IkReal x3024=(x3019+x3013+x3007+x3006);
op[0]=(x3002*((x3024+(((-1.0)*x3021))+x2997)));
op[1]=0.66;
op[2]=(x3002*((x3023+(((-1.0)*x3022))+x2997)));
op[3]=1.32;
op[4]=(x3002*(((((-1.0)*x2997))+x3023+(((-1.0)*x3022)))));
op[5]=0.66;
op[6]=(x3002*(((((-1.0)*x2997))+x3024+(((-1.0)*x3021)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3026=cj4*cj4;
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(cj4,-1);
if(!x3072.valid){
continue;
}
IkReal x3027=x3072.value;
IkReal x3028=((632.0)*cj4);
IkReal x3029=((495.0)*gconst25);
IkReal x3030=((0.002)*x3027);
IkReal x3031=((165.0)*gconst26);
IkReal x3032=(gconst25*r21);
IkReal x3033=(gconst26*r20);
IkReal x3034=(cj4*sj4);
IkReal x3035=(r11*sj0);
IkReal x3036=(cj4*pz);
IkReal x3037=(r10*sj0);
IkReal x3038=((165.0)*gconst25);
IkReal x3039=((495.0)*gconst26);
IkReal x3040=(r22*sj4);
IkReal x3041=((2000.0)*x3036);
IkReal x3042=((176.0)*x3040);
IkReal x3043=((528.0)*x3040);
IkReal x3044=((6000.0)*x3036);
IkReal x3045=(cj0*x3034);
IkReal x3046=((768.0)*x3034);
IkReal x3047=(r22*x3026);
IkReal x3048=((768.0)*x3047);
IkReal x3049=((2304.0)*x3047);
IkReal x3050=(r12*sj0*x3026);
IkReal x3051=(cj0*r02*x3026);
IkReal x3052=(x3033*x3046);
IkReal x3053=(x3032*x3046);
IkReal x3054=((165.0)*x3051);
IkReal x3055=((165.0)*x3050);
IkReal x3056=((2304.0)*x3033*x3034);
IkReal x3057=((2304.0)*x3032*x3034);
IkReal x3058=((495.0)*x3051);
IkReal x3059=((495.0)*x3050);
IkReal x3060=(x3031*x3034*x3037);
IkReal x3061=(r00*x3031*x3045);
IkReal x3062=(r01*x3038*x3045);
IkReal x3063=(x3034*x3035*x3038);
IkReal x3064=(r00*x3039*x3045);
IkReal x3065=(x3034*x3037*x3039);
IkReal x3066=(r01*x3029*x3045);
IkReal x3067=(x3029*x3034*x3035);
IkReal x3068=(x3065+x3064+x3056);
IkReal x3069=(x3061+x3060+x3052);
IkReal x3070=(x3049+x3043+x3044+x3067+x3066+x3058+x3059+x3057);
IkReal x3071=(x3048+x3041+x3042+x3063+x3062+x3054+x3055+x3053);
j1evalpoly[0]=(((x3030*(htj1*htj1)*((x3068+x3028+(((-1.0)*x3070))))))+((x3030*(htj1*htj1*htj1*htj1)*((x3068+(((-1.0)*x3028))+(((-1.0)*x3070))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x3030*((x3069+x3028+(((-1.0)*x3071))))))+((x3030*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3069+(((-1.0)*x3028))+(((-1.0)*x3071)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3073=((1.0)*cj1);
IkReal x3074=(cj4*r22);
IkReal x3075=(gconst25*r20);
IkReal x3076=((1.0)*sj1);
IkReal x3077=(gconst26*r21);
IkReal x3078=(gconst26*r20*sj4);
IkReal x3079=(gconst25*r21*sj4);
if( IKabs(((((-1.0)*x3074*x3076))+(((-1.0)*x3073*x3077))+(((-1.0)*x3073*x3075))+((sj1*x3078))+(((-1.0)*x3076*x3079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3073*x3079))+(((-1.0)*x3073*x3074))+((sj1*x3077))+((sj1*x3075))+((cj1*x3078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3074*x3076))+(((-1.0)*x3073*x3077))+(((-1.0)*x3073*x3075))+((sj1*x3078))+(((-1.0)*x3076*x3079))))+IKsqr(((((-1.0)*x3073*x3079))+(((-1.0)*x3073*x3074))+((sj1*x3077))+((sj1*x3075))+((cj1*x3078))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3074*x3076))+(((-1.0)*x3073*x3077))+(((-1.0)*x3073*x3075))+((sj1*x3078))+(((-1.0)*x3076*x3079))), ((((-1.0)*x3073*x3079))+(((-1.0)*x3073*x3074))+((sj1*x3077))+((sj1*x3075))+((cj1*x3078))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3080=IKsin(j2);
IkReal x3081=IKcos(j2);
IkReal x3082=(sj0*sj4);
IkReal x3083=(gconst25*r11);
IkReal x3084=(gconst26*sj4);
IkReal x3085=((1.0)*r10);
IkReal x3086=((0.088)*sj0);
IkReal x3087=((1.0)*sj1);
IkReal x3088=((1.0)*sj0);
IkReal x3089=((0.088)*cj0);
IkReal x3090=(gconst25*sj4);
IkReal x3091=((0.384)*sj1);
IkReal x3092=(cj0*r01);
IkReal x3093=((1.0)*cj0);
IkReal x3094=(cj1*x3081);
IkReal x3095=((0.0825)*x3080);
IkReal x3096=(cj1*x3080);
IkReal x3097=(sj1*x3081);
IkReal x3098=(x3080*x3087);
IkReal x3099=((1.0)*x3094);
IkReal x3100=(x3098+x3099);
evalcond[0]=(x3096+((gconst26*r21))+((gconst25*r20))+(((-1.0)*x3081*x3087)));
evalcond[1]=(((r20*x3084))+(((-1.0)*x3100))+(((-1.0)*cj4*r22))+(((-1.0)*r21*x3090)));
evalcond[2]=((((-1.0)*gconst25*r00*x3093))+(((-1.0)*x3100))+(((-1.0)*gconst25*sj0*x3085))+(((-1.0)*gconst26*r11*x3088))+(((-1.0)*gconst26*x3092)));
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(cj4,-1);
if(!x3101.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x3101.value)))+(((-0.0825)*x3097))+(((-1.0)*x3080*x3091))+(((-0.384)*x3094))+pz+((cj1*x3095))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*r00*x3084*x3093))+x3097+((x3082*x3083))+((cj0*cj4*r02))+((x3090*x3092))+(((-1.0)*gconst26*x3082*x3085))+(((-1.0)*x3096))+((cj4*r12*sj0)));
evalcond[5]=(((gconst26*r00*x3089))+(((-1.0)*x3083*x3086))+((gconst26*r10*x3086))+(((-1.0)*px*x3093))+(((-1.0)*gconst25*r01*x3089))+(((-1.0)*py*x3088))+(((-0.0825)*x3094))+(((-1.0)*sj1*x3095))+(((-0.384)*x3096))+(((0.0825)*cj1))+(((0.316)*sj1))+((x3081*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3102=((1.0)*gconst25);
IkReal x3103=((1.0)*cj4);
IkReal x3104=((1.0)*gconst26);
CheckValue<IkReal> x3105 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3102))+(((-1.0)*r11*x3104)))),IkReal(((((-1.0)*r01*x3104))+(((-1.0)*r00*x3102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3105.valid){
continue;
}
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(IKsign((((gconst26*r20*sj4))+(((-1.0)*r21*sj4*x3102))+((r22*(((((-1.0)*x3103*(gconst26*gconst26)))+(((-1.0)*cj4*gconst25*x3102)))))))),-1);
if(!x3106.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3105.value)+(((1.5707963267949)*(x3106.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3107=IKsin(j0);
IkReal x3108=IKcos(j0);
IkReal x3109=(gconst25*r11);
IkReal x3110=((1.0)*gconst26);
IkReal x3111=(r02*sj4);
IkReal x3112=(r12*sj4);
IkReal x3113=(gconst26*r00);
IkReal x3114=(gconst25*r01);
IkReal x3115=(cj4*x3107);
IkReal x3116=((1.0)*x3108);
IkReal x3117=(cj4*x3108);
IkReal x3118=((1.0)*x3107);
IkReal x3119=(gconst25*x3107);
IkReal x3120=((0.088)*x3108);
IkReal x3121=(sj4*x3108);
evalcond[0]=((((-1.0)*gconst25*r10*x3116))+(((-1.0)*r11*x3108*x3110))+((gconst26*r01*x3107))+((r00*x3119)));
evalcond[1]=((((0.088)*x3107*x3114))+(((-1.0)*x3109*x3120))+(((-0.088)*x3107*x3113))+((gconst26*r10*x3120))+(((-1.0)*py*x3116))+((px*x3107)));
evalcond[2]=((((-1.0)*r10*x3110*x3121))+((r12*x3117))+(((-1.0)*sj4*x3114*x3118))+((x3109*x3121))+(((-1.0)*r02*x3115))+((sj4*x3107*x3113)));
evalcond[3]=((-1.0)+((x3107*x3111))+((x3113*x3115))+((x3109*x3117))+(((-1.0)*x3112*x3116))+(((-1.0)*r10*x3110*x3117))+(((-1.0)*x3114*x3115)));
evalcond[4]=(((x3114*x3117))+((x3109*x3115))+(((-1.0)*r00*x3110*x3117))+(((-1.0)*x3112*x3118))+(((-1.0)*x3111*x3116))+(((-1.0)*r10*x3110*x3115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3122=((-1.0)*r20);
IkReal x3123=x2919;
CheckValue<IkReal> x3125 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3122),IKFAST_ATAN2_MAGTHRESH);
if(!x3125.valid){
continue;
}
IkReal x3124=((-1.0)*(x3125.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x3124;
IkReal gconst24=x3124;
IkReal gconst25=(r21*x3123);
IkReal gconst26=(x3122*x3123);
CheckValue<IkReal> x3159=IKPowWithIntegerCheck(cj4,-1);
if(!x3159.valid){
continue;
}
IkReal x3126=x3159.value;
IkReal x3127=((6000.0)*pz);
IkReal x3128=((2000.0)*pz);
IkReal x3129=(gconst26*r00);
IkReal x3130=(gconst25*r01);
IkReal x3131=(cj4*r22);
IkReal x3132=(gconst26*sj4);
IkReal x3133=((495.0)*gconst25);
IkReal x3134=((165.0)*sj0);
IkReal x3135=(r11*sj4);
IkReal x3136=((495.0)*sj0);
IkReal x3137=(gconst26*r21);
IkReal x3138=(cj4*r12);
IkReal x3139=((2304.0)*x3131);
IkReal x3140=((768.0)*x3131);
IkReal x3141=((165.0)*cj0*sj4);
IkReal x3142=(cj0*cj4*r02);
IkReal x3143=(gconst25*r21*sj4);
IkReal x3144=(r22*sj4*x3126);
IkReal x3145=((495.0)*cj0*sj4);
IkReal x3146=((528.0)*x3144);
IkReal x3147=((2304.0)*x3143);
IkReal x3148=((2304.0)*r20*x3132);
IkReal x3149=((768.0)*r20*x3132);
IkReal x3150=((176.0)*x3144);
IkReal x3151=((768.0)*x3143);
IkReal x3152=(x3129*x3145);
IkReal x3153=(r10*x3132*x3136);
IkReal x3154=(x3148+((r20*x3133))+(((495.0)*x3137)));
IkReal x3155=(x3140+x3151+x3150+x3128);
IkReal x3156=(x3146+x3147+x3127+x3139);
IkReal x3157=(x3148+x3153+x3152);
IkReal x3158=(x3156+(((495.0)*x3142))+((x3136*x3138))+((sj0*x3133*x3135))+((x3130*x3145)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((632.0)+x3155+(((-1.0)*x3149))+(((-165.0)*x3137))+(((-165.0)*gconst25*r20)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3158))+x3157)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3154))+x3156)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3155))+(((-165.0)*x3142))+x3149+(((-1.0)*gconst25*x3134*x3135))+((x3129*x3141))+((r10*x3132*x3134))+(((-1.0)*x3134*x3138))+(((-1.0)*x3130*x3141)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3154))+x3156)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3158))+x3157))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3189=IKPowWithIntegerCheck(cj4,-1);
if(!x3189.valid){
continue;
}
IkReal x3160=x3189.value;
IkReal x3161=((632.0)*cj4);
IkReal x3162=cj4*cj4;
IkReal x3163=(r22*sj4);
IkReal x3164=(cj4*r20);
IkReal x3165=(cj4*pz);
IkReal x3166=((0.002)*x3160);
IkReal x3167=(gconst26*sj4);
IkReal x3168=((528.0)*x3163);
IkReal x3169=((6000.0)*x3165);
IkReal x3170=((2000.0)*x3165);
IkReal x3171=((176.0)*x3163);
IkReal x3172=(cj4*gconst26*r21);
IkReal x3173=(r22*x3162);
IkReal x3174=((2304.0)*x3173);
IkReal x3175=((495.0)*x3172);
IkReal x3176=((495.0)*gconst25*x3164);
IkReal x3177=((768.0)*x3173);
IkReal x3178=((165.0)*x3172);
IkReal x3179=((165.0)*gconst25*x3164);
IkReal x3180=(cj4*gconst25*r21*sj4);
IkReal x3181=((2304.0)*x3180);
IkReal x3182=((2304.0)*x3164*x3167);
IkReal x3183=((768.0)*x3180);
IkReal x3184=((768.0)*x3164*x3167);
IkReal x3185=(x3184+x3179+x3178);
IkReal x3186=(x3182+x3175+x3176);
IkReal x3187=(x3181+x3168+x3169+x3174);
IkReal x3188=(x3183+x3171+x3170+x3177);
op[0]=(x3166*((x3188+x3161+(((-1.0)*x3185)))));
op[1]=0.66;
op[2]=(x3166*((x3187+x3161+(((-1.0)*x3186)))));
op[3]=1.32;
op[4]=(x3166*((x3187+(((-1.0)*x3186))+(((-1.0)*x3161)))));
op[5]=0.66;
op[6]=(x3166*((x3188+(((-1.0)*x3185))+(((-1.0)*x3161)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3190=cj4*cj4;
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(cj4,-1);
if(!x3236.valid){
continue;
}
IkReal x3191=x3236.value;
IkReal x3192=((632.0)*cj4);
IkReal x3193=((495.0)*gconst25);
IkReal x3194=((0.002)*x3191);
IkReal x3195=((165.0)*gconst26);
IkReal x3196=(gconst25*r21);
IkReal x3197=(gconst26*r20);
IkReal x3198=(cj4*sj4);
IkReal x3199=(r11*sj0);
IkReal x3200=(cj4*pz);
IkReal x3201=(r10*sj0);
IkReal x3202=((165.0)*gconst25);
IkReal x3203=((495.0)*gconst26);
IkReal x3204=(r22*sj4);
IkReal x3205=((2000.0)*x3200);
IkReal x3206=((176.0)*x3204);
IkReal x3207=((528.0)*x3204);
IkReal x3208=((6000.0)*x3200);
IkReal x3209=(cj0*x3198);
IkReal x3210=((768.0)*x3198);
IkReal x3211=(r22*x3190);
IkReal x3212=((768.0)*x3211);
IkReal x3213=((2304.0)*x3211);
IkReal x3214=(r12*sj0*x3190);
IkReal x3215=(cj0*r02*x3190);
IkReal x3216=(x3197*x3210);
IkReal x3217=(x3196*x3210);
IkReal x3218=((165.0)*x3215);
IkReal x3219=((165.0)*x3214);
IkReal x3220=((2304.0)*x3197*x3198);
IkReal x3221=((2304.0)*x3196*x3198);
IkReal x3222=((495.0)*x3215);
IkReal x3223=((495.0)*x3214);
IkReal x3224=(x3195*x3198*x3201);
IkReal x3225=(r00*x3195*x3209);
IkReal x3226=(r01*x3202*x3209);
IkReal x3227=(x3198*x3199*x3202);
IkReal x3228=(r00*x3203*x3209);
IkReal x3229=(x3198*x3201*x3203);
IkReal x3230=(r01*x3193*x3209);
IkReal x3231=(x3193*x3198*x3199);
IkReal x3232=(x3229+x3228+x3220);
IkReal x3233=(x3216+x3225+x3224);
IkReal x3234=(x3213+x3207+x3208+x3230+x3231+x3221+x3223+x3222);
IkReal x3235=(x3217+x3212+x3218+x3219+x3206+x3205+x3227+x3226);
j1evalpoly[0]=(((x3194*(htj1*htj1)*((x3192+x3232+(((-1.0)*x3234))))))+((x3194*((x3192+x3233+(((-1.0)*x3235))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x3194*(htj1*htj1*htj1*htj1)*((x3232+(((-1.0)*x3234))+(((-1.0)*x3192))))))+((x3194*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3233+(((-1.0)*x3235))+(((-1.0)*x3192)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3237=((1.0)*cj1);
IkReal x3238=(cj4*r22);
IkReal x3239=(gconst25*r20);
IkReal x3240=((1.0)*sj1);
IkReal x3241=(gconst26*r21);
IkReal x3242=(gconst26*r20*sj4);
IkReal x3243=(gconst25*r21*sj4);
if( IKabs((((sj1*x3242))+(((-1.0)*x3238*x3240))+(((-1.0)*x3237*x3239))+(((-1.0)*x3240*x3243))+(((-1.0)*x3237*x3241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3239))+((sj1*x3241))+(((-1.0)*x3237*x3238))+(((-1.0)*x3237*x3243))+((cj1*x3242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3242))+(((-1.0)*x3238*x3240))+(((-1.0)*x3237*x3239))+(((-1.0)*x3240*x3243))+(((-1.0)*x3237*x3241))))+IKsqr((((sj1*x3239))+((sj1*x3241))+(((-1.0)*x3237*x3238))+(((-1.0)*x3237*x3243))+((cj1*x3242))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3242))+(((-1.0)*x3238*x3240))+(((-1.0)*x3237*x3239))+(((-1.0)*x3240*x3243))+(((-1.0)*x3237*x3241))), (((sj1*x3239))+((sj1*x3241))+(((-1.0)*x3237*x3238))+(((-1.0)*x3237*x3243))+((cj1*x3242))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3244=IKsin(j2);
IkReal x3245=IKcos(j2);
IkReal x3246=(sj0*sj4);
IkReal x3247=(gconst25*r11);
IkReal x3248=(gconst26*sj4);
IkReal x3249=((1.0)*r10);
IkReal x3250=((0.088)*sj0);
IkReal x3251=((1.0)*sj1);
IkReal x3252=((1.0)*sj0);
IkReal x3253=((0.088)*cj0);
IkReal x3254=(gconst25*sj4);
IkReal x3255=((0.384)*sj1);
IkReal x3256=(cj0*r01);
IkReal x3257=((1.0)*cj0);
IkReal x3258=(cj1*x3245);
IkReal x3259=((0.0825)*x3244);
IkReal x3260=(cj1*x3244);
IkReal x3261=(sj1*x3245);
IkReal x3262=(x3244*x3251);
IkReal x3263=((1.0)*x3258);
IkReal x3264=(x3263+x3262);
evalcond[0]=((((-1.0)*x3245*x3251))+x3260+((gconst26*r21))+((gconst25*r20)));
evalcond[1]=((((-1.0)*r21*x3254))+(((-1.0)*x3264))+((r20*x3248))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*gconst26*r11*x3252))+(((-1.0)*x3264))+(((-1.0)*gconst25*sj0*x3249))+(((-1.0)*gconst26*x3256))+(((-1.0)*gconst25*r00*x3257)));
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(cj4,-1);
if(!x3265.valid){
continue;
}
evalcond[3]=(((cj1*x3259))+(((-1.0)*x3244*x3255))+(((-0.384)*x3258))+(((0.088)*r22*sj4*(x3265.value)))+pz+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-0.0825)*x3261)));
evalcond[4]=((((-1.0)*r00*x3248*x3257))+(((-1.0)*x3260))+x3261+((cj0*cj4*r02))+(((-1.0)*gconst26*x3246*x3249))+((x3254*x3256))+((x3246*x3247))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*x3247*x3250))+((gconst26*r10*x3250))+((x3245*x3255))+(((-0.0825)*x3258))+(((-1.0)*py*x3252))+(((0.0825)*cj1))+(((-1.0)*gconst25*r01*x3253))+(((0.316)*sj1))+(((-1.0)*px*x3257))+(((-0.384)*x3260))+(((-1.0)*sj1*x3259))+((gconst26*r00*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3266=(gconst25*sj4);
IkReal x3267=((1.0)*gconst26*sj4);
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3267))+((r11*x3266))+((cj4*r12)))),IkReal((((r01*x3266))+(((-1.0)*r00*x3267))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r21))+(((-1.0)*gconst25*r20)))),-1);
if(!x3269.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3268.value)+(((1.5707963267949)*(x3269.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3270=IKsin(j0);
IkReal x3271=IKcos(j0);
IkReal x3272=(gconst25*r11);
IkReal x3273=((1.0)*gconst26);
IkReal x3274=(r02*sj4);
IkReal x3275=(r12*sj4);
IkReal x3276=(gconst26*r00);
IkReal x3277=(gconst25*r01);
IkReal x3278=(cj4*x3270);
IkReal x3279=((1.0)*x3271);
IkReal x3280=(cj4*x3271);
IkReal x3281=((1.0)*x3270);
IkReal x3282=(gconst25*x3270);
IkReal x3283=((0.088)*x3271);
IkReal x3284=(sj4*x3271);
evalcond[0]=(((r00*x3282))+(((-1.0)*gconst25*r10*x3279))+((gconst26*r01*x3270))+(((-1.0)*r11*x3271*x3273)));
evalcond[1]=(((px*x3270))+(((0.088)*x3270*x3277))+(((-1.0)*x3272*x3283))+((gconst26*r10*x3283))+(((-1.0)*py*x3279))+(((-0.088)*x3270*x3276)));
evalcond[2]=((((-1.0)*r10*x3273*x3284))+(((-1.0)*r02*x3278))+((x3272*x3284))+((sj4*x3270*x3276))+(((-1.0)*sj4*x3277*x3281))+((r12*x3280)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x3273*x3280))+(((-1.0)*x3277*x3278))+(((-1.0)*x3275*x3279))+((x3272*x3280))+((x3276*x3278))+((x3270*x3274)));
evalcond[4]=((((-1.0)*r00*x3273*x3280))+((x3272*x3278))+(((-1.0)*x3274*x3279))+(((-1.0)*r10*x3273*x3278))+(((-1.0)*x3275*x3281))+((x3277*x3280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3285=((-1.0)*r20);
IkReal x3286=x2919;
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3285),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
IkReal x3287=((-1.0)*(x3288.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x3287;
IkReal gconst24=x3287;
IkReal gconst25=(r21*x3286);
IkReal gconst26=(x3285*x3286);
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(cj4,-1);
if(!x3322.valid){
continue;
}
IkReal x3289=x3322.value;
IkReal x3290=((6000.0)*pz);
IkReal x3291=((2000.0)*pz);
IkReal x3292=(gconst26*r00);
IkReal x3293=(gconst25*r01);
IkReal x3294=(cj4*r22);
IkReal x3295=(gconst26*sj4);
IkReal x3296=((495.0)*gconst25);
IkReal x3297=((165.0)*sj0);
IkReal x3298=(r11*sj4);
IkReal x3299=((495.0)*sj0);
IkReal x3300=(gconst26*r21);
IkReal x3301=(cj4*r12);
IkReal x3302=((2304.0)*x3294);
IkReal x3303=((768.0)*x3294);
IkReal x3304=((165.0)*cj0*sj4);
IkReal x3305=(cj0*cj4*r02);
IkReal x3306=(gconst25*r21*sj4);
IkReal x3307=(r22*sj4*x3289);
IkReal x3308=((495.0)*cj0*sj4);
IkReal x3309=((528.0)*x3307);
IkReal x3310=((2304.0)*x3306);
IkReal x3311=((2304.0)*r20*x3295);
IkReal x3312=((768.0)*r20*x3295);
IkReal x3313=((176.0)*x3307);
IkReal x3314=((768.0)*x3306);
IkReal x3315=(x3292*x3308);
IkReal x3316=(r10*x3295*x3299);
IkReal x3317=(((r20*x3296))+x3311+(((495.0)*x3300)));
IkReal x3318=(x3303+x3313+x3314+x3291);
IkReal x3319=(x3309+x3302+x3310+x3290);
IkReal x3320=(x3311+x3315+x3316);
IkReal x3321=(((x3293*x3308))+x3319+(((495.0)*x3305))+((x3299*x3301))+((sj0*x3296*x3298)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((632.0)+x3319+(((-1.0)*x3317)))))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3321))+x3320)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3321))+x3320)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-165.0)*x3300))+x3318+(((-1.0)*x3312))+(((-165.0)*gconst25*r20)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+x3319+(((-1.0)*x3317)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+((r10*x3295*x3297))+((x3292*x3304))+(((-165.0)*x3305))+x3312+(((-1.0)*x3318))+(((-1.0)*gconst25*x3297*x3298))+(((-1.0)*x3297*x3301))+(((-1.0)*x3293*x3304))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3352=IKPowWithIntegerCheck(cj4,-1);
if(!x3352.valid){
continue;
}
IkReal x3323=x3352.value;
IkReal x3324=((632.0)*cj4);
IkReal x3325=cj4*cj4;
IkReal x3326=(r22*sj4);
IkReal x3327=(cj4*r20);
IkReal x3328=(cj4*pz);
IkReal x3329=((0.002)*x3323);
IkReal x3330=(gconst26*sj4);
IkReal x3331=((528.0)*x3326);
IkReal x3332=((6000.0)*x3328);
IkReal x3333=((2000.0)*x3328);
IkReal x3334=((176.0)*x3326);
IkReal x3335=(cj4*gconst26*r21);
IkReal x3336=(r22*x3325);
IkReal x3337=((2304.0)*x3336);
IkReal x3338=((495.0)*x3335);
IkReal x3339=((495.0)*gconst25*x3327);
IkReal x3340=((768.0)*x3336);
IkReal x3341=((165.0)*x3335);
IkReal x3342=((165.0)*gconst25*x3327);
IkReal x3343=(cj4*gconst25*r21*sj4);
IkReal x3344=((2304.0)*x3343);
IkReal x3345=((2304.0)*x3327*x3330);
IkReal x3346=((768.0)*x3343);
IkReal x3347=((768.0)*x3327*x3330);
IkReal x3348=(x3342+x3341+x3347);
IkReal x3349=(x3345+x3339+x3338);
IkReal x3350=(x3344+x3332+x3331+x3337);
IkReal x3351=(x3340+x3346+x3333+x3334);
op[0]=(x3329*((x3351+x3324+(((-1.0)*x3348)))));
op[1]=0.66;
op[2]=(x3329*((x3350+x3324+(((-1.0)*x3349)))));
op[3]=1.32;
op[4]=(x3329*(((((-1.0)*x3324))+x3350+(((-1.0)*x3349)))));
op[5]=0.66;
op[6]=(x3329*(((((-1.0)*x3324))+x3351+(((-1.0)*x3348)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3353=cj4*cj4;
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(cj4,-1);
if(!x3399.valid){
continue;
}
IkReal x3354=x3399.value;
IkReal x3355=((632.0)*cj4);
IkReal x3356=((495.0)*gconst25);
IkReal x3357=((0.002)*x3354);
IkReal x3358=((165.0)*gconst26);
IkReal x3359=(gconst25*r21);
IkReal x3360=(gconst26*r20);
IkReal x3361=(cj4*sj4);
IkReal x3362=(r11*sj0);
IkReal x3363=(cj4*pz);
IkReal x3364=(r10*sj0);
IkReal x3365=((165.0)*gconst25);
IkReal x3366=((495.0)*gconst26);
IkReal x3367=(r22*sj4);
IkReal x3368=((2000.0)*x3363);
IkReal x3369=((176.0)*x3367);
IkReal x3370=((528.0)*x3367);
IkReal x3371=((6000.0)*x3363);
IkReal x3372=(cj0*x3361);
IkReal x3373=((768.0)*x3361);
IkReal x3374=(r22*x3353);
IkReal x3375=((768.0)*x3374);
IkReal x3376=((2304.0)*x3374);
IkReal x3377=(r12*sj0*x3353);
IkReal x3378=(cj0*r02*x3353);
IkReal x3379=(x3360*x3373);
IkReal x3380=(x3359*x3373);
IkReal x3381=((165.0)*x3378);
IkReal x3382=((165.0)*x3377);
IkReal x3383=((2304.0)*x3360*x3361);
IkReal x3384=((2304.0)*x3359*x3361);
IkReal x3385=((495.0)*x3378);
IkReal x3386=((495.0)*x3377);
IkReal x3387=(x3358*x3361*x3364);
IkReal x3388=(r00*x3358*x3372);
IkReal x3389=(r01*x3365*x3372);
IkReal x3390=(x3361*x3362*x3365);
IkReal x3391=(r00*x3366*x3372);
IkReal x3392=(x3361*x3364*x3366);
IkReal x3393=(r01*x3356*x3372);
IkReal x3394=(x3356*x3361*x3362);
IkReal x3395=(x3383+x3391+x3392);
IkReal x3396=(x3379+x3387+x3388);
IkReal x3397=(x3376+x3371+x3370+x3386+x3384+x3385+x3393+x3394);
IkReal x3398=(x3375+x3368+x3369+x3382+x3380+x3381+x3389+x3390);
j1evalpoly[0]=(((x3357*(htj1*htj1)*((x3355+x3395+(((-1.0)*x3397))))))+((x3357*((x3355+x3396+(((-1.0)*x3398))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x3357*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3355))+x3396+(((-1.0)*x3398))))))+((x3357*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3355))+x3395+(((-1.0)*x3397)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3400=((1.0)*cj1);
IkReal x3401=(cj4*r22);
IkReal x3402=(gconst25*r20);
IkReal x3403=((1.0)*sj1);
IkReal x3404=(gconst26*r21);
IkReal x3405=(gconst26*r20*sj4);
IkReal x3406=(gconst25*r21*sj4);
if( IKabs(((((-1.0)*x3400*x3402))+(((-1.0)*x3400*x3404))+(((-1.0)*x3401*x3403))+((sj1*x3405))+(((-1.0)*x3403*x3406)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3400*x3406))+(((-1.0)*x3400*x3401))+((cj1*x3405))+((sj1*x3404))+((sj1*x3402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3400*x3402))+(((-1.0)*x3400*x3404))+(((-1.0)*x3401*x3403))+((sj1*x3405))+(((-1.0)*x3403*x3406))))+IKsqr(((((-1.0)*x3400*x3406))+(((-1.0)*x3400*x3401))+((cj1*x3405))+((sj1*x3404))+((sj1*x3402))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3400*x3402))+(((-1.0)*x3400*x3404))+(((-1.0)*x3401*x3403))+((sj1*x3405))+(((-1.0)*x3403*x3406))), ((((-1.0)*x3400*x3406))+(((-1.0)*x3400*x3401))+((cj1*x3405))+((sj1*x3404))+((sj1*x3402))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3407=IKsin(j2);
IkReal x3408=IKcos(j2);
IkReal x3409=(sj0*sj4);
IkReal x3410=(gconst25*r11);
IkReal x3411=(gconst26*sj4);
IkReal x3412=((1.0)*r10);
IkReal x3413=((0.088)*sj0);
IkReal x3414=((1.0)*sj1);
IkReal x3415=((1.0)*sj0);
IkReal x3416=((0.088)*cj0);
IkReal x3417=(gconst25*sj4);
IkReal x3418=((0.384)*sj1);
IkReal x3419=(cj0*r01);
IkReal x3420=((1.0)*cj0);
IkReal x3421=(cj1*x3408);
IkReal x3422=((0.0825)*x3407);
IkReal x3423=(cj1*x3407);
IkReal x3424=(sj1*x3408);
IkReal x3425=(x3407*x3414);
IkReal x3426=((1.0)*x3421);
IkReal x3427=(x3426+x3425);
evalcond[0]=((((-1.0)*x3408*x3414))+x3423+((gconst26*r21))+((gconst25*r20)));
evalcond[1]=((((-1.0)*r21*x3417))+(((-1.0)*x3427))+((r20*x3411))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*gconst25*sj0*x3412))+(((-1.0)*gconst26*x3419))+(((-1.0)*gconst26*r11*x3415))+(((-1.0)*x3427))+(((-1.0)*gconst25*r00*x3420)));
CheckValue<IkReal> x3428=IKPowWithIntegerCheck(cj4,-1);
if(!x3428.valid){
continue;
}
evalcond[3]=((((-0.0825)*x3424))+(((-1.0)*x3407*x3418))+(((0.088)*r22*sj4*(x3428.value)))+(((-0.384)*x3421))+pz+((cj1*x3422))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((x3409*x3410))+((x3417*x3419))+x3424+((cj0*cj4*r02))+(((-1.0)*x3423))+(((-1.0)*r00*x3411*x3420))+(((-1.0)*gconst26*x3409*x3412))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*px*x3420))+(((-0.0825)*x3421))+(((-1.0)*gconst25*r01*x3416))+(((-1.0)*py*x3415))+((x3408*x3418))+((gconst26*r00*x3416))+(((-0.384)*x3423))+(((0.0825)*cj1))+(((-1.0)*sj1*x3422))+(((0.316)*sj1))+(((-1.0)*x3410*x3413))+((gconst26*r10*x3413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3429=((-1.0)*r21);
IkReal x3431 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3431)==0){
continue;
}
IkReal x3430=pow(x3431,-0.5);
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal(x3429),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x3432.value))));
IkReal gconst28=(x3429*x3430);
IkReal gconst29=((1.0)*r20*x3430);
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3433.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x3434=((-1.0)*r21);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(x3434),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
IkReal x3435=((1.0)*(x3437.value));
IkReal x3436=x3430;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3435)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3435)));
IkReal gconst28=(x3434*x3436);
IkReal gconst29=((1.0)*r20*x3436);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x3438=((-1.0)*r21);
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(x3438),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
IkReal x3439=((1.0)*(x3441.value));
IkReal x3440=x3430;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3439)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3439)));
IkReal gconst28=(x3438*x3440);
IkReal gconst29=((1.0)*r20*x3440);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x3442=((-1.0)*r21);
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal(x3442),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
IkReal x3443=((1.0)*(x3445.value));
IkReal x3444=x3430;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3443)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3443)));
IkReal gconst28=(x3442*x3444);
IkReal gconst29=((1.0)*r20*x3444);
IkReal x3446=(r21*rxp1_2);
IkReal x3447=(rxp2_2*sj4);
IkReal x3448=(r20*rxp0_2);
IkReal x3449=x3430;
IkReal x3450=(cj4*x3449);
j0eval[0]=((((-11.3636363636364)*x3448*x3450))+(((-11.3636363636364)*x3447))+(((-11.3636363636364)*x3446*x3450)));
j0eval[1]=IKsign(((((-1.0)*x3446*x3450))+(((-1.0)*x3448*x3450))+(((-1.0)*x3447))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3451=((0.088)*gconst28);
IkReal x3452=((0.088)*gconst29);
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x3451))+((r10*x3452)))),IkReal(((((-1.0)*r01*x3451))+(((-1.0)*px))+((r00*x3452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
CheckValue<IkReal> x3454=IKPowWithIntegerCheck(IKsign((((r20*sj4*x3451))+(((-1.0)*rxp2_2*sj4))+(((-1.0)*cj4*gconst29*rxp0_2))+((r21*sj4*x3452))+((cj4*gconst28*rxp1_2)))),-1);
if(!x3454.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3453.value)+(((1.5707963267949)*(x3454.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3455=IKsin(j0);
IkReal x3456=IKcos(j0);
IkReal x3457=((0.088)*gconst29);
IkReal x3458=((1.0)*sj4);
IkReal x3459=((1.0)*gconst29);
IkReal x3460=(cj4*gconst28);
IkReal x3461=(r00*x3455);
IkReal x3462=(r10*x3456);
IkReal x3463=(r11*x3456);
IkReal x3464=(cj4*x3455);
IkReal x3465=(r12*x3456);
IkReal x3466=(gconst28*r01*x3455);
evalcond[0]=(((gconst29*r01*x3455))+(((-1.0)*x3459*x3463))+(((-1.0)*gconst28*x3462))+((gconst28*x3461)));
evalcond[1]=((((0.088)*x3466))+((x3457*x3462))+(((-0.088)*gconst28*x3463))+(((-1.0)*py*x3456))+(((-1.0)*x3457*x3461))+((px*x3455)));
evalcond[2]=(((cj4*x3465))+(((-1.0)*gconst29*x3458*x3462))+((gconst29*sj4*x3461))+(((-1.0)*x3458*x3466))+(((-1.0)*r02*x3464))+((gconst28*sj4*x3463)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x3459*x3462))+((x3460*x3463))+((r02*sj4*x3455))+(((-1.0)*r01*x3455*x3460))+(((-1.0)*x3458*x3465))+((cj4*gconst29*x3461)));
evalcond[4]=((((-1.0)*r02*x3456*x3458))+(((-1.0)*r10*x3459*x3464))+(((-1.0)*cj4*r00*x3456*x3459))+((r01*x3456*x3460))+((r11*x3455*x3460))+(((-1.0)*r12*x3455*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3467=((-1.0)*r21);
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal(x3467),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
IkReal x3468=((1.0)*(x3470.value));
IkReal x3469=x3430;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3468)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3468)));
IkReal gconst28=(x3467*x3469);
IkReal gconst29=((1.0)*r20*x3469);
IkReal x3471=((6000.0)*pz);
CheckValue<IkReal> x3504=IKPowWithIntegerCheck(cj4,-1);
if(!x3504.valid){
continue;
}
IkReal x3472=x3504.value;
IkReal x3473=((2000.0)*pz);
IkReal x3474=((165.0)*gconst29);
IkReal x3475=((165.0)*cj0);
IkReal x3476=(gconst28*sj4);
IkReal x3477=(cj4*r02);
IkReal x3478=((495.0)*gconst29);
IkReal x3479=(gconst28*r20);
IkReal x3480=((495.0)*cj0);
IkReal x3481=(cj4*r22);
IkReal x3482=((165.0)*sj0);
IkReal x3483=(cj4*r12);
IkReal x3484=((495.0)*sj0);
IkReal x3485=((2304.0)*x3481);
IkReal x3486=((768.0)*x3481);
IkReal x3487=(cj0*r00*sj4);
IkReal x3488=(r10*sj0*sj4);
IkReal x3489=(gconst29*r20*sj4);
IkReal x3490=(r22*sj4*x3472);
IkReal x3491=((528.0)*x3490);
IkReal x3492=((2304.0)*r21*x3476);
IkReal x3493=((2304.0)*x3489);
IkReal x3494=((768.0)*r21*x3476);
IkReal x3495=((176.0)*x3490);
IkReal x3496=((768.0)*x3489);
IkReal x3497=(x3478*x3488);
IkReal x3498=(x3478*x3487);
IkReal x3499=(x3493+(((495.0)*x3479))+((r21*x3478)));
IkReal x3500=(x3494+x3495+x3486+x3473);
IkReal x3501=(x3492+x3491+x3485+x3471);
IkReal x3502=(x3498+x3497+x3493);
IkReal x3503=(((x3477*x3480))+x3501+((x3483*x3484))+((r01*x3476*x3480))+((r11*x3476*x3484)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((-632.0)+((x3474*x3488))+((x3474*x3487))+(((-1.0)*x3482*x3483))+(((-1.0)*x3500))+x3496+(((-1.0)*x3475*x3477))+(((-1.0)*r01*x3475*x3476))+(((-1.0)*r11*x3476*x3482)))))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3499))+x3501)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-165.0)*x3479))+(((-1.0)*r21*x3474))+(((-1.0)*x3496))+x3500)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3499))+x3501)))))+(((0.000378787878787879)*(IKabs(((-632.0)+x3502+(((-1.0)*x3503)))))))+(((0.000378787878787879)*(IKabs(((632.0)+x3502+(((-1.0)*x3503))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3535=IKPowWithIntegerCheck(cj4,-1);
if(!x3535.valid){
continue;
}
IkReal x3505=x3535.value;
IkReal x3506=((632.0)*cj4);
IkReal x3507=cj4*cj4;
IkReal x3508=(r22*sj4);
IkReal x3509=((0.002)*x3505);
IkReal x3510=(cj4*pz);
IkReal x3511=(cj4*gconst28);
IkReal x3512=((2304.0)*sj4);
IkReal x3513=((768.0)*sj4);
IkReal x3514=((528.0)*x3508);
IkReal x3515=((6000.0)*x3510);
IkReal x3516=((2000.0)*x3510);
IkReal x3517=((176.0)*x3508);
IkReal x3518=(cj4*gconst29*r21);
IkReal x3519=(r22*x3507);
IkReal x3520=(cj4*gconst29*r20);
IkReal x3521=((2304.0)*x3519);
IkReal x3522=((495.0)*r20*x3511);
IkReal x3523=((495.0)*x3518);
IkReal x3524=((768.0)*x3519);
IkReal x3525=((165.0)*r20*x3511);
IkReal x3526=((165.0)*x3518);
IkReal x3527=(r21*x3511*x3512);
IkReal x3528=(x3512*x3520);
IkReal x3529=(r21*x3511*x3513);
IkReal x3530=(x3513*x3520);
IkReal x3531=(x3530+x3526+x3525);
IkReal x3532=(x3522+x3523+x3528);
IkReal x3533=(x3517+x3516+x3524+x3529);
IkReal x3534=(x3515+x3514+x3527+x3521);
op[0]=(x3509*((x3533+x3506+(((-1.0)*x3531)))));
op[1]=0.66;
op[2]=(x3509*((x3534+x3506+(((-1.0)*x3532)))));
op[3]=1.32;
op[4]=(x3509*((x3534+(((-1.0)*x3506))+(((-1.0)*x3532)))));
op[5]=0.66;
op[6]=(x3509*((x3533+(((-1.0)*x3506))+(((-1.0)*x3531)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3536=cj4*cj4;
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(cj4,-1);
if(!x3582.valid){
continue;
}
IkReal x3537=x3582.value;
IkReal x3538=((632.0)*cj4);
IkReal x3539=(cj4*sj4);
IkReal x3540=((165.0)*cj0);
IkReal x3541=(gconst28*r01);
IkReal x3542=((0.002)*x3537);
IkReal x3543=(gconst29*r20);
IkReal x3544=(gconst29*r00);
IkReal x3545=(gconst28*r21);
IkReal x3546=((495.0)*cj0);
IkReal x3547=((165.0)*sj0);
IkReal x3548=(gconst29*r10);
IkReal x3549=(cj4*pz);
IkReal x3550=(r22*sj4);
IkReal x3551=((495.0)*sj0);
IkReal x3552=(gconst28*r11);
IkReal x3553=((2000.0)*x3549);
IkReal x3554=((176.0)*x3550);
IkReal x3555=((528.0)*x3550);
IkReal x3556=((6000.0)*x3549);
IkReal x3557=(r22*x3536);
IkReal x3558=(r02*x3536);
IkReal x3559=(r12*x3536);
IkReal x3560=((768.0)*x3557);
IkReal x3561=((2304.0)*x3557);
IkReal x3562=((768.0)*x3539*x3543);
IkReal x3563=(x3540*x3558);
IkReal x3564=((768.0)*x3539*x3545);
IkReal x3565=(x3547*x3559);
IkReal x3566=((2304.0)*x3539*x3543);
IkReal x3567=(x3546*x3558);
IkReal x3568=(x3551*x3559);
IkReal x3569=((2304.0)*x3539*x3545);
IkReal x3570=(x3539*x3540*x3544);
IkReal x3571=(x3539*x3547*x3548);
IkReal x3572=(x3539*x3547*x3552);
IkReal x3573=(x3539*x3540*x3541);
IkReal x3574=(x3539*x3548*x3551);
IkReal x3575=(x3539*x3544*x3546);
IkReal x3576=(x3539*x3551*x3552);
IkReal x3577=(x3539*x3541*x3546);
IkReal x3578=(x3571+x3570+x3562);
IkReal x3579=(x3575+x3574+x3566);
IkReal x3580=(x3577+x3576+x3556+x3555+x3561+x3567+x3568+x3569);
IkReal x3581=(x3573+x3572+x3554+x3553+x3563+x3560+x3564+x3565);
j1evalpoly[0]=(((x3542*(htj1*htj1*htj1*htj1)*((x3579+(((-1.0)*x3538))+(((-1.0)*x3580))))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x3542*((x3538+x3578+(((-1.0)*x3581))))))+((x3542*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3578+(((-1.0)*x3538))+(((-1.0)*x3581))))))+((x3542*(htj1*htj1)*((x3538+x3579+(((-1.0)*x3580)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3583=(cj1*sj4);
IkReal x3584=(gconst29*r20);
IkReal x3585=((1.0)*cj1);
IkReal x3586=(cj4*r22);
IkReal x3587=(gconst29*r21);
IkReal x3588=(gconst28*r20);
IkReal x3589=(sj1*sj4);
IkReal x3590=((1.0)*gconst28*r21);
if( IKabs(((((-1.0)*x3589*x3590))+(((-1.0)*sj1*x3586))+((x3584*x3589))+(((-1.0)*x3585*x3588))+(((-1.0)*x3585*x3587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3583*x3584))+(((-1.0)*x3583*x3590))+(((-1.0)*x3585*x3586))+((sj1*x3588))+((sj1*x3587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3589*x3590))+(((-1.0)*sj1*x3586))+((x3584*x3589))+(((-1.0)*x3585*x3588))+(((-1.0)*x3585*x3587))))+IKsqr((((x3583*x3584))+(((-1.0)*x3583*x3590))+(((-1.0)*x3585*x3586))+((sj1*x3588))+((sj1*x3587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3589*x3590))+(((-1.0)*sj1*x3586))+((x3584*x3589))+(((-1.0)*x3585*x3588))+(((-1.0)*x3585*x3587))), (((x3583*x3584))+(((-1.0)*x3583*x3590))+(((-1.0)*x3585*x3586))+((sj1*x3588))+((sj1*x3587))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3591=IKsin(j2);
IkReal x3592=IKcos(j2);
IkReal x3593=(cj0*gconst29);
IkReal x3594=(gconst28*sj4);
IkReal x3595=(r11*sj0);
IkReal x3596=((0.088)*gconst28);
IkReal x3597=((1.0)*gconst29);
IkReal x3598=((1.0)*sj1);
IkReal x3599=((1.0)*sj0);
IkReal x3600=((1.0)*r00);
IkReal x3601=(cj0*r01);
IkReal x3602=(r10*sj0);
IkReal x3603=(cj1*x3592);
IkReal x3604=(cj1*x3591);
IkReal x3605=(sj1*x3591);
IkReal x3606=(sj1*x3592);
IkReal x3607=(x3591*x3598);
IkReal x3608=((1.0)*x3603);
IkReal x3609=(x3607+x3608);
evalcond[0]=(x3604+((gconst29*r21))+((gconst28*r20))+(((-1.0)*x3592*x3598)));
evalcond[1]=((((-1.0)*r21*x3594))+((gconst29*r20*sj4))+(((-1.0)*x3609))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*gconst28*r10*x3599))+(((-1.0)*x3595*x3597))+(((-1.0)*x3609))+(((-1.0)*cj0*gconst28*x3600))+(((-1.0)*r01*x3593)));
CheckValue<IkReal> x3610=IKPowWithIntegerCheck(cj4,-1);
if(!x3610.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x3610.value)))+(((-0.384)*x3605))+(((-0.384)*x3603))+pz+(((-0.0825)*x3606))+(((0.0825)*x3604))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*sj4*x3597*x3602))+((cj0*cj4*r02))+(((-1.0)*x3604))+x3606+(((-1.0)*sj4*x3593*x3600))+((x3594*x3601))+((x3594*x3595))+((cj4*r12*sj0)));
evalcond[5]=((((0.088)*gconst29*x3602))+(((-0.384)*x3604))+(((0.384)*x3606))+(((-1.0)*x3595*x3596))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.0825)*x3603))+(((-0.0825)*x3605))+(((-1.0)*py*x3599))+(((0.088)*r00*x3593))+(((-1.0)*x3596*x3601))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3611=((1.0)*gconst28);
IkReal x3612=((1.0)*cj4);
IkReal x3613=((1.0)*gconst29);
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3611))+(((-1.0)*r11*x3613)))),IkReal(((((-1.0)*r00*x3611))+(((-1.0)*r01*x3613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
CheckValue<IkReal> x3615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x3611))+((gconst29*r20*sj4))+((r22*(((((-1.0)*x3612*(gconst29*gconst29)))+(((-1.0)*cj4*gconst28*x3611)))))))),-1);
if(!x3615.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3614.value)+(((1.5707963267949)*(x3615.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3616=IKsin(j0);
IkReal x3617=IKcos(j0);
IkReal x3618=((0.088)*gconst29);
IkReal x3619=((1.0)*sj4);
IkReal x3620=((1.0)*gconst29);
IkReal x3621=(cj4*gconst28);
IkReal x3622=(r00*x3616);
IkReal x3623=(r10*x3617);
IkReal x3624=(r11*x3617);
IkReal x3625=(cj4*x3616);
IkReal x3626=(r12*x3617);
IkReal x3627=(gconst28*r01*x3616);
evalcond[0]=(((gconst28*x3622))+((gconst29*r01*x3616))+(((-1.0)*gconst28*x3623))+(((-1.0)*x3620*x3624)));
evalcond[1]=((((-1.0)*py*x3617))+(((0.088)*x3627))+((x3618*x3623))+((px*x3616))+(((-1.0)*x3618*x3622))+(((-0.088)*gconst28*x3624)));
evalcond[2]=((((-1.0)*gconst29*x3619*x3623))+((cj4*x3626))+((gconst28*sj4*x3624))+(((-1.0)*r02*x3625))+((gconst29*sj4*x3622))+(((-1.0)*x3619*x3627)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3616*x3621))+((cj4*gconst29*x3622))+((r02*sj4*x3616))+((x3621*x3624))+(((-1.0)*x3619*x3626))+(((-1.0)*cj4*x3620*x3623)));
evalcond[4]=(((r11*x3616*x3621))+((r01*x3617*x3621))+(((-1.0)*r10*x3620*x3625))+(((-1.0)*r02*x3617*x3619))+(((-1.0)*cj4*r00*x3617*x3620))+(((-1.0)*r12*x3616*x3619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3628=((-1.0)*r21);
CheckValue<IkReal> x3631 = IKatan2WithCheck(IkReal(x3628),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3631.valid){
continue;
}
IkReal x3629=((1.0)*(x3631.value));
IkReal x3630=x3430;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3629)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3629)));
IkReal gconst28=(x3628*x3630);
IkReal gconst29=((1.0)*r20*x3630);
IkReal x3632=((6000.0)*pz);
CheckValue<IkReal> x3665=IKPowWithIntegerCheck(cj4,-1);
if(!x3665.valid){
continue;
}
IkReal x3633=x3665.value;
IkReal x3634=((2000.0)*pz);
IkReal x3635=((165.0)*gconst29);
IkReal x3636=((165.0)*cj0);
IkReal x3637=(gconst28*sj4);
IkReal x3638=(cj4*r02);
IkReal x3639=((495.0)*gconst29);
IkReal x3640=(gconst28*r20);
IkReal x3641=((495.0)*cj0);
IkReal x3642=(cj4*r22);
IkReal x3643=((165.0)*sj0);
IkReal x3644=(cj4*r12);
IkReal x3645=((495.0)*sj0);
IkReal x3646=((2304.0)*x3642);
IkReal x3647=((768.0)*x3642);
IkReal x3648=(cj0*r00*sj4);
IkReal x3649=(r10*sj0*sj4);
IkReal x3650=(gconst29*r20*sj4);
IkReal x3651=(r22*sj4*x3633);
IkReal x3652=((528.0)*x3651);
IkReal x3653=((2304.0)*r21*x3637);
IkReal x3654=((2304.0)*x3650);
IkReal x3655=((768.0)*r21*x3637);
IkReal x3656=((176.0)*x3651);
IkReal x3657=((768.0)*x3650);
IkReal x3658=(x3639*x3649);
IkReal x3659=(x3639*x3648);
IkReal x3660=(x3654+(((495.0)*x3640))+((r21*x3639)));
IkReal x3661=(x3634+x3655+x3656+x3647);
IkReal x3662=(x3632+x3652+x3653+x3646);
IkReal x3663=(x3658+x3659+x3654);
IkReal x3664=(((r01*x3637*x3641))+x3662+((x3638*x3641))+((r11*x3637*x3645))+((x3644*x3645)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3660))+x3662)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3660))+x3662)))))+(((0.000378787878787879)*(IKabs(((632.0)+x3661+(((-165.0)*x3640))+(((-1.0)*r21*x3635))+(((-1.0)*x3657)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3664))+x3663)))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3661))+(((-1.0)*x3643*x3644))+((x3635*x3649))+((x3635*x3648))+x3657+(((-1.0)*x3636*x3638))+(((-1.0)*r11*x3637*x3643))+(((-1.0)*r01*x3636*x3637)))))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3664))+x3663))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3696=IKPowWithIntegerCheck(cj4,-1);
if(!x3696.valid){
continue;
}
IkReal x3666=x3696.value;
IkReal x3667=((632.0)*cj4);
IkReal x3668=cj4*cj4;
IkReal x3669=(r22*sj4);
IkReal x3670=((0.002)*x3666);
IkReal x3671=(cj4*pz);
IkReal x3672=(cj4*gconst28);
IkReal x3673=((2304.0)*sj4);
IkReal x3674=((768.0)*sj4);
IkReal x3675=((528.0)*x3669);
IkReal x3676=((6000.0)*x3671);
IkReal x3677=((2000.0)*x3671);
IkReal x3678=((176.0)*x3669);
IkReal x3679=(cj4*gconst29*r21);
IkReal x3680=(r22*x3668);
IkReal x3681=(cj4*gconst29*r20);
IkReal x3682=((2304.0)*x3680);
IkReal x3683=((495.0)*r20*x3672);
IkReal x3684=((495.0)*x3679);
IkReal x3685=((768.0)*x3680);
IkReal x3686=((165.0)*r20*x3672);
IkReal x3687=((165.0)*x3679);
IkReal x3688=(r21*x3672*x3673);
IkReal x3689=(x3673*x3681);
IkReal x3690=(r21*x3672*x3674);
IkReal x3691=(x3674*x3681);
IkReal x3692=(x3691+x3687+x3686);
IkReal x3693=(x3689+x3683+x3684);
IkReal x3694=(x3690+x3685+x3678+x3677);
IkReal x3695=(x3688+x3682+x3676+x3675);
op[0]=(x3670*((x3694+x3667+(((-1.0)*x3692)))));
op[1]=0.66;
op[2]=(x3670*((x3695+x3667+(((-1.0)*x3693)))));
op[3]=1.32;
op[4]=(x3670*(((((-1.0)*x3667))+x3695+(((-1.0)*x3693)))));
op[5]=0.66;
op[6]=(x3670*(((((-1.0)*x3667))+x3694+(((-1.0)*x3692)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3697=cj4*cj4;
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(cj4,-1);
if(!x3743.valid){
continue;
}
IkReal x3698=x3743.value;
IkReal x3699=((632.0)*cj4);
IkReal x3700=(cj4*sj4);
IkReal x3701=((165.0)*cj0);
IkReal x3702=(gconst28*r01);
IkReal x3703=((0.002)*x3698);
IkReal x3704=(gconst29*r20);
IkReal x3705=(gconst29*r00);
IkReal x3706=(gconst28*r21);
IkReal x3707=((495.0)*cj0);
IkReal x3708=((165.0)*sj0);
IkReal x3709=(gconst29*r10);
IkReal x3710=(cj4*pz);
IkReal x3711=(r22*sj4);
IkReal x3712=((495.0)*sj0);
IkReal x3713=(gconst28*r11);
IkReal x3714=((2000.0)*x3710);
IkReal x3715=((176.0)*x3711);
IkReal x3716=((528.0)*x3711);
IkReal x3717=((6000.0)*x3710);
IkReal x3718=(r22*x3697);
IkReal x3719=(r02*x3697);
IkReal x3720=(r12*x3697);
IkReal x3721=((768.0)*x3718);
IkReal x3722=((2304.0)*x3718);
IkReal x3723=((768.0)*x3700*x3704);
IkReal x3724=(x3701*x3719);
IkReal x3725=((768.0)*x3700*x3706);
IkReal x3726=(x3708*x3720);
IkReal x3727=((2304.0)*x3700*x3704);
IkReal x3728=(x3707*x3719);
IkReal x3729=(x3712*x3720);
IkReal x3730=((2304.0)*x3700*x3706);
IkReal x3731=(x3700*x3701*x3705);
IkReal x3732=(x3700*x3708*x3709);
IkReal x3733=(x3700*x3708*x3713);
IkReal x3734=(x3700*x3701*x3702);
IkReal x3735=(x3700*x3709*x3712);
IkReal x3736=(x3700*x3705*x3707);
IkReal x3737=(x3700*x3712*x3713);
IkReal x3738=(x3700*x3702*x3707);
IkReal x3739=(x3723+x3732+x3731);
IkReal x3740=(x3727+x3736+x3735);
IkReal x3741=(x3728+x3729+x3722+x3738+x3737+x3730+x3717+x3716);
IkReal x3742=(x3724+x3725+x3726+x3721+x3734+x3733+x3715+x3714);
j1evalpoly[0]=((((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x3703*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3741))+x3740+(((-1.0)*x3699))))))+((x3703*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3742))+x3739+(((-1.0)*x3699))))))+((x3703*(((((-1.0)*x3742))+x3699+x3739))))+((x3703*(htj1*htj1)*(((((-1.0)*x3741))+x3699+x3740)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3744=(cj1*sj4);
IkReal x3745=(gconst29*r20);
IkReal x3746=((1.0)*cj1);
IkReal x3747=(cj4*r22);
IkReal x3748=(gconst29*r21);
IkReal x3749=(gconst28*r20);
IkReal x3750=(sj1*sj4);
IkReal x3751=((1.0)*gconst28*r21);
if( IKabs((((x3745*x3750))+(((-1.0)*x3750*x3751))+(((-1.0)*x3746*x3749))+(((-1.0)*x3746*x3748))+(((-1.0)*sj1*x3747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3749))+((sj1*x3748))+((x3744*x3745))+(((-1.0)*x3746*x3747))+(((-1.0)*x3744*x3751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3745*x3750))+(((-1.0)*x3750*x3751))+(((-1.0)*x3746*x3749))+(((-1.0)*x3746*x3748))+(((-1.0)*sj1*x3747))))+IKsqr((((sj1*x3749))+((sj1*x3748))+((x3744*x3745))+(((-1.0)*x3746*x3747))+(((-1.0)*x3744*x3751))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3745*x3750))+(((-1.0)*x3750*x3751))+(((-1.0)*x3746*x3749))+(((-1.0)*x3746*x3748))+(((-1.0)*sj1*x3747))), (((sj1*x3749))+((sj1*x3748))+((x3744*x3745))+(((-1.0)*x3746*x3747))+(((-1.0)*x3744*x3751))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3752=IKsin(j2);
IkReal x3753=IKcos(j2);
IkReal x3754=(cj0*gconst29);
IkReal x3755=(gconst28*sj4);
IkReal x3756=(r11*sj0);
IkReal x3757=((0.088)*gconst28);
IkReal x3758=((1.0)*gconst29);
IkReal x3759=((1.0)*sj1);
IkReal x3760=((1.0)*sj0);
IkReal x3761=((1.0)*r00);
IkReal x3762=(cj0*r01);
IkReal x3763=(r10*sj0);
IkReal x3764=(cj1*x3753);
IkReal x3765=(cj1*x3752);
IkReal x3766=(sj1*x3752);
IkReal x3767=(sj1*x3753);
IkReal x3768=(x3752*x3759);
IkReal x3769=((1.0)*x3764);
IkReal x3770=(x3768+x3769);
evalcond[0]=((((-1.0)*x3753*x3759))+x3765+((gconst29*r21))+((gconst28*r20)));
evalcond[1]=((((-1.0)*r21*x3755))+((gconst29*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*x3770)));
evalcond[2]=((((-1.0)*r01*x3754))+(((-1.0)*x3756*x3758))+(((-1.0)*gconst28*r10*x3760))+(((-1.0)*x3770))+(((-1.0)*cj0*gconst28*x3761)));
CheckValue<IkReal> x3771=IKPowWithIntegerCheck(cj4,-1);
if(!x3771.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x3771.value)))+(((0.0825)*x3765))+(((-0.0825)*x3767))+pz+(((-0.384)*x3766))+(((-0.384)*x3764))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((x3755*x3756))+(((-1.0)*x3765))+((cj0*cj4*r02))+(((-1.0)*sj4*x3754*x3761))+x3767+(((-1.0)*sj4*x3758*x3763))+((x3755*x3762))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*x3757*x3762))+(((0.088)*r00*x3754))+(((-1.0)*x3756*x3757))+(((-0.0825)*x3764))+(((-0.0825)*x3766))+(((0.088)*gconst29*x3763))+(((-0.384)*x3765))+(((0.0825)*cj1))+(((0.316)*sj1))+(((0.384)*x3767))+(((-1.0)*cj0*px))+(((-1.0)*py*x3760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3772=((1.0)*gconst29);
IkReal x3773=(gconst28*sj4);
CheckValue<IkReal> x3774 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x3772))+((r11*x3773))+((cj4*r12)))),IkReal(((((-1.0)*r00*sj4*x3772))+((r01*x3773))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3772))+(((-1.0)*gconst28*r20)))),-1);
if(!x3775.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3774.value)+(((1.5707963267949)*(x3775.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3776=IKsin(j0);
IkReal x3777=IKcos(j0);
IkReal x3778=((0.088)*gconst29);
IkReal x3779=((1.0)*sj4);
IkReal x3780=((1.0)*gconst29);
IkReal x3781=(cj4*gconst28);
IkReal x3782=(r00*x3776);
IkReal x3783=(r10*x3777);
IkReal x3784=(r11*x3777);
IkReal x3785=(cj4*x3776);
IkReal x3786=(r12*x3777);
IkReal x3787=(gconst28*r01*x3776);
evalcond[0]=(((gconst28*x3782))+(((-1.0)*gconst28*x3783))+(((-1.0)*x3780*x3784))+((gconst29*r01*x3776)));
evalcond[1]=((((-1.0)*x3778*x3782))+((px*x3776))+((x3778*x3783))+(((0.088)*x3787))+(((-0.088)*gconst28*x3784))+(((-1.0)*py*x3777)));
evalcond[2]=((((-1.0)*gconst29*x3779*x3783))+((gconst29*sj4*x3782))+(((-1.0)*x3779*x3787))+((gconst28*sj4*x3784))+(((-1.0)*r02*x3785))+((cj4*x3786)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x3780*x3783))+(((-1.0)*x3779*x3786))+((cj4*gconst29*x3782))+((r02*sj4*x3776))+((x3781*x3784))+(((-1.0)*r01*x3776*x3781)));
evalcond[4]=((((-1.0)*cj4*r00*x3777*x3780))+(((-1.0)*r12*x3776*x3779))+(((-1.0)*r02*x3777*x3779))+((r01*x3777*x3781))+(((-1.0)*r10*x3780*x3785))+((r11*x3776*x3781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3788=((-1.0)*r21);
CheckValue<IkReal> x3791 = IKatan2WithCheck(IkReal(x3788),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3791.valid){
continue;
}
IkReal x3789=((1.0)*(x3791.value));
IkReal x3790=x3430;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3789)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3789)));
IkReal gconst28=(x3788*x3790);
IkReal gconst29=((1.0)*r20*x3790);
IkReal x3792=((6000.0)*pz);
CheckValue<IkReal> x3825=IKPowWithIntegerCheck(cj4,-1);
if(!x3825.valid){
continue;
}
IkReal x3793=x3825.value;
IkReal x3794=((2000.0)*pz);
IkReal x3795=((165.0)*gconst29);
IkReal x3796=((165.0)*cj0);
IkReal x3797=(gconst28*sj4);
IkReal x3798=(cj4*r02);
IkReal x3799=((495.0)*gconst29);
IkReal x3800=(gconst28*r20);
IkReal x3801=((495.0)*cj0);
IkReal x3802=(cj4*r22);
IkReal x3803=((165.0)*sj0);
IkReal x3804=(cj4*r12);
IkReal x3805=((495.0)*sj0);
IkReal x3806=((2304.0)*x3802);
IkReal x3807=((768.0)*x3802);
IkReal x3808=(cj0*r00*sj4);
IkReal x3809=(r10*sj0*sj4);
IkReal x3810=(gconst29*r20*sj4);
IkReal x3811=(r22*sj4*x3793);
IkReal x3812=((528.0)*x3811);
IkReal x3813=((2304.0)*r21*x3797);
IkReal x3814=((2304.0)*x3810);
IkReal x3815=((768.0)*r21*x3797);
IkReal x3816=((176.0)*x3811);
IkReal x3817=((768.0)*x3810);
IkReal x3818=(x3799*x3809);
IkReal x3819=(x3799*x3808);
IkReal x3820=(((r21*x3799))+(((495.0)*x3800))+x3814);
IkReal x3821=(x3794+x3816+x3815+x3807);
IkReal x3822=(x3792+x3812+x3813+x3806);
IkReal x3823=(x3814+x3818+x3819);
IkReal x3824=(((x3804*x3805))+((r11*x3797*x3805))+((x3798*x3801))+x3822+((r01*x3797*x3801)));
j1eval[0]=((1.0)+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3796*x3798))+(((-1.0)*x3821))+(((-1.0)*r11*x3797*x3803))+x3817+(((-1.0)*x3803*x3804))+((x3795*x3808))+((x3795*x3809))+(((-1.0)*r01*x3796*x3797)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3820))+x3822)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3824))+x3823)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3817))+x3821+(((-165.0)*x3800))+(((-1.0)*r21*x3795)))))))+(((0.000378787878787879)*(IKabs(((-632.0)+(((-1.0)*x3824))+x3823)))))+(((0.000378787878787879)*(IKabs(((632.0)+(((-1.0)*x3820))+x3822))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3856=IKPowWithIntegerCheck(cj4,-1);
if(!x3856.valid){
continue;
}
IkReal x3826=x3856.value;
IkReal x3827=((632.0)*cj4);
IkReal x3828=cj4*cj4;
IkReal x3829=(r22*sj4);
IkReal x3830=((0.002)*x3826);
IkReal x3831=(cj4*pz);
IkReal x3832=(cj4*gconst28);
IkReal x3833=((2304.0)*sj4);
IkReal x3834=((768.0)*sj4);
IkReal x3835=((528.0)*x3829);
IkReal x3836=((6000.0)*x3831);
IkReal x3837=((2000.0)*x3831);
IkReal x3838=((176.0)*x3829);
IkReal x3839=(cj4*gconst29*r21);
IkReal x3840=(r22*x3828);
IkReal x3841=(cj4*gconst29*r20);
IkReal x3842=((2304.0)*x3840);
IkReal x3843=((495.0)*r20*x3832);
IkReal x3844=((495.0)*x3839);
IkReal x3845=((768.0)*x3840);
IkReal x3846=((165.0)*r20*x3832);
IkReal x3847=((165.0)*x3839);
IkReal x3848=(r21*x3832*x3833);
IkReal x3849=(x3833*x3841);
IkReal x3850=(r21*x3832*x3834);
IkReal x3851=(x3834*x3841);
IkReal x3852=(x3851+x3847+x3846);
IkReal x3853=(x3843+x3844+x3849);
IkReal x3854=(x3850+x3845+x3837+x3838);
IkReal x3855=(x3842+x3848+x3835+x3836);
op[0]=(x3830*(((((-1.0)*x3852))+x3854+x3827)));
op[1]=0.66;
op[2]=(x3830*(((((-1.0)*x3853))+x3855+x3827)));
op[3]=1.32;
op[4]=(x3830*(((((-1.0)*x3853))+(((-1.0)*x3827))+x3855)));
op[5]=0.66;
op[6]=(x3830*(((((-1.0)*x3852))+(((-1.0)*x3827))+x3854)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3857=cj4*cj4;
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(cj4,-1);
if(!x3903.valid){
continue;
}
IkReal x3858=x3903.value;
IkReal x3859=((632.0)*cj4);
IkReal x3860=(cj4*sj4);
IkReal x3861=((165.0)*cj0);
IkReal x3862=(gconst28*r01);
IkReal x3863=((0.002)*x3858);
IkReal x3864=(gconst29*r20);
IkReal x3865=(gconst29*r00);
IkReal x3866=(gconst28*r21);
IkReal x3867=((495.0)*cj0);
IkReal x3868=((165.0)*sj0);
IkReal x3869=(gconst29*r10);
IkReal x3870=(cj4*pz);
IkReal x3871=(r22*sj4);
IkReal x3872=((495.0)*sj0);
IkReal x3873=(gconst28*r11);
IkReal x3874=((2000.0)*x3870);
IkReal x3875=((176.0)*x3871);
IkReal x3876=((528.0)*x3871);
IkReal x3877=((6000.0)*x3870);
IkReal x3878=(r22*x3857);
IkReal x3879=(r02*x3857);
IkReal x3880=(r12*x3857);
IkReal x3881=((768.0)*x3878);
IkReal x3882=((2304.0)*x3878);
IkReal x3883=((768.0)*x3860*x3864);
IkReal x3884=(x3861*x3879);
IkReal x3885=((768.0)*x3860*x3866);
IkReal x3886=(x3868*x3880);
IkReal x3887=((2304.0)*x3860*x3864);
IkReal x3888=(x3867*x3879);
IkReal x3889=(x3872*x3880);
IkReal x3890=((2304.0)*x3860*x3866);
IkReal x3891=(x3860*x3861*x3865);
IkReal x3892=(x3860*x3868*x3869);
IkReal x3893=(x3860*x3868*x3873);
IkReal x3894=(x3860*x3861*x3862);
IkReal x3895=(x3860*x3869*x3872);
IkReal x3896=(x3860*x3865*x3867);
IkReal x3897=(x3860*x3872*x3873);
IkReal x3898=(x3860*x3862*x3867);
IkReal x3899=(x3892+x3891+x3883);
IkReal x3900=(x3896+x3895+x3887);
IkReal x3901=(x3876+x3877+x3898+x3890+x3897+x3882+x3889+x3888);
IkReal x3902=(x3874+x3875+x3893+x3894+x3885+x3884+x3886+x3881);
j1evalpoly[0]=(((x3863*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3859))+(((-1.0)*x3902))+x3899))))+((x3863*(((((-1.0)*x3902))+x3859+x3899))))+(((-1.32)*(htj1*htj1*htj1)))+(((-0.66)*(htj1*htj1*htj1*htj1*htj1)))+(((-0.66)*htj1))+((x3863*(htj1*htj1)*(((((-1.0)*x3901))+x3900+x3859))))+((x3863*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3859))+(((-1.0)*x3901))+x3900)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3904=(cj1*sj4);
IkReal x3905=(gconst29*r20);
IkReal x3906=((1.0)*cj1);
IkReal x3907=(cj4*r22);
IkReal x3908=(gconst29*r21);
IkReal x3909=(gconst28*r20);
IkReal x3910=(sj1*sj4);
IkReal x3911=((1.0)*gconst28*r21);
if( IKabs(((((-1.0)*x3906*x3909))+(((-1.0)*x3906*x3908))+((x3905*x3910))+(((-1.0)*x3910*x3911))+(((-1.0)*sj1*x3907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3904*x3911))+(((-1.0)*x3906*x3907))+((sj1*x3909))+((sj1*x3908))+((x3904*x3905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3906*x3909))+(((-1.0)*x3906*x3908))+((x3905*x3910))+(((-1.0)*x3910*x3911))+(((-1.0)*sj1*x3907))))+IKsqr(((((-1.0)*x3904*x3911))+(((-1.0)*x3906*x3907))+((sj1*x3909))+((sj1*x3908))+((x3904*x3905))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3906*x3909))+(((-1.0)*x3906*x3908))+((x3905*x3910))+(((-1.0)*x3910*x3911))+(((-1.0)*sj1*x3907))), ((((-1.0)*x3904*x3911))+(((-1.0)*x3906*x3907))+((sj1*x3909))+((sj1*x3908))+((x3904*x3905))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3912=IKsin(j2);
IkReal x3913=IKcos(j2);
IkReal x3914=(cj0*gconst29);
IkReal x3915=(gconst28*sj4);
IkReal x3916=(r11*sj0);
IkReal x3917=((0.088)*gconst28);
IkReal x3918=((1.0)*gconst29);
IkReal x3919=((1.0)*sj1);
IkReal x3920=((1.0)*sj0);
IkReal x3921=((1.0)*r00);
IkReal x3922=(cj0*r01);
IkReal x3923=(r10*sj0);
IkReal x3924=(cj1*x3913);
IkReal x3925=(cj1*x3912);
IkReal x3926=(sj1*x3912);
IkReal x3927=(sj1*x3913);
IkReal x3928=(x3912*x3919);
IkReal x3929=((1.0)*x3924);
IkReal x3930=(x3928+x3929);
evalcond[0]=(x3925+((gconst29*r21))+((gconst28*r20))+(((-1.0)*x3913*x3919)));
evalcond[1]=(((gconst29*r20*sj4))+(((-1.0)*r21*x3915))+(((-1.0)*x3930))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*cj0*gconst28*x3921))+(((-1.0)*r01*x3914))+(((-1.0)*x3916*x3918))+(((-1.0)*gconst28*r10*x3920))+(((-1.0)*x3930)));
CheckValue<IkReal> x3931=IKPowWithIntegerCheck(cj4,-1);
if(!x3931.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x3931.value)))+(((-0.384)*x3924))+(((-0.384)*x3926))+(((-0.0825)*x3927))+pz+(((0.0825)*x3925))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*sj4*x3914*x3921))+((x3915*x3916))+(((-1.0)*x3925))+((cj0*cj4*r02))+((x3915*x3922))+x3927+(((-1.0)*sj4*x3918*x3923))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*py*x3920))+(((0.088)*gconst29*x3923))+(((0.088)*r00*x3914))+(((-0.384)*x3925))+(((-1.0)*x3916*x3917))+(((-1.0)*x3917*x3922))+(((-0.0825)*x3926))+(((-0.0825)*x3924))+(((0.0825)*cj1))+(((0.384)*x3927))+(((0.316)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3932=((0.088)*sj5);
IkReal x3933=((0.088)*cj5);
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x3933))+(((-1.0)*r11*x3932)))),IkReal((((r00*x3933))+(((-1.0)*r01*x3932))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
CheckValue<IkReal> x3935=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*rxp0_2))+((r20*sj4*x3932))+((cj4*rxp1_2*sj5))+(((-1.0)*rxp2_2*sj4))+((r21*sj4*x3933)))),-1);
if(!x3935.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3934.value)+(((1.5707963267949)*(x3935.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3936=IKsin(j0);
IkReal x3937=IKcos(j0);
IkReal x3938=(r11*sj5);
IkReal x3939=((1.0)*r02);
IkReal x3940=((1.0)*r12);
IkReal x3941=((1.0)*r01);
IkReal x3942=((1.0)*r10);
IkReal x3943=(sj4*x3937);
IkReal x3944=(sj5*x3936);
IkReal x3945=(cj5*x3936);
IkReal x3946=(cj4*x3937);
IkReal x3947=(sj4*x3936);
IkReal x3948=(cj4*x3936);
IkReal x3949=((0.088)*x3937);
IkReal x3950=((1.0)*x3937);
evalcond[0]=(((r01*x3945))+((r00*x3944))+(((-1.0)*sj5*x3937*x3942))+(((-1.0)*cj5*r11*x3950)));
evalcond[1]=((((-0.088)*r00*x3945))+(((0.088)*r01*x3944))+(((-1.0)*x3938*x3949))+(((-1.0)*py*x3950))+((cj5*r10*x3949))+((px*x3936)));
evalcond[2]=(((r00*sj4*x3945))+(((-1.0)*sj4*x3941*x3944))+((x3938*x3943))+(((-1.0)*cj5*x3942*x3943))+(((-1.0)*x3939*x3948))+((r12*x3946)));
evalcond[3]=((-1.0)+((cj4*r00*x3945))+((x3938*x3946))+(((-1.0)*cj5*x3942*x3946))+(((-1.0)*x3940*x3943))+((r02*x3947))+(((-1.0)*cj4*x3941*x3944)));
evalcond[4]=((((-1.0)*cj4*x3942*x3945))+(((-1.0)*cj5*r00*x3946))+((x3938*x3948))+(((-1.0)*x3940*x3947))+(((-1.0)*x3939*x3943))+((r01*sj5*x3946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
CheckValue<IkReal> x3979=IKPowWithIntegerCheck(cj4,-1);
if(!x3979.valid){
continue;
}
IkReal x3951=x3979.value;
IkReal x3952=((6000.0)*pz);
IkReal x3953=(cj5*r21);
IkReal x3954=(cj4*r22);
IkReal x3955=((0.352)*sj0);
IkReal x3956=(r11*sj5);
IkReal x3957=(cj0*px);
IkReal x3958=((1.056)*cj5);
IkReal x3959=(cj0*r00);
IkReal x3960=(r20*sj5);
IkReal x3961=(py*sj0);
IkReal x3962=((0.99)*x3954);
IkReal x3963=((4.608)*x3960);
IkReal x3964=((4.608)*x3953);
IkReal x3965=((2304.0)*x3954);
IkReal x3966=(r21*sj4*sj5);
IkReal x3967=(cj5*r20*sj4);
IkReal x3968=(cj0*r01*sj5);
IkReal x3969=(r22*sj4*x3951);
IkReal x3970=(r10*sj0*x3958);
IkReal x3971=(x3958*x3959);
IkReal x3972=((0.99)*x3966);
IkReal x3973=((528.0)*x3969);
IkReal x3974=((2304.0)*x3966);
IkReal x3975=((((495.0)*x3960))+(((495.0)*x3953))+(((2304.0)*x3967)));
IkReal x3976=(x3965+x3973+x3974+x3952);
IkReal x3977=((((1.056)*x3968))+(((12.0)*x3961))+(((1.056)*sj0*x3956))+(((12.0)*x3957))+(((0.99)*x3967)));
IkReal x3978=(x3964+x3962+x3963+x3971+x3970+x3972);
j1eval[0]=((12.752)+(IKabs(((-0.33)+(((0.33)*x3954))+(((-1.0)*x3955*x3956))+(((1.536)*x3953))+(((-4.0)*x3961))+(((0.352)*cj5*x3959))+(((-0.352)*x3968))+(((0.33)*x3966))+(((-0.33)*x3967))+((cj5*r10*x3955))+(((1.536)*x3960))+(((-4.0)*x3957)))))+(((0.002)*(IKabs(((632.0)+(((-1.0)*x3975))+x3976)))))+(IKabs(((0.33)+(((-1.0)*x3977))+x3978)))+(((0.002)*(IKabs(((632.0)+(((-165.0)*x3953))+(((768.0)*x3954))+(((176.0)*x3969))+(((-768.0)*x3967))+(((768.0)*x3966))+(((-165.0)*x3960))+(((2000.0)*pz)))))))+(IKabs(((-0.33)+(((-1.0)*x3977))+x3978)))+(((0.002)*(IKabs(((-632.0)+(((-1.0)*x3975))+x3976))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4013=IKPowWithIntegerCheck(cj4,-1);
if(!x4013.valid){
continue;
}
IkReal x3980=x4013.value;
IkReal x3981=((632.0)*cj4);
IkReal x3982=cj4*cj4;
IkReal x3983=(r22*sj4);
IkReal x3984=((0.002)*x3980);
IkReal x3985=(cj4*pz);
IkReal x3986=((165.0)*cj4);
IkReal x3987=(r20*sj5);
IkReal x3988=(cj5*r21);
IkReal x3989=((495.0)*cj4);
IkReal x3990=(cj5*r20);
IkReal x3991=(r21*sj5);
IkReal x3992=((528.0)*x3983);
IkReal x3993=((6000.0)*x3985);
IkReal x3994=((2000.0)*x3985);
IkReal x3995=((176.0)*x3983);
IkReal x3996=((768.0)*cj4*sj4);
IkReal x3997=(r22*x3982);
IkReal x3998=((2304.0)*cj4*sj4);
IkReal x3999=((2304.0)*x3997);
IkReal x4000=(x3988*x3989);
IkReal x4001=(x3987*x3989);
IkReal x4002=((768.0)*x3997);
IkReal x4003=(x3986*x3987);
IkReal x4004=(x3986*x3988);
IkReal x4005=(x3991*x3998);
IkReal x4006=(x3990*x3998);
IkReal x4007=(x3991*x3996);
IkReal x4008=(x3990*x3996);
IkReal x4009=(x4008+x4003+x4004);
IkReal x4010=(x4000+x4001+x4006);
IkReal x4011=(x4005+x3999+x3993+x3992);
IkReal x4012=(x4002+x4007+x3995+x3994);
op[0]=(x3984*(((((-1.0)*x4009))+x4012+x3981)));
op[1]=0.66;
op[2]=(x3984*((x4011+x3981+(((-1.0)*x4010)))));
op[3]=1.32;
op[4]=(x3984*((x4011+(((-1.0)*x4010))+(((-1.0)*x3981)))));
op[5]=0.66;
op[6]=(x3984*(((((-1.0)*x4009))+x4012+(((-1.0)*x3981)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4014=(cj5*r21);
IkReal x4015=((0.33)*sj4);
IkReal x4016=(r21*sj5);
IkReal x4017=((0.352)*sj0);
IkReal x4018=(r11*sj5);
IkReal x4019=(cj0*px);
IkReal x4020=(cj5*r20);
IkReal x4021=((0.99)*sj4);
IkReal x4022=((1.056)*cj5);
IkReal x4023=(cj0*r00);
IkReal x4024=(py*sj0);
IkReal x4025=(r20*sj5);
IkReal x4026=(cj4*r22);
IkReal x4027=((1.536)*x4025);
IkReal x4028=((1.536)*x4014);
IkReal x4029=((0.33)*x4026);
IkReal x4030=((0.99)*x4026);
IkReal x4031=((4.608)*x4025);
IkReal x4032=((4.608)*x4014);
IkReal x4033=(cj0*r01*sj5);
IkReal x4034=((0.352)*cj5*x4023);
IkReal x4035=(x4015*x4016);
IkReal x4036=(cj5*r10*x4017);
IkReal x4037=(r10*sj0*x4022);
IkReal x4038=(x4022*x4023);
IkReal x4039=(x4016*x4021);
IkReal x4040=((((1.056)*x4033))+((x4020*x4021))+(((12.0)*x4024))+(((12.0)*x4019))+(((1.056)*sj0*x4018)));
IkReal x4041=(((x4017*x4018))+(((4.0)*x4019))+((x4015*x4020))+(((4.0)*x4024))+(((0.352)*x4033)));
IkReal x4042=(x4027+x4028+x4029+x4035+x4034+x4036);
IkReal x4043=(x4031+x4030+x4032+x4037+x4039+x4038);
j1evalpoly[0]=((0.33)+(((htj1*htj1)*(((0.33)+x4043+(((-1.0)*x4040))))))+x4042+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.33)+x4042+(((-1.0)*x4041))))))+(((2.528)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.33)+x4043+(((-1.0)*x4040))))))+(((2.528)*htj1))+(((-1.0)*x4041))+(((5.056)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4044=((1.0)*cj1);
IkReal x4045=(cj4*r22);
IkReal x4046=(cj5*r21);
IkReal x4047=((1.0)*sj1);
IkReal x4048=(r20*sj5);
IkReal x4049=(cj5*r20*sj4);
IkReal x4050=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x4044*x4046))+(((-1.0)*x4044*x4048))+(((-1.0)*x4045*x4047))+(((-1.0)*x4047*x4050))+((sj1*x4049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4044*x4045))+(((-1.0)*x4044*x4050))+((cj1*x4049))+((sj1*x4048))+((sj1*x4046)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4044*x4046))+(((-1.0)*x4044*x4048))+(((-1.0)*x4045*x4047))+(((-1.0)*x4047*x4050))+((sj1*x4049))))+IKsqr(((((-1.0)*x4044*x4045))+(((-1.0)*x4044*x4050))+((cj1*x4049))+((sj1*x4048))+((sj1*x4046))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4044*x4046))+(((-1.0)*x4044*x4048))+(((-1.0)*x4045*x4047))+(((-1.0)*x4047*x4050))+((sj1*x4049))), ((((-1.0)*x4044*x4045))+(((-1.0)*x4044*x4050))+((cj1*x4049))+((sj1*x4048))+((sj1*x4046))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4051=IKsin(j2);
IkReal x4052=IKcos(j2);
IkReal x4053=(sj0*sj5);
IkReal x4054=((1.0)*r10);
IkReal x4055=(cj5*sj4);
IkReal x4056=((1.0)*cj0);
IkReal x4057=((1.0)*sj1);
IkReal x4058=((1.0)*sj0);
IkReal x4059=((0.088)*cj5);
IkReal x4060=(cj1*x4052);
IkReal x4061=(cj1*x4051);
IkReal x4062=(sj1*x4051);
IkReal x4063=(cj0*r01*sj5);
IkReal x4064=(sj1*x4052);
IkReal x4065=(x4051*x4057);
IkReal x4066=((1.0)*x4060);
IkReal x4067=(x4066+x4065);
evalcond[0]=(((cj5*r21))+(((-1.0)*x4052*x4057))+x4061+((r20*sj5)));
evalcond[1]=(((r20*x4055))+(((-1.0)*x4067))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*cj5*r11*x4058))+(((-1.0)*x4053*x4054))+(((-1.0)*x4067))+(((-1.0)*r00*sj5*x4056))+(((-1.0)*cj5*r01*x4056)));
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(cj4,-1);
if(!x4068.valid){
continue;
}
evalcond[3]=((((-0.0825)*x4064))+(((0.088)*r22*sj4*(x4068.value)))+pz+(((-0.384)*x4060))+(((-0.384)*x4062))+(((0.0825)*sj1))+(((-0.316)*cj1))+(((0.0825)*x4061)));
evalcond[4]=(((r11*sj4*x4053))+(((-1.0)*sj0*x4054*x4055))+((cj0*cj4*r02))+x4064+(((-1.0)*r00*x4055*x4056))+((sj4*x4063))+(((-1.0)*x4061))+((cj4*r12*sj0)));
evalcond[5]=((((-0.0825)*x4062))+(((-0.0825)*x4060))+(((0.384)*x4064))+(((-1.0)*px*x4056))+(((-0.088)*r11*x4053))+(((-0.088)*x4063))+(((-0.384)*x4061))+(((0.0825)*cj1))+(((0.316)*sj1))+((r10*sj0*x4059))+((cj0*r00*x4059))+(((-1.0)*py*x4058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4069=(sj4*sj5);
IkReal x4070=((1.0)*cj5*sj4);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4070))+((r11*x4069))+((cj4*r12)))),IkReal(((((-1.0)*r00*x4070))+((r01*x4069))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4072.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4071.value)+(((1.5707963267949)*(x4072.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4073=IKsin(j0);
IkReal x4074=IKcos(j0);
IkReal x4075=(r11*sj5);
IkReal x4076=((1.0)*r02);
IkReal x4077=((1.0)*r12);
IkReal x4078=((1.0)*r01);
IkReal x4079=((1.0)*r10);
IkReal x4080=(sj4*x4074);
IkReal x4081=(sj5*x4073);
IkReal x4082=(cj5*x4073);
IkReal x4083=(cj4*x4074);
IkReal x4084=(sj4*x4073);
IkReal x4085=(cj4*x4073);
IkReal x4086=((0.088)*x4074);
IkReal x4087=((1.0)*x4074);
evalcond[0]=(((r01*x4082))+(((-1.0)*sj5*x4074*x4079))+((r00*x4081))+(((-1.0)*cj5*r11*x4087)));
evalcond[1]=((((-1.0)*py*x4087))+(((-1.0)*x4075*x4086))+(((-0.088)*r00*x4082))+((px*x4073))+((cj5*r10*x4086))+(((0.088)*r01*x4081)));
evalcond[2]=(((r12*x4083))+(((-1.0)*sj4*x4078*x4081))+(((-1.0)*x4076*x4085))+((x4075*x4080))+(((-1.0)*cj5*x4079*x4080))+((r00*sj4*x4082)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x4078*x4081))+((x4075*x4083))+(((-1.0)*x4077*x4080))+(((-1.0)*cj5*x4079*x4083))+((r02*x4084))+((cj4*r00*x4082)));
evalcond[4]=(((r01*sj5*x4083))+(((-1.0)*cj4*x4079*x4082))+(((-1.0)*x4076*x4080))+((x4075*x4085))+(((-1.0)*x4077*x4084))+(((-1.0)*cj5*r00*x4083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
CheckValue<IkReal> x4116=IKPowWithIntegerCheck(cj4,-1);
if(!x4116.valid){
continue;
}
IkReal x4088=x4116.value;
IkReal x4089=((6000.0)*pz);
IkReal x4090=(cj5*r21);
IkReal x4091=(cj4*r22);
IkReal x4092=((0.352)*sj0);
IkReal x4093=(r11*sj5);
IkReal x4094=(cj0*px);
IkReal x4095=((1.056)*cj5);
IkReal x4096=(cj0*r00);
IkReal x4097=(r20*sj5);
IkReal x4098=(py*sj0);
IkReal x4099=((0.99)*x4091);
IkReal x4100=((4.608)*x4097);
IkReal x4101=((4.608)*x4090);
IkReal x4102=((2304.0)*x4091);
IkReal x4103=(r21*sj4*sj5);
IkReal x4104=(cj5*r20*sj4);
IkReal x4105=(cj0*r01*sj5);
IkReal x4106=(r22*sj4*x4088);
IkReal x4107=(r10*sj0*x4095);
IkReal x4108=(x4095*x4096);
IkReal x4109=((0.99)*x4103);
IkReal x4110=((528.0)*x4106);
IkReal x4111=((2304.0)*x4103);
IkReal x4112=((((2304.0)*x4104))+(((495.0)*x4090))+(((495.0)*x4097)));
IkReal x4113=(x4089+x4110+x4111+x4102);
IkReal x4114=((((1.056)*x4105))+(((12.0)*x4098))+(((12.0)*x4094))+(((0.99)*x4104))+(((1.056)*sj0*x4093)));
IkReal x4115=(x4099+x4101+x4100+x4107+x4109+x4108);
j1eval[0]=((12.752)+(IKabs(((-0.33)+(((-1.0)*x4114))+x4115)))+(IKabs(((-0.33)+(((-4.0)*x4098))+(((-4.0)*x4094))+((cj5*r10*x4092))+(((0.33)*x4091))+(((-1.0)*x4092*x4093))+(((0.352)*cj5*x4096))+(((-0.352)*x4105))+(((1.536)*x4097))+(((1.536)*x4090))+(((-0.33)*x4104))+(((0.33)*x4103)))))+(((0.002)*(IKabs(((632.0)+(((-165.0)*x4090))+(((-165.0)*x4097))+(((768.0)*x4103))+(((176.0)*x4106))+(((-768.0)*x4104))+(((768.0)*x4091))+(((2000.0)*pz)))))))+(((0.002)*(IKabs(((632.0)+(((-1.0)*x4112))+x4113)))))+(IKabs(((0.33)+(((-1.0)*x4114))+x4115)))+(((0.002)*(IKabs(((-632.0)+(((-1.0)*x4112))+x4113))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(cj4,-1);
if(!x4150.valid){
continue;
}
IkReal x4117=x4150.value;
IkReal x4118=((632.0)*cj4);
IkReal x4119=cj4*cj4;
IkReal x4120=(r22*sj4);
IkReal x4121=((0.002)*x4117);
IkReal x4122=(cj4*pz);
IkReal x4123=((165.0)*cj4);
IkReal x4124=(r20*sj5);
IkReal x4125=(cj5*r21);
IkReal x4126=((495.0)*cj4);
IkReal x4127=(cj5*r20);
IkReal x4128=(r21*sj5);
IkReal x4129=((528.0)*x4120);
IkReal x4130=((6000.0)*x4122);
IkReal x4131=((2000.0)*x4122);
IkReal x4132=((176.0)*x4120);
IkReal x4133=((768.0)*cj4*sj4);
IkReal x4134=(r22*x4119);
IkReal x4135=((2304.0)*cj4*sj4);
IkReal x4136=((2304.0)*x4134);
IkReal x4137=(x4125*x4126);
IkReal x4138=(x4124*x4126);
IkReal x4139=((768.0)*x4134);
IkReal x4140=(x4123*x4124);
IkReal x4141=(x4123*x4125);
IkReal x4142=(x4128*x4135);
IkReal x4143=(x4127*x4135);
IkReal x4144=(x4128*x4133);
IkReal x4145=(x4127*x4133);
IkReal x4146=(x4145+x4141+x4140);
IkReal x4147=(x4143+x4138+x4137);
IkReal x4148=(x4129+x4142+x4130+x4136);
IkReal x4149=(x4144+x4139+x4131+x4132);
op[0]=(x4121*((x4118+x4149+(((-1.0)*x4146)))));
op[1]=0.66;
op[2]=(x4121*((x4118+x4148+(((-1.0)*x4147)))));
op[3]=1.32;
op[4]=(x4121*(((((-1.0)*x4118))+x4148+(((-1.0)*x4147)))));
op[5]=0.66;
op[6]=(x4121*(((((-1.0)*x4118))+x4149+(((-1.0)*x4146)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4151=(cj5*r21);
IkReal x4152=((0.33)*sj4);
IkReal x4153=(r21*sj5);
IkReal x4154=((0.352)*sj0);
IkReal x4155=(r11*sj5);
IkReal x4156=(cj0*px);
IkReal x4157=(cj5*r20);
IkReal x4158=((0.99)*sj4);
IkReal x4159=((1.056)*cj5);
IkReal x4160=(cj0*r00);
IkReal x4161=(py*sj0);
IkReal x4162=(r20*sj5);
IkReal x4163=(cj4*r22);
IkReal x4164=((1.536)*x4162);
IkReal x4165=((1.536)*x4151);
IkReal x4166=((0.33)*x4163);
IkReal x4167=((0.99)*x4163);
IkReal x4168=((4.608)*x4162);
IkReal x4169=((4.608)*x4151);
IkReal x4170=(cj0*r01*sj5);
IkReal x4171=((0.352)*cj5*x4160);
IkReal x4172=(x4152*x4153);
IkReal x4173=(cj5*r10*x4154);
IkReal x4174=(r10*sj0*x4159);
IkReal x4175=(x4159*x4160);
IkReal x4176=(x4153*x4158);
IkReal x4177=((((12.0)*x4161))+(((12.0)*x4156))+(((1.056)*x4170))+((x4157*x4158))+(((1.056)*sj0*x4155)));
IkReal x4178=(((x4152*x4157))+(((4.0)*x4161))+(((0.352)*x4170))+(((4.0)*x4156))+((x4154*x4155)));
IkReal x4179=(x4166+x4165+x4164+x4171+x4172+x4173);
IkReal x4180=(x4167+x4169+x4168+x4174+x4175+x4176);
j1evalpoly[0]=((0.33)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.33)+(((-1.0)*x4178))+x4179))))+(((-1.0)*x4178))+x4179+(((htj1*htj1*htj1*htj1)*(((-0.33)+(((-1.0)*x4177))+x4180))))+(((2.528)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((0.33)+(((-1.0)*x4177))+x4180))))+(((2.528)*htj1))+(((5.056)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4181=((1.0)*cj1);
IkReal x4182=(cj4*r22);
IkReal x4183=(cj5*r21);
IkReal x4184=((1.0)*sj1);
IkReal x4185=(r20*sj5);
IkReal x4186=(cj5*r20*sj4);
IkReal x4187=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x4181*x4185))+(((-1.0)*x4181*x4183))+((sj1*x4186))+(((-1.0)*x4184*x4187))+(((-1.0)*x4182*x4184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4181*x4187))+(((-1.0)*x4181*x4182))+((sj1*x4185))+((sj1*x4183))+((cj1*x4186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4181*x4185))+(((-1.0)*x4181*x4183))+((sj1*x4186))+(((-1.0)*x4184*x4187))+(((-1.0)*x4182*x4184))))+IKsqr(((((-1.0)*x4181*x4187))+(((-1.0)*x4181*x4182))+((sj1*x4185))+((sj1*x4183))+((cj1*x4186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4181*x4185))+(((-1.0)*x4181*x4183))+((sj1*x4186))+(((-1.0)*x4184*x4187))+(((-1.0)*x4182*x4184))), ((((-1.0)*x4181*x4187))+(((-1.0)*x4181*x4182))+((sj1*x4185))+((sj1*x4183))+((cj1*x4186))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4188=IKsin(j2);
IkReal x4189=IKcos(j2);
IkReal x4190=(sj0*sj5);
IkReal x4191=((1.0)*r10);
IkReal x4192=(cj5*sj4);
IkReal x4193=((1.0)*cj0);
IkReal x4194=((1.0)*sj1);
IkReal x4195=((1.0)*sj0);
IkReal x4196=((0.088)*cj5);
IkReal x4197=(cj1*x4189);
IkReal x4198=(cj1*x4188);
IkReal x4199=(sj1*x4188);
IkReal x4200=(cj0*r01*sj5);
IkReal x4201=(sj1*x4189);
IkReal x4202=(x4188*x4194);
IkReal x4203=((1.0)*x4197);
IkReal x4204=(x4202+x4203);
evalcond[0]=(((cj5*r21))+x4198+(((-1.0)*x4189*x4194))+((r20*sj5)));
evalcond[1]=(((r20*x4192))+(((-1.0)*x4204))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x4204))+(((-1.0)*x4190*x4191))+(((-1.0)*cj5*r11*x4195))+(((-1.0)*cj5*r01*x4193))+(((-1.0)*r00*sj5*x4193)));
CheckValue<IkReal> x4205=IKPowWithIntegerCheck(cj4,-1);
if(!x4205.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x4205.value)))+pz+(((-0.0825)*x4201))+(((-0.384)*x4197))+(((-0.384)*x4199))+(((0.0825)*sj1))+(((0.0825)*x4198))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*x4198))+((cj0*cj4*r02))+(((-1.0)*r00*x4192*x4193))+x4201+(((-1.0)*sj0*x4191*x4192))+((sj4*x4200))+((r11*sj4*x4190))+((cj4*r12*sj0)));
evalcond[5]=((((-0.088)*x4200))+(((-0.0825)*x4199))+(((-0.0825)*x4197))+(((-1.0)*px*x4193))+(((-1.0)*py*x4195))+((cj0*r00*x4196))+(((0.384)*x4201))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.384)*x4198))+(((-0.088)*r11*x4190))+((r10*sj0*x4196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4206=((1.0)*cj5);
IkReal x4207=((1.0)*sj5);
CheckValue<IkReal> x4208 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4207))+(((-1.0)*r11*x4206)))),IkReal(((((-1.0)*r00*x4207))+(((-1.0)*r01*x4206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4208.valid){
continue;
}
CheckValue<IkReal> x4209=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4207))+(((-1.0)*cj4*r22)))),-1);
if(!x4209.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4208.value)+(((1.5707963267949)*(x4209.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4210=IKsin(j0);
IkReal x4211=IKcos(j0);
IkReal x4212=(r11*sj5);
IkReal x4213=((1.0)*r02);
IkReal x4214=((1.0)*r12);
IkReal x4215=((1.0)*r01);
IkReal x4216=((1.0)*r10);
IkReal x4217=(sj4*x4211);
IkReal x4218=(sj5*x4210);
IkReal x4219=(cj5*x4210);
IkReal x4220=(cj4*x4211);
IkReal x4221=(sj4*x4210);
IkReal x4222=(cj4*x4210);
IkReal x4223=((0.088)*x4211);
IkReal x4224=((1.0)*x4211);
evalcond[0]=((((-1.0)*sj5*x4211*x4216))+(((-1.0)*cj5*r11*x4224))+((r01*x4219))+((r00*x4218)));
evalcond[1]=(((px*x4210))+((cj5*r10*x4223))+(((-1.0)*py*x4224))+(((0.088)*r01*x4218))+(((-1.0)*x4212*x4223))+(((-0.088)*r00*x4219)));
evalcond[2]=((((-1.0)*sj4*x4215*x4218))+((r00*sj4*x4219))+(((-1.0)*cj5*x4216*x4217))+((x4212*x4217))+(((-1.0)*x4213*x4222))+((r12*x4220)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*x4216*x4220))+((cj4*r00*x4219))+(((-1.0)*cj4*x4215*x4218))+((x4212*x4220))+((r02*x4221))+(((-1.0)*x4214*x4217)));
evalcond[4]=((((-1.0)*x4213*x4217))+((x4212*x4222))+(((-1.0)*cj5*r00*x4220))+(((-1.0)*x4214*x4221))+((r01*sj5*x4220))+(((-1.0)*cj4*x4216*x4219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(cj4,-1);
if(!x4253.valid){
continue;
}
IkReal x4225=x4253.value;
IkReal x4226=((6000.0)*pz);
IkReal x4227=(cj5*r21);
IkReal x4228=(cj4*r22);
IkReal x4229=((0.352)*sj0);
IkReal x4230=(r11*sj5);
IkReal x4231=(cj0*px);
IkReal x4232=((1.056)*cj5);
IkReal x4233=(cj0*r00);
IkReal x4234=(r20*sj5);
IkReal x4235=(py*sj0);
IkReal x4236=((0.99)*x4228);
IkReal x4237=((4.608)*x4234);
IkReal x4238=((4.608)*x4227);
IkReal x4239=((2304.0)*x4228);
IkReal x4240=(r21*sj4*sj5);
IkReal x4241=(cj5*r20*sj4);
IkReal x4242=(cj0*r01*sj5);
IkReal x4243=(r22*sj4*x4225);
IkReal x4244=(r10*sj0*x4232);
IkReal x4245=(x4232*x4233);
IkReal x4246=((0.99)*x4240);
IkReal x4247=((528.0)*x4243);
IkReal x4248=((2304.0)*x4240);
IkReal x4249=((((495.0)*x4227))+(((495.0)*x4234))+(((2304.0)*x4241)));
IkReal x4250=(x4248+x4247+x4226+x4239);
IkReal x4251=((((0.99)*x4241))+(((12.0)*x4231))+(((12.0)*x4235))+(((1.056)*x4242))+(((1.056)*sj0*x4230)));
IkReal x4252=(x4246+x4244+x4245+x4238+x4237+x4236);
j1eval[0]=((12.752)+(((0.002)*(IKabs(((-632.0)+(((-1.0)*x4249))+x4250)))))+(IKabs(((-0.33)+(((-4.0)*x4235))+(((-4.0)*x4231))+(((0.352)*cj5*x4233))+((cj5*r10*x4229))+(((1.536)*x4234))+(((1.536)*x4227))+(((-0.33)*x4241))+(((-1.0)*x4229*x4230))+(((-0.352)*x4242))+(((0.33)*x4228))+(((0.33)*x4240)))))+(IKabs(((0.33)+(((-1.0)*x4251))+x4252)))+(((0.002)*(IKabs(((632.0)+(((-1.0)*x4249))+x4250)))))+(((0.002)*(IKabs(((632.0)+(((768.0)*x4228))+(((-165.0)*x4234))+(((-165.0)*x4227))+(((-768.0)*x4241))+(((176.0)*x4243))+(((768.0)*x4240))+(((2000.0)*pz)))))))+(IKabs(((-0.33)+(((-1.0)*x4251))+x4252))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(cj4,-1);
if(!x4287.valid){
continue;
}
IkReal x4254=x4287.value;
IkReal x4255=((632.0)*cj4);
IkReal x4256=cj4*cj4;
IkReal x4257=(r22*sj4);
IkReal x4258=((0.002)*x4254);
IkReal x4259=(cj4*pz);
IkReal x4260=((165.0)*cj4);
IkReal x4261=(r20*sj5);
IkReal x4262=(cj5*r21);
IkReal x4263=((495.0)*cj4);
IkReal x4264=(cj5*r20);
IkReal x4265=(r21*sj5);
IkReal x4266=((528.0)*x4257);
IkReal x4267=((6000.0)*x4259);
IkReal x4268=((2000.0)*x4259);
IkReal x4269=((176.0)*x4257);
IkReal x4270=((768.0)*cj4*sj4);
IkReal x4271=(r22*x4256);
IkReal x4272=((2304.0)*cj4*sj4);
IkReal x4273=((2304.0)*x4271);
IkReal x4274=(x4262*x4263);
IkReal x4275=(x4261*x4263);
IkReal x4276=((768.0)*x4271);
IkReal x4277=(x4260*x4261);
IkReal x4278=(x4260*x4262);
IkReal x4279=(x4265*x4272);
IkReal x4280=(x4264*x4272);
IkReal x4281=(x4265*x4270);
IkReal x4282=(x4264*x4270);
IkReal x4283=(x4282+x4277+x4278);
IkReal x4284=(x4280+x4275+x4274);
IkReal x4285=(x4266+x4267+x4273+x4279);
IkReal x4286=(x4281+x4268+x4269+x4276);
op[0]=(x4258*(((((-1.0)*x4283))+x4255+x4286)));
op[1]=0.66;
op[2]=(x4258*(((((-1.0)*x4284))+x4255+x4285)));
op[3]=1.32;
op[4]=(x4258*(((((-1.0)*x4284))+(((-1.0)*x4255))+x4285)));
op[5]=0.66;
op[6]=(x4258*(((((-1.0)*x4283))+(((-1.0)*x4255))+x4286)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4288=(cj5*r21);
IkReal x4289=((0.33)*sj4);
IkReal x4290=(r21*sj5);
IkReal x4291=((0.352)*sj0);
IkReal x4292=(r11*sj5);
IkReal x4293=(cj0*px);
IkReal x4294=(cj5*r20);
IkReal x4295=((0.99)*sj4);
IkReal x4296=((1.056)*cj5);
IkReal x4297=(cj0*r00);
IkReal x4298=(py*sj0);
IkReal x4299=(r20*sj5);
IkReal x4300=(cj4*r22);
IkReal x4301=((1.536)*x4299);
IkReal x4302=((1.536)*x4288);
IkReal x4303=((0.33)*x4300);
IkReal x4304=((0.99)*x4300);
IkReal x4305=((4.608)*x4299);
IkReal x4306=((4.608)*x4288);
IkReal x4307=(cj0*r01*sj5);
IkReal x4308=((0.352)*cj5*x4297);
IkReal x4309=(x4289*x4290);
IkReal x4310=(cj5*r10*x4291);
IkReal x4311=(r10*sj0*x4296);
IkReal x4312=(x4296*x4297);
IkReal x4313=(x4290*x4295);
IkReal x4314=((((1.056)*x4307))+(((1.056)*sj0*x4292))+(((12.0)*x4293))+(((12.0)*x4298))+((x4294*x4295)));
IkReal x4315=((((0.352)*x4307))+((x4289*x4294))+((x4291*x4292))+(((4.0)*x4293))+(((4.0)*x4298)));
IkReal x4316=(x4310+x4303+x4302+x4301+x4309+x4308);
IkReal x4317=(x4311+x4312+x4313+x4306+x4305+x4304);
j1evalpoly[0]=((0.33)+(((-1.0)*x4315))+(((2.528)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.33)+(((-1.0)*x4315))+x4316))))+x4316+(((htj1*htj1*htj1*htj1)*(((-0.33)+(((-1.0)*x4314))+x4317))))+(((2.528)*htj1))+(((htj1*htj1)*(((0.33)+(((-1.0)*x4314))+x4317))))+(((5.056)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4318=((1.0)*cj1);
IkReal x4319=(cj4*r22);
IkReal x4320=(cj5*r21);
IkReal x4321=((1.0)*sj1);
IkReal x4322=(r20*sj5);
IkReal x4323=(cj5*r20*sj4);
IkReal x4324=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x4321*x4324))+((sj1*x4323))+(((-1.0)*x4319*x4321))+(((-1.0)*x4318*x4320))+(((-1.0)*x4318*x4322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4322))+((sj1*x4320))+(((-1.0)*x4318*x4319))+((cj1*x4323))+(((-1.0)*x4318*x4324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4321*x4324))+((sj1*x4323))+(((-1.0)*x4319*x4321))+(((-1.0)*x4318*x4320))+(((-1.0)*x4318*x4322))))+IKsqr((((sj1*x4322))+((sj1*x4320))+(((-1.0)*x4318*x4319))+((cj1*x4323))+(((-1.0)*x4318*x4324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4321*x4324))+((sj1*x4323))+(((-1.0)*x4319*x4321))+(((-1.0)*x4318*x4320))+(((-1.0)*x4318*x4322))), (((sj1*x4322))+((sj1*x4320))+(((-1.0)*x4318*x4319))+((cj1*x4323))+(((-1.0)*x4318*x4324))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4325=IKsin(j2);
IkReal x4326=IKcos(j2);
IkReal x4327=(sj0*sj5);
IkReal x4328=((1.0)*r10);
IkReal x4329=(cj5*sj4);
IkReal x4330=((1.0)*cj0);
IkReal x4331=((1.0)*sj1);
IkReal x4332=((1.0)*sj0);
IkReal x4333=((0.088)*cj5);
IkReal x4334=(cj1*x4326);
IkReal x4335=(cj1*x4325);
IkReal x4336=(sj1*x4325);
IkReal x4337=(cj0*r01*sj5);
IkReal x4338=(sj1*x4326);
IkReal x4339=(x4325*x4331);
IkReal x4340=((1.0)*x4334);
IkReal x4341=(x4339+x4340);
evalcond[0]=(((cj5*r21))+(((-1.0)*x4326*x4331))+x4335+((r20*sj5)));
evalcond[1]=(((r20*x4329))+(((-1.0)*x4341))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x4341))+(((-1.0)*r00*sj5*x4330))+(((-1.0)*x4327*x4328))+(((-1.0)*cj5*r11*x4332))+(((-1.0)*cj5*r01*x4330)));
CheckValue<IkReal> x4342=IKPowWithIntegerCheck(cj4,-1);
if(!x4342.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x4342.value)))+(((-0.384)*x4334))+(((-0.384)*x4336))+(((0.0825)*x4335))+pz+(((-0.0825)*x4338))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((r11*sj4*x4327))+(((-1.0)*x4335))+((cj0*cj4*r02))+(((-1.0)*sj0*x4328*x4329))+x4338+((sj4*x4337))+(((-1.0)*r00*x4329*x4330))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*py*x4332))+(((-0.384)*x4335))+(((0.384)*x4338))+(((-1.0)*px*x4330))+(((-0.088)*x4337))+(((-0.088)*r11*x4327))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.0825)*x4336))+(((-0.0825)*x4334))+((cj0*r00*x4333))+((r10*sj0*x4333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4343=((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))));
if((x4343) < -0.00001)
continue;
IkReal x4344=IKabs(IKsqrt(x4343));
IkReal x4350 = x4343;
if(IKabs(x4350)==0){
continue;
}
IkReal x4345=pow(x4350,-0.5);
IkReal x4346=((11.3636363636364)*x4345);
CheckValue<IkReal> x4351=IKPowWithIntegerCheck(x4344,-1);
if(!x4351.valid){
continue;
}
IkReal x4347=x4351.value;
IkReal x4348=(r22*x4347);
if((((1.0)+(((-1.0)*(x4348*x4348))))) < -0.00001)
continue;
IkReal x4349=IKsqrt(((1.0)+(((-1.0)*(x4348*x4348)))));
if( (x4348) < -1-IKFAST_SINCOS_THRESH || (x4348) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4352 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4352.valid){
continue;
}
IkReal gconst0=((IKasin(x4348))+(((-1.0)*(x4352.value))));
IkReal gconst1=(((rxp1_2*x4346*x4349))+(((-1.0)*rxp0_2*x4346*x4348)));
IkReal gconst2=((((-1.0)*rxp1_2*x4346*x4348))+(((-1.0)*rxp0_2*x4346*x4349)));
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
if((((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4354=IKPowWithIntegerCheck(IKabs(IKsqrt(((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2)))))),-1);
if(!x4354.valid){
continue;
}
if( ((r22*(x4354.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4354.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4353.value)+(((-1.0)*(IKasin((r22*(x4354.value))))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4355=((1.0)*cj3);
IkReal x4356=((0.088)*cj3*gconst1);
IkReal x4357=((0.088)*cj3*gconst2);
CheckValue<IkReal> x4358 = IKatan2WithCheck(IkReal(((((-1.0)*py*x4355))+(((-1.0)*r11*x4356))+((r10*x4357)))),IkReal(((((-1.0)*r01*x4356))+(((-1.0)*px*x4355))+((r00*x4357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4358.valid){
continue;
}
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*rxp0_2))+(((-1.0)*gconst2*rxp1_2))+((r22*(((((-0.088)*(gconst1*gconst1)))+(((-0.088)*(gconst2*gconst2))))))))),-1);
if(!x4359.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4358.value)+(((1.5707963267949)*(x4359.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4360=IKsin(j0);
IkReal x4361=IKcos(j0);
IkReal x4362=((1.0)*sj4);
IkReal x4363=((1.0)*gconst1);
IkReal x4364=((1.0)*cj4);
IkReal x4365=((0.088)*gconst2);
IkReal x4366=(r01*x4360);
IkReal x4367=(r10*x4361);
IkReal x4368=(r12*x4361);
IkReal x4369=(r02*x4360);
IkReal x4370=((1.0)*x4361);
IkReal x4371=(r00*x4360);
IkReal x4372=(gconst1*r11*x4361);
IkReal x4373=(gconst2*x4371);
evalcond[0]=((((-1.0)*gconst2*r11*x4370))+((gconst1*x4371))+((gconst2*x4366))+(((-1.0)*cj3))+(((-1.0)*x4363*x4367)));
evalcond[1]=((((-0.088)*x4372))+((px*x4360))+(((-1.0)*x4365*x4371))+(((0.088)*gconst1*x4366))+(((-1.0)*py*x4370))+((x4365*x4367)));
evalcond[2]=(((sj4*x4373))+((sj4*x4372))+(((-1.0)*gconst2*x4362*x4367))+(((-1.0)*x4364*x4369))+((cj4*x4368))+(((-1.0)*gconst1*x4362*x4366)));
evalcond[3]=(sj3+(((-1.0)*gconst2*x4364*x4367))+(((-1.0)*x4362*x4368))+(((-1.0)*cj4*x4363*x4366))+((cj4*x4373))+((cj4*x4372))+((sj4*x4369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4374=x4343;
if((x4374) < -0.00001)
continue;
IkReal x4375=IKabs(IKsqrt(x4374));
IkReal x4382 = x4374;
if(IKabs(x4382)==0){
continue;
}
IkReal x4376=pow(x4382,-0.5);
IkReal x4377=((11.3636363636364)*x4376);
CheckValue<IkReal> x4383=IKPowWithIntegerCheck(x4375,-1);
if(!x4383.valid){
continue;
}
IkReal x4378=x4383.value;
IkReal x4379=(r22*x4378);
if((((1.0)+(((-1.0)*(x4379*x4379))))) < -0.00001)
continue;
IkReal x4380=IKsqrt(((1.0)+(((-1.0)*(x4379*x4379)))));
CheckValue<IkReal> x4384 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4384.valid){
continue;
}
if( (x4379) < -1-IKFAST_SINCOS_THRESH || (x4379) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4381=((((-1.0)*(x4384.value)))+(IKasin(x4379)));
sj5=gconst1;
cj5=gconst2;
j5=x4381;
IkReal gconst0=x4381;
IkReal gconst1=(((rxp1_2*x4377*x4380))+(((-1.0)*rxp0_2*x4377*x4379)));
IkReal gconst2=((((-1.0)*rxp0_2*x4377*x4380))+(((-1.0)*rxp1_2*x4377*x4379)));
IkReal x4385=((4.608)*pz);
IkReal x4386=((1.264)*cj3);
IkReal x4387=(py*sj0);
IkReal x4388=((1.536)*sj4);
IkReal x4389=(cj0*px);
IkReal x4390=(gconst1*r21);
IkReal x4391=((0.33)*cj4);
IkReal x4392=(gconst2*r20);
IkReal x4393=((0.99)*cj4);
IkReal x4394=((1.851147)*sj4);
IkReal x4395=(cj4*r22);
IkReal x4396=((0.08712)*sj0);
IkReal x4397=(gconst1*r11);
IkReal x4398=((0.02904)*cj0);
IkReal x4399=(gconst1*r01);
IkReal x4400=(r22*sj4);
IkReal x4401=((4.608)*sj4);
IkReal x4402=(gconst2*r10);
IkReal x4403=((0.02904)*sj0);
IkReal x4404=(gconst2*r00);
IkReal x4405=((0.08712)*cj0);
IkReal x4406=((0.617049)*sj4);
IkReal x4407=(cj3*pz);
IkReal x4408=((1.851147)*x4395);
IkReal x4409=((0.405504)*x4390);
IkReal x4410=((0.99)*x4400);
IkReal x4411=((12.0)*x4407);
IkReal x4412=(cj3*x4392);
IkReal x4413=(x4390*x4394);
IkReal x4414=(x4404*x4405);
IkReal x4415=(x4396*x4402);
IkReal x4416=((1.056)*cj3*x4390);
IkReal x4417=((4.608)*cj3*x4395);
IkReal x4418=(x4392*x4393);
IkReal x4419=((1.056)*x4412);
IkReal x4420=(x4390*x4393);
IkReal x4421=(cj3*x4390*x4401);
IkReal x4422=(x4401*x4412);
IkReal x4423=(x4419+x4422+x4420);
IkReal x4424=(x4408+x4409+x4415+x4414+x4413+x4385);
IkReal x4425=(((x4392*x4394))+(((0.99)*x4389))+(((0.99)*x4387))+(((0.405504)*x4392))+((x4396*x4397))+((x4399*x4405)));
IkReal x4426=(x4418+x4417+x4416+x4411+x4410+x4421);
j1eval[0]=((1.848)+(IKabs(((((0.33)*x4400))+(((-0.352)*x4412))+((x4391*x4392))+(((-1.0)*x4388*x4412))+(((0.352)*cj3*x4390))+(((-1.0)*x4390*x4391))+(((4.0)*x4407))+(((1.536)*cj3*x4395))+x4386+((cj3*x4388*x4390)))))+(IKabs(((0.458151)+(((-1.0)*x4425))+x4424)))+(IKabs(((((-1.0)*x4423))+x4426+(((-1.0)*x4386)))))+(IKabs(((0.458151)+((x4390*x4406))+(((-0.135168)*x4392))+((x4402*x4403))+(((0.617049)*x4395))+(((-1.0)*x4397*x4403))+(((-0.33)*x4387))+(((-0.33)*x4389))+(((1.536)*pz))+(((0.135168)*x4390))+(((-1.0)*x4398*x4399))+((x4398*x4404))+(((-1.0)*x4392*x4406)))))+(IKabs(((-0.458151)+(((-1.0)*x4425))+x4424)))+(((2.64)*(IKabs(cj3))))+(IKabs(((((-1.0)*x4423))+x4426+x4386))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4427=((1.264)*cj3);
IkReal x4428=((0.66)*cj3);
IkReal x4429=(gconst2*r20);
IkReal x4430=((0.352)*cj3);
IkReal x4431=((0.99)*cj4);
IkReal x4432=((1.056)*cj3);
IkReal x4433=(r22*sj4);
IkReal x4434=(gconst1*r21);
IkReal x4435=((0.33)*cj4);
IkReal x4436=(cj3*sj4);
IkReal x4437=(cj3*pz);
IkReal x4438=((0.99)*x4433);
IkReal x4439=((12.0)*x4437);
IkReal x4440=((0.33)*x4433);
IkReal x4441=((4.0)*x4437);
IkReal x4442=(cj3*cj4*r22);
IkReal x4443=(x4432*x4434);
IkReal x4444=((4.608)*x4442);
IkReal x4445=(x4429*x4431);
IkReal x4446=(x4429*x4432);
IkReal x4447=(x4431*x4434);
IkReal x4448=(x4429*x4435);
IkReal x4449=((1.536)*x4442);
IkReal x4450=(x4430*x4434);
IkReal x4451=(x4434*x4435);
IkReal x4452=(x4429*x4430);
IkReal x4453=(x4429*x4436);
IkReal x4454=((4.608)*x4434*x4436);
IkReal x4455=((4.608)*x4453);
IkReal x4456=((1.536)*x4434*x4436);
IkReal x4457=((1.536)*x4453);
IkReal x4458=(x4446+x4447+x4455);
IkReal x4459=(x4452+x4451+x4457);
IkReal x4460=(x4439+x4438+x4443+x4444+x4445+x4454);
IkReal x4461=(x4440+x4441+x4448+x4449+x4450+x4456);
op[0]=((((-1.0)*x4459))+x4461+x4427);
op[1]=x4428;
op[2]=((((-1.0)*x4458))+x4460+x4427);
op[3]=((1.32)*cj3);
op[4]=((((-1.0)*x4427))+(((-1.0)*x4458))+x4460);
op[5]=x4428;
op[6]=((((-1.0)*x4427))+(((-1.0)*x4459))+x4461);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4462=((4.608)*pz);
IkReal x4463=((1.536)*pz);
IkReal x4464=(py*sj0);
IkReal x4465=(cj0*px);
IkReal x4466=((1.851147)*sj4);
IkReal x4467=(gconst2*r20);
IkReal x4468=(gconst1*r21);
IkReal x4469=(cj4*r22);
IkReal x4470=((0.08712)*sj0);
IkReal x4471=(gconst1*r11);
IkReal x4472=((0.02904)*cj0);
IkReal x4473=(gconst1*r01);
IkReal x4474=(gconst2*r10);
IkReal x4475=((0.02904)*sj0);
IkReal x4476=(gconst2*r00);
IkReal x4477=((0.08712)*cj0);
IkReal x4478=((0.617049)*sj4);
IkReal x4479=((1.851147)*x4469);
IkReal x4480=((0.405504)*x4468);
IkReal x4481=((0.617049)*x4469);
IkReal x4482=((0.135168)*x4468);
IkReal x4483=(x4466*x4468);
IkReal x4484=(x4476*x4477);
IkReal x4485=(x4470*x4474);
IkReal x4486=(x4472*x4476);
IkReal x4487=(x4468*x4478);
IkReal x4488=(x4474*x4475);
IkReal x4489=(x4479+x4484+x4485+x4480+x4483+x4462);
IkReal x4490=(x4486+x4487+x4481+x4482+x4488+x4463);
IkReal x4491=((((0.405504)*x4467))+((x4470*x4471))+((x4466*x4467))+((x4473*x4477))+(((0.99)*x4464))+(((0.99)*x4465)));
IkReal x4492=(((x4471*x4475))+(((0.33)*x4465))+(((0.33)*x4464))+((x4467*x4478))+(((0.135168)*x4467))+((x4472*x4473)));
j1evalpoly[0]=((-0.458151)+x4490+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.458151)+x4489+(((-1.0)*x4491))))))+(((0.462)*htj1))+(((0.924)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+x4490+(((-1.0)*x4492))))))+(((htj1*htj1)*(((-0.458151)+x4489+(((-1.0)*x4491))))))+(((-1.0)*x4492)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4493=x4343;
if((x4493) < -0.00001)
continue;
IkReal x4494=IKabs(IKsqrt(x4493));
IkReal x4501 = x4493;
if(IKabs(x4501)==0){
continue;
}
IkReal x4495=pow(x4501,-0.5);
IkReal x4496=((11.3636363636364)*x4495);
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(x4494,-1);
if(!x4502.valid){
continue;
}
IkReal x4497=x4502.value;
IkReal x4498=(r22*x4497);
if((((1.0)+(((-1.0)*(x4498*x4498))))) < -0.00001)
continue;
IkReal x4499=IKsqrt(((1.0)+(((-1.0)*(x4498*x4498)))));
CheckValue<IkReal> x4503 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4503.valid){
continue;
}
if( (x4498) < -1-IKFAST_SINCOS_THRESH || (x4498) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4500=((((-1.0)*(x4503.value)))+(IKasin(x4498)));
sj5=gconst1;
cj5=gconst2;
j5=x4500;
IkReal gconst0=x4500;
IkReal gconst1=(((rxp1_2*x4496*x4499))+(((-1.0)*rxp0_2*x4496*x4498)));
IkReal gconst2=((((-1.0)*rxp0_2*x4496*x4499))+(((-1.0)*rxp1_2*x4496*x4498)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4504=x4343;
if((x4504) < -0.00001)
continue;
IkReal x4505=IKabs(IKsqrt(x4504));
IkReal x4512 = x4504;
if(IKabs(x4512)==0){
continue;
}
IkReal x4506=pow(x4512,-0.5);
IkReal x4507=((11.3636363636364)*x4506);
CheckValue<IkReal> x4513=IKPowWithIntegerCheck(x4505,-1);
if(!x4513.valid){
continue;
}
IkReal x4508=x4513.value;
IkReal x4509=(r22*x4508);
if((((1.0)+(((-1.0)*(x4509*x4509))))) < -0.00001)
continue;
IkReal x4510=IKsqrt(((1.0)+(((-1.0)*(x4509*x4509)))));
if( (x4509) < -1-IKFAST_SINCOS_THRESH || (x4509) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
IkReal x4511=((IKasin(x4509))+(((-1.0)*(x4514.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4511;
IkReal gconst0=x4511;
IkReal gconst1=(((rxp1_2*x4507*x4510))+(((-1.0)*rxp0_2*x4507*x4509)));
IkReal gconst2=((((-1.0)*rxp0_2*x4507*x4510))+(((-1.0)*rxp1_2*x4507*x4509)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4515=x4343;
if((x4515) < -0.00001)
continue;
IkReal x4516=IKabs(IKsqrt(x4515));
IkReal x4523 = x4515;
if(IKabs(x4523)==0){
continue;
}
IkReal x4517=pow(x4523,-0.5);
IkReal x4518=((11.3636363636364)*x4517);
CheckValue<IkReal> x4524=IKPowWithIntegerCheck(x4516,-1);
if(!x4524.valid){
continue;
}
IkReal x4519=x4524.value;
IkReal x4520=(r22*x4519);
if((((1.0)+(((-1.0)*(x4520*x4520))))) < -0.00001)
continue;
IkReal x4521=IKsqrt(((1.0)+(((-1.0)*(x4520*x4520)))));
if( (x4520) < -1-IKFAST_SINCOS_THRESH || (x4520) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4525 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4525.valid){
continue;
}
IkReal x4522=((IKasin(x4520))+(((-1.0)*(x4525.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4522;
IkReal gconst0=x4522;
IkReal gconst1=((((-1.0)*rxp0_2*x4518*x4520))+((rxp1_2*x4518*x4521)));
IkReal gconst2=((((-1.0)*rxp0_2*x4518*x4521))+(((-1.0)*rxp1_2*x4518*x4520)));
IkReal x4526=(cj3*sj3);
j2eval[0]=x4526;
j2eval[1]=IKsign(x4526);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4527=(cj1*gconst2);
IkReal x4528=(r20*sj4);
IkReal x4529=(gconst2*sj1);
IkReal x4530=(r21*sj4);
IkReal x4531=(cj1*gconst1);
IkReal x4532=((1.0)*cj4*r22);
IkReal x4533=((1.0)*gconst1*sj1);
if( IKabs(((((-1.0)*x4530*x4533))+((r21*x4527))+((x4528*x4529))+(((-1.0)*sj1*x4532))+((r20*x4531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4527*x4528))+(((-1.0)*r20*x4533))+(((-1.0)*cj1*x4532))+(((-1.0)*x4530*x4531))+(((-1.0)*r21*x4529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4530*x4533))+((r21*x4527))+((x4528*x4529))+(((-1.0)*sj1*x4532))+((r20*x4531))))+IKsqr((((x4527*x4528))+(((-1.0)*r20*x4533))+(((-1.0)*cj1*x4532))+(((-1.0)*x4530*x4531))+(((-1.0)*r21*x4529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4530*x4533))+((r21*x4527))+((x4528*x4529))+(((-1.0)*sj1*x4532))+((r20*x4531))), (((x4527*x4528))+(((-1.0)*r20*x4533))+(((-1.0)*cj1*x4532))+(((-1.0)*x4530*x4531))+(((-1.0)*r21*x4529))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4534=IKsin(j2);
IkReal x4535=IKcos(j2);
IkReal x4536=(cj0*gconst1);
IkReal x4537=((0.088)*gconst2);
IkReal x4538=(cj0*r00);
IkReal x4539=(gconst1*sj0);
IkReal x4540=((1.0)*cj0);
IkReal x4541=((1.0)*r10);
IkReal x4542=(gconst2*sj4);
IkReal x4543=(gconst1*r21);
IkReal x4544=((1.0)*sj0);
IkReal x4545=(sj1*x4535);
IkReal x4546=(cj1*x4535);
IkReal x4547=(cj1*x4534);
IkReal x4548=(sj1*x4534);
IkReal x4549=((1.0)*x4547);
evalcond[0]=(x4545+((gconst2*r21))+((gconst1*r20))+(((-1.0)*x4549)));
evalcond[1]=((((-1.0)*sj4*x4543))+(((-1.0)*x4548))+(((-1.0)*x4546))+((r20*x4542))+(((-1.0)*cj4*r22)));
evalcond[2]=(x4548+x4546+(((-1.0)*gconst2*r01*x4540))+(((-1.0)*x4539*x4541))+(((-1.0)*r00*x4536))+(((-1.0)*gconst2*r11*x4544)));
evalcond[3]=((((-0.0825)*x4545))+(((0.088)*x4543))+(((-1.0)*r20*x4537))+(((0.0825)*x4547))+pz+(((-0.384)*x4548))+(((-0.384)*x4546))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(((r11*sj4*x4539))+x4545+((cj0*cj4*r02))+(((-1.0)*sj0*x4541*x4542))+((r01*sj4*x4536))+(((-1.0)*x4538*x4542))+(((-1.0)*x4549))+((cj4*r12*sj0)));
evalcond[5]=((((-0.0825)*x4546))+(((-0.0825)*x4548))+(((0.384)*x4545))+(((-0.088)*r11*x4539))+(((-1.0)*py*x4544))+(((-0.088)*r01*x4536))+((x4537*x4538))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.384)*x4547))+(((-1.0)*px*x4540))+((r10*sj0*x4537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4550=(cj1*sj4);
IkReal x4551=(gconst2*r20);
IkReal x4552=(sj1*sj4);
IkReal x4553=(cj1*cj4);
IkReal x4554=((1.0)*cj4*r22);
IkReal x4555=(sj1*x4551);
IkReal x4556=((1.0)*gconst1*r21);
if( IKabs(((((-1.0)*x4551*x4553))+((x4551*x4552))+(((-1.0)*x4552*x4556))+((gconst1*r21*x4553))+(((-1.0)*r22*x4550))+(((-1.0)*sj1*x4554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4550*x4551))+(((-1.0)*x4550*x4556))+((r22*x4552))+(((-1.0)*r22*x4553))+(((-1.0)*cj4*sj1*x4556))+((cj4*x4555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4551*x4553))+((x4551*x4552))+(((-1.0)*x4552*x4556))+((gconst1*r21*x4553))+(((-1.0)*r22*x4550))+(((-1.0)*sj1*x4554))))+IKsqr((((x4550*x4551))+(((-1.0)*x4550*x4556))+((r22*x4552))+(((-1.0)*r22*x4553))+(((-1.0)*cj4*sj1*x4556))+((cj4*x4555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4551*x4553))+((x4551*x4552))+(((-1.0)*x4552*x4556))+((gconst1*r21*x4553))+(((-1.0)*r22*x4550))+(((-1.0)*sj1*x4554))), (((x4550*x4551))+(((-1.0)*x4550*x4556))+((r22*x4552))+(((-1.0)*r22*x4553))+(((-1.0)*cj4*sj1*x4556))+((cj4*x4555))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4557=IKsin(j2);
IkReal x4558=IKcos(j2);
IkReal x4559=((0.088)*gconst2);
IkReal x4560=(cj0*r00);
IkReal x4561=((1.0)*cj4);
IkReal x4562=(gconst1*r21);
IkReal x4563=(gconst2*r20);
IkReal x4564=((1.0)*sj1);
IkReal x4565=((1.0)*sj4);
IkReal x4566=(r12*sj0);
IkReal x4567=((0.384)*sj1);
IkReal x4568=(cj0*r02);
IkReal x4569=(cj0*gconst1*r01);
IkReal x4570=(cj1*x4558);
IkReal x4571=((0.0825)*x4557);
IkReal x4572=(cj1*x4557);
IkReal x4573=(gconst2*r10*sj0);
IkReal x4574=(gconst1*r11*sj0);
IkReal x4575=(sj1*x4558);
IkReal x4576=(x4557*x4564);
IkReal x4577=((1.0)*x4570);
IkReal x4578=(x4576+x4577);
evalcond[0]=(x4572+((r22*sj4))+((cj4*x4563))+(((-1.0)*x4558*x4564))+(((-1.0)*x4561*x4562)));
evalcond[1]=((((-1.0)*x4578))+((sj4*x4563))+(((-1.0)*r22*x4561))+(((-1.0)*x4562*x4565)));
evalcond[2]=((((-1.0)*r20*x4559))+(((-0.0825)*x4575))+(((-0.384)*x4570))+pz+((cj1*x4571))+(((0.088)*x4562))+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-1.0)*x4557*x4567)));
evalcond[3]=((((-1.0)*gconst2*x4560*x4565))+((sj4*x4569))+x4575+((sj4*x4574))+((cj4*x4566))+((cj4*x4568))+(((-1.0)*x4572))+(((-1.0)*x4565*x4573)));
evalcond[4]=((((-1.0)*gconst2*x4560*x4561))+(((-1.0)*x4578))+((cj4*x4569))+((cj4*x4574))+(((-1.0)*x4561*x4573))+(((-1.0)*x4565*x4568))+(((-1.0)*x4565*x4566)));
evalcond[5]=((((-0.088)*x4569))+(((-1.0)*sj1*x4571))+(((-0.088)*x4574))+(((-0.0825)*x4570))+(((-0.384)*x4572))+((r10*sj0*x4559))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((-1.0)*cj0*px))+((x4559*x4560))+((x4558*x4567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4579=((1.0)*cj1);
IkReal x4580=(cj4*r22);
IkReal x4581=(gconst2*r21);
IkReal x4582=((1.0)*sj1);
IkReal x4583=(gconst1*r20);
IkReal x4584=(gconst2*r20*sj4);
IkReal x4585=(gconst1*r21*sj4);
if( IKabs(((((-1.0)*x4579*x4581))+(((-1.0)*x4579*x4583))+((sj1*x4584))+(((-1.0)*x4580*x4582))+(((-1.0)*x4582*x4585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4579*x4585))+(((-1.0)*x4579*x4580))+((cj1*x4584))+((sj1*x4583))+((sj1*x4581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4579*x4581))+(((-1.0)*x4579*x4583))+((sj1*x4584))+(((-1.0)*x4580*x4582))+(((-1.0)*x4582*x4585))))+IKsqr(((((-1.0)*x4579*x4585))+(((-1.0)*x4579*x4580))+((cj1*x4584))+((sj1*x4583))+((sj1*x4581))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4579*x4581))+(((-1.0)*x4579*x4583))+((sj1*x4584))+(((-1.0)*x4580*x4582))+(((-1.0)*x4582*x4585))), ((((-1.0)*x4579*x4585))+(((-1.0)*x4579*x4580))+((cj1*x4584))+((sj1*x4583))+((sj1*x4581))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4586=IKsin(j2);
IkReal x4587=IKcos(j2);
IkReal x4588=(cj0*gconst1);
IkReal x4589=((0.088)*gconst2);
IkReal x4590=(cj0*r00);
IkReal x4591=(gconst1*sj0);
IkReal x4592=((1.0)*cj0);
IkReal x4593=((1.0)*r10);
IkReal x4594=((1.0)*sj1);
IkReal x4595=(gconst2*sj4);
IkReal x4596=((0.384)*sj1);
IkReal x4597=(gconst1*r21);
IkReal x4598=((1.0)*sj0);
IkReal x4599=((0.0825)*sj1);
IkReal x4600=(cj1*x4587);
IkReal x4601=(cj1*x4586);
IkReal x4602=(sj1*x4587);
IkReal x4603=(x4586*x4594);
IkReal x4604=((1.0)*x4600);
IkReal x4605=(x4604+x4603);
evalcond[0]=(x4601+(((-1.0)*x4587*x4594))+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=((((-1.0)*x4605))+((r20*x4595))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x4597)));
evalcond[2]=((((-1.0)*x4605))+(((-1.0)*gconst2*r11*x4598))+(((-1.0)*r00*x4588))+(((-1.0)*x4591*x4593))+(((-1.0)*gconst2*r01*x4592)));
evalcond[3]=((((0.0825)*x4601))+x4599+(((-1.0)*x4587*x4599))+pz+(((-1.0)*x4586*x4596))+(((0.088)*x4597))+(((-0.384)*x4600))+(((-0.316)*cj1))+(((-1.0)*r20*x4589)));
evalcond[4]=((((-1.0)*x4601))+x4602+((cj0*cj4*r02))+(((-1.0)*sj0*x4593*x4595))+((r11*sj4*x4591))+(((-1.0)*x4590*x4595))+((r01*sj4*x4588))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*px*x4592))+(((-0.0825)*x4600))+((r10*sj0*x4589))+(((-1.0)*py*x4598))+(((-1.0)*x4586*x4599))+((x4589*x4590))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.384)*x4601))+(((-0.088)*r11*x4591))+((x4587*x4596))+(((-0.088)*r01*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4606=(cj3*sj0);
IkReal x4607=(cj1*gconst2);
IkReal x4608=(gconst1*sj1);
IkReal x4609=(cj0*cj3);
IkReal x4610=(cj1*gconst1);
IkReal x4611=((1.0)*sj1);
IkReal x4612=(gconst2*sj1);
IkReal x4613=(cj4*r21*sj3);
IkReal x4614=(cj4*r20*sj3);
IkReal x4615=(r22*sj3*sj4);
CheckValue<IkReal> x4616 = IKatan2WithCheck(IkReal(((((-1.0)*x4610*x4613))+((r11*x4606*x4612))+((r01*x4609*x4612))+((cj1*x4615))+((r00*x4608*x4609))+((r10*x4606*x4608))+((x4607*x4614)))),IkReal((((r10*x4606*x4610))+((r11*x4606*x4607))+((x4608*x4613))+((r01*x4607*x4609))+(((-1.0)*x4611*x4615))+(((-1.0)*gconst2*x4611*x4614))+((r00*x4609*x4610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4616.valid){
continue;
}
CheckValue<IkReal> x4617=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4617.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4616.value)+(((1.5707963267949)*(x4617.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4618=IKsin(j2);
IkReal x4619=IKcos(j2);
IkReal x4620=(cj0*sj4);
IkReal x4621=(gconst1*r01);
IkReal x4622=(gconst1*sj0);
IkReal x4623=((0.088)*gconst2);
IkReal x4624=(cj0*r00);
IkReal x4625=((1.0)*cj0);
IkReal x4626=((1.0)*gconst2);
IkReal x4627=((1.0)*gconst1);
IkReal x4628=(sj1*sj3);
IkReal x4629=(gconst2*r20);
IkReal x4630=(cj0*cj4);
IkReal x4631=(r10*sj0);
IkReal x4632=((1.0)*sj0);
IkReal x4633=(cj1*x4619);
IkReal x4634=(cj1*x4618);
IkReal x4635=(sj1*x4618);
IkReal x4636=(sj1*x4619);
evalcond[0]=(((x4619*x4628))+(((-1.0)*sj3*x4634))+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=((((-1.0)*x4633))+(((-1.0)*x4635))+(((-1.0)*r21*sj4*x4627))+(((-1.0)*cj4*r22))+((sj4*x4629)));
evalcond[2]=((((-1.0)*cj3*x4634))+((r22*sj4))+(((-1.0)*cj4*r21*x4627))+((cj4*x4629))+((cj3*x4636)));
evalcond[3]=((((-1.0)*r11*sj0*x4626))+(((-1.0)*r10*x4622))+(((-1.0)*gconst2*r01*x4625))+((x4618*x4628))+((sj3*x4633))+(((-1.0)*x4624*x4627)));
evalcond[4]=((((-0.0825)*x4636))+(((-1.0)*r20*x4623))+pz+(((-0.384)*x4633))+(((-0.384)*x4635))+(((0.0825)*x4634))+(((0.0825)*sj1))+(((0.088)*gconst1*r21))+(((-0.316)*cj1)));
evalcond[5]=(((r11*sj4*x4622))+(((-1.0)*x4634))+((x4620*x4621))+(((-1.0)*sj4*x4626*x4631))+x4636+((r02*x4630))+(((-1.0)*r00*x4620*x4626))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*cj4*x4626*x4631))+((cj4*r11*x4622))+(((-1.0)*r02*x4620))+((x4621*x4630))+(((-1.0)*cj4*x4624*x4626))+(((-1.0)*r12*sj4*x4632))+((cj3*x4635))+((cj3*x4633)));
evalcond[7]=((((0.384)*x4636))+((x4623*x4624))+(((-0.088)*r11*x4622))+(((-0.0825)*x4635))+(((-0.0825)*x4633))+(((-1.0)*px*x4625))+((x4623*x4631))+(((-0.088)*cj0*x4621))+(((-0.384)*x4634))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*py*x4632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4637=(gconst2*r20);
IkReal x4638=(cj1*cj4);
IkReal x4639=(gconst1*r21);
IkReal x4640=(cj4*sj1);
IkReal x4641=(cj3*sj4);
IkReal x4642=((1.0)*r22*sj1);
CheckValue<IkReal> x4643=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4643.valid){
continue;
}
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*r22*x4640))+(((-1.0)*sj1*x4639*x4641))+(((-1.0)*x4638*x4639))+((cj1*r22*sj4))+((sj1*x4637*x4641))+((x4637*x4638)))),IkReal(((((-1.0)*cj3*r22*x4638))+((cj1*x4637*x4641))+(((-1.0)*sj4*x4642))+(((-1.0)*x4637*x4640))+(((-1.0)*cj1*x4639*x4641))+((x4639*x4640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4643.value)))+(x4644.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4645=IKsin(j2);
IkReal x4646=IKcos(j2);
IkReal x4647=(cj0*sj4);
IkReal x4648=(gconst1*r01);
IkReal x4649=(gconst1*sj0);
IkReal x4650=((0.088)*gconst2);
IkReal x4651=(cj0*r00);
IkReal x4652=((1.0)*cj0);
IkReal x4653=((1.0)*gconst2);
IkReal x4654=((1.0)*gconst1);
IkReal x4655=(sj1*sj3);
IkReal x4656=(gconst2*r20);
IkReal x4657=(cj0*cj4);
IkReal x4658=(r10*sj0);
IkReal x4659=((1.0)*sj0);
IkReal x4660=(cj1*x4646);
IkReal x4661=(cj1*x4645);
IkReal x4662=(sj1*x4645);
IkReal x4663=(sj1*x4646);
evalcond[0]=((((-1.0)*sj3*x4661))+((gconst2*r21))+((x4646*x4655))+((gconst1*r20)));
evalcond[1]=((((-1.0)*x4662))+(((-1.0)*x4660))+(((-1.0)*r21*sj4*x4654))+(((-1.0)*cj4*r22))+((sj4*x4656)));
evalcond[2]=(((r22*sj4))+((cj3*x4663))+(((-1.0)*cj4*r21*x4654))+((cj4*x4656))+(((-1.0)*cj3*x4661)));
evalcond[3]=(((x4645*x4655))+((sj3*x4660))+(((-1.0)*r11*sj0*x4653))+(((-1.0)*x4651*x4654))+(((-1.0)*gconst2*r01*x4652))+(((-1.0)*r10*x4649)));
evalcond[4]=((((-0.384)*x4662))+(((-0.384)*x4660))+(((-0.0825)*x4663))+(((-1.0)*r20*x4650))+pz+(((0.0825)*x4661))+(((0.0825)*sj1))+(((0.088)*gconst1*r21))+(((-0.316)*cj1)));
evalcond[5]=((((-1.0)*x4661))+x4663+(((-1.0)*r00*x4647*x4653))+(((-1.0)*sj4*x4653*x4658))+((r02*x4657))+((r11*sj4*x4649))+((x4647*x4648))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*r12*sj4*x4659))+(((-1.0)*cj4*x4653*x4658))+((cj3*x4660))+((cj3*x4662))+((cj4*r11*x4649))+((x4648*x4657))+(((-1.0)*cj4*x4651*x4653))+(((-1.0)*r02*x4647)));
evalcond[7]=((((-0.384)*x4661))+(((-1.0)*py*x4659))+(((-0.0825)*x4660))+(((-0.0825)*x4662))+((x4650*x4658))+((x4650*x4651))+(((0.384)*x4663))+(((-0.088)*cj0*x4648))+(((-1.0)*px*x4652))+(((-0.088)*r11*x4649))+(((0.0825)*cj1))+(((0.316)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4664=(cj1*r21);
IkReal x4665=(gconst2*r20);
IkReal x4666=((1.0)*sj3);
IkReal x4667=(cj4*r22);
IkReal x4668=((1.0)*gconst1);
IkReal x4669=(sj1*sj3*sj4);
CheckValue<IkReal> x4670=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4670.valid){
continue;
}
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*r21*sj1*sj4*x4666))+(((-1.0)*sj1*x4666*x4667))+((x4665*x4669))+((gconst2*x4664))+((cj1*gconst1*r20)))),IkReal(((((-1.0)*r20*sj1*x4668))+((cj1*sj3*sj4*x4665))+(((-1.0)*gconst2*r21*sj1))+(((-1.0)*cj1*x4666*x4667))+(((-1.0)*gconst1*sj4*x4664*x4666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4670.value)))+(x4671.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4672=IKsin(j2);
IkReal x4673=IKcos(j2);
IkReal x4674=(cj0*sj4);
IkReal x4675=(gconst1*r01);
IkReal x4676=(gconst1*sj0);
IkReal x4677=((0.088)*gconst2);
IkReal x4678=(cj0*r00);
IkReal x4679=((1.0)*cj0);
IkReal x4680=((1.0)*gconst2);
IkReal x4681=((1.0)*gconst1);
IkReal x4682=(sj1*sj3);
IkReal x4683=(gconst2*r20);
IkReal x4684=(cj0*cj4);
IkReal x4685=(r10*sj0);
IkReal x4686=((1.0)*sj0);
IkReal x4687=(cj1*x4673);
IkReal x4688=(cj1*x4672);
IkReal x4689=(sj1*x4672);
IkReal x4690=(sj1*x4673);
evalcond[0]=(((x4673*x4682))+((gconst2*r21))+((gconst1*r20))+(((-1.0)*sj3*x4688)));
evalcond[1]=((((-1.0)*r21*sj4*x4681))+((sj4*x4683))+(((-1.0)*x4689))+(((-1.0)*x4687))+(((-1.0)*cj4*r22)));
evalcond[2]=(((r22*sj4))+((cj3*x4690))+(((-1.0)*cj4*r21*x4681))+(((-1.0)*cj3*x4688))+((cj4*x4683)));
evalcond[3]=((((-1.0)*r11*sj0*x4680))+(((-1.0)*gconst2*r01*x4679))+((x4672*x4682))+((sj3*x4687))+(((-1.0)*r10*x4676))+(((-1.0)*x4678*x4681)));
evalcond[4]=((((-0.384)*x4689))+(((-0.384)*x4687))+(((-1.0)*r20*x4677))+(((0.0825)*x4688))+pz+(((0.0825)*sj1))+(((-0.0825)*x4690))+(((0.088)*gconst1*r21))+(((-0.316)*cj1)));
evalcond[5]=(((r02*x4684))+x4690+((x4674*x4675))+(((-1.0)*r00*x4674*x4680))+((r11*sj4*x4676))+(((-1.0)*x4688))+(((-1.0)*sj4*x4680*x4685))+((cj4*r12*sj0)));
evalcond[6]=(((x4675*x4684))+(((-1.0)*cj4*x4680*x4685))+(((-1.0)*cj4*x4678*x4680))+((cj3*x4687))+((cj3*x4689))+((cj4*r11*x4676))+(((-1.0)*r12*sj4*x4686))+(((-1.0)*r02*x4674)));
evalcond[7]=((((-0.088)*cj0*x4675))+(((-0.384)*x4688))+((x4677*x4685))+(((-0.088)*r11*x4676))+(((-1.0)*px*x4679))+((x4677*x4678))+(((0.384)*x4690))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*py*x4686))+(((-0.0825)*x4687))+(((-0.0825)*x4689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4691=((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))));
if((x4691) < -0.00001)
continue;
IkReal x4692=IKabs(IKsqrt(x4691));
IkReal x4698 = x4691;
if(IKabs(x4698)==0){
continue;
}
IkReal x4693=pow(x4698,-0.5);
IkReal x4694=((11.3636363636364)*x4693);
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(x4692,-1);
if(!x4699.valid){
continue;
}
IkReal x4695=x4699.value;
IkReal x4696=(r22*x4695);
if((((1.0)+(((-1.0)*(x4696*x4696))))) < -0.00001)
continue;
IkReal x4697=IKsqrt(((1.0)+(((-1.0)*(x4696*x4696)))));
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
if( (x4696) < -1-IKFAST_SINCOS_THRESH || (x4696) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x4700.value)))+(((-1.0)*(IKasin(x4696)))));
IkReal gconst4=((((-1.0)*rxp0_2*x4694*x4696))+(((-1.0)*rxp1_2*x4694*x4697)));
IkReal gconst5=(((rxp0_2*x4694*x4697))+(((-1.0)*rxp1_2*x4694*x4696)));
CheckValue<IkReal> x4701 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4701.valid){
continue;
}
if((((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4702=IKPowWithIntegerCheck(IKabs(IKsqrt(((((129.132231404959)*(rxp1_2*rxp1_2)))+(((129.132231404959)*(rxp0_2*rxp0_2)))))),-1);
if(!x4702.valid){
continue;
}
if( ((r22*(x4702.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4702.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4701.value)+(IKasin((r22*(x4702.value))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4703=((1.0)*cj3);
IkReal x4704=((0.088)*cj3);
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(IKsign((((r22*(((((-0.088)*(gconst5*gconst5)))+(((-0.088)*(gconst4*gconst4)))))))+(((-1.0)*gconst5*rxp1_2))+(((-1.0)*gconst4*rxp0_2)))),-1);
if(!x4705.valid){
continue;
}
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r11*x4704))+((gconst5*r10*x4704))+(((-1.0)*py*x4703)))),IkReal(((((-1.0)*px*x4703))+((gconst5*r00*x4704))+(((-1.0)*gconst4*r01*x4704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4705.value)))+(x4706.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4707=IKsin(j0);
IkReal x4708=IKcos(j0);
IkReal x4709=((0.088)*gconst5);
IkReal x4710=((0.088)*gconst4);
IkReal x4711=((1.0)*sj4);
IkReal x4712=((1.0)*gconst5);
IkReal x4713=(cj4*gconst4);
IkReal x4714=(r00*x4707);
IkReal x4715=(r11*x4708);
IkReal x4716=(r01*x4707);
IkReal x4717=(r12*x4708);
IkReal x4718=(r10*x4708);
IkReal x4719=(r02*x4707);
evalcond[0]=((((-1.0)*x4712*x4715))+((gconst5*x4716))+((gconst4*x4714))+(((-1.0)*gconst4*x4718))+(((-1.0)*cj3)));
evalcond[1]=((((-1.0)*x4709*x4714))+(((-1.0)*x4710*x4715))+((x4709*x4718))+((x4710*x4716))+(((-1.0)*py*x4708))+((px*x4707)));
evalcond[2]=((((-1.0)*cj4*x4719))+(((-1.0)*gconst5*x4711*x4718))+((gconst4*sj4*x4715))+((cj4*x4717))+((gconst5*sj4*x4714))+(((-1.0)*gconst4*x4711*x4716)));
evalcond[3]=((((-1.0)*cj4*x4712*x4718))+sj3+((sj4*x4719))+(((-1.0)*x4711*x4717))+((cj4*gconst5*x4714))+((x4713*x4715))+(((-1.0)*x4713*x4716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4720=x4691;
if((x4720) < -0.00001)
continue;
IkReal x4721=IKabs(IKsqrt(x4720));
IkReal x4728 = x4720;
if(IKabs(x4728)==0){
continue;
}
IkReal x4722=pow(x4728,-0.5);
IkReal x4723=((11.3636363636364)*x4722);
CheckValue<IkReal> x4729=IKPowWithIntegerCheck(x4721,-1);
if(!x4729.valid){
continue;
}
IkReal x4724=x4729.value;
IkReal x4725=(r22*x4724);
if((((1.0)+(((-1.0)*(x4725*x4725))))) < -0.00001)
continue;
IkReal x4726=IKsqrt(((1.0)+(((-1.0)*(x4725*x4725)))));
CheckValue<IkReal> x4730 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4730.valid){
continue;
}
if( (x4725) < -1-IKFAST_SINCOS_THRESH || (x4725) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4727=((((1.0)*(x4730.value)))+(((1.0)*(IKasin(x4725)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4727)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4727)));
IkReal gconst4=((((-1.0)*rxp1_2*x4723*x4726))+(((-1.0)*rxp0_2*x4723*x4725)));
IkReal gconst5=((((-1.0)*rxp1_2*x4723*x4725))+((rxp0_2*x4723*x4726)));
IkReal x4731=((1.264)*cj3);
IkReal x4732=((4.608)*pz);
IkReal x4733=(py*sj0);
IkReal x4734=(gconst4*r21);
IkReal x4735=((0.352)*cj3);
IkReal x4736=((1.536)*sj4);
IkReal x4737=((0.08712)*gconst5);
IkReal x4738=(r10*sj0);
IkReal x4739=(cj4*r22);
IkReal x4740=(r22*sj4);
IkReal x4741=(cj0*px);
IkReal x4742=(gconst5*r20);
IkReal x4743=((1.851147)*sj4);
IkReal x4744=((0.08712)*gconst4);
IkReal x4745=(cj0*r01);
IkReal x4746=(cj0*r00);
IkReal x4747=((0.02904)*gconst5);
IkReal x4748=((0.617049)*sj4);
IkReal x4749=(r11*sj0);
IkReal x4750=(cj3*pz);
IkReal x4751=((4.608)*sj4);
IkReal x4752=((0.02904)*gconst4);
IkReal x4753=((0.99)*x4740);
IkReal x4754=((12.0)*x4750);
IkReal x4755=((0.405504)*x4734);
IkReal x4756=((1.851147)*x4739);
IkReal x4757=(cj3*x4742);
IkReal x4758=(cj4*x4742);
IkReal x4759=((4.608)*cj3*x4739);
IkReal x4760=((1.056)*cj3*x4734);
IkReal x4761=((0.99)*x4758);
IkReal x4762=((1.056)*x4757);
IkReal x4763=((0.99)*cj4*x4734);
IkReal x4764=(x4734*x4743);
IkReal x4765=(x4737*x4738);
IkReal x4766=(x4737*x4746);
IkReal x4767=(cj3*x4734*x4751);
IkReal x4768=(x4751*x4757);
IkReal x4769=(x4763+x4762+x4768);
IkReal x4770=(x4755+x4756+x4765+x4764+x4766+x4732);
IkReal x4771=(((x4742*x4743))+(((0.99)*x4741))+(((0.99)*x4733))+(((0.405504)*x4742))+((x4744*x4749))+((x4744*x4745)));
IkReal x4772=(x4759+x4753+x4754+x4761+x4760+x4767);
j1eval[0]=((1.848)+(IKabs(((0.458151)+(((-1.0)*x4749*x4752))+((x4738*x4747))+((x4746*x4747))+(((-0.135168)*x4742))+((x4734*x4748))+(((0.135168)*x4734))+(((-1.0)*x4745*x4752))+(((0.617049)*x4739))+(((-0.33)*x4733))+(((-1.0)*x4742*x4748))+(((1.536)*pz))+(((-0.33)*x4741)))))+(IKabs((((x4734*x4735))+(((-0.33)*cj4*x4734))+(((-1.0)*x4736*x4757))+((cj3*x4734*x4736))+x4731+(((1.536)*cj3*x4739))+(((0.33)*x4740))+(((0.33)*x4758))+(((4.0)*x4750))+(((-1.0)*x4735*x4742)))))+(IKabs(((((-1.0)*x4769))+x4772+(((-1.0)*x4731)))))+(IKabs(((0.458151)+x4770+(((-1.0)*x4771)))))+(IKabs(((-0.458151)+x4770+(((-1.0)*x4771)))))+(((2.64)*(IKabs(cj3))))+(IKabs(((((-1.0)*x4769))+x4772+x4731))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4773=((1.264)*cj3);
IkReal x4774=((0.66)*cj3);
IkReal x4775=((1.536)*sj4);
IkReal x4776=(r22*sj4);
IkReal x4777=((0.33)*cj4);
IkReal x4778=(gconst5*r20);
IkReal x4779=(gconst4*r21);
IkReal x4780=((0.99)*cj4);
IkReal x4781=((4.608)*sj4);
IkReal x4782=(cj3*pz);
IkReal x4783=((0.99)*x4776);
IkReal x4784=((12.0)*x4782);
IkReal x4785=((0.33)*x4776);
IkReal x4786=((4.0)*x4782);
IkReal x4787=(cj3*x4779);
IkReal x4788=(cj3*x4778);
IkReal x4789=(cj3*cj4*r22);
IkReal x4790=((4.608)*x4789);
IkReal x4791=((1.056)*x4787);
IkReal x4792=(x4778*x4780);
IkReal x4793=((1.056)*x4788);
IkReal x4794=(x4779*x4780);
IkReal x4795=((1.536)*x4789);
IkReal x4796=(x4777*x4778);
IkReal x4797=((0.352)*x4787);
IkReal x4798=(x4777*x4779);
IkReal x4799=((0.352)*x4788);
IkReal x4800=(x4781*x4787);
IkReal x4801=(x4781*x4788);
IkReal x4802=(x4775*x4787);
IkReal x4803=(x4775*x4788);
IkReal x4804=(x4798+x4799+x4803);
IkReal x4805=(x4794+x4793+x4801);
IkReal x4806=(x4790+x4791+x4792+x4784+x4783+x4800);
IkReal x4807=(x4795+x4796+x4797+x4786+x4785+x4802);
op[0]=(x4773+(((-1.0)*x4804))+x4807);
op[1]=x4774;
op[2]=(x4773+(((-1.0)*x4805))+x4806);
op[3]=((1.32)*cj3);
op[4]=((((-1.0)*x4773))+(((-1.0)*x4805))+x4806);
op[5]=x4774;
op[6]=((((-1.0)*x4773))+(((-1.0)*x4804))+x4807);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4808=((4.608)*pz);
IkReal x4809=((1.536)*pz);
IkReal x4810=(py*sj0);
IkReal x4811=(cj0*px);
IkReal x4812=((0.08712)*gconst5);
IkReal x4813=(r10*sj0);
IkReal x4814=(cj4*r22);
IkReal x4815=(gconst5*r20);
IkReal x4816=((1.851147)*sj4);
IkReal x4817=(gconst4*r21);
IkReal x4818=(cj0*r00);
IkReal x4819=((0.02904)*gconst5);
IkReal x4820=((0.617049)*sj4);
IkReal x4821=((0.405504)*x4817);
IkReal x4822=((1.851147)*x4814);
IkReal x4823=((0.135168)*x4817);
IkReal x4824=((0.617049)*x4814);
IkReal x4825=(cj0*gconst4*r01);
IkReal x4826=(gconst4*r11*sj0);
IkReal x4827=(x4816*x4817);
IkReal x4828=(x4812*x4813);
IkReal x4829=(x4812*x4818);
IkReal x4830=(x4813*x4819);
IkReal x4831=(x4817*x4820);
IkReal x4832=(x4818*x4819);
IkReal x4833=(x4824+x4823+x4831+x4830+x4832+x4809);
IkReal x4834=(x4828+x4829+x4827+x4822+x4821+x4808);
IkReal x4835=((((0.405504)*x4815))+((x4815*x4816))+(((0.08712)*x4825))+(((0.08712)*x4826))+(((0.99)*x4810))+(((0.99)*x4811)));
IkReal x4836=((((0.135168)*x4815))+(((0.02904)*x4825))+(((0.02904)*x4826))+(((0.33)*x4811))+(((0.33)*x4810))+((x4815*x4820)));
j1evalpoly[0]=((-0.458151)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x4836))+x4833))))+(((0.462)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.458151)+(((-1.0)*x4835))+x4834))))+(((0.462)*htj1))+(((0.924)*(htj1*htj1*htj1)))+(((-1.0)*x4836))+(((htj1*htj1)*(((-0.458151)+(((-1.0)*x4835))+x4834))))+x4833);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4837=x4691;
if((x4837) < -0.00001)
continue;
IkReal x4838=IKabs(IKsqrt(x4837));
IkReal x4845 = x4837;
if(IKabs(x4845)==0){
continue;
}
IkReal x4839=pow(x4845,-0.5);
IkReal x4840=((11.3636363636364)*x4839);
CheckValue<IkReal> x4846=IKPowWithIntegerCheck(x4838,-1);
if(!x4846.valid){
continue;
}
IkReal x4841=x4846.value;
IkReal x4842=(r22*x4841);
if((((1.0)+(((-1.0)*(x4842*x4842))))) < -0.00001)
continue;
IkReal x4843=IKsqrt(((1.0)+(((-1.0)*(x4842*x4842)))));
CheckValue<IkReal> x4847 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4847.valid){
continue;
}
if( (x4842) < -1-IKFAST_SINCOS_THRESH || (x4842) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4844=((((1.0)*(x4847.value)))+(((1.0)*(IKasin(x4842)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4844)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4844)));
IkReal gconst4=((((-1.0)*rxp0_2*x4840*x4842))+(((-1.0)*rxp1_2*x4840*x4843)));
IkReal gconst5=(((rxp0_2*x4840*x4843))+(((-1.0)*rxp1_2*x4840*x4842)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4848=x4691;
if((x4848) < -0.00001)
continue;
IkReal x4849=IKabs(IKsqrt(x4848));
IkReal x4856 = x4848;
if(IKabs(x4856)==0){
continue;
}
IkReal x4850=pow(x4856,-0.5);
IkReal x4851=((11.3636363636364)*x4850);
CheckValue<IkReal> x4857=IKPowWithIntegerCheck(x4849,-1);
if(!x4857.valid){
continue;
}
IkReal x4852=x4857.value;
IkReal x4853=(r22*x4852);
if((((1.0)+(((-1.0)*(x4853*x4853))))) < -0.00001)
continue;
IkReal x4854=IKsqrt(((1.0)+(((-1.0)*(x4853*x4853)))));
CheckValue<IkReal> x4858 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4858.valid){
continue;
}
if( (x4853) < -1-IKFAST_SINCOS_THRESH || (x4853) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4855=((((1.0)*(x4858.value)))+(((1.0)*(IKasin(x4853)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4855)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4855)));
IkReal gconst4=((((-1.0)*rxp1_2*x4851*x4854))+(((-1.0)*rxp0_2*x4851*x4853)));
IkReal gconst5=((((-1.0)*rxp1_2*x4851*x4853))+((rxp0_2*x4851*x4854)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4859=x4691;
if((x4859) < -0.00001)
continue;
IkReal x4860=IKabs(IKsqrt(x4859));
IkReal x4867 = x4859;
if(IKabs(x4867)==0){
continue;
}
IkReal x4861=pow(x4867,-0.5);
IkReal x4862=((11.3636363636364)*x4861);
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(x4860,-1);
if(!x4868.valid){
continue;
}
IkReal x4863=x4868.value;
IkReal x4864=(r22*x4863);
if((((1.0)+(((-1.0)*(x4864*x4864))))) < -0.00001)
continue;
IkReal x4865=IKsqrt(((1.0)+(((-1.0)*(x4864*x4864)))));
if( (x4864) < -1-IKFAST_SINCOS_THRESH || (x4864) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4869 = IKatan2WithCheck(IkReal(((-11.3636363636364)*rxp1_2)),IkReal(((-11.3636363636364)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4869.valid){
continue;
}
IkReal x4866=((((1.0)*(IKasin(x4864))))+(((1.0)*(x4869.value))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4866)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4866)));
IkReal gconst4=((((-1.0)*rxp0_2*x4862*x4864))+(((-1.0)*rxp1_2*x4862*x4865)));
IkReal gconst5=(((rxp0_2*x4862*x4865))+(((-1.0)*rxp1_2*x4862*x4864)));
IkReal x4870=(cj3*sj3);
j2eval[0]=x4870;
j2eval[1]=IKsign(x4870);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4871=((1.0)*sj1);
IkReal x4872=(gconst4*r20);
IkReal x4873=(cj1*gconst5);
IkReal x4874=(r20*sj4);
IkReal x4875=((1.0)*cj4*r22);
IkReal x4876=(gconst4*r21*sj4);
if( IKabs(((((-1.0)*cj4*r22*x4871))+((gconst5*sj1*x4874))+(((-1.0)*x4871*x4876))+((r21*x4873))+((cj1*x4872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst5*r21*x4871))+((x4873*x4874))+(((-1.0)*x4871*x4872))+(((-1.0)*cj1*x4876))+(((-1.0)*cj1*x4875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r22*x4871))+((gconst5*sj1*x4874))+(((-1.0)*x4871*x4876))+((r21*x4873))+((cj1*x4872))))+IKsqr(((((-1.0)*gconst5*r21*x4871))+((x4873*x4874))+(((-1.0)*x4871*x4872))+(((-1.0)*cj1*x4876))+(((-1.0)*cj1*x4875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r22*x4871))+((gconst5*sj1*x4874))+(((-1.0)*x4871*x4876))+((r21*x4873))+((cj1*x4872))), ((((-1.0)*gconst5*r21*x4871))+((x4873*x4874))+(((-1.0)*x4871*x4872))+(((-1.0)*cj1*x4876))+(((-1.0)*cj1*x4875))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4877=IKsin(j2);
IkReal x4878=IKcos(j2);
IkReal x4879=(gconst5*sj4);
IkReal x4880=((1.0)*sj0);
IkReal x4881=(cj0*gconst4);
IkReal x4882=((1.0)*r00);
IkReal x4883=(cj0*gconst5);
IkReal x4884=(gconst4*r21);
IkReal x4885=((0.088)*gconst5);
IkReal x4886=(sj1*x4878);
IkReal x4887=(cj1*x4878);
IkReal x4888=(gconst4*r11*sj0);
IkReal x4889=(sj1*x4877);
IkReal x4890=(cj1*x4877);
IkReal x4891=((1.0)*x4890);
evalcond[0]=((((-1.0)*x4891))+((gconst4*r20))+((gconst5*r21))+x4886);
evalcond[1]=(((r20*x4879))+(((-1.0)*sj4*x4884))+(((-1.0)*x4889))+(((-1.0)*x4887))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x4881*x4882))+(((-1.0)*gconst4*r10*x4880))+(((-1.0)*gconst5*r11*x4880))+(((-1.0)*r01*x4883))+x4889+x4887);
evalcond[3]=((((-1.0)*r20*x4885))+(((-0.384)*x4887))+(((-0.384)*x4889))+(((0.088)*x4884))+pz+(((0.0825)*sj1))+(((-0.0825)*x4886))+(((-0.316)*cj1))+(((0.0825)*x4890)));
evalcond[4]=((((-1.0)*x4891))+(((-1.0)*cj0*x4879*x4882))+((cj0*cj4*r02))+((sj4*x4888))+((r01*sj4*x4881))+(((-1.0)*r10*x4879*x4880))+x4886+((cj4*r12*sj0)));
evalcond[5]=((((0.384)*x4886))+(((0.088)*r00*x4883))+((r10*sj0*x4885))+(((-1.0)*py*x4880))+(((-0.384)*x4890))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.088)*x4888))+(((-0.088)*r01*x4881))+(((-0.0825)*x4889))+(((-0.0825)*x4887))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4892=(cj1*cj4);
IkReal x4893=((1.0)*r22);
IkReal x4894=(gconst4*r21);
IkReal x4895=(cj4*sj1);
IkReal x4896=(sj1*sj4);
IkReal x4897=(gconst5*r20);
IkReal x4898=(cj1*sj4);
if( IKabs((((x4892*x4894))+(((-1.0)*x4893*x4898))+(((-1.0)*x4893*x4895))+(((-1.0)*x4892*x4897))+((x4896*x4897))+(((-1.0)*x4894*x4896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4897*x4898))+((x4895*x4897))+(((-1.0)*x4894*x4898))+(((-1.0)*x4894*x4895))+((r22*x4896))+(((-1.0)*x4892*x4893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4892*x4894))+(((-1.0)*x4893*x4898))+(((-1.0)*x4893*x4895))+(((-1.0)*x4892*x4897))+((x4896*x4897))+(((-1.0)*x4894*x4896))))+IKsqr((((x4897*x4898))+((x4895*x4897))+(((-1.0)*x4894*x4898))+(((-1.0)*x4894*x4895))+((r22*x4896))+(((-1.0)*x4892*x4893))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4892*x4894))+(((-1.0)*x4893*x4898))+(((-1.0)*x4893*x4895))+(((-1.0)*x4892*x4897))+((x4896*x4897))+(((-1.0)*x4894*x4896))), (((x4897*x4898))+((x4895*x4897))+(((-1.0)*x4894*x4898))+(((-1.0)*x4894*x4895))+((r22*x4896))+(((-1.0)*x4892*x4893))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4899=IKsin(j2);
IkReal x4900=IKcos(j2);
IkReal x4901=(gconst5*sj4);
IkReal x4902=(cj4*sj0);
IkReal x4903=((1.0)*gconst5);
IkReal x4904=(gconst4*r11);
IkReal x4905=(cj0*r00);
IkReal x4906=((0.088)*sj0);
IkReal x4907=((1.0)*sj1);
IkReal x4908=((1.0)*sj0);
IkReal x4909=((1.0)*cj4);
IkReal x4910=(gconst4*r21);
IkReal x4911=((0.088)*gconst5);
IkReal x4912=((1.0)*sj4);
IkReal x4913=(cj0*r02);
IkReal x4914=(cj1*x4900);
IkReal x4915=(cj1*x4899);
IkReal x4916=(sj1*x4899);
IkReal x4917=(sj1*x4900);
IkReal x4918=(cj0*gconst4*r01);
IkReal x4919=(x4899*x4907);
IkReal x4920=((1.0)*x4914);
IkReal x4921=(x4920+x4919);
evalcond[0]=(x4915+(((-1.0)*x4909*x4910))+((cj4*gconst5*r20))+((r22*sj4))+(((-1.0)*x4900*x4907)));
evalcond[1]=((((-1.0)*x4910*x4912))+((r20*x4901))+(((-1.0)*r22*x4909))+(((-1.0)*x4921)));
evalcond[2]=((((0.0825)*x4915))+(((0.088)*x4910))+(((-0.384)*x4916))+(((-0.384)*x4914))+(((-0.0825)*x4917))+pz+(((-1.0)*r20*x4911))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=(x4917+(((-1.0)*r10*x4901*x4908))+(((-1.0)*x4915))+(((-1.0)*x4901*x4905))+((sj4*x4918))+((sj0*sj4*x4904))+((r12*x4902))+((cj4*x4913)));
evalcond[4]=((((-1.0)*x4912*x4913))+(((-1.0)*r12*sj4*x4908))+((x4902*x4904))+(((-1.0)*cj4*x4903*x4905))+(((-1.0)*x4921))+(((-1.0)*r10*x4902*x4903))+((cj4*x4918)));
evalcond[5]=((((-0.384)*x4915))+(((0.384)*x4917))+(((-1.0)*x4904*x4906))+(((-0.088)*x4918))+((x4905*x4911))+(((-0.0825)*x4914))+(((-0.0825)*x4916))+(((0.0825)*cj1))+(((-1.0)*py*x4908))+(((0.316)*sj1))+((gconst5*r10*x4906))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4922=(cj1*sj4);
IkReal x4923=(gconst5*r20);
IkReal x4924=(r21*sj1);
IkReal x4925=((1.0)*gconst4);
IkReal x4926=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*sj4*x4924*x4925))+(((-1.0)*cj1*gconst5*r21))+(((-1.0)*sj1*x4926))+((sj1*sj4*x4923))+(((-1.0)*cj1*r20*x4925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x4922*x4925))+((gconst4*r20*sj1))+((x4922*x4923))+((gconst5*x4924))+(((-1.0)*cj1*x4926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x4924*x4925))+(((-1.0)*cj1*gconst5*r21))+(((-1.0)*sj1*x4926))+((sj1*sj4*x4923))+(((-1.0)*cj1*r20*x4925))))+IKsqr(((((-1.0)*r21*x4922*x4925))+((gconst4*r20*sj1))+((x4922*x4923))+((gconst5*x4924))+(((-1.0)*cj1*x4926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x4924*x4925))+(((-1.0)*cj1*gconst5*r21))+(((-1.0)*sj1*x4926))+((sj1*sj4*x4923))+(((-1.0)*cj1*r20*x4925))), ((((-1.0)*r21*x4922*x4925))+((gconst4*r20*sj1))+((x4922*x4923))+((gconst5*x4924))+(((-1.0)*cj1*x4926))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4927=IKsin(j2);
IkReal x4928=IKcos(j2);
IkReal x4929=(gconst5*sj4);
IkReal x4930=((1.0)*sj0);
IkReal x4931=((1.0)*sj1);
IkReal x4932=(cj0*gconst5);
IkReal x4933=(gconst4*sj4);
IkReal x4934=((0.088)*gconst5);
IkReal x4935=(cj0*r01);
IkReal x4936=((0.088)*gconst4);
IkReal x4937=(cj1*x4928);
IkReal x4938=(cj1*x4927);
IkReal x4939=(gconst4*r11*sj0);
IkReal x4940=((1.0)*cj0*r00);
IkReal x4941=(sj1*x4927);
IkReal x4942=(sj1*x4928);
IkReal x4943=(x4927*x4931);
IkReal x4944=((1.0)*x4937);
IkReal x4945=(x4944+x4943);
evalcond[0]=(x4938+((gconst4*r20))+((gconst5*r21))+(((-1.0)*x4928*x4931)));
evalcond[1]=(((r20*x4929))+(((-1.0)*x4945))+(((-1.0)*cj4*r22))+(((-1.0)*r21*x4933)));
evalcond[2]=((((-1.0)*gconst4*r10*x4930))+(((-1.0)*x4945))+(((-1.0)*gconst5*r11*x4930))+(((-1.0)*r01*x4932))+(((-1.0)*gconst4*x4940)));
evalcond[3]=((((-0.384)*x4941))+pz+(((-1.0)*r20*x4934))+(((0.0825)*x4938))+((r21*x4936))+(((-0.384)*x4937))+(((-0.0825)*x4942))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(x4942+(((-1.0)*x4938))+((x4933*x4935))+(((-1.0)*r10*x4929*x4930))+(((-1.0)*x4929*x4940))+((cj0*cj4*r02))+((r11*sj0*x4933))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*py*x4930))+((r10*sj0*x4934))+(((-1.0)*x4935*x4936))+(((-0.0825)*x4937))+(((0.088)*r00*x4932))+(((-1.0)*r11*sj0*x4936))+(((-0.384)*x4938))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.0825)*x4941))+(((-1.0)*cj0*px))+(((0.384)*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4946=(gconst5*r01);
IkReal x4947=(gconst4*r00);
IkReal x4948=(cj3*sj1);
IkReal x4949=((1.0)*sj1);
IkReal x4950=(cj1*cj3);
IkReal x4951=(cj0*x4950);
IkReal x4952=(gconst4*r10*sj0);
IkReal x4953=(gconst5*r11*sj0);
IkReal x4954=(r22*sj3*sj4);
IkReal x4955=(cj4*gconst5*r20*sj3);
IkReal x4956=(cj4*gconst4*r21*sj3);
CheckValue<IkReal> x4957 = IKatan2WithCheck(IkReal((((cj0*x4946*x4948))+((cj0*x4947*x4948))+((cj1*x4954))+((cj1*x4955))+(((-1.0)*cj1*x4956))+((x4948*x4952))+((x4948*x4953)))),IkReal((((sj1*x4956))+((x4947*x4951))+((x4946*x4951))+((x4950*x4953))+((x4950*x4952))+(((-1.0)*x4949*x4954))+(((-1.0)*x4949*x4955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4957.valid){
continue;
}
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4958.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4957.value)+(((1.5707963267949)*(x4958.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4959=IKsin(j2);
IkReal x4960=IKcos(j2);
IkReal x4961=(gconst5*sj4);
IkReal x4962=((1.0)*sj0);
IkReal x4963=(cj4*gconst4);
IkReal x4964=(r11*sj0);
IkReal x4965=(cj4*gconst5);
IkReal x4966=((1.0)*r21);
IkReal x4967=(cj0*gconst5);
IkReal x4968=(cj0*r02);
IkReal x4969=(gconst4*sj4);
IkReal x4970=((0.0825)*cj1);
IkReal x4971=(cj0*r01);
IkReal x4972=((0.088)*gconst4);
IkReal x4973=((0.088)*gconst5);
IkReal x4974=(cj1*x4960);
IkReal x4975=(sj1*x4959);
IkReal x4976=((1.0)*cj0*r00);
IkReal x4977=(sj1*x4960);
IkReal x4978=((1.0)*cj1*x4959);
evalcond[0]=(((sj3*x4977))+(((-1.0)*sj3*x4978))+((gconst4*r20))+((gconst5*r21)));
evalcond[1]=((((-1.0)*x4974))+(((-1.0)*x4975))+(((-1.0)*x4966*x4969))+((r20*x4961))+(((-1.0)*cj4*r22)));
evalcond[2]=(((r22*sj4))+((cj3*x4977))+(((-1.0)*x4963*x4966))+((r20*x4965))+(((-1.0)*cj3*x4978)));
evalcond[3]=((((-1.0)*r01*x4967))+((sj3*x4975))+((sj3*x4974))+(((-1.0)*gconst4*r10*x4962))+(((-1.0)*gconst5*r11*x4962))+(((-1.0)*gconst4*x4976)));
evalcond[4]=(pz+(((0.0825)*sj1))+(((-0.0825)*x4977))+((r21*x4972))+(((-0.384)*x4975))+(((-0.384)*x4974))+(((-0.316)*cj1))+((x4959*x4970))+(((-1.0)*r20*x4973)));
evalcond[5]=(x4977+((x4964*x4969))+(((-1.0)*x4978))+(((-1.0)*x4961*x4976))+((x4969*x4971))+((cj4*x4968))+(((-1.0)*r10*x4961*x4962))+((cj4*r12*sj0)));
evalcond[6]=(((x4963*x4964))+((cj3*x4975))+((cj3*x4974))+(((-1.0)*r12*sj4*x4962))+(((-1.0)*x4965*x4976))+(((-1.0)*sj4*x4968))+(((-1.0)*r10*x4962*x4965))+((x4963*x4971)));
evalcond[7]=(x4970+(((-1.0)*x4960*x4970))+(((-0.384)*cj1*x4959))+(((-1.0)*x4971*x4972))+(((-1.0)*py*x4962))+(((-1.0)*x4964*x4972))+(((0.316)*sj1))+(((0.088)*r00*x4967))+(((-0.0825)*x4975))+(((0.384)*x4977))+((r10*sj0*x4973))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4979=((1.0)*r22);
IkReal x4980=(sj1*sj4);
IkReal x4981=(cj1*cj4);
IkReal x4982=(gconst5*r20);
IkReal x4983=(cj4*sj1);
IkReal x4984=(cj1*cj3*sj4);
IkReal x4985=((1.0)*gconst4*r21);
CheckValue<IkReal> x4986=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4986.valid){
continue;
}
CheckValue<IkReal> x4987 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x4979*x4983))+((cj3*x4980*x4982))+(((-1.0)*x4981*x4985))+((cj1*r22*sj4))+((x4981*x4982))+(((-1.0)*cj3*x4980*x4985)))),IkReal((((gconst4*r21*x4983))+(((-1.0)*cj3*x4979*x4981))+((x4982*x4984))+(((-1.0)*x4979*x4980))+(((-1.0)*x4984*x4985))+(((-1.0)*x4982*x4983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4987.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4986.value)))+(x4987.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4988=IKsin(j2);
IkReal x4989=IKcos(j2);
IkReal x4990=(gconst5*sj4);
IkReal x4991=((1.0)*sj0);
IkReal x4992=(cj4*gconst4);
IkReal x4993=(r11*sj0);
IkReal x4994=(cj4*gconst5);
IkReal x4995=((1.0)*r21);
IkReal x4996=(cj0*gconst5);
IkReal x4997=(cj0*r02);
IkReal x4998=(gconst4*sj4);
IkReal x4999=((0.0825)*cj1);
IkReal x5000=(cj0*r01);
IkReal x5001=((0.088)*gconst4);
IkReal x5002=((0.088)*gconst5);
IkReal x5003=(cj1*x4989);
IkReal x5004=(sj1*x4988);
IkReal x5005=((1.0)*cj0*r00);
IkReal x5006=(sj1*x4989);
IkReal x5007=((1.0)*cj1*x4988);
evalcond[0]=(((gconst4*r20))+(((-1.0)*sj3*x5007))+((gconst5*r21))+((sj3*x5006)));
evalcond[1]=((((-1.0)*x5003))+(((-1.0)*x5004))+((r20*x4990))+(((-1.0)*cj4*r22))+(((-1.0)*x4995*x4998)));
evalcond[2]=(((r22*sj4))+((r20*x4994))+((cj3*x5006))+(((-1.0)*cj3*x5007))+(((-1.0)*x4992*x4995)));
evalcond[3]=((((-1.0)*gconst5*r11*x4991))+(((-1.0)*gconst4*x5005))+(((-1.0)*gconst4*r10*x4991))+(((-1.0)*r01*x4996))+((sj3*x5004))+((sj3*x5003)));
evalcond[4]=((((-0.0825)*x5006))+((x4988*x4999))+pz+((r21*x5001))+(((-0.384)*x5004))+(((-0.384)*x5003))+(((0.0825)*sj1))+(((-1.0)*r20*x5002))+(((-0.316)*cj1)));
evalcond[5]=(((x4993*x4998))+(((-1.0)*r10*x4990*x4991))+x5006+(((-1.0)*x4990*x5005))+((cj4*x4997))+((cj4*r12*sj0))+(((-1.0)*x5007))+((x4998*x5000)));
evalcond[6]=(((x4992*x4993))+(((-1.0)*r10*x4991*x4994))+(((-1.0)*x4994*x5005))+((x4992*x5000))+((cj3*x5003))+((cj3*x5004))+(((-1.0)*sj4*x4997))+(((-1.0)*r12*sj4*x4991)));
evalcond[7]=(x4999+(((0.088)*r00*x4996))+(((-0.384)*cj1*x4988))+(((-0.0825)*x5004))+(((-1.0)*x4993*x5001))+(((-1.0)*x5000*x5001))+(((0.384)*x5006))+(((0.316)*sj1))+(((-1.0)*py*x4991))+((r10*sj0*x5002))+(((-1.0)*cj0*px))+(((-1.0)*x4989*x4999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5008=(r20*sj1);
IkReal x5009=((1.0)*gconst4);
IkReal x5010=(sj3*sj4);
IkReal x5011=(cj1*r20);
IkReal x5012=(cj1*r21);
IkReal x5013=(r21*sj1);
IkReal x5014=((1.0)*cj4*r22*sj3);
CheckValue<IkReal> x5015=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5015.valid){
continue;
}
CheckValue<IkReal> x5016 = IKatan2WithCheck(IkReal(((((-1.0)*x5009*x5010*x5013))+((gconst5*x5008*x5010))+((gconst5*x5012))+(((-1.0)*sj1*x5014))+((gconst4*x5011)))),IkReal(((((-1.0)*x5009*x5010*x5012))+(((-1.0)*gconst5*x5013))+(((-1.0)*cj1*x5014))+(((-1.0)*x5008*x5009))+((gconst5*x5010*x5011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5016.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5015.value)))+(x5016.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5017=IKsin(j2);
IkReal x5018=IKcos(j2);
IkReal x5019=(gconst5*sj4);
IkReal x5020=((1.0)*sj0);
IkReal x5021=(cj4*gconst4);
IkReal x5022=(r11*sj0);
IkReal x5023=(cj4*gconst5);
IkReal x5024=((1.0)*r21);
IkReal x5025=(cj0*gconst5);
IkReal x5026=(cj0*r02);
IkReal x5027=(gconst4*sj4);
IkReal x5028=((0.0825)*cj1);
IkReal x5029=(cj0*r01);
IkReal x5030=((0.088)*gconst4);
IkReal x5031=((0.088)*gconst5);
IkReal x5032=(cj1*x5018);
IkReal x5033=(sj1*x5017);
IkReal x5034=((1.0)*cj0*r00);
IkReal x5035=(sj1*x5018);
IkReal x5036=((1.0)*cj1*x5017);
evalcond[0]=(((gconst4*r20))+((gconst5*r21))+(((-1.0)*sj3*x5036))+((sj3*x5035)));
evalcond[1]=(((r20*x5019))+(((-1.0)*x5032))+(((-1.0)*x5033))+(((-1.0)*cj4*r22))+(((-1.0)*x5024*x5027)));
evalcond[2]=(((r20*x5023))+((r22*sj4))+(((-1.0)*x5021*x5024))+((cj3*x5035))+(((-1.0)*cj3*x5036)));
evalcond[3]=((((-1.0)*r01*x5025))+(((-1.0)*gconst5*r11*x5020))+(((-1.0)*gconst4*x5034))+(((-1.0)*gconst4*r10*x5020))+((sj3*x5033))+((sj3*x5032)));
evalcond[4]=((((-0.0825)*x5035))+((x5017*x5028))+pz+((r21*x5030))+(((-0.384)*x5033))+(((-0.384)*x5032))+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-1.0)*r20*x5031)));
evalcond[5]=(((x5022*x5027))+(((-1.0)*x5019*x5034))+((cj4*x5026))+(((-1.0)*r10*x5019*x5020))+((x5027*x5029))+x5035+(((-1.0)*x5036))+((cj4*r12*sj0)));
evalcond[6]=(((x5021*x5029))+((x5021*x5022))+(((-1.0)*x5023*x5034))+((cj3*x5033))+((cj3*x5032))+(((-1.0)*r12*sj4*x5020))+(((-1.0)*sj4*x5026))+(((-1.0)*r10*x5020*x5023)));
evalcond[7]=((((-0.0825)*x5033))+(((-1.0)*x5029*x5030))+x5028+(((-1.0)*x5022*x5030))+(((-1.0)*x5018*x5028))+(((-1.0)*py*x5020))+(((0.384)*x5035))+(((0.316)*sj1))+((r10*sj0*x5031))+(((-0.384)*cj1*x5017))+(((0.088)*r00*x5025))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5037=((0.088)*cj5);
IkReal x5038=((1.0)*sj3);
IkReal x5039=((0.088)*sj3*sj5);
CheckValue<IkReal> x5040=IKPowWithIntegerCheck(IKsign(((((-0.088)*r20*sj4*sj5))+(((-1.0)*r21*sj4*x5037))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x5040.valid){
continue;
}
CheckValue<IkReal> x5041 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5039))+((r10*sj3*x5037))+(((-1.0)*py*x5038)))),IkReal(((((-1.0)*px*x5038))+((r00*sj3*x5037))+(((-1.0)*r01*x5039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5041.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5040.value)))+(x5041.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5042=IKsin(j0);
IkReal x5043=IKcos(j0);
IkReal x5044=(r11*sj5);
IkReal x5045=((1.0)*r01);
IkReal x5046=((1.0)*r10);
IkReal x5047=(sj4*x5043);
IkReal x5048=(sj5*x5042);
IkReal x5049=(cj5*x5042);
IkReal x5050=(cj4*x5043);
IkReal x5051=(r02*x5042);
IkReal x5052=((0.088)*x5043);
IkReal x5053=((1.0)*x5043);
evalcond[0]=((((-1.0)*sj5*x5043*x5046))+((r00*x5048))+(((-1.0)*cj5*r11*x5053))+((r01*x5049))+(((-1.0)*cj3)));
evalcond[1]=((((-1.0)*x5044*x5052))+((px*x5042))+(((-0.088)*r00*x5049))+((cj5*r10*x5052))+(((0.088)*r01*x5048))+(((-1.0)*py*x5053)));
evalcond[2]=(((r00*sj4*x5049))+((r12*x5050))+(((-1.0)*cj4*x5051))+(((-1.0)*cj5*x5046*x5047))+((x5044*x5047))+(((-1.0)*sj4*x5045*x5048)));
evalcond[3]=(sj3+((x5044*x5050))+((sj4*x5051))+(((-1.0)*cj4*x5045*x5048))+((cj4*r00*x5049))+(((-1.0)*r12*x5047))+(((-1.0)*cj5*x5046*x5050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5054=((1.264)*sj3);
IkReal x5055=((1.264)*cj3);
IkReal x5056=(r21*sj5);
IkReal x5057=((1.056)*sj3);
IkReal x5058=(cj5*r20);
IkReal x5059=((0.352)*sj3);
IkReal x5060=((0.33)*cj4);
IkReal x5061=((1.056)*cj3);
IkReal x5062=(r20*sj5);
IkReal x5063=((0.99)*cj4);
IkReal x5064=((12.0)*pz);
IkReal x5065=((4.0)*pz);
IkReal x5066=(r22*sj4);
IkReal x5067=(cj5*r21);
IkReal x5068=(sj3*sj4);
IkReal x5069=((0.352)*cj3);
IkReal x5070=((0.99)*x5062);
IkReal x5071=((0.99)*x5067);
IkReal x5072=(sj3*x5064);
IkReal x5073=((0.99)*x5066);
IkReal x5074=(cj3*x5064);
IkReal x5075=((4.608)*cj3*sj4);
IkReal x5076=((1.536)*cj4*r22);
IkReal x5077=((4.608)*cj4*r22);
IkReal x5078=((1.536)*cj3*sj4);
IkReal x5079=(sj3*x5077);
IkReal x5080=(x5056*x5057);
IkReal x5081=(x5057*x5058);
IkReal x5082=(cj3*x5077);
IkReal x5083=(x5058*x5063);
IkReal x5084=(x5056*x5061);
IkReal x5085=(x5056*x5063);
IkReal x5086=(x5058*x5061);
IkReal x5087=((4.608)*x5056*x5068);
IkReal x5088=((4.608)*x5058*x5068);
IkReal x5089=(x5056*x5075);
IkReal x5090=(x5058*x5075);
IkReal x5091=(x5088+x5081);
IkReal x5092=(x5090+x5086+x5085);
IkReal x5093=(x5080+x5087+x5079+x5072+x5070+x5071);
IkReal x5094=(x5089+x5083+x5082+x5084+x5073+x5074);
j1eval[0]=((IKabs(((((-1.0)*x5056*x5060))+((x5056*x5078))+(((-1.0)*x5058*x5069))+((cj3*x5065))+(((-1.0)*x5058*x5078))+((cj3*x5076))+((x5058*x5060))+x5055+(((0.33)*x5066))+((x5056*x5069)))))+(IKabs((x5093+x5054+(((-1.0)*x5091)))))+(IKabs((x5094+x5055+(((-1.0)*x5092)))))+(IKabs((((sj3*x5065))+(((-1.536)*x5058*x5068))+(((1.536)*x5056*x5068))+((sj3*x5076))+x5054+((x5056*x5059))+(((0.33)*x5067))+(((0.33)*x5062))+(((-1.0)*x5058*x5059)))))+(((2.64)*(IKabs(cj3))))+(IKabs((x5094+(((-1.0)*x5092))+(((-1.0)*x5055)))))+(IKabs((x5093+(((-1.0)*x5091))+(((-1.0)*x5054)))))+(((2.64)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5095=((1.264)*sj3);
IkReal x5096=((0.66)*sj3);
IkReal x5097=(cj5*r21);
IkReal x5098=(pz*sj3);
IkReal x5099=(r20*sj5);
IkReal x5100=((1.536)*sj4);
IkReal x5101=((4.608)*sj4);
IkReal x5102=((0.99)*x5099);
IkReal x5103=((0.99)*x5097);
IkReal x5104=((12.0)*x5098);
IkReal x5105=((0.33)*x5099);
IkReal x5106=((4.0)*x5098);
IkReal x5107=((0.33)*x5097);
IkReal x5108=(r21*sj3*sj5);
IkReal x5109=(cj5*r20*sj3);
IkReal x5110=(cj4*r22*sj3);
IkReal x5111=((4.608)*x5110);
IkReal x5112=((1.056)*x5108);
IkReal x5113=((1.056)*x5109);
IkReal x5114=((0.352)*x5108);
IkReal x5115=((1.536)*x5110);
IkReal x5116=((0.352)*x5109);
IkReal x5117=(x5101*x5108);
IkReal x5118=(x5101*x5109);
IkReal x5119=(x5100*x5108);
IkReal x5120=(x5100*x5109);
IkReal x5121=(x5116+x5120);
IkReal x5122=(x5113+x5118);
IkReal x5123=(x5106+x5107+x5105+x5115+x5114+x5119);
IkReal x5124=(x5102+x5103+x5104+x5117+x5111+x5112);
op[0]=(x5123+x5095+(((-1.0)*x5121)));
op[1]=x5096;
op[2]=(x5124+x5095+(((-1.0)*x5122)));
op[3]=((1.32)*sj3);
op[4]=(x5124+(((-1.0)*x5095))+(((-1.0)*x5122)));
op[5]=x5096;
op[6]=(x5123+(((-1.0)*x5095))+(((-1.0)*x5121)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5125=((1.264)*cj3);
IkReal x5126=(r21*sj5);
IkReal x5127=((0.66)*cj3);
IkReal x5128=(cj5*r20);
IkReal x5129=((0.33)*cj4);
IkReal x5130=((1.056)*cj3);
IkReal x5131=((0.352)*cj3);
IkReal x5132=(r22*sj4);
IkReal x5133=((1.536)*cj3);
IkReal x5134=(cj4*r22);
IkReal x5135=((0.99)*cj4);
IkReal x5136=(cj3*pz);
IkReal x5137=((0.99)*x5132);
IkReal x5138=((12.0)*x5136);
IkReal x5139=((0.33)*x5132);
IkReal x5140=((4.0)*x5136);
IkReal x5141=((4.608)*cj3*sj4);
IkReal x5142=(x5133*x5134);
IkReal x5143=(x5128*x5129);
IkReal x5144=((4.608)*cj3*x5134);
IkReal x5145=(x5128*x5135);
IkReal x5146=(x5126*x5130);
IkReal x5147=(x5126*x5135);
IkReal x5148=(x5128*x5130);
IkReal x5149=(x5126*x5131);
IkReal x5150=(x5126*x5129);
IkReal x5151=(x5128*x5131);
IkReal x5152=(x5126*x5141);
IkReal x5153=(x5128*x5141);
IkReal x5154=(sj4*x5126*x5133);
IkReal x5155=(sj4*x5128*x5133);
IkReal x5156=(x5151+x5150+x5155);
IkReal x5157=(x5153+x5148+x5147);
IkReal x5158=(x5154+x5149+x5142+x5143+x5140+x5139);
IkReal x5159=(x5152+x5146+x5144+x5145+x5138+x5137);
j1evalpoly[0]=(((x5127*(htj1*htj1*htj1*htj1*htj1)))+(((1.32)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*((x5159+x5125+(((-1.0)*x5157))))))+x5158+((htj1*x5127))+(((-1.0)*x5125))+(((-1.0)*x5156))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5158+x5125+(((-1.0)*x5156))))))+(((htj1*htj1)*((x5159+(((-1.0)*x5125))+(((-1.0)*x5157)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5160=(cj3*sj3);
j2eval[0]=x5160;
j2eval[1]=IKsign(x5160);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5161=(r21*sj5);
IkReal x5162=(cj1*sj4);
IkReal x5163=(cj5*r20);
IkReal x5164=(sj1*sj4);
IkReal x5165=(cj4*sj1);
IkReal x5166=((1.0)*cj1*cj4);
IkReal x5167=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x5161*x5166))+((cj1*cj4*x5163))+((r22*x5162))+(((-1.0)*x5161*x5164))+(((-1.0)*r22*x5165))+((x5163*x5164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5163*x5165))+(((-1.0)*r22*x5166))+((x5162*x5163))+(((-1.0)*x5161*x5162))+((x5161*x5165))+(((-1.0)*r22*x5164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5161*x5166))+((cj1*cj4*x5163))+((r22*x5162))+(((-1.0)*x5161*x5164))+(((-1.0)*r22*x5165))+((x5163*x5164))))+IKsqr(((((-1.0)*x5163*x5165))+(((-1.0)*r22*x5166))+((x5162*x5163))+(((-1.0)*x5161*x5162))+((x5161*x5165))+(((-1.0)*r22*x5164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5161*x5166))+((cj1*cj4*x5163))+((r22*x5162))+(((-1.0)*x5161*x5164))+(((-1.0)*r22*x5165))+((x5163*x5164))), ((((-1.0)*x5163*x5165))+(((-1.0)*r22*x5166))+((x5162*x5163))+(((-1.0)*x5161*x5162))+((x5161*x5165))+(((-1.0)*r22*x5164))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5168=IKsin(j2);
IkReal x5169=IKcos(j2);
IkReal x5170=(r10*sj0);
IkReal x5171=(cj0*r00);
IkReal x5172=((1.0)*sj0);
IkReal x5173=((1.0)*cj4);
IkReal x5174=((0.088)*sj5);
IkReal x5175=(r11*sj0);
IkReal x5176=(cj5*r20);
IkReal x5177=(r21*sj5);
IkReal x5178=((1.0)*cj0);
IkReal x5179=((0.088)*cj5);
IkReal x5180=(sj1*x5169);
IkReal x5181=(cj1*x5169);
IkReal x5182=((1.0)*cj5*sj4);
IkReal x5183=((0.0825)*x5168);
IkReal x5184=((0.384)*x5168);
IkReal x5185=((1.0)*x5168);
IkReal x5186=(cj0*r01*sj5);
IkReal x5187=(cj1*x5185);
evalcond[0]=((((-1.0)*x5173*x5177))+((r22*sj4))+x5180+((cj4*x5176))+(((-1.0)*x5187)));
evalcond[1]=((((-1.0)*sj1*x5185))+(((-1.0)*x5181))+(((-1.0)*sj4*x5177))+((sj4*x5176))+(((-1.0)*r22*x5173)));
evalcond[2]=(((cj1*x5183))+(((-0.0825)*x5180))+(((-0.384)*x5181))+(((-1.0)*sj1*x5184))+pz+(((-0.088)*x5176))+(((0.0825)*sj1))+(((-0.316)*cj1))+((r21*x5174)));
evalcond[3]=((((-1.0)*x5170*x5182))+(((-1.0)*x5171*x5182))+((cj0*cj4*r02))+x5180+((sj4*sj5*x5175))+((sj4*x5186))+(((-1.0)*x5187))+((cj4*r12*sj0)));
evalcond[4]=(((cj4*x5186))+(((-1.0)*r02*sj4*x5178))+x5181+(((-1.0)*cj5*x5170*x5173))+(((-1.0)*cj5*x5171*x5173))+((cj4*sj5*x5175))+(((-1.0)*r12*sj4*x5172))+((sj1*x5168)));
evalcond[5]=((((-1.0)*cj0*r01*x5174))+(((-0.0825)*x5181))+(((0.384)*x5180))+(((-1.0)*cj1*x5184))+(((-1.0)*x5174*x5175))+(((-1.0)*px*x5178))+(((-1.0)*sj1*x5183))+(((-1.0)*py*x5172))+((x5170*x5179))+(((0.0825)*cj1))+(((0.316)*sj1))+((x5171*x5179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5188=((1.0)*sj1);
IkReal x5189=(r20*sj5);
IkReal x5190=(cj1*sj4);
IkReal x5191=(cj5*r20);
IkReal x5192=(cj5*r21);
IkReal x5193=(r21*sj5);
IkReal x5194=((1.0)*cj4*r22);
if( IKabs((((cj1*x5189))+(((-1.0)*cj4*r22*x5188))+((sj1*sj4*x5191))+((cj1*x5192))+(((-1.0)*sj4*x5188*x5193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5188*x5189))+(((-1.0)*x5190*x5193))+(((-1.0)*cj1*x5194))+(((-1.0)*x5188*x5192))+((x5190*x5191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5189))+(((-1.0)*cj4*r22*x5188))+((sj1*sj4*x5191))+((cj1*x5192))+(((-1.0)*sj4*x5188*x5193))))+IKsqr(((((-1.0)*x5188*x5189))+(((-1.0)*x5190*x5193))+(((-1.0)*cj1*x5194))+(((-1.0)*x5188*x5192))+((x5190*x5191))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5189))+(((-1.0)*cj4*r22*x5188))+((sj1*sj4*x5191))+((cj1*x5192))+(((-1.0)*sj4*x5188*x5193))), ((((-1.0)*x5188*x5189))+(((-1.0)*x5190*x5193))+(((-1.0)*cj1*x5194))+(((-1.0)*x5188*x5192))+((x5190*x5191))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5195=IKsin(j2);
IkReal x5196=IKcos(j2);
IkReal x5197=((1.0)*sj0);
IkReal x5198=(cj5*sj4);
IkReal x5199=((1.0)*cj0);
IkReal x5200=((0.088)*cj5);
IkReal x5201=(sj1*x5196);
IkReal x5202=(cj1*x5196);
IkReal x5203=(r11*sj0*sj5);
IkReal x5204=((0.0825)*x5195);
IkReal x5205=(sj1*x5195);
IkReal x5206=(cj0*r01*sj5);
IkReal x5207=(cj1*x5195);
IkReal x5208=((1.0)*x5207);
evalcond[0]=((((-1.0)*x5208))+((cj5*r21))+x5201+((r20*sj5)));
evalcond[1]=((((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22))+((r20*x5198))+(((-1.0)*x5202))+(((-1.0)*x5205)));
evalcond[2]=((((-1.0)*cj5*r11*x5197))+x5202+x5205+(((-1.0)*cj5*r01*x5199))+(((-1.0)*r00*sj5*x5199))+(((-1.0)*r10*sj5*x5197)));
CheckValue<IkReal> x5209=IKPowWithIntegerCheck(cj4,-1);
if(!x5209.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x5209.value)))+(((-0.384)*x5205))+(((-0.384)*x5202))+((cj1*x5204))+(((-0.0825)*x5201))+pz+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*x5208))+((sj4*x5206))+((sj4*x5203))+x5201+((cj0*cj4*r02))+(((-1.0)*r00*x5198*x5199))+(((-1.0)*r10*x5197*x5198))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*sj1*x5204))+((cj0*r00*x5200))+(((-0.384)*x5207))+(((-1.0)*py*x5197))+((r10*sj0*x5200))+(((-0.0825)*x5202))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*px*x5199))+(((0.384)*x5201))+(((-0.088)*x5203))+(((-0.088)*x5206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5210=(cj1*cj4);
IkReal x5211=(r21*sj5);
IkReal x5212=((1.0)*r22);
IkReal x5213=(cj1*sj4);
IkReal x5214=(cj5*r20);
IkReal x5215=(cj4*sj1);
IkReal x5216=(sj1*sj4);
if( IKabs(((((-1.0)*x5212*x5213))+(((-1.0)*x5212*x5215))+(((-1.0)*x5210*x5214))+((x5214*x5216))+((x5210*x5211))+(((-1.0)*x5211*x5216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5214*x5215))+((r22*x5216))+((x5213*x5214))+(((-1.0)*x5211*x5213))+(((-1.0)*x5211*x5215))+(((-1.0)*x5210*x5212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5212*x5213))+(((-1.0)*x5212*x5215))+(((-1.0)*x5210*x5214))+((x5214*x5216))+((x5210*x5211))+(((-1.0)*x5211*x5216))))+IKsqr((((x5214*x5215))+((r22*x5216))+((x5213*x5214))+(((-1.0)*x5211*x5213))+(((-1.0)*x5211*x5215))+(((-1.0)*x5210*x5212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5212*x5213))+(((-1.0)*x5212*x5215))+(((-1.0)*x5210*x5214))+((x5214*x5216))+((x5210*x5211))+(((-1.0)*x5211*x5216))), (((x5214*x5215))+((r22*x5216))+((x5213*x5214))+(((-1.0)*x5211*x5213))+(((-1.0)*x5211*x5215))+(((-1.0)*x5210*x5212))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5217=IKsin(j2);
IkReal x5218=IKcos(j2);
IkReal x5219=(r10*sj0);
IkReal x5220=(cj0*r00);
IkReal x5221=((1.0)*cj4);
IkReal x5222=((0.088)*sj5);
IkReal x5223=(r11*sj0);
IkReal x5224=((1.0)*sj1);
IkReal x5225=(cj5*r20);
IkReal x5226=((1.0)*sj4);
IkReal x5227=(r12*sj0);
IkReal x5228=(r21*sj5);
IkReal x5229=(cj0*r02);
IkReal x5230=((0.088)*cj5);
IkReal x5231=(cj1*x5218);
IkReal x5232=(cj5*x5226);
IkReal x5233=(cj1*x5217);
IkReal x5234=(sj1*x5217);
IkReal x5235=(cj0*r01*sj5);
IkReal x5236=(sj1*x5218);
IkReal x5237=(x5217*x5224);
IkReal x5238=((1.0)*x5231);
IkReal x5239=(x5238+x5237);
evalcond[0]=((((-1.0)*x5221*x5228))+((r22*sj4))+((cj4*x5225))+x5233+(((-1.0)*x5218*x5224)));
evalcond[1]=(((sj4*x5225))+(((-1.0)*x5239))+(((-1.0)*x5226*x5228))+(((-1.0)*r22*x5221)));
evalcond[2]=((((-0.088)*x5225))+((r21*x5222))+pz+(((-0.0825)*x5236))+(((0.0825)*sj1))+(((0.0825)*x5233))+(((-0.384)*x5234))+(((-0.384)*x5231))+(((-0.316)*cj1)));
evalcond[3]=((((-1.0)*x5219*x5232))+((cj4*x5227))+((cj4*x5229))+(((-1.0)*x5233))+(((-1.0)*x5220*x5232))+x5236+((sj4*x5235))+((sj4*sj5*x5223)));
evalcond[4]=(((cj4*sj5*x5223))+(((-1.0)*x5239))+(((-1.0)*cj5*x5220*x5221))+(((-1.0)*x5226*x5229))+(((-1.0)*x5226*x5227))+(((-1.0)*cj5*x5219*x5221))+((cj4*x5235)));
evalcond[5]=(((x5219*x5230))+(((-1.0)*x5222*x5223))+((x5220*x5230))+(((-0.0825)*x5231))+(((-0.0825)*x5234))+(((-1.0)*cj0*r01*x5222))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.384)*x5236))+(((0.316)*sj1))+(((-0.384)*x5233))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5240=((1.0)*cj1);
IkReal x5241=(cj4*r22);
IkReal x5242=(cj5*r21);
IkReal x5243=((1.0)*sj1);
IkReal x5244=(r20*sj5);
IkReal x5245=(cj5*r20*sj4);
IkReal x5246=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x5243*x5246))+((sj1*x5245))+(((-1.0)*x5241*x5243))+(((-1.0)*x5240*x5244))+(((-1.0)*x5240*x5242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5242))+((sj1*x5244))+(((-1.0)*x5240*x5246))+(((-1.0)*x5240*x5241))+((cj1*x5245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5243*x5246))+((sj1*x5245))+(((-1.0)*x5241*x5243))+(((-1.0)*x5240*x5244))+(((-1.0)*x5240*x5242))))+IKsqr((((sj1*x5242))+((sj1*x5244))+(((-1.0)*x5240*x5246))+(((-1.0)*x5240*x5241))+((cj1*x5245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5243*x5246))+((sj1*x5245))+(((-1.0)*x5241*x5243))+(((-1.0)*x5240*x5244))+(((-1.0)*x5240*x5242))), (((sj1*x5242))+((sj1*x5244))+(((-1.0)*x5240*x5246))+(((-1.0)*x5240*x5241))+((cj1*x5245))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5247=IKsin(j2);
IkReal x5248=IKcos(j2);
IkReal x5249=(sj0*sj5);
IkReal x5250=((1.0)*r10);
IkReal x5251=(cj5*sj4);
IkReal x5252=((1.0)*cj0);
IkReal x5253=((1.0)*sj1);
IkReal x5254=((1.0)*sj0);
IkReal x5255=((0.088)*cj5);
IkReal x5256=(cj1*x5248);
IkReal x5257=(cj1*x5247);
IkReal x5258=(sj1*x5247);
IkReal x5259=(cj0*r01*sj5);
IkReal x5260=(sj1*x5248);
IkReal x5261=(x5247*x5253);
IkReal x5262=((1.0)*x5256);
IkReal x5263=(x5262+x5261);
evalcond[0]=(((cj5*r21))+(((-1.0)*x5248*x5253))+x5257+((r20*sj5)));
evalcond[1]=((((-1.0)*x5263))+((r20*x5251))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*x5249*x5250))+(((-1.0)*x5263))+(((-1.0)*r00*sj5*x5252))+(((-1.0)*cj5*r11*x5254))+(((-1.0)*cj5*r01*x5252)));
CheckValue<IkReal> x5264=IKPowWithIntegerCheck(cj4,-1);
if(!x5264.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x5264.value)))+pz+(((0.0825)*x5257))+(((-0.384)*x5258))+(((-0.384)*x5256))+(((0.0825)*sj1))+(((-0.0825)*x5260))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*x5257))+x5260+(((-1.0)*sj0*x5250*x5251))+((cj0*cj4*r02))+((r11*sj4*x5249))+((sj4*x5259))+(((-1.0)*r00*x5251*x5252))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*py*x5254))+(((-1.0)*px*x5252))+((cj0*r00*x5255))+(((-0.088)*r11*x5249))+(((0.384)*x5260))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.0825)*x5256))+(((-0.0825)*x5258))+(((-0.384)*x5257))+(((-0.088)*x5259))+((r10*sj0*x5255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5265=(r11*sj0);
IkReal x5266=(r21*sj5);
IkReal x5267=(cj0*r01);
IkReal x5268=(cj5*r20);
IkReal x5269=(cj3*sj5);
IkReal x5270=(cj0*r00);
IkReal x5271=(r10*sj0);
IkReal x5272=(cj1*cj3*cj5);
IkReal x5273=(cj1*cj4*sj3);
IkReal x5274=(cj4*sj1*sj3);
IkReal x5275=(cj3*cj5*sj1);
IkReal x5276=(r22*sj3*sj4);
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal((((cj1*x5276))+(((-1.0)*x5266*x5273))+((x5267*x5275))+((x5268*x5273))+((sj1*x5269*x5270))+((sj1*x5269*x5271))+((x5265*x5275)))),IkReal(((((-1.0)*x5268*x5274))+((x5267*x5272))+((cj1*x5269*x5270))+((cj1*x5269*x5271))+((x5265*x5272))+(((-1.0)*sj1*x5276))+((x5266*x5274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x5278.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5277.value)+(((1.5707963267949)*(x5278.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5279=IKsin(j2);
IkReal x5280=IKcos(j2);
IkReal x5281=(cj4*cj5);
IkReal x5282=(cj5*sj4);
IkReal x5283=((0.088)*cj5);
IkReal x5284=((1.0)*sj0);
IkReal x5285=((0.088)*sj5);
IkReal x5286=(r11*sj0);
IkReal x5287=((1.0)*cj4);
IkReal x5288=(cj0*r01);
IkReal x5289=(sj4*sj5);
IkReal x5290=((1.0)*cj0);
IkReal x5291=(cj4*sj5);
IkReal x5292=(cj1*x5280);
IkReal x5293=(r10*x5284);
IkReal x5294=(sj1*x5279);
IkReal x5295=(r00*x5290);
IkReal x5296=(sj1*x5280);
IkReal x5297=(cj1*x5279);
evalcond[0]=(((cj5*r21))+((sj3*x5296))+(((-1.0)*sj3*x5297))+((r20*sj5)));
evalcond[1]=((((-1.0)*r22*x5287))+(((-1.0)*r21*x5289))+((r20*x5282))+(((-1.0)*x5294))+(((-1.0)*x5292)));
evalcond[2]=((((-1.0)*cj3*x5297))+((r22*sj4))+((r20*x5281))+(((-1.0)*r21*sj5*x5287))+((cj3*x5296)));
evalcond[3]=(((sj3*x5292))+((sj3*x5294))+(((-1.0)*cj5*r11*x5284))+(((-1.0)*cj5*x5288))+(((-1.0)*sj5*x5295))+(((-1.0)*sj5*x5293)));
evalcond[4]=((((-0.0825)*x5296))+((r21*x5285))+(((-1.0)*r20*x5283))+pz+(((0.0825)*x5297))+(((-0.384)*x5292))+(((-0.384)*x5294))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[5]=(((x5286*x5289))+x5296+((cj0*cj4*r02))+(((-1.0)*x5297))+((x5288*x5289))+(((-1.0)*x5282*x5295))+(((-1.0)*x5282*x5293))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*x5281*x5293))+(((-1.0)*x5281*x5295))+((x5286*x5291))+((x5288*x5291))+(((-1.0)*r02*sj4*x5290))+(((-1.0)*r12*sj4*x5284))+((cj3*x5294))+((cj3*x5292)));
evalcond[7]=((((-0.0825)*x5294))+(((-0.0825)*x5292))+((r10*sj0*x5283))+(((-1.0)*px*x5290))+(((0.384)*x5296))+((cj0*r00*x5283))+(((0.0825)*cj1))+(((-0.384)*x5297))+(((0.316)*sj1))+(((-1.0)*py*x5284))+(((-1.0)*x5285*x5286))+(((-1.0)*x5285*x5288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5298=(r21*sj5);
IkReal x5299=(cj3*r22);
IkReal x5300=(cj5*r20);
IkReal x5301=(cj3*sj4);
IkReal x5302=((1.0)*cj1*cj4);
IkReal x5303=((1.0)*sj1*sj4);
IkReal x5304=((1.0)*cj4*sj1);
CheckValue<IkReal> x5305=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5305.valid){
continue;
}
CheckValue<IkReal> x5306 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x5298*x5301))+((sj1*x5300*x5301))+((cj1*cj4*x5300))+(((-1.0)*x5298*x5302))+((cj1*r22*sj4))+(((-1.0)*x5299*x5304)))),IkReal((((cj4*sj1*x5298))+(((-1.0)*r22*x5303))+((cj1*x5300*x5301))+(((-1.0)*cj1*x5298*x5301))+(((-1.0)*x5300*x5304))+(((-1.0)*x5299*x5302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5306.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5305.value)))+(x5306.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5307=IKsin(j2);
IkReal x5308=IKcos(j2);
IkReal x5309=(cj4*cj5);
IkReal x5310=(cj5*sj4);
IkReal x5311=((0.088)*cj5);
IkReal x5312=((1.0)*sj0);
IkReal x5313=((0.088)*sj5);
IkReal x5314=(r11*sj0);
IkReal x5315=((1.0)*cj4);
IkReal x5316=(cj0*r01);
IkReal x5317=(sj4*sj5);
IkReal x5318=((1.0)*cj0);
IkReal x5319=(cj4*sj5);
IkReal x5320=(cj1*x5308);
IkReal x5321=(r10*x5312);
IkReal x5322=(sj1*x5307);
IkReal x5323=(r00*x5318);
IkReal x5324=(sj1*x5308);
IkReal x5325=(cj1*x5307);
evalcond[0]=(((cj5*r21))+((sj3*x5324))+(((-1.0)*sj3*x5325))+((r20*sj5)));
evalcond[1]=((((-1.0)*x5320))+(((-1.0)*x5322))+(((-1.0)*r21*x5317))+((r20*x5310))+(((-1.0)*r22*x5315)));
evalcond[2]=(((r22*sj4))+(((-1.0)*r21*sj5*x5315))+(((-1.0)*cj3*x5325))+((cj3*x5324))+((r20*x5309)));
evalcond[3]=((((-1.0)*cj5*x5316))+((sj3*x5322))+((sj3*x5320))+(((-1.0)*sj5*x5321))+(((-1.0)*sj5*x5323))+(((-1.0)*cj5*r11*x5312)));
evalcond[4]=((((-0.0825)*x5324))+((r21*x5313))+pz+(((-1.0)*r20*x5311))+(((-0.384)*x5320))+(((-0.384)*x5322))+(((0.0825)*x5325))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[5]=((((-1.0)*x5325))+x5324+((cj0*cj4*r02))+(((-1.0)*x5310*x5323))+(((-1.0)*x5310*x5321))+((x5316*x5317))+((x5314*x5317))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*r02*sj4*x5318))+(((-1.0)*r12*sj4*x5312))+((x5316*x5319))+(((-1.0)*x5309*x5323))+(((-1.0)*x5309*x5321))+((x5314*x5319))+((cj3*x5322))+((cj3*x5320)));
evalcond[7]=((((-0.0825)*x5322))+(((-0.0825)*x5320))+(((-1.0)*px*x5318))+((cj0*r00*x5311))+(((-1.0)*x5313*x5314))+(((-1.0)*x5313*x5316))+(((0.384)*x5324))+((r10*sj0*x5311))+(((-1.0)*py*x5312))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.384)*x5325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5326=((1.0)*sj1);
IkReal x5327=(cj5*r21);
IkReal x5328=(r20*sj5);
IkReal x5329=(r21*sj5);
IkReal x5330=(cj5*r20);
IkReal x5331=(sj3*sj4);
IkReal x5332=(cj1*x5331);
IkReal x5333=(cj4*r22*sj3);
CheckValue<IkReal> x5334=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5334.valid){
continue;
}
CheckValue<IkReal> x5335 = IKatan2WithCheck(IkReal((((cj1*x5327))+((cj1*x5328))+(((-1.0)*x5326*x5329*x5331))+(((-1.0)*x5326*x5333))+((sj1*x5330*x5331)))),IkReal(((((-1.0)*cj1*x5333))+(((-1.0)*x5326*x5327))+(((-1.0)*x5326*x5328))+(((-1.0)*x5329*x5332))+((x5330*x5332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5335.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5334.value)))+(x5335.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5336=IKsin(j2);
IkReal x5337=IKcos(j2);
IkReal x5338=(cj4*cj5);
IkReal x5339=(cj5*sj4);
IkReal x5340=((0.088)*cj5);
IkReal x5341=((1.0)*sj0);
IkReal x5342=((0.088)*sj5);
IkReal x5343=(r11*sj0);
IkReal x5344=((1.0)*cj4);
IkReal x5345=(cj0*r01);
IkReal x5346=(sj4*sj5);
IkReal x5347=((1.0)*cj0);
IkReal x5348=(cj4*sj5);
IkReal x5349=(cj1*x5337);
IkReal x5350=(r10*x5341);
IkReal x5351=(sj1*x5336);
IkReal x5352=(r00*x5347);
IkReal x5353=(sj1*x5337);
IkReal x5354=(cj1*x5336);
evalcond[0]=(((cj5*r21))+(((-1.0)*sj3*x5354))+((sj3*x5353))+((r20*sj5)));
evalcond[1]=((((-1.0)*r21*x5346))+((r20*x5339))+(((-1.0)*r22*x5344))+(((-1.0)*x5349))+(((-1.0)*x5351)));
evalcond[2]=(((cj3*x5353))+((r22*sj4))+((r20*x5338))+(((-1.0)*r21*sj5*x5344))+(((-1.0)*cj3*x5354)));
evalcond[3]=((((-1.0)*sj5*x5352))+(((-1.0)*sj5*x5350))+((sj3*x5351))+(((-1.0)*cj5*x5345))+((sj3*x5349))+(((-1.0)*cj5*r11*x5341)));
evalcond[4]=((((-1.0)*r20*x5340))+(((0.0825)*x5354))+pz+(((-0.384)*x5349))+((r21*x5342))+(((0.0825)*sj1))+(((-0.0825)*x5353))+(((-0.316)*cj1))+(((-0.384)*x5351)));
evalcond[5]=(((x5343*x5346))+x5353+(((-1.0)*x5339*x5350))+(((-1.0)*x5339*x5352))+((cj0*cj4*r02))+((x5345*x5346))+(((-1.0)*x5354))+((cj4*r12*sj0)));
evalcond[6]=(((cj3*x5351))+((x5343*x5348))+((cj3*x5349))+(((-1.0)*r12*sj4*x5341))+(((-1.0)*x5338*x5352))+(((-1.0)*x5338*x5350))+(((-1.0)*r02*sj4*x5347))+((x5345*x5348)));
evalcond[7]=((((-0.0825)*x5349))+(((-1.0)*px*x5347))+(((-1.0)*py*x5341))+((cj0*r00*x5340))+(((0.384)*x5353))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*x5342*x5343))+(((-1.0)*x5342*x5345))+(((-0.0825)*x5351))+(((-0.384)*x5354))+((r10*sj0*x5340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5355=(cj3*cj4);
IkReal x5356=(cj3*sj4);
IkReal x5357=((1.0)*cj5);
CheckValue<IkReal> x5358=IKPowWithIntegerCheck(IKsign((((r22*sj4))+(((-1.0)*cj4*r21*sj5))+((cj4*cj5*r20)))),-1);
if(!x5358.valid){
continue;
}
CheckValue<IkReal> x5359 = IKatan2WithCheck(IkReal((((r12*x5355))+(((-1.0)*r10*x5356*x5357))+((r11*sj5*x5356)))),IkReal((((r01*sj5*x5356))+((r02*x5355))+(((-1.0)*r00*x5356*x5357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5359.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5358.value)))+(x5359.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5360=IKsin(j0);
IkReal x5361=IKcos(j0);
IkReal x5362=(r11*sj5);
IkReal x5363=((1.0)*r01);
IkReal x5364=((1.0)*r10);
IkReal x5365=(sj4*x5361);
IkReal x5366=(sj5*x5360);
IkReal x5367=(cj5*x5360);
IkReal x5368=(cj4*x5361);
IkReal x5369=(r02*x5360);
IkReal x5370=((0.088)*x5361);
IkReal x5371=((1.0)*x5361);
evalcond[0]=((((-1.0)*sj5*x5361*x5364))+(((-1.0)*cj5*r11*x5371))+((r01*x5367))+((r00*x5366))+(((-1.0)*cj3)));
evalcond[1]=((((-0.088)*r00*x5367))+(((0.088)*r01*x5366))+((cj5*r10*x5370))+(((-1.0)*x5362*x5370))+((px*x5360))+(((-1.0)*py*x5371)));
evalcond[2]=(((r12*x5368))+(((-1.0)*cj5*x5364*x5365))+((x5362*x5365))+(((-1.0)*cj4*x5369))+((r00*sj4*x5367))+(((-1.0)*sj4*x5363*x5366)));
evalcond[3]=(sj3+(((-1.0)*cj5*x5364*x5368))+((cj4*r00*x5367))+((sj4*x5369))+((x5362*x5368))+(((-1.0)*r12*x5365))+(((-1.0)*cj4*x5363*x5366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5372=((1.264)*sj3);
IkReal x5373=((1.264)*cj3);
IkReal x5374=(r21*sj5);
IkReal x5375=((1.056)*sj3);
IkReal x5376=(cj5*r20);
IkReal x5377=((0.352)*sj3);
IkReal x5378=((0.33)*cj4);
IkReal x5379=((1.056)*cj3);
IkReal x5380=(r20*sj5);
IkReal x5381=((0.99)*cj4);
IkReal x5382=((12.0)*pz);
IkReal x5383=((4.0)*pz);
IkReal x5384=(r22*sj4);
IkReal x5385=(cj5*r21);
IkReal x5386=(sj3*sj4);
IkReal x5387=((0.352)*cj3);
IkReal x5388=((0.99)*x5380);
IkReal x5389=((0.99)*x5385);
IkReal x5390=(sj3*x5382);
IkReal x5391=((0.99)*x5384);
IkReal x5392=(cj3*x5382);
IkReal x5393=((4.608)*cj3*sj4);
IkReal x5394=((1.536)*cj4*r22);
IkReal x5395=((4.608)*cj4*r22);
IkReal x5396=((1.536)*cj3*sj4);
IkReal x5397=(sj3*x5395);
IkReal x5398=(x5374*x5375);
IkReal x5399=(x5375*x5376);
IkReal x5400=(cj3*x5395);
IkReal x5401=(x5376*x5381);
IkReal x5402=(x5374*x5379);
IkReal x5403=(x5374*x5381);
IkReal x5404=(x5376*x5379);
IkReal x5405=((4.608)*x5374*x5386);
IkReal x5406=((4.608)*x5376*x5386);
IkReal x5407=(x5374*x5393);
IkReal x5408=(x5376*x5393);
IkReal x5409=(x5406+x5399);
IkReal x5410=(x5404+x5403+x5408);
IkReal x5411=(x5405+x5388+x5389+x5390+x5397+x5398);
IkReal x5412=(x5407+x5402+x5401+x5400+x5392+x5391);
j1eval[0]=((IKabs((x5411+x5372+(((-1.0)*x5409)))))+(IKabs((((x5374*x5387))+((x5374*x5396))+x5373+((cj3*x5383))+((x5376*x5378))+((cj3*x5394))+(((-1.0)*x5376*x5387))+(((-1.0)*x5376*x5396))+(((-1.0)*x5374*x5378))+(((0.33)*x5384)))))+(((2.64)*(IKabs(cj3))))+(IKabs((x5412+(((-1.0)*x5373))+(((-1.0)*x5410)))))+(IKabs((x5372+(((-1.0)*x5376*x5377))+((sj3*x5383))+(((-1.536)*x5376*x5386))+((sj3*x5394))+(((0.33)*x5380))+(((0.33)*x5385))+((x5374*x5377))+(((1.536)*x5374*x5386)))))+(IKabs((x5411+(((-1.0)*x5372))+(((-1.0)*x5409)))))+(((2.64)*(IKabs(sj3))))+(IKabs((x5412+x5373+(((-1.0)*x5410))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5413=((1.264)*sj3);
IkReal x5414=((0.66)*sj3);
IkReal x5415=(cj5*r21);
IkReal x5416=(pz*sj3);
IkReal x5417=(r20*sj5);
IkReal x5418=((1.536)*sj4);
IkReal x5419=((4.608)*sj4);
IkReal x5420=((0.99)*x5417);
IkReal x5421=((0.99)*x5415);
IkReal x5422=((12.0)*x5416);
IkReal x5423=((0.33)*x5417);
IkReal x5424=((4.0)*x5416);
IkReal x5425=((0.33)*x5415);
IkReal x5426=(r21*sj3*sj5);
IkReal x5427=(cj5*r20*sj3);
IkReal x5428=(cj4*r22*sj3);
IkReal x5429=((4.608)*x5428);
IkReal x5430=((1.056)*x5426);
IkReal x5431=((1.056)*x5427);
IkReal x5432=((0.352)*x5426);
IkReal x5433=((1.536)*x5428);
IkReal x5434=((0.352)*x5427);
IkReal x5435=(x5419*x5426);
IkReal x5436=(x5419*x5427);
IkReal x5437=(x5418*x5426);
IkReal x5438=(x5418*x5427);
IkReal x5439=(x5434+x5438);
IkReal x5440=(x5431+x5436);
IkReal x5441=(x5425+x5424+x5423+x5432+x5433+x5437);
IkReal x5442=(x5429+x5421+x5420+x5422+x5430+x5435);
op[0]=(x5441+x5413+(((-1.0)*x5439)));
op[1]=x5414;
op[2]=(x5442+x5413+(((-1.0)*x5440)));
op[3]=((1.32)*sj3);
op[4]=(x5442+(((-1.0)*x5440))+(((-1.0)*x5413)));
op[5]=x5414;
op[6]=(x5441+(((-1.0)*x5439))+(((-1.0)*x5413)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5443=((1.264)*cj3);
IkReal x5444=(r21*sj5);
IkReal x5445=((0.66)*cj3);
IkReal x5446=(cj5*r20);
IkReal x5447=((0.33)*cj4);
IkReal x5448=((1.056)*cj3);
IkReal x5449=((0.352)*cj3);
IkReal x5450=(r22*sj4);
IkReal x5451=((1.536)*cj3);
IkReal x5452=(cj4*r22);
IkReal x5453=((0.99)*cj4);
IkReal x5454=(cj3*pz);
IkReal x5455=((0.99)*x5450);
IkReal x5456=((12.0)*x5454);
IkReal x5457=((0.33)*x5450);
IkReal x5458=((4.0)*x5454);
IkReal x5459=((4.608)*cj3*sj4);
IkReal x5460=(x5451*x5452);
IkReal x5461=(x5446*x5447);
IkReal x5462=((4.608)*cj3*x5452);
IkReal x5463=(x5446*x5453);
IkReal x5464=(x5444*x5448);
IkReal x5465=(x5444*x5453);
IkReal x5466=(x5446*x5448);
IkReal x5467=(x5444*x5449);
IkReal x5468=(x5444*x5447);
IkReal x5469=(x5446*x5449);
IkReal x5470=(x5444*x5459);
IkReal x5471=(x5446*x5459);
IkReal x5472=(sj4*x5444*x5451);
IkReal x5473=(sj4*x5446*x5451);
IkReal x5474=(x5469+x5468+x5473);
IkReal x5475=(x5465+x5466+x5471);
IkReal x5476=(x5461+x5460+x5467+x5458+x5457+x5472);
IkReal x5477=(x5463+x5462+x5464+x5455+x5456+x5470);
j1evalpoly[0]=(((x5445*(htj1*htj1*htj1*htj1*htj1)))+(((1.32)*cj3*(htj1*htj1*htj1)))+x5476+(((-1.0)*x5443))+(((htj1*htj1*htj1*htj1)*((x5443+x5477+(((-1.0)*x5475))))))+(((htj1*htj1)*((x5477+(((-1.0)*x5443))+(((-1.0)*x5475))))))+(((-1.0)*x5474))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5443+x5476+(((-1.0)*x5474))))))+((htj1*x5445)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5478=(cj3*sj3);
j2eval[0]=x5478;
j2eval[1]=IKsign(x5478);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5479=(r21*sj5);
IkReal x5480=(cj1*sj4);
IkReal x5481=(cj5*r20);
IkReal x5482=(sj1*sj4);
IkReal x5483=(cj4*sj1);
IkReal x5484=((1.0)*cj1*cj4);
IkReal x5485=((1.0)*r22*sj1);
if( IKabs((((x5481*x5482))+(((-1.0)*x5479*x5484))+(((-1.0)*x5479*x5482))+(((-1.0)*r22*x5483))+((r22*x5480))+((cj1*cj4*x5481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5480*x5481))+(((-1.0)*x5481*x5483))+(((-1.0)*x5479*x5480))+(((-1.0)*r22*x5484))+((x5479*x5483))+(((-1.0)*r22*x5482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5481*x5482))+(((-1.0)*x5479*x5484))+(((-1.0)*x5479*x5482))+(((-1.0)*r22*x5483))+((r22*x5480))+((cj1*cj4*x5481))))+IKsqr((((x5480*x5481))+(((-1.0)*x5481*x5483))+(((-1.0)*x5479*x5480))+(((-1.0)*r22*x5484))+((x5479*x5483))+(((-1.0)*r22*x5482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5481*x5482))+(((-1.0)*x5479*x5484))+(((-1.0)*x5479*x5482))+(((-1.0)*r22*x5483))+((r22*x5480))+((cj1*cj4*x5481))), (((x5480*x5481))+(((-1.0)*x5481*x5483))+(((-1.0)*x5479*x5480))+(((-1.0)*r22*x5484))+((x5479*x5483))+(((-1.0)*r22*x5482))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5486=IKsin(j2);
IkReal x5487=IKcos(j2);
IkReal x5488=(r10*sj0);
IkReal x5489=(cj0*r00);
IkReal x5490=((1.0)*sj0);
IkReal x5491=((1.0)*cj4);
IkReal x5492=((0.088)*sj5);
IkReal x5493=(r11*sj0);
IkReal x5494=(cj5*r20);
IkReal x5495=(r21*sj5);
IkReal x5496=((1.0)*cj0);
IkReal x5497=((0.088)*cj5);
IkReal x5498=(sj1*x5487);
IkReal x5499=(cj1*x5487);
IkReal x5500=((1.0)*cj5*sj4);
IkReal x5501=((0.0825)*x5486);
IkReal x5502=((0.384)*x5486);
IkReal x5503=((1.0)*x5486);
IkReal x5504=(cj0*r01*sj5);
IkReal x5505=(cj1*x5503);
evalcond[0]=(((cj4*x5494))+x5498+((r22*sj4))+(((-1.0)*x5491*x5495))+(((-1.0)*x5505)));
evalcond[1]=((((-1.0)*sj1*x5503))+((sj4*x5494))+(((-1.0)*sj4*x5495))+(((-1.0)*r22*x5491))+(((-1.0)*x5499)));
evalcond[2]=((((-1.0)*sj1*x5502))+((cj1*x5501))+((r21*x5492))+(((-0.384)*x5499))+(((-0.088)*x5494))+pz+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-0.0825)*x5498)));
evalcond[3]=((((-1.0)*x5489*x5500))+x5498+((cj0*cj4*r02))+(((-1.0)*x5488*x5500))+(((-1.0)*x5505))+((sj4*sj5*x5493))+((sj4*x5504))+((cj4*r12*sj0)));
evalcond[4]=(x5499+(((-1.0)*cj5*x5488*x5491))+((cj4*sj5*x5493))+(((-1.0)*r02*sj4*x5496))+((cj4*x5504))+(((-1.0)*r12*sj4*x5490))+(((-1.0)*cj5*x5489*x5491))+((sj1*x5486)));
evalcond[5]=((((-1.0)*py*x5490))+(((-1.0)*sj1*x5501))+((x5489*x5497))+(((-1.0)*px*x5496))+((x5488*x5497))+(((-1.0)*x5492*x5493))+(((0.384)*x5498))+(((0.0825)*cj1))+(((-1.0)*cj1*x5502))+(((0.316)*sj1))+(((-0.0825)*x5499))+(((-1.0)*cj0*r01*x5492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5506=((1.0)*sj1);
IkReal x5507=(r20*sj5);
IkReal x5508=(cj1*sj4);
IkReal x5509=(cj5*r20);
IkReal x5510=(cj5*r21);
IkReal x5511=(r21*sj5);
IkReal x5512=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*sj4*x5506*x5511))+((cj1*x5507))+((cj1*x5510))+((sj1*sj4*x5509))+(((-1.0)*cj4*r22*x5506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5508*x5509))+(((-1.0)*x5506*x5507))+(((-1.0)*x5506*x5510))+(((-1.0)*x5508*x5511))+(((-1.0)*cj1*x5512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x5506*x5511))+((cj1*x5507))+((cj1*x5510))+((sj1*sj4*x5509))+(((-1.0)*cj4*r22*x5506))))+IKsqr((((x5508*x5509))+(((-1.0)*x5506*x5507))+(((-1.0)*x5506*x5510))+(((-1.0)*x5508*x5511))+(((-1.0)*cj1*x5512))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x5506*x5511))+((cj1*x5507))+((cj1*x5510))+((sj1*sj4*x5509))+(((-1.0)*cj4*r22*x5506))), (((x5508*x5509))+(((-1.0)*x5506*x5507))+(((-1.0)*x5506*x5510))+(((-1.0)*x5508*x5511))+(((-1.0)*cj1*x5512))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5513=IKsin(j2);
IkReal x5514=IKcos(j2);
IkReal x5515=((1.0)*sj0);
IkReal x5516=(cj5*sj4);
IkReal x5517=((1.0)*cj0);
IkReal x5518=((0.088)*cj5);
IkReal x5519=(sj1*x5514);
IkReal x5520=(cj1*x5514);
IkReal x5521=(r11*sj0*sj5);
IkReal x5522=((0.0825)*x5513);
IkReal x5523=(sj1*x5513);
IkReal x5524=(cj0*r01*sj5);
IkReal x5525=(cj1*x5513);
IkReal x5526=((1.0)*x5525);
evalcond[0]=(((cj5*r21))+x5519+(((-1.0)*x5526))+((r20*sj5)));
evalcond[1]=(((r20*x5516))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*x5523))+(((-1.0)*x5520))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*r10*sj5*x5515))+x5520+x5523+(((-1.0)*r00*sj5*x5517))+(((-1.0)*cj5*r11*x5515))+(((-1.0)*cj5*r01*x5517)));
CheckValue<IkReal> x5527=IKPowWithIntegerCheck(cj4,-1);
if(!x5527.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x5527.value)))+(((-0.0825)*x5519))+((cj1*x5522))+(((-0.384)*x5523))+(((-0.384)*x5520))+pz+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=((((-1.0)*r10*x5515*x5516))+(((-1.0)*r00*x5516*x5517))+x5519+(((-1.0)*x5526))+((sj4*x5521))+((sj4*x5524))+((cj0*cj4*r02))+((cj4*r12*sj0)));
evalcond[5]=(((r10*sj0*x5518))+(((-0.0825)*x5520))+(((-1.0)*px*x5517))+(((0.384)*x5519))+(((-1.0)*py*x5515))+(((-0.088)*x5524))+(((-0.088)*x5521))+((cj0*r00*x5518))+(((-0.384)*x5525))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*sj1*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5528=(cj1*cj4);
IkReal x5529=(r21*sj5);
IkReal x5530=((1.0)*r22);
IkReal x5531=(cj1*sj4);
IkReal x5532=(cj5*r20);
IkReal x5533=(cj4*sj1);
IkReal x5534=(sj1*sj4);
if( IKabs((((x5528*x5529))+(((-1.0)*x5530*x5531))+(((-1.0)*x5530*x5533))+((x5532*x5534))+(((-1.0)*x5529*x5534))+(((-1.0)*x5528*x5532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5528*x5530))+((r22*x5534))+((x5531*x5532))+((x5532*x5533))+(((-1.0)*x5529*x5531))+(((-1.0)*x5529*x5533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5528*x5529))+(((-1.0)*x5530*x5531))+(((-1.0)*x5530*x5533))+((x5532*x5534))+(((-1.0)*x5529*x5534))+(((-1.0)*x5528*x5532))))+IKsqr(((((-1.0)*x5528*x5530))+((r22*x5534))+((x5531*x5532))+((x5532*x5533))+(((-1.0)*x5529*x5531))+(((-1.0)*x5529*x5533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5528*x5529))+(((-1.0)*x5530*x5531))+(((-1.0)*x5530*x5533))+((x5532*x5534))+(((-1.0)*x5529*x5534))+(((-1.0)*x5528*x5532))), ((((-1.0)*x5528*x5530))+((r22*x5534))+((x5531*x5532))+((x5532*x5533))+(((-1.0)*x5529*x5531))+(((-1.0)*x5529*x5533))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5535=IKsin(j2);
IkReal x5536=IKcos(j2);
IkReal x5537=(r10*sj0);
IkReal x5538=(cj0*r00);
IkReal x5539=((1.0)*cj4);
IkReal x5540=((0.088)*sj5);
IkReal x5541=(r11*sj0);
IkReal x5542=((1.0)*sj1);
IkReal x5543=(cj5*r20);
IkReal x5544=((1.0)*sj4);
IkReal x5545=(r12*sj0);
IkReal x5546=(r21*sj5);
IkReal x5547=(cj0*r02);
IkReal x5548=((0.088)*cj5);
IkReal x5549=(cj1*x5536);
IkReal x5550=(cj5*x5544);
IkReal x5551=(cj1*x5535);
IkReal x5552=(sj1*x5535);
IkReal x5553=(cj0*r01*sj5);
IkReal x5554=(sj1*x5536);
IkReal x5555=(x5535*x5542);
IkReal x5556=((1.0)*x5549);
IkReal x5557=(x5555+x5556);
evalcond[0]=((((-1.0)*x5539*x5546))+x5551+((r22*sj4))+((cj4*x5543))+(((-1.0)*x5536*x5542)));
evalcond[1]=((((-1.0)*r22*x5539))+((sj4*x5543))+(((-1.0)*x5544*x5546))+(((-1.0)*x5557)));
evalcond[2]=((((-0.384)*x5552))+(((0.0825)*x5551))+(((-0.0825)*x5554))+pz+(((0.0825)*sj1))+(((-0.088)*x5543))+(((-0.316)*cj1))+(((-0.384)*x5549))+((r21*x5540)));
evalcond[3]=((((-1.0)*x5551))+x5554+(((-1.0)*x5538*x5550))+((cj4*x5547))+((cj4*x5545))+((sj4*sj5*x5541))+(((-1.0)*x5537*x5550))+((sj4*x5553)));
evalcond[4]=(((cj4*sj5*x5541))+((cj4*x5553))+(((-1.0)*x5544*x5547))+(((-1.0)*x5544*x5545))+(((-1.0)*cj5*x5537*x5539))+(((-1.0)*cj5*x5538*x5539))+(((-1.0)*x5557)));
evalcond[5]=(((x5538*x5548))+(((-1.0)*cj0*r01*x5540))+(((0.384)*x5554))+(((-0.384)*x5551))+(((-0.0825)*x5552))+(((-1.0)*x5540*x5541))+(((-0.0825)*x5549))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+((x5537*x5548))+(((0.316)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5558=((1.0)*cj1);
IkReal x5559=(cj4*r22);
IkReal x5560=(cj5*r21);
IkReal x5561=((1.0)*sj1);
IkReal x5562=(r20*sj5);
IkReal x5563=(cj5*r20*sj4);
IkReal x5564=(r21*sj4*sj5);
if( IKabs((((sj1*x5563))+(((-1.0)*x5559*x5561))+(((-1.0)*x5561*x5564))+(((-1.0)*x5558*x5560))+(((-1.0)*x5558*x5562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5563))+(((-1.0)*x5558*x5559))+((sj1*x5562))+((sj1*x5560))+(((-1.0)*x5558*x5564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5563))+(((-1.0)*x5559*x5561))+(((-1.0)*x5561*x5564))+(((-1.0)*x5558*x5560))+(((-1.0)*x5558*x5562))))+IKsqr((((cj1*x5563))+(((-1.0)*x5558*x5559))+((sj1*x5562))+((sj1*x5560))+(((-1.0)*x5558*x5564))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5563))+(((-1.0)*x5559*x5561))+(((-1.0)*x5561*x5564))+(((-1.0)*x5558*x5560))+(((-1.0)*x5558*x5562))), (((cj1*x5563))+(((-1.0)*x5558*x5559))+((sj1*x5562))+((sj1*x5560))+(((-1.0)*x5558*x5564))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5565=IKsin(j2);
IkReal x5566=IKcos(j2);
IkReal x5567=(sj0*sj5);
IkReal x5568=((1.0)*r10);
IkReal x5569=(cj5*sj4);
IkReal x5570=((1.0)*cj0);
IkReal x5571=((1.0)*sj1);
IkReal x5572=((1.0)*sj0);
IkReal x5573=((0.088)*cj5);
IkReal x5574=(cj1*x5566);
IkReal x5575=(cj1*x5565);
IkReal x5576=(sj1*x5565);
IkReal x5577=(cj0*r01*sj5);
IkReal x5578=(sj1*x5566);
IkReal x5579=(x5565*x5571);
IkReal x5580=((1.0)*x5574);
IkReal x5581=(x5579+x5580);
evalcond[0]=(((cj5*r21))+x5575+(((-1.0)*x5566*x5571))+((r20*sj5)));
evalcond[1]=(((r20*x5569))+(((-1.0)*x5581))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*cj5*r11*x5572))+(((-1.0)*x5581))+(((-1.0)*x5567*x5568))+(((-1.0)*r00*sj5*x5570))+(((-1.0)*cj5*r01*x5570)));
CheckValue<IkReal> x5582=IKPowWithIntegerCheck(cj4,-1);
if(!x5582.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x5582.value)))+(((-0.0825)*x5578))+(((-0.384)*x5574))+(((-0.384)*x5576))+(((0.0825)*x5575))+pz+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[4]=(x5578+((r11*sj4*x5567))+((cj0*cj4*r02))+(((-1.0)*r00*x5569*x5570))+((sj4*x5577))+(((-1.0)*x5575))+((cj4*r12*sj0))+(((-1.0)*sj0*x5568*x5569)));
evalcond[5]=((((-0.0825)*x5576))+(((-0.0825)*x5574))+(((-1.0)*py*x5572))+((cj0*r00*x5573))+(((0.384)*x5578))+(((-0.384)*x5575))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.088)*r11*x5567))+((r10*sj0*x5573))+(((-1.0)*px*x5570))+(((-0.088)*x5577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5583=(r11*sj0);
IkReal x5584=(r21*sj5);
IkReal x5585=(cj0*r01);
IkReal x5586=(cj5*r20);
IkReal x5587=(cj3*sj5);
IkReal x5588=(cj0*r00);
IkReal x5589=(r10*sj0);
IkReal x5590=(cj1*cj3*cj5);
IkReal x5591=(cj1*cj4*sj3);
IkReal x5592=(cj4*sj1*sj3);
IkReal x5593=(cj3*cj5*sj1);
IkReal x5594=(r22*sj3*sj4);
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x5595.valid){
continue;
}
CheckValue<IkReal> x5596 = IKatan2WithCheck(IkReal((((cj1*x5594))+((x5586*x5591))+((x5585*x5593))+(((-1.0)*x5584*x5591))+((x5583*x5593))+((sj1*x5587*x5588))+((sj1*x5587*x5589)))),IkReal((((x5584*x5592))+((cj1*x5587*x5588))+((cj1*x5587*x5589))+((x5585*x5590))+(((-1.0)*sj1*x5594))+((x5583*x5590))+(((-1.0)*x5586*x5592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5596.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5595.value)))+(x5596.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5597=IKsin(j2);
IkReal x5598=IKcos(j2);
IkReal x5599=(cj4*cj5);
IkReal x5600=(cj5*sj4);
IkReal x5601=((0.088)*cj5);
IkReal x5602=((1.0)*sj0);
IkReal x5603=((0.088)*sj5);
IkReal x5604=(r11*sj0);
IkReal x5605=((1.0)*cj4);
IkReal x5606=(cj0*r01);
IkReal x5607=(sj4*sj5);
IkReal x5608=((1.0)*cj0);
IkReal x5609=(cj4*sj5);
IkReal x5610=(cj1*x5598);
IkReal x5611=(r10*x5602);
IkReal x5612=(sj1*x5597);
IkReal x5613=(r00*x5608);
IkReal x5614=(sj1*x5598);
IkReal x5615=(cj1*x5597);
evalcond[0]=(((cj5*r21))+((sj3*x5614))+(((-1.0)*sj3*x5615))+((r20*sj5)));
evalcond[1]=((((-1.0)*x5612))+(((-1.0)*x5610))+(((-1.0)*r22*x5605))+((r20*x5600))+(((-1.0)*r21*x5607)));
evalcond[2]=(((r20*x5599))+(((-1.0)*r21*sj5*x5605))+((r22*sj4))+((cj3*x5614))+(((-1.0)*cj3*x5615)));
evalcond[3]=((((-1.0)*cj5*x5606))+((sj3*x5612))+((sj3*x5610))+(((-1.0)*sj5*x5611))+(((-1.0)*sj5*x5613))+(((-1.0)*cj5*r11*x5602)));
evalcond[4]=((((-0.384)*x5612))+(((-0.384)*x5610))+(((-0.0825)*x5614))+((r21*x5603))+pz+(((0.0825)*x5615))+(((0.0825)*sj1))+(((-1.0)*r20*x5601))+(((-0.316)*cj1)));
evalcond[5]=((((-1.0)*x5615))+x5614+((x5604*x5607))+((cj0*cj4*r02))+(((-1.0)*x5600*x5611))+(((-1.0)*x5600*x5613))+((x5606*x5607))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*r12*sj4*x5602))+((x5604*x5609))+((cj3*x5610))+((cj3*x5612))+(((-1.0)*r02*sj4*x5608))+(((-1.0)*x5599*x5611))+(((-1.0)*x5599*x5613))+((x5606*x5609)));
evalcond[7]=((((-1.0)*px*x5608))+(((-0.384)*x5615))+(((-0.0825)*x5610))+(((-0.0825)*x5612))+((r10*sj0*x5601))+(((-1.0)*x5603*x5604))+(((-1.0)*x5603*x5606))+(((-1.0)*py*x5602))+(((0.384)*x5614))+(((0.0825)*cj1))+(((0.316)*sj1))+((cj0*r00*x5601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5616=(r21*sj5);
IkReal x5617=(cj3*r22);
IkReal x5618=(cj5*r20);
IkReal x5619=(cj3*sj4);
IkReal x5620=((1.0)*cj1*cj4);
IkReal x5621=((1.0)*sj1*sj4);
IkReal x5622=((1.0)*cj4*sj1);
CheckValue<IkReal> x5623=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5623.valid){
continue;
}
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x5616*x5619))+((sj1*x5618*x5619))+(((-1.0)*x5617*x5622))+((cj1*r22*sj4))+(((-1.0)*x5616*x5620))+((cj1*cj4*x5618)))),IkReal(((((-1.0)*x5618*x5622))+((cj4*sj1*x5616))+(((-1.0)*r22*x5621))+(((-1.0)*x5617*x5620))+((cj1*x5618*x5619))+(((-1.0)*cj1*x5616*x5619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5623.value)))+(x5624.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5625=IKsin(j2);
IkReal x5626=IKcos(j2);
IkReal x5627=(cj4*cj5);
IkReal x5628=(cj5*sj4);
IkReal x5629=((0.088)*cj5);
IkReal x5630=((1.0)*sj0);
IkReal x5631=((0.088)*sj5);
IkReal x5632=(r11*sj0);
IkReal x5633=((1.0)*cj4);
IkReal x5634=(cj0*r01);
IkReal x5635=(sj4*sj5);
IkReal x5636=((1.0)*cj0);
IkReal x5637=(cj4*sj5);
IkReal x5638=(cj1*x5626);
IkReal x5639=(r10*x5630);
IkReal x5640=(sj1*x5625);
IkReal x5641=(r00*x5636);
IkReal x5642=(sj1*x5626);
IkReal x5643=(cj1*x5625);
evalcond[0]=(((cj5*r21))+(((-1.0)*sj3*x5643))+((sj3*x5642))+((r20*sj5)));
evalcond[1]=(((r20*x5628))+(((-1.0)*x5638))+(((-1.0)*r22*x5633))+(((-1.0)*r21*x5635))+(((-1.0)*x5640)));
evalcond[2]=((((-1.0)*r21*sj5*x5633))+((r22*sj4))+((r20*x5627))+(((-1.0)*cj3*x5643))+((cj3*x5642)));
evalcond[3]=((((-1.0)*sj5*x5641))+(((-1.0)*cj5*x5634))+((sj3*x5638))+(((-1.0)*cj5*r11*x5630))+(((-1.0)*sj5*x5639))+((sj3*x5640)));
evalcond[4]=(pz+(((-0.384)*x5640))+(((-0.384)*x5638))+(((-0.0825)*x5642))+(((-1.0)*r20*x5629))+(((0.0825)*sj1))+(((-0.316)*cj1))+((r21*x5631))+(((0.0825)*x5643)));
evalcond[5]=(x5642+(((-1.0)*x5628*x5639))+(((-1.0)*x5628*x5641))+((cj0*cj4*r02))+((x5632*x5635))+((x5634*x5635))+((cj4*r12*sj0))+(((-1.0)*x5643)));
evalcond[6]=((((-1.0)*r02*sj4*x5636))+((x5632*x5637))+((x5634*x5637))+((cj3*x5638))+(((-1.0)*x5627*x5639))+(((-1.0)*r12*sj4*x5630))+(((-1.0)*x5627*x5641))+((cj3*x5640)));
evalcond[7]=(((cj0*r00*x5629))+(((-1.0)*py*x5630))+((r10*sj0*x5629))+(((-1.0)*px*x5636))+(((-0.384)*x5643))+(((0.0825)*cj1))+(((-0.0825)*x5640))+(((0.384)*x5642))+(((0.316)*sj1))+(((-0.0825)*x5638))+(((-1.0)*x5631*x5634))+(((-1.0)*x5631*x5632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5644=((1.0)*sj1);
IkReal x5645=(cj5*r21);
IkReal x5646=(r20*sj5);
IkReal x5647=(r21*sj5);
IkReal x5648=(cj5*r20);
IkReal x5649=(sj3*sj4);
IkReal x5650=(cj1*x5649);
IkReal x5651=(cj4*r22*sj3);
CheckValue<IkReal> x5652=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5652.valid){
continue;
}
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal(((((-1.0)*x5644*x5651))+(((-1.0)*x5644*x5647*x5649))+((cj1*x5645))+((cj1*x5646))+((sj1*x5648*x5649)))),IkReal(((((-1.0)*x5644*x5646))+(((-1.0)*x5644*x5645))+((x5648*x5650))+(((-1.0)*x5647*x5650))+(((-1.0)*cj1*x5651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5652.value)))+(x5653.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5654=IKsin(j2);
IkReal x5655=IKcos(j2);
IkReal x5656=(cj4*cj5);
IkReal x5657=(cj5*sj4);
IkReal x5658=((0.088)*cj5);
IkReal x5659=((1.0)*sj0);
IkReal x5660=((0.088)*sj5);
IkReal x5661=(r11*sj0);
IkReal x5662=((1.0)*cj4);
IkReal x5663=(cj0*r01);
IkReal x5664=(sj4*sj5);
IkReal x5665=((1.0)*cj0);
IkReal x5666=(cj4*sj5);
IkReal x5667=(cj1*x5655);
IkReal x5668=(r10*x5659);
IkReal x5669=(sj1*x5654);
IkReal x5670=(r00*x5665);
IkReal x5671=(sj1*x5655);
IkReal x5672=(cj1*x5654);
evalcond[0]=(((cj5*r21))+((sj3*x5671))+((r20*sj5))+(((-1.0)*sj3*x5672)));
evalcond[1]=(((r20*x5657))+(((-1.0)*r21*x5664))+(((-1.0)*r22*x5662))+(((-1.0)*x5669))+(((-1.0)*x5667)));
evalcond[2]=(((r20*x5656))+((r22*sj4))+(((-1.0)*cj3*x5672))+((cj3*x5671))+(((-1.0)*r21*sj5*x5662)));
evalcond[3]=((((-1.0)*cj5*x5663))+(((-1.0)*sj5*x5668))+((sj3*x5667))+((sj3*x5669))+(((-1.0)*sj5*x5670))+(((-1.0)*cj5*r11*x5659)));
evalcond[4]=((((0.0825)*x5672))+(((-0.384)*x5669))+(((-0.384)*x5667))+(((-1.0)*r20*x5658))+(((-0.0825)*x5671))+pz+(((0.0825)*sj1))+((r21*x5660))+(((-0.316)*cj1)));
evalcond[5]=(x5671+(((-1.0)*x5657*x5670))+(((-1.0)*x5672))+(((-1.0)*x5657*x5668))+((cj0*cj4*r02))+((x5661*x5664))+((x5663*x5664))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*x5656*x5670))+((cj3*x5667))+((cj3*x5669))+(((-1.0)*r02*sj4*x5665))+(((-1.0)*x5656*x5668))+(((-1.0)*r12*sj4*x5659))+((x5661*x5666))+((x5663*x5666)));
evalcond[7]=((((-1.0)*px*x5665))+(((-0.0825)*x5667))+(((-0.0825)*x5669))+((cj0*r00*x5658))+(((-1.0)*py*x5659))+(((-0.384)*x5672))+(((0.0825)*cj1))+(((0.384)*x5671))+(((-1.0)*x5660*x5663))+(((-1.0)*x5660*x5661))+(((0.316)*sj1))+((r10*sj0*x5658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5673=((1.0)*cj3);
IkReal x5674=((0.088)*cj3*cj5);
IkReal x5675=((0.088)*cj3*sj5);
CheckValue<IkReal> x5676 = IKatan2WithCheck(IkReal((((r10*x5674))+(((-1.0)*r11*x5675))+(((-1.0)*py*x5673)))),IkReal(((((-1.0)*r01*x5675))+((r00*x5674))+(((-1.0)*px*x5673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.088)*r22)))),-1);
if(!x5677.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5676.value)+(((1.5707963267949)*(x5677.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5678=IKsin(j0);
IkReal x5679=IKcos(j0);
IkReal x5680=(r11*sj5);
IkReal x5681=((1.0)*r01);
IkReal x5682=((1.0)*r10);
IkReal x5683=(sj4*x5679);
IkReal x5684=(sj5*x5678);
IkReal x5685=(cj5*x5678);
IkReal x5686=(cj4*x5679);
IkReal x5687=(r02*x5678);
IkReal x5688=((0.088)*x5679);
IkReal x5689=((1.0)*x5679);
evalcond[0]=((((-1.0)*cj5*r11*x5689))+((r01*x5685))+(((-1.0)*sj5*x5679*x5682))+((r00*x5684))+(((-1.0)*cj3)));
evalcond[1]=(((cj5*r10*x5688))+((px*x5678))+(((-1.0)*x5680*x5688))+(((-1.0)*py*x5689))+(((0.088)*r01*x5684))+(((-0.088)*r00*x5685)));
evalcond[2]=(((r00*sj4*x5685))+(((-1.0)*cj4*x5687))+((x5680*x5683))+(((-1.0)*cj5*x5682*x5683))+(((-1.0)*sj4*x5681*x5684))+((r12*x5686)));
evalcond[3]=(((sj4*x5687))+sj3+((cj4*r00*x5685))+((x5680*x5686))+(((-1.0)*cj5*x5682*x5686))+(((-1.0)*cj4*x5681*x5684))+(((-1.0)*r12*x5683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5690=((1.264)*sj3);
IkReal x5691=((1.264)*cj3);
IkReal x5692=(r21*sj5);
IkReal x5693=((1.056)*sj3);
IkReal x5694=(cj5*r20);
IkReal x5695=((0.352)*sj3);
IkReal x5696=((0.33)*cj4);
IkReal x5697=((1.056)*cj3);
IkReal x5698=(r20*sj5);
IkReal x5699=((0.99)*cj4);
IkReal x5700=((12.0)*pz);
IkReal x5701=((4.0)*pz);
IkReal x5702=(r22*sj4);
IkReal x5703=(cj5*r21);
IkReal x5704=(sj3*sj4);
IkReal x5705=((0.352)*cj3);
IkReal x5706=((0.99)*x5698);
IkReal x5707=((0.99)*x5703);
IkReal x5708=(sj3*x5700);
IkReal x5709=((0.99)*x5702);
IkReal x5710=(cj3*x5700);
IkReal x5711=((4.608)*cj3*sj4);
IkReal x5712=((1.536)*cj4*r22);
IkReal x5713=((4.608)*cj4*r22);
IkReal x5714=((1.536)*cj3*sj4);
IkReal x5715=(sj3*x5713);
IkReal x5716=(x5692*x5693);
IkReal x5717=(x5693*x5694);
IkReal x5718=(cj3*x5713);
IkReal x5719=(x5694*x5699);
IkReal x5720=(x5692*x5697);
IkReal x5721=(x5692*x5699);
IkReal x5722=(x5694*x5697);
IkReal x5723=((4.608)*x5692*x5704);
IkReal x5724=((4.608)*x5694*x5704);
IkReal x5725=(x5692*x5711);
IkReal x5726=(x5694*x5711);
IkReal x5727=(x5724+x5717);
IkReal x5728=(x5722+x5721+x5726);
IkReal x5729=(x5723+x5708+x5706+x5707+x5716+x5715);
IkReal x5730=(x5720+x5725+x5709+x5719+x5718+x5710);
j1eval[0]=((IKabs(((((-1.0)*x5690))+(((-1.0)*x5727))+x5729)))+(IKabs(((((-1.0)*x5694*x5705))+x5691+((x5694*x5696))+(((-1.0)*x5694*x5714))+((x5692*x5714))+(((-1.0)*x5692*x5696))+((x5692*x5705))+((cj3*x5712))+(((0.33)*x5702))+((cj3*x5701)))))+(((2.64)*(IKabs(cj3))))+(IKabs((x5691+(((-1.0)*x5728))+x5730)))+(IKabs((x5690+(((-1.0)*x5727))+x5729)))+(IKabs(((((-1.536)*x5694*x5704))+x5690+(((1.536)*x5692*x5704))+((x5692*x5695))+((sj3*x5712))+(((0.33)*x5698))+(((0.33)*x5703))+((sj3*x5701))+(((-1.0)*x5694*x5695)))))+(((2.64)*(IKabs(sj3))))+(IKabs(((((-1.0)*x5691))+(((-1.0)*x5728))+x5730))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5731=((1.264)*sj3);
IkReal x5732=((0.66)*sj3);
IkReal x5733=(cj5*r21);
IkReal x5734=(pz*sj3);
IkReal x5735=(r20*sj5);
IkReal x5736=((1.536)*sj4);
IkReal x5737=((4.608)*sj4);
IkReal x5738=((0.99)*x5735);
IkReal x5739=((0.99)*x5733);
IkReal x5740=((12.0)*x5734);
IkReal x5741=((0.33)*x5735);
IkReal x5742=((4.0)*x5734);
IkReal x5743=((0.33)*x5733);
IkReal x5744=(r21*sj3*sj5);
IkReal x5745=(cj5*r20*sj3);
IkReal x5746=(cj4*r22*sj3);
IkReal x5747=((4.608)*x5746);
IkReal x5748=((1.056)*x5744);
IkReal x5749=((1.056)*x5745);
IkReal x5750=((0.352)*x5744);
IkReal x5751=((1.536)*x5746);
IkReal x5752=((0.352)*x5745);
IkReal x5753=(x5737*x5744);
IkReal x5754=(x5737*x5745);
IkReal x5755=(x5736*x5744);
IkReal x5756=(x5736*x5745);
IkReal x5757=(x5752+x5756);
IkReal x5758=(x5749+x5754);
IkReal x5759=(x5741+x5742+x5743+x5751+x5750+x5755);
IkReal x5760=(x5739+x5738+x5740+x5747+x5748+x5753);
op[0]=((((-1.0)*x5757))+x5731+x5759);
op[1]=x5732;
op[2]=((((-1.0)*x5758))+x5731+x5760);
op[3]=((1.32)*sj3);
op[4]=((((-1.0)*x5731))+(((-1.0)*x5758))+x5760);
op[5]=x5732;
op[6]=((((-1.0)*x5731))+(((-1.0)*x5757))+x5759);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5761=((1.264)*cj3);
IkReal x5762=(r21*sj5);
IkReal x5763=((0.66)*cj3);
IkReal x5764=(cj5*r20);
IkReal x5765=((0.33)*cj4);
IkReal x5766=((1.056)*cj3);
IkReal x5767=((0.352)*cj3);
IkReal x5768=(r22*sj4);
IkReal x5769=((1.536)*cj3);
IkReal x5770=(cj4*r22);
IkReal x5771=((0.99)*cj4);
IkReal x5772=(cj3*pz);
IkReal x5773=((0.99)*x5768);
IkReal x5774=((12.0)*x5772);
IkReal x5775=((0.33)*x5768);
IkReal x5776=((4.0)*x5772);
IkReal x5777=((4.608)*cj3*sj4);
IkReal x5778=(x5769*x5770);
IkReal x5779=(x5764*x5765);
IkReal x5780=((4.608)*cj3*x5770);
IkReal x5781=(x5764*x5771);
IkReal x5782=(x5762*x5766);
IkReal x5783=(x5762*x5771);
IkReal x5784=(x5764*x5766);
IkReal x5785=(x5762*x5767);
IkReal x5786=(x5762*x5765);
IkReal x5787=(x5764*x5767);
IkReal x5788=(x5762*x5777);
IkReal x5789=(x5764*x5777);
IkReal x5790=(sj4*x5762*x5769);
IkReal x5791=(sj4*x5764*x5769);
IkReal x5792=(x5786+x5787+x5791);
IkReal x5793=(x5784+x5783+x5789);
IkReal x5794=(x5779+x5778+x5775+x5776+x5785+x5790);
IkReal x5795=(x5773+x5774+x5780+x5781+x5782+x5788);
j1evalpoly[0]=((((1.32)*cj3*(htj1*htj1*htj1)))+(((-1.0)*x5792))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x5793))+x5761+x5795))))+(((htj1*htj1)*(((((-1.0)*x5793))+(((-1.0)*x5761))+x5795))))+((x5763*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x5792))+x5761+x5794))))+(((-1.0)*x5761))+((htj1*x5763))+x5794);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x5796=(cj3*sj3);
j2eval[0]=x5796;
j2eval[1]=IKsign(x5796);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5797=(r21*sj5);
IkReal x5798=(cj1*sj4);
IkReal x5799=(cj5*r20);
IkReal x5800=(sj1*sj4);
IkReal x5801=(cj4*sj1);
IkReal x5802=((1.0)*cj1*cj4);
IkReal x5803=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x5797*x5800))+(((-1.0)*x5797*x5802))+((x5799*x5800))+((r22*x5798))+(((-1.0)*r22*x5801))+((cj1*cj4*x5799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x5802))+(((-1.0)*x5797*x5798))+((x5798*x5799))+((x5797*x5801))+(((-1.0)*x5799*x5801))+(((-1.0)*r22*x5800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5797*x5800))+(((-1.0)*x5797*x5802))+((x5799*x5800))+((r22*x5798))+(((-1.0)*r22*x5801))+((cj1*cj4*x5799))))+IKsqr(((((-1.0)*r22*x5802))+(((-1.0)*x5797*x5798))+((x5798*x5799))+((x5797*x5801))+(((-1.0)*x5799*x5801))+(((-1.0)*r22*x5800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5797*x5800))+(((-1.0)*x5797*x5802))+((x5799*x5800))+((r22*x5798))+(((-1.0)*r22*x5801))+((cj1*cj4*x5799))), ((((-1.0)*r22*x5802))+(((-1.0)*x5797*x5798))+((x5798*x5799))+((x5797*x5801))+(((-1.0)*x5799*x5801))+(((-1.0)*r22*x5800))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5804=IKsin(j2);
IkReal x5805=IKcos(j2);
IkReal x5806=(r10*sj0);
IkReal x5807=(cj0*r00);
IkReal x5808=((1.0)*sj0);
IkReal x5809=((1.0)*cj4);
IkReal x5810=((0.088)*sj5);
IkReal x5811=(r11*sj0);
IkReal x5812=(cj5*r20);
IkReal x5813=(r21*sj5);
IkReal x5814=((1.0)*cj0);
IkReal x5815=((0.088)*cj5);
IkReal x5816=(sj1*x5805);
IkReal x5817=(cj1*x5805);
IkReal x5818=((1.0)*cj5*sj4);
IkReal x5819=((0.0825)*x5804);
IkReal x5820=((0.384)*x5804);
IkReal x5821=((1.0)*x5804);
IkReal x5822=(cj0*r01*sj5);
IkReal x5823=(cj1*x5821);
evalcond[0]=((((-1.0)*x5823))+((r22*sj4))+((cj4*x5812))+(((-1.0)*x5809*x5813))+x5816);
evalcond[1]=((((-1.0)*r22*x5809))+(((-1.0)*x5817))+((sj4*x5812))+(((-1.0)*sj4*x5813))+(((-1.0)*sj1*x5821)));
evalcond[2]=(((r21*x5810))+(((-0.088)*x5812))+((cj1*x5819))+(((-0.384)*x5817))+pz+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-1.0)*sj1*x5820))+(((-0.0825)*x5816)));
evalcond[3]=((((-1.0)*x5823))+((sj4*x5822))+((sj4*sj5*x5811))+((cj0*cj4*r02))+(((-1.0)*x5806*x5818))+(((-1.0)*x5807*x5818))+x5816+((cj4*r12*sj0)));
evalcond[4]=((((-1.0)*cj5*x5806*x5809))+(((-1.0)*r02*sj4*x5814))+((sj1*x5804))+((cj4*x5822))+((cj4*sj5*x5811))+(((-1.0)*cj5*x5807*x5809))+x5817+(((-1.0)*r12*sj4*x5808)));
evalcond[5]=((((-1.0)*cj1*x5820))+(((-1.0)*px*x5814))+((x5806*x5815))+(((0.384)*x5816))+((x5807*x5815))+(((-1.0)*x5810*x5811))+(((-1.0)*cj0*r01*x5810))+(((-1.0)*py*x5808))+(((-1.0)*sj1*x5819))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-0.0825)*x5817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5824=((1.0)*sj1);
IkReal x5825=(r20*sj5);
IkReal x5826=(cj1*sj4);
IkReal x5827=(cj5*r20);
IkReal x5828=(cj5*r21);
IkReal x5829=(r21*sj5);
IkReal x5830=((1.0)*cj4*r22);
if( IKabs((((sj1*sj4*x5827))+(((-1.0)*sj4*x5824*x5829))+(((-1.0)*cj4*r22*x5824))+((cj1*x5825))+((cj1*x5828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x5830))+(((-1.0)*x5826*x5829))+(((-1.0)*x5824*x5828))+(((-1.0)*x5824*x5825))+((x5826*x5827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*sj4*x5827))+(((-1.0)*sj4*x5824*x5829))+(((-1.0)*cj4*r22*x5824))+((cj1*x5825))+((cj1*x5828))))+IKsqr(((((-1.0)*cj1*x5830))+(((-1.0)*x5826*x5829))+(((-1.0)*x5824*x5828))+(((-1.0)*x5824*x5825))+((x5826*x5827))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*sj4*x5827))+(((-1.0)*sj4*x5824*x5829))+(((-1.0)*cj4*r22*x5824))+((cj1*x5825))+((cj1*x5828))), ((((-1.0)*cj1*x5830))+(((-1.0)*x5826*x5829))+(((-1.0)*x5824*x5828))+(((-1.0)*x5824*x5825))+((x5826*x5827))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5831=IKsin(j2);
IkReal x5832=IKcos(j2);
IkReal x5833=((1.0)*sj0);
IkReal x5834=(cj5*sj4);
IkReal x5835=((1.0)*cj0);
IkReal x5836=((0.088)*cj5);
IkReal x5837=(sj1*x5832);
IkReal x5838=(cj1*x5832);
IkReal x5839=(r11*sj0*sj5);
IkReal x5840=((0.0825)*x5831);
IkReal x5841=(sj1*x5831);
IkReal x5842=(cj0*r01*sj5);
IkReal x5843=(cj1*x5831);
IkReal x5844=((1.0)*x5843);
evalcond[0]=(((cj5*r21))+(((-1.0)*x5844))+((r20*sj5))+x5837);
evalcond[1]=((((-1.0)*x5841))+((r20*x5834))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22))+(((-1.0)*x5838)));
evalcond[2]=((((-1.0)*r10*sj5*x5833))+(((-1.0)*cj5*r11*x5833))+(((-1.0)*cj5*r01*x5835))+(((-1.0)*r00*sj5*x5835))+x5838+x5841);
CheckValue<IkReal> x5845=IKPowWithIntegerCheck(cj4,-1);
if(!x5845.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x5845.value)))+((cj1*x5840))+(((-0.0825)*x5837))+pz+(((0.0825)*sj1))+(((-0.384)*x5838))+(((-0.384)*x5841))+(((-0.316)*cj1)));
evalcond[4]=(((sj4*x5842))+((sj4*x5839))+((cj0*cj4*r02))+(((-1.0)*r10*x5833*x5834))+(((-1.0)*r00*x5834*x5835))+(((-1.0)*x5844))+x5837+((cj4*r12*sj0)));
evalcond[5]=((((0.384)*x5837))+(((-1.0)*px*x5835))+(((-0.088)*x5842))+((r10*sj0*x5836))+(((-0.0825)*x5838))+(((-1.0)*py*x5833))+(((-0.088)*x5839))+((cj0*r00*x5836))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*sj1*x5840))+(((-0.384)*x5843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5846=(cj1*cj4);
IkReal x5847=(r21*sj5);
IkReal x5848=((1.0)*r22);
IkReal x5849=(cj1*sj4);
IkReal x5850=(cj5*r20);
IkReal x5851=(cj4*sj1);
IkReal x5852=(sj1*sj4);
if( IKabs(((((-1.0)*x5846*x5850))+(((-1.0)*x5847*x5852))+((x5846*x5847))+(((-1.0)*x5848*x5849))+((x5850*x5852))+(((-1.0)*x5848*x5851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5847*x5851))+(((-1.0)*x5847*x5849))+((r22*x5852))+((x5850*x5851))+(((-1.0)*x5846*x5848))+((x5849*x5850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5846*x5850))+(((-1.0)*x5847*x5852))+((x5846*x5847))+(((-1.0)*x5848*x5849))+((x5850*x5852))+(((-1.0)*x5848*x5851))))+IKsqr(((((-1.0)*x5847*x5851))+(((-1.0)*x5847*x5849))+((r22*x5852))+((x5850*x5851))+(((-1.0)*x5846*x5848))+((x5849*x5850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5846*x5850))+(((-1.0)*x5847*x5852))+((x5846*x5847))+(((-1.0)*x5848*x5849))+((x5850*x5852))+(((-1.0)*x5848*x5851))), ((((-1.0)*x5847*x5851))+(((-1.0)*x5847*x5849))+((r22*x5852))+((x5850*x5851))+(((-1.0)*x5846*x5848))+((x5849*x5850))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5853=IKsin(j2);
IkReal x5854=IKcos(j2);
IkReal x5855=(r10*sj0);
IkReal x5856=(cj0*r00);
IkReal x5857=((1.0)*cj4);
IkReal x5858=((0.088)*sj5);
IkReal x5859=(r11*sj0);
IkReal x5860=((1.0)*sj1);
IkReal x5861=(cj5*r20);
IkReal x5862=((1.0)*sj4);
IkReal x5863=(r12*sj0);
IkReal x5864=(r21*sj5);
IkReal x5865=(cj0*r02);
IkReal x5866=((0.088)*cj5);
IkReal x5867=(cj1*x5854);
IkReal x5868=(cj5*x5862);
IkReal x5869=(cj1*x5853);
IkReal x5870=(sj1*x5853);
IkReal x5871=(cj0*r01*sj5);
IkReal x5872=(sj1*x5854);
IkReal x5873=(x5853*x5860);
IkReal x5874=((1.0)*x5867);
IkReal x5875=(x5873+x5874);
evalcond[0]=((((-1.0)*x5854*x5860))+((r22*sj4))+((cj4*x5861))+(((-1.0)*x5857*x5864))+x5869);
evalcond[1]=((((-1.0)*x5862*x5864))+(((-1.0)*x5875))+((sj4*x5861))+(((-1.0)*r22*x5857)));
evalcond[2]=((((-0.088)*x5861))+(((-0.0825)*x5872))+(((0.0825)*x5869))+(((-0.384)*x5870))+(((-0.384)*x5867))+pz+((r21*x5858))+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[3]=((((-1.0)*x5869))+(((-1.0)*x5855*x5868))+((cj4*x5865))+((cj4*x5863))+((sj4*sj5*x5859))+((sj4*x5871))+(((-1.0)*x5856*x5868))+x5872);
evalcond[4]=((((-1.0)*cj5*x5855*x5857))+(((-1.0)*cj5*x5856*x5857))+(((-1.0)*x5862*x5863))+(((-1.0)*x5862*x5865))+(((-1.0)*x5875))+((cj4*x5871))+((cj4*sj5*x5859)));
evalcond[5]=((((-0.0825)*x5867))+(((-1.0)*x5858*x5859))+(((-1.0)*cj0*r01*x5858))+(((-0.0825)*x5870))+((x5855*x5866))+(((-0.384)*x5869))+((x5856*x5866))+(((0.0825)*cj1))+(((-1.0)*py*sj0))+(((0.316)*sj1))+(((0.384)*x5872))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5876=((1.0)*cj1);
IkReal x5877=(cj4*r22);
IkReal x5878=(cj5*r21);
IkReal x5879=((1.0)*sj1);
IkReal x5880=(r20*sj5);
IkReal x5881=(cj5*r20*sj4);
IkReal x5882=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x5877*x5879))+(((-1.0)*x5876*x5880))+(((-1.0)*x5879*x5882))+((sj1*x5881))+(((-1.0)*x5876*x5878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x5878))+(((-1.0)*x5876*x5882))+((cj1*x5881))+((sj1*x5880))+(((-1.0)*x5876*x5877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5877*x5879))+(((-1.0)*x5876*x5880))+(((-1.0)*x5879*x5882))+((sj1*x5881))+(((-1.0)*x5876*x5878))))+IKsqr((((sj1*x5878))+(((-1.0)*x5876*x5882))+((cj1*x5881))+((sj1*x5880))+(((-1.0)*x5876*x5877))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5877*x5879))+(((-1.0)*x5876*x5880))+(((-1.0)*x5879*x5882))+((sj1*x5881))+(((-1.0)*x5876*x5878))), (((sj1*x5878))+(((-1.0)*x5876*x5882))+((cj1*x5881))+((sj1*x5880))+(((-1.0)*x5876*x5877))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5883=IKsin(j2);
IkReal x5884=IKcos(j2);
IkReal x5885=(sj0*sj5);
IkReal x5886=((1.0)*r10);
IkReal x5887=(cj5*sj4);
IkReal x5888=((1.0)*cj0);
IkReal x5889=((1.0)*sj1);
IkReal x5890=((1.0)*sj0);
IkReal x5891=((0.088)*cj5);
IkReal x5892=(cj1*x5884);
IkReal x5893=(cj1*x5883);
IkReal x5894=(sj1*x5883);
IkReal x5895=(cj0*r01*sj5);
IkReal x5896=(sj1*x5884);
IkReal x5897=(x5883*x5889);
IkReal x5898=((1.0)*x5892);
IkReal x5899=(x5897+x5898);
evalcond[0]=(((cj5*r21))+(((-1.0)*x5884*x5889))+((r20*sj5))+x5893);
evalcond[1]=(((r20*x5887))+(((-1.0)*x5899))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[2]=((((-1.0)*r00*sj5*x5888))+(((-1.0)*cj5*r11*x5890))+(((-1.0)*cj5*r01*x5888))+(((-1.0)*x5885*x5886))+(((-1.0)*x5899)));
CheckValue<IkReal> x5900=IKPowWithIntegerCheck(cj4,-1);
if(!x5900.valid){
continue;
}
evalcond[3]=((((0.088)*r22*sj4*(x5900.value)))+(((0.0825)*x5893))+pz+(((-0.384)*x5892))+(((-0.384)*x5894))+(((0.0825)*sj1))+(((-0.316)*cj1))+(((-0.0825)*x5896)));
evalcond[4]=((((-1.0)*x5893))+((sj4*x5895))+(((-1.0)*sj0*x5886*x5887))+((cj0*cj4*r02))+(((-1.0)*r00*x5887*x5888))+x5896+((r11*sj4*x5885))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*px*x5888))+(((-0.088)*x5895))+(((0.384)*x5896))+((r10*sj0*x5891))+(((-0.088)*r11*x5885))+(((-0.384)*x5893))+(((0.0825)*cj1))+(((0.316)*sj1))+((cj0*r00*x5891))+(((-1.0)*py*x5890))+(((-0.0825)*x5894))+(((-0.0825)*x5892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5901=(r11*sj0);
IkReal x5902=(r21*sj5);
IkReal x5903=(cj0*r01);
IkReal x5904=(cj5*r20);
IkReal x5905=(cj3*sj5);
IkReal x5906=(cj0*r00);
IkReal x5907=(r10*sj0);
IkReal x5908=(cj1*cj3*cj5);
IkReal x5909=(cj1*cj4*sj3);
IkReal x5910=(cj4*sj1*sj3);
IkReal x5911=(cj3*cj5*sj1);
IkReal x5912=(r22*sj3*sj4);
CheckValue<IkReal> x5913 = IKatan2WithCheck(IkReal((((x5903*x5911))+(((-1.0)*x5902*x5909))+((cj1*x5912))+((x5904*x5909))+((x5901*x5911))+((sj1*x5905*x5906))+((sj1*x5905*x5907)))),IkReal(((((-1.0)*x5904*x5910))+((x5903*x5908))+((x5902*x5910))+(((-1.0)*sj1*x5912))+((cj1*x5905*x5906))+((cj1*x5905*x5907))+((x5901*x5908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5913.valid){
continue;
}
CheckValue<IkReal> x5914=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x5914.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5913.value)+(((1.5707963267949)*(x5914.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5915=IKsin(j2);
IkReal x5916=IKcos(j2);
IkReal x5917=(cj4*cj5);
IkReal x5918=(cj5*sj4);
IkReal x5919=((0.088)*cj5);
IkReal x5920=((1.0)*sj0);
IkReal x5921=((0.088)*sj5);
IkReal x5922=(r11*sj0);
IkReal x5923=((1.0)*cj4);
IkReal x5924=(cj0*r01);
IkReal x5925=(sj4*sj5);
IkReal x5926=((1.0)*cj0);
IkReal x5927=(cj4*sj5);
IkReal x5928=(cj1*x5916);
IkReal x5929=(r10*x5920);
IkReal x5930=(sj1*x5915);
IkReal x5931=(r00*x5926);
IkReal x5932=(sj1*x5916);
IkReal x5933=(cj1*x5915);
evalcond[0]=(((cj5*r21))+((sj3*x5932))+(((-1.0)*sj3*x5933))+((r20*sj5)));
evalcond[1]=((((-1.0)*r22*x5923))+(((-1.0)*x5928))+(((-1.0)*x5930))+((r20*x5918))+(((-1.0)*r21*x5925)));
evalcond[2]=(((r22*sj4))+(((-1.0)*r21*sj5*x5923))+((r20*x5917))+(((-1.0)*cj3*x5933))+((cj3*x5932)));
evalcond[3]=((((-1.0)*cj5*x5924))+((sj3*x5928))+((sj3*x5930))+(((-1.0)*sj5*x5931))+(((-1.0)*cj5*r11*x5920))+(((-1.0)*sj5*x5929)));
evalcond[4]=((((-1.0)*r20*x5919))+((r21*x5921))+pz+(((-0.384)*x5930))+(((0.0825)*x5933))+(((-0.384)*x5928))+(((0.0825)*sj1))+(((-0.0825)*x5932))+(((-0.316)*cj1)));
evalcond[5]=(((x5924*x5925))+(((-1.0)*x5918*x5931))+(((-1.0)*x5918*x5929))+((x5922*x5925))+(((-1.0)*x5933))+((cj0*cj4*r02))+x5932+((cj4*r12*sj0)));
evalcond[6]=(((x5924*x5927))+((x5922*x5927))+(((-1.0)*x5917*x5931))+(((-1.0)*r12*sj4*x5920))+(((-1.0)*x5917*x5929))+(((-1.0)*r02*sj4*x5926))+((cj3*x5928))+((cj3*x5930)));
evalcond[7]=(((r10*sj0*x5919))+(((0.384)*x5932))+(((-1.0)*px*x5926))+(((-1.0)*py*x5920))+(((0.0825)*cj1))+((cj0*r00*x5919))+(((0.316)*sj1))+(((-0.384)*x5933))+(((-1.0)*x5921*x5924))+(((-1.0)*x5921*x5922))+(((-0.0825)*x5930))+(((-0.0825)*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5934=(r21*sj5);
IkReal x5935=(cj3*r22);
IkReal x5936=(cj5*r20);
IkReal x5937=(cj3*sj4);
IkReal x5938=((1.0)*cj1*cj4);
IkReal x5939=((1.0)*sj1*sj4);
IkReal x5940=((1.0)*cj4*sj1);
CheckValue<IkReal> x5941=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5941.valid){
continue;
}
CheckValue<IkReal> x5942 = IKatan2WithCheck(IkReal(((((-1.0)*x5934*x5938))+((sj1*x5936*x5937))+(((-1.0)*x5935*x5940))+((cj1*cj4*x5936))+(((-1.0)*sj1*x5934*x5937))+((cj1*r22*sj4)))),IkReal(((((-1.0)*x5936*x5940))+(((-1.0)*x5935*x5938))+((cj4*sj1*x5934))+(((-1.0)*cj1*x5934*x5937))+(((-1.0)*r22*x5939))+((cj1*x5936*x5937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5942.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5941.value)))+(x5942.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5943=IKsin(j2);
IkReal x5944=IKcos(j2);
IkReal x5945=(cj4*cj5);
IkReal x5946=(cj5*sj4);
IkReal x5947=((0.088)*cj5);
IkReal x5948=((1.0)*sj0);
IkReal x5949=((0.088)*sj5);
IkReal x5950=(r11*sj0);
IkReal x5951=((1.0)*cj4);
IkReal x5952=(cj0*r01);
IkReal x5953=(sj4*sj5);
IkReal x5954=((1.0)*cj0);
IkReal x5955=(cj4*sj5);
IkReal x5956=(cj1*x5944);
IkReal x5957=(r10*x5948);
IkReal x5958=(sj1*x5943);
IkReal x5959=(r00*x5954);
IkReal x5960=(sj1*x5944);
IkReal x5961=(cj1*x5943);
evalcond[0]=(((cj5*r21))+((sj3*x5960))+(((-1.0)*sj3*x5961))+((r20*sj5)));
evalcond[1]=((((-1.0)*r22*x5951))+(((-1.0)*x5958))+(((-1.0)*x5956))+((r20*x5946))+(((-1.0)*r21*x5953)));
evalcond[2]=(((r22*sj4))+(((-1.0)*r21*sj5*x5951))+((r20*x5945))+(((-1.0)*cj3*x5961))+((cj3*x5960)));
evalcond[3]=((((-1.0)*cj5*r11*x5948))+(((-1.0)*sj5*x5957))+(((-1.0)*sj5*x5959))+((sj3*x5956))+((sj3*x5958))+(((-1.0)*cj5*x5952)));
evalcond[4]=((((-0.384)*x5958))+(((-0.384)*x5956))+((r21*x5949))+(((-1.0)*r20*x5947))+pz+(((0.0825)*sj1))+(((-0.0825)*x5960))+(((0.0825)*x5961))+(((-0.316)*cj1)));
evalcond[5]=((((-1.0)*x5961))+((x5952*x5953))+((x5950*x5953))+(((-1.0)*x5946*x5957))+(((-1.0)*x5946*x5959))+((cj0*cj4*r02))+x5960+((cj4*r12*sj0)));
evalcond[6]=(((x5952*x5955))+((x5950*x5955))+(((-1.0)*r02*sj4*x5954))+((cj3*x5956))+((cj3*x5958))+(((-1.0)*r12*sj4*x5948))+(((-1.0)*x5945*x5959))+(((-1.0)*x5945*x5957)));
evalcond[7]=((((-1.0)*py*x5948))+((cj0*r00*x5947))+(((-0.0825)*x5956))+(((-0.0825)*x5958))+((r10*sj0*x5947))+(((0.0825)*cj1))+(((-1.0)*x5949*x5952))+(((-1.0)*x5949*x5950))+(((0.316)*sj1))+(((-0.384)*x5961))+(((-1.0)*px*x5954))+(((0.384)*x5960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5962=((1.0)*sj1);
IkReal x5963=(cj5*r21);
IkReal x5964=(r20*sj5);
IkReal x5965=(r21*sj5);
IkReal x5966=(cj5*r20);
IkReal x5967=(sj3*sj4);
IkReal x5968=(cj1*x5967);
IkReal x5969=(cj4*r22*sj3);
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(((((-1.0)*x5962*x5965*x5967))+((sj1*x5966*x5967))+((cj1*x5963))+((cj1*x5964))+(((-1.0)*x5962*x5969)))),IkReal(((((-1.0)*cj1*x5969))+(((-1.0)*x5965*x5968))+((x5966*x5968))+(((-1.0)*x5962*x5963))+(((-1.0)*x5962*x5964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
CheckValue<IkReal> x5971=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5971.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5970.value)+(((1.5707963267949)*(x5971.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5972=IKsin(j2);
IkReal x5973=IKcos(j2);
IkReal x5974=(cj4*cj5);
IkReal x5975=(cj5*sj4);
IkReal x5976=((0.088)*cj5);
IkReal x5977=((1.0)*sj0);
IkReal x5978=((0.088)*sj5);
IkReal x5979=(r11*sj0);
IkReal x5980=((1.0)*cj4);
IkReal x5981=(cj0*r01);
IkReal x5982=(sj4*sj5);
IkReal x5983=((1.0)*cj0);
IkReal x5984=(cj4*sj5);
IkReal x5985=(cj1*x5973);
IkReal x5986=(r10*x5977);
IkReal x5987=(sj1*x5972);
IkReal x5988=(r00*x5983);
IkReal x5989=(sj1*x5973);
IkReal x5990=(cj1*x5972);
evalcond[0]=(((cj5*r21))+((sj3*x5989))+((r20*sj5))+(((-1.0)*sj3*x5990)));
evalcond[1]=((((-1.0)*x5987))+(((-1.0)*x5985))+((r20*x5975))+(((-1.0)*r21*x5982))+(((-1.0)*r22*x5980)));
evalcond[2]=(((r22*sj4))+(((-1.0)*cj3*x5990))+((cj3*x5989))+((r20*x5974))+(((-1.0)*r21*sj5*x5980)));
evalcond[3]=((((-1.0)*sj5*x5986))+(((-1.0)*sj5*x5988))+(((-1.0)*cj5*r11*x5977))+((sj3*x5985))+((sj3*x5987))+(((-1.0)*cj5*x5981)));
evalcond[4]=((((-0.0825)*x5989))+(((0.0825)*x5990))+(((-0.384)*x5985))+(((-0.384)*x5987))+(((-1.0)*r20*x5976))+((r21*x5978))+pz+(((0.0825)*sj1))+(((-0.316)*cj1)));
evalcond[5]=(((x5979*x5982))+(((-1.0)*x5990))+((cj0*cj4*r02))+(((-1.0)*x5975*x5988))+(((-1.0)*x5975*x5986))+((x5981*x5982))+x5989+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*r02*sj4*x5983))+((x5979*x5984))+((cj3*x5987))+((cj3*x5985))+(((-1.0)*r12*sj4*x5977))+((x5981*x5984))+(((-1.0)*x5974*x5986))+(((-1.0)*x5974*x5988)));
evalcond[7]=((((-1.0)*py*x5977))+((cj0*r00*x5976))+(((-1.0)*x5978*x5981))+(((-1.0)*px*x5983))+(((-0.0825)*x5987))+(((-0.0825)*x5985))+(((-0.384)*x5990))+((r10*sj0*x5976))+(((0.384)*x5989))+(((0.0825)*cj1))+(((0.316)*sj1))+(((-1.0)*x5978*x5979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "afc0eb5ab69b9f25581f2c626d7f15b4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

// start python bindings
// https://github.com/caelan/ss-pybullet/blob/c5efe7ad32381a7a7a15c2bd147b5a8731d21342/pybullet_tools/ikfast/pr2/left_arm_ik.cpp#L12972
// https://github.com/yijiangh/conrob_pybullet/blob/master/utils/ikfast/kuka_kr6_r900/ikfast0x1000004a.Transform6D.0_1_2_3_4_5.cpp#L9923

static PyObject *get_ik(PyObject *self, PyObject *args)
{
    IkSolutionList<IkReal> solutions;

    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9], eetrans[3];

    // First list if 3x3 rotation matrix, easier to compute in Python.
    // Next list is [x, y, z] translation matrix.
    // Last list is free joints.
    PyObject *rotList; // 3x3 rotation matrix
    PyObject *transList; // [x,y,z]
    PyObject *freeList; // can be empty

    // format 'O!': pass C object pointer with the pointer's address.
    if(!PyArg_ParseTuple(args, "O!O!O!", &PyList_Type, &rotList, &PyList_Type, &transList, &PyList_Type, &freeList))
    {
        fprintf(stderr,"Failed to parse input to python objects\n");
        return NULL;
    }

    for(std::size_t i = 0; i < 3; ++i)
    {
        eetrans[i] = PyFloat_AsDouble(PyList_GetItem(transList, i));

        PyObject* rowList = PyList_GetItem(rotList, i);
        for( std::size_t j = 0; j < 3; ++j)
        {
            eerot[3*i + j] = PyFloat_AsDouble(PyList_GetItem(rowList, j));
        }
    }

    for(int i = 0; i < GetNumFreeParameters(); ++i)
    {
        vfree[i] = PyFloat_AsDouble(PyList_GetItem(freeList, i));
    }

    // call ikfast routine
    bool bSuccess = ComputeIk(eetrans, eerot, &vfree[0], solutions);

    if (!bSuccess)
    {
        //fprintf(stderr,"Failed to get ik solution\n");
        return Py_BuildValue(""); // Equivalent to returning None in python
    }

    std::vector<IkReal> solvalues(GetNumJoints());
    PyObject *solutionList = PyList_New(solutions.GetNumSolutions());

    // convert all ikfast solutions into a python list
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);

        PyObject *individualSolution = PyList_New(GetNumJoints());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            // I think IkReal is just a wrapper for double. So this should work.
            PyList_SetItem(individualSolution, j, PyFloat_FromDouble(solvalues[j]));
        }
        PyList_SetItem(solutionList, i, individualSolution);
    }

    return solutionList;
}

static PyObject *get_fk(PyObject *self, PyObject *args)
{
    std::vector<IkReal> joints(GetNumJoints());
    // eerot is a flattened 3x3 rotation matrix
    IkReal eerot[9], eetrans[3];

    PyObject *jointList;
    if(!PyArg_ParseTuple(args, "O!", &PyList_Type, &jointList))
    {
        return NULL;
    }

    for(std::size_t i = 0; i < GetNumJoints(); ++i)
    {
        joints[i] = PyFloat_AsDouble(PyList_GetItem(jointList, i));
    }

    // call ikfast routine
    ComputeFk(&joints[0], eetrans, eerot);

    // convert computed EE pose to a python object
    PyObject *pose = PyList_New(2);
    PyObject *pos = PyList_New(3);
    PyObject *rot = PyList_New(3);

    for(std::size_t i = 0; i < 3; ++i)
    {
        PyList_SetItem(pos, i, PyFloat_FromDouble(eetrans[i]));

        PyObject *row = PyList_New(3);
        for( std::size_t j = 0; j < 3; ++j)
        {
            PyList_SetItem(row, j, PyFloat_FromDouble(eerot[3*i + j]));
        }
        PyList_SetItem(rot, i, row);
    }

    PyList_SetItem(pose, 0, pos);
    PyList_SetItem(pose, 1, rot);

    return pose;
}

static PyMethodDef ikfast_methods[] =
{
    {"get_ik", get_ik, METH_VARARGS, "Compute ik solutions using ikfast."},
    {"get_fk", get_fk, METH_VARARGS, "Compute fk solutions using ikfast."},
    {NULL, NULL, 0, NULL}
    // Not sure why/if this is needed. It shows up in the examples though(something about Sentinel).
};

#if PY_MAJOR_VERSION >= 3

static struct PyModuleDef ikfast_panda_limb_repo_arm_module = {
    PyModuleDef_HEAD_INIT,
    "ikfast_panda_limb_repo_arm",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    ikfast_methods
};

#define INITERROR return NULL

PyMODINIT_FUNC
PyInit_ikfast_panda_limb_repo_arm(void)

#else // PY_MAJOR_VERSION < 3
#define INITERROR return

PyMODINIT_FUNC
initikfast_panda_limb_repo_arm(void)
#endif
{
#if PY_MAJOR_VERSION >= 3
    PyObject *module = PyModule_Create(&ikfast_panda_limb_repo_arm_module);
#else
    PyObject *module = Py_InitModule("ikfast_panda_limb_repo_arm", ikfast_methods);
#endif

if (module == NULL)
    INITERROR;

#if PY_MAJOR_VERSION >= 3
    return module;
#endif
}

// end python bindings
/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2024-08-09 11:59:29.173692
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

//// START
//// Make sure the version number matches.
//// You might need to install the dev version to get the header files.
//// sudo apt-get install python3.4-dev
#include "Python.h"
//// END

#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72;
x0=IKcos(j[2]);
x1=IKsin(j[4]);
x2=IKcos(j[3]);
x3=IKcos(j[4]);
x4=IKsin(j[2]);
x5=IKsin(j[6]);
x6=IKsin(j[3]);
x7=IKcos(j[1]);
x8=IKcos(j[6]);
x9=IKsin(j[5]);
x10=IKsin(j[1]);
x11=IKcos(j[5]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((0.42076)*x10);
x15=((0.0003501)*x2);
x16=((0.167455)*x7);
x17=((1.0)*x6);
x18=((1.0)*x1);
x19=((1.0)*x7);
x20=((0.167455)*x6);
x21=((1.0)*x3);
x22=((0.01275)*x4);
x23=((1.0)*x11);
x24=((0.0003501)*x6);
x25=((1.0)*x8);
x26=((1.0)*x2);
x27=((1.0)*x5);
x28=((0.31436)*x7);
x29=((1.0)*x9);
x30=(x0*x10);
x31=(x1*x4);
x32=(x0*x6);
x33=(x10*x2);
x34=(x0*x2);
x35=(x3*x4);
x36=(x11*x4);
x37=(x4*x6);
x38=(x10*x17);
x39=(x0*x21);
x40=((0.31436)*x33);
x41=(x19*x35);
x42=(x28*x32);
x43=(x10*x21*x4);
x44=(x10*x18*x4);
x45=((((-1.0)*x38))+((x34*x7)));
x46=((((-1.0)*x17*x30))+((x2*x7)));
x47=(((x2*x30))+((x6*x7)));
x48=((((-1.0)*x19*x34))+x38);
x49=((((-1.0)*x0*x15*x7))+((x10*x24)));
x50=(((x0*x17*x7))+((x10*x26)));
x51=((((-1.0)*x0*x18))+(((-1.0)*x2*x21*x4)));
x52=(x7*(((((0.0003501)*x35))+x22)));
x53=(((x16*x32))+(((0.167455)*x33)));
x54=((((-1.0)*x17*x7))+(((-1.0)*x26*x30)));
x55=(x3*x47);
x56=(x3*x45);
x57=(x11*x53);
x58=(x42+x40+x14);
x59=((((-1.0)*x18*x4*x7))+x56);
x60=((((-1.0)*x41))+((x1*x48)));
x61=((((-1.0)*x16*x31))+(((0.167455)*x56)));
x62=(((x11*x51))+((x37*x9)));
x63=((((-1.0)*x18*x48))+x41);
x64=(((x51*x9))+(((-1.0)*x17*x36)));
x65=(x59*x9);
x66=(x5*x60);
x67=(((x11*x59))+(((-1.0)*x50*x9)));
x68=(((x62*x8))+((x5*(((((-1.0)*x39))+((x2*x31)))))));
x69=(((x23*((x44+(((-1.0)*x55))))))+(((-1.0)*x29*x46)));
x70=(((x8*(((((-1.0)*x18*x2*x4))+x39))))+((x5*x62)));
x71=(x5*x67);
x72=((-0.006375)+(((-1.0)*x20*x36))+((x15*x31))+(((-0.31436)*x37))+((x9*(((((-0.167455)*x0*x1))+(((-0.167455)*x2*x35))))))+((x0*(((-0.01275)+(((-0.0003501)*x3)))))));
eerot[0]=(((x12*x68))+((x13*((((x67*x8))+x66)))));
eerot[1]=(((x12*x70))+((x13*((x71+((x63*x8)))))));
eerot[2]=(((x12*x64))+((x13*((((x11*x50))+x65)))));
eetrans[0]=(((x12*x72))+(((-0.005375)*x12))+((x13*((x58+x57+((x1*x49))+((x61*x9))+(((-1.0)*x52)))))));
eerot[3]=(((x13*x68))+((x12*(((((-1.0)*x25*x67))+(((-1.0)*x27*x60)))))));
eerot[4]=(((x12*(((((-1.0)*x25*x63))+(((-1.0)*x27*x67))))))+((x13*x70)));
eerot[5]=(((x13*x64))+((x12*(((((-1.0)*x29*x59))+(((-1.0)*x23*x50)))))));
eetrans[1]=(((x12*(((((-1.0)*x18*x49))+(((-1.0)*x29*x61))+(((-1.0)*x23*x53))+x52+(((-1.0)*x58))))))+((x13*x72))+(((-0.005375)*x13)));
eerot[6]=(((x5*(((((-1.0)*x18*x54))+x43))))+((x69*x8)));
eerot[7]=(((x5*x69))+((x8*(((((-1.0)*x43))+((x1*x54)))))));
eerot[8]=(((x9*((x44+(((-1.0)*x21*x47))))))+((x11*x46)));
eetrans[2]=((0.28481)+(((0.0003501)*x10*x35))+((x9*(((((-0.167455)*x55))+(((0.167455)*x10*x31))))))+((x2*x28))+((x11*(((((-1.0)*x20*x30))+((x16*x2))))))+(((0.42076)*x7))+((x10*x22))+(((-0.31436)*x30*x6))+((x1*((((x15*x30))+((x24*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.0)*r10*(IKsin(j0))))+((r00*(IKcos(j0)))));
new_r01=((((-1.0)*r01*(IKcos(j0))))+((r11*(IKsin(j0)))));
new_r02=(((r12*(IKsin(j0))))+(((-1.0)*r02*(IKcos(j0)))));
IkReal x73=IKcos(j0);
IkReal x74=IKsin(j0);
new_px=((((-0.167455)*r02*x73))+((px*x73))+(((0.167455)*r12*x74))+(((-1.0)*py*x74)));
new_r10=((-1.0)*r20);
new_r11=r21;
new_r12=r22;
new_py=((0.28481)+(((-1.0)*pz))+(((0.167455)*r22)));
new_r20=(((r00*(IKsin(j0))))+((r10*(IKcos(j0)))));
new_r21=((((-1.0)*r01*(IKsin(j0))))+(((-1.0)*r11*(IKcos(j0)))));
new_r22=((((-1.0)*r02*(IKsin(j0))))+(((-1.0)*r12*(IKcos(j0)))));
IkReal x75=IKsin(j0);
IkReal x76=IKcos(j0);
new_pz=((0.005375)+((py*x76))+(((-0.167455)*r12*x76))+(((-0.167455)*r02*x75))+((px*x75)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x77=((1.0)*px);
IkReal x78=((1.0)*pz);
IkReal x79=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x79))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x78)));
rxp0_2=((((-1.0)*r10*x77))+((py*r00)));
rxp1_0=((((-1.0)*r21*x79))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x78)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x77)));
rxp2_0=((((-1.0)*r22*x79))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x78)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x77)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x80=((0.0003501)*r20);
IkReal x81=((0.0003501)*r21);
IkReal x82=((-0.0007002)*npx);
IkReal x83=((-0.0007002)*npy);
IkReal x84=((-1.0)*r22);
IkReal x85=((-0.0003501)*r22);
IkReal x86=((-1.0)*rxp2_2);
IkReal x87=((-1.0)*rxp1_2);
IkReal x88=((-1.0)*r20);
IkReal x89=((-1.0)*npx);
IkReal x90=((-0.0003501)*r20);
IkReal x91=((-1.0)*npz);
IkReal x92=((-1.0)*r21);
IkReal x93=((-0.0003501)*r21);
matrixinvcoeffs[0]=x80;
matrixinvcoeffs[1]=x82;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=r20;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x89;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x80;
matrixinvcoeffs[19]=x82;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x88;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((-1.0)*rxp0_2);
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x81;
matrixinvcoeffs[33]=x83;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=r21;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=((-1.0)*npy);
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x81;
matrixinvcoeffs[51]=x83;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x92;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x87;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=x84;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x85;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x86;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x84;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=npz;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x85;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x86;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x87;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x81;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x87;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x81;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x88;
matrixinvcoeffs[133]=x89;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x90;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x88;
matrixinvcoeffs[151]=x89;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x90;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x84;
matrixinvcoeffs[165]=x91;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x85;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x84;
matrixinvcoeffs[183]=x91;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x85;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x92;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x93;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x87;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=x92;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x93;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x87;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x89;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x80;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=r20;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x89;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x80;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x94=pp*pp;
IkReal x95=pz*pz;
IkReal x96=(gclwh7_0*pz);
IkReal x97=((1.2257001e-7)*r21);
IkReal x98=((2.0)*pz);
IkReal x99=(gclwh9_9*npx);
IkReal x100=(pp*r21);
IkReal x101=((1.031451148152e-7)*r20);
IkReal x102=(gclwh6_10*npy);
IkReal x103=(gclwh12_14*rxp1_2);
IkReal x104=(npx*pz);
IkReal x105=((0.000378645093629984)*rxp0_2);
IkReal x106=((0.000589232304)*rxp1_2);
IkReal x107=((0.001029462048)*rxp2_2);
IkReal x108=(npz*pz);
IkReal x109=(gclwh4_14*r22);
IkReal x110=(gclwh12_2*rxp1_2);
IkReal x111=((1.47024)*gclwh14_14);
IkReal x112=(npy*pz);
IkReal x113=(pp*r20);
IkReal x114=((1.2257001e-7)*r20);
IkReal x115=(gclwh8_5*rxp0_2);
IkReal x116=((0.0007002)*rxp2_2);
IkReal x117=((0.000589232304)*rxp2_2);
IkReal x118=((0.0014004)*rxp2_2);
IkReal x119=(gclwh10_3*r22);
IkReal x120=(gclwh11_7*r22);
IkReal x121=(pp*r22);
IkReal x122=(gclwh10_10*r22);
IkReal x123=(gclwh9_7*rxp0_2);
IkReal x124=(gclwh14_8*rxp0_2);
IkReal x125=(gclwh13_1*rxp1_2);
IkReal x126=((2.34415144125e-9)*r20);
IkReal x127=(gclwh10_2*r22);
IkReal x128=(gclwh5_11*rxp2_2);
IkReal x129=((9.01036657512e-8)*r22);
IkReal x130=(gclwh4_2*rxp2_2);
IkReal x131=((4.9028004e-7)*r22);
IkReal x132=((0.000514731024)*rxp1_2);
IkReal x133=((4.0)*pz);
IkReal x134=(gclwh11_0*r22);
IkReal x135=((1.78551e-5)*rxp2_2);
IkReal x136=(gclwh6_2*r21);
IkReal x137=(gclwh6_3*r21);
IkReal x138=(gclwh14_14*rxp0_2);
IkReal x139=(gclwh7_13*r21);
IkReal x140=((1.031451148152e-7)*r21);
IkReal x141=((1.47024)*gclwh12_14);
IkReal x142=((1.3391325e-5)*rxp0_2);
IkReal x143=(gclwh6_2*pz);
IkReal x144=(gclwh10_12*r22);
IkReal x145=((0.0007002)*pz);
IkReal x146=((0.00014900256)*rxp2_2);
IkReal x147=(gclwh5_1*rxp2_2);
IkReal x148=(gclwh4_3*rxp2_2);
IkReal x149=(gclwh12_3*rxp1_2);
IkReal x150=((9.01036657512e-8)*r20);
IkReal x151=(gclwh12_14*r21);
IkReal x152=((2.4514002e-7)*r21);
IkReal x153=(gclwh7_0*r21);
IkReal x154=((0.0028008)*rxp1_2);
IkReal x155=((7.450128e-5)*rxp1_2);
IkReal x156=(gclwh7_7*r21);
IkReal x157=((4.9028004e-7)*r20);
IkReal x158=((0.73512)*pp);
IkReal x159=((1.78551e-5)*rxp1_2);
IkReal x160=((8.92755e-6)*rxp1_2);
IkReal x161=(gclwh14_14*r20);
IkReal x162=((0.000589232304)*rxp0_2);
IkReal x163=((0.0014004)*rxp0_2);
IkReal x164=((4.9028004e-7)*r21);
IkReal x165=(gclwh4_8*r22);
IkReal x166=((0.000880459488)*rxp0_2);
IkReal x167=((0.0007002)*rxp1_2);
IkReal x168=((1.2257001e-7)*pz);
IkReal x169=((0.1064)*pp);
IkReal x170=(gclwh15_1*rxp0_2);
IkReal x171=(gclwh15_15*rxp0_2);
IkReal x172=(gclwh4_8*rxp2_2);
IkReal x173=((9.01036657512e-8)*r21);
IkReal x174=(gclwh8_2*pz);
IkReal x175=((2.4514002e-7)*r20);
IkReal x176=((3.125535255e-9)*r20);
IkReal x177=((0.0007002)*pp);
IkReal x178=(gclwh14_3*rxp0_2);
IkReal x179=((7.450128e-5)*rxp2_2);
IkReal x180=(gclwh11_13*r22);
IkReal x181=(gclwh9_0*pz);
IkReal x182=(gclwh6_5*r21);
IkReal x183=(gclwh5_0*rxp2_2);
IkReal x184=((0.0028008)*rxp0_2);
IkReal x185=(gclwh11_9*r22);
IkReal x186=(gclwh13_15*rxp1_2);
IkReal x187=(gclwh13_0*rxp1_2);
IkReal x188=((0.000514731024)*rxp2_2);
IkReal x189=((0.0007002)*rxp0_2);
IkReal x190=((0.0028008)*rxp2_2);
IkReal x191=((3.57102e-5)*rxp2_2);
IkReal x192=((1.3041449064e-8)*r20);
IkReal x193=((1.3041449064e-8)*r22);
IkReal x194=((1.541244333744e-7)*r20);
IkReal x195=((0.0014004)*rxp1_2);
IkReal x196=(gclwh15_11*rxp0_2);
IkReal x197=((1.314618498e-5)*x124);
IkReal x198=(gclwh6_10*x97);
IkReal x199=(gclwh6_10*x100);
IkReal x200=((1.3391325e-5)*x130);
IkReal x201=(gclwh14_10*x189);
IkReal x202=((2.34415144125e-9)*x127);
IkReal x203=(gclwh8_2*x126);
IkReal x204=((1.3391325e-5)*x110);
IkReal x205=(gclwh4_10*x116);
IkReal x206=(gclwh8_10*x114);
IkReal x207=(gclwh12_10*x167);
IkReal x208=((2.34415144125e-9)*x136);
IkReal x209=(gclwh14_2*x142);
IkReal x210=((1.2257001e-7)*x122);
IkReal x211=((1.314618498e-5)*x172);
IkReal x212=((1.314618498e-5)*gclwh12_8*rxp1_2);
IkReal x213=(gclwh7_9*x97);
IkReal x214=(gclwh15_9*x189);
IkReal x215=((1.363646502e-5)*x196);
IkReal x216=(gclwh7_9*x100);
IkReal x217=((2.34415144125e-9)*x134);
IkReal x218=(gclwh9_0*x126);
IkReal x219=((1.3391325e-5)*x187);
IkReal x220=((1.3391325e-5)*x183);
IkReal x221=(gclwh13_9*x167);
IkReal x222=(gclwh5_9*x116);
IkReal x223=((2.34415144125e-9)*x153);
IkReal x224=(gclwh15_0*x142);
IkReal x225=((1.363646502e-5)*x128);
IkReal x226=((1.2257001e-7)*x185);
IkReal x227=((1.363646502e-5)*gclwh13_11*rxp1_2);
IkReal x228=(gclwh9_9*x114);
IkReal x229=((0.1064)*x113);
IkReal x230=((2.0)*x95);
IkReal x231=(x177*x178);
IkReal x232=(x110*x145);
IkReal x233=(x137*x94);
IkReal x234=(gclwh8_10*npx*x98);
IkReal x235=((0.03825)*gclwh6_2*x112);
IkReal x236=((0.019125)*gclwh8_2*x113);
IkReal x237=(gclwh10_10*npz*x98);
IkReal x238=(gclwh10_2*pz*x121);
IkReal x239=(x114*x174);
IkReal x240=(gclwh4_2*pz*x116);
IkReal x241=(x127*x168);
IkReal x242=((0.019125)*gclwh10_2*x121);
IkReal x243=(x113*x174);
IkReal x244=(gclwh14_2*rxp0_2*x145);
IkReal x245=((1.0)*gclwh8_10*x113);
IkReal x246=(x102*x98);
IkReal x247=(x149*x177);
IkReal x248=(gclwh4_3*pp*x116);
IkReal x249=((0.03825)*gclwh10_2*x108);
IkReal x250=((0.03825)*gclwh8_2*x104);
IkReal x251=((1.0)*gclwh10_10*x121);
IkReal x252=((0.019125)*gclwh6_2*x100);
IkReal x253=(x143*x97);
IkReal x254=(x114*x181);
IkReal x255=(x98*x99);
IkReal x256=(x145*x187);
IkReal x257=((0.03825)*npy*x96);
IkReal x258=((0.019125)*gclwh9_0*x113);
IkReal x259=(x170*x177);
IkReal x260=(gclwh11_9*npz*x98);
IkReal x261=(gclwh11_0*pz*x121);
IkReal x262=(gclwh5_0*pz*x116);
IkReal x263=((0.019125)*gclwh11_0*x121);
IkReal x264=(x134*x168);
IkReal x265=(x113*x181);
IkReal x266=(gclwh5_1*pp*x116);
IkReal x267=((1.0)*gclwh9_9*x113);
IkReal x268=((0.03825)*gclwh11_0*x108);
IkReal x269=(x96*x97);
IkReal x270=((0.019125)*gclwh7_0*x100);
IkReal x271=(gclwh15_0*rxp0_2*x145);
IkReal x272=((0.03825)*gclwh9_0*x104);
IkReal x273=(gclwh7_9*npy*x98);
IkReal x274=((1.0)*gclwh11_9*x121);
IkReal x275=(x125*x177);
IkReal x276=(gclwh6_2*npy*x230);
IkReal x277=(gclwh10_3*npz*pp*x98);
IkReal x278=((1.0)*x119*x94);
IkReal x279=(gclwh6_3*npy*pp*x98);
IkReal x280=((1.0)*x100*x143);
IkReal x281=(gclwh10_2*npz*x230);
IkReal x282=(gclwh8_2*npx*x230);
IkReal x283=(gclwh7_0*npy*x230);
IkReal x284=(gclwh9_0*npx*x230);
IkReal x285=(gclwh11_0*npz*x230);
IkReal x286=((1.0)*x100*x96);
IkReal x287=((((0.0255)*gclwh7_13*x100))+(((0.051)*gclwh11_13*x108))+(((4.0)*gclwh11_9*x108))+(((3.125535255e-9)*x139))+((gclwh15_9*x163))+(((2.0)*x216))+((gclwh7_9*x152))+(((8.92755e-6)*x196))+(((0.051)*gclwh9_13*x104))+((x133*x99)));
IkReal x288=(((gclwh6_10*x152))+(((8.92755e-6)*x124))+(((4.0)*gclwh10_10*x108))+(((0.0255)*gclwh8_12*x113))+(((4.0)*gclwh8_10*x104))+(((0.051)*gclwh6_12*x112))+(((2.0)*x199))+(((3.125535255e-9)*x144))+((gclwh8_12*x176))+((gclwh14_10*x163))+(((0.0255)*gclwh10_12*x121)));
IkReal x289=((((0.0255)*gclwh6_12*x100))+((gclwh12_10*x195))+(((2.0)*gclwh8_10*x113))+(((0.051)*gclwh8_12*x104))+(((2.4514002e-7)*x122))+((x102*x133))+((gclwh8_10*x175))+(((3.125535255e-9)*gclwh6_12*r21))+((gclwh4_10*x118))+(((0.051)*gclwh10_12*x108))+((gclwh12_8*x160))+(((2.0)*gclwh10_10*x121))+(((8.92755e-6)*x172)));
IkReal x290=((((2.0)*gclwh9_9*x113))+(((0.0255)*gclwh11_13*x121))+(((2.0)*gclwh11_9*x121))+(((0.051)*gclwh7_13*x112))+((gclwh5_9*x118))+(((8.92755e-6)*x128))+((gclwh9_9*x175))+((gclwh13_9*x195))+((gclwh13_11*x160))+(((4.0)*gclwh7_9*x112))+(((2.4514002e-7)*x185))+(((0.0255)*gclwh9_13*x113))+(((3.125535255e-9)*x180))+((gclwh9_13*x176)));
IkReal x291=(x213+x214+x215+x216+x217+x218+x219+x258+x259+x254+x255+x256+x257+x220+x265+x264+x261+x260+x263+x262+x283);
IkReal x292=(x228+x221+x223+x222+x225+x224+x227+x226+x267+x266+x269+x268+x274+x275+x272+x273+x270+x271+x286+x285+x284);
IkReal x293=(x199+x198+x197+x238+x239+x232+x233+x231+x236+x237+x234+x235+x204+x203+x202+x201+x200+x276+x277+x243+x242+x241+x240);
IkReal x294=(x210+x211+x212+x250+x251+x252+x253+x207+x206+x205+x209+x208+x278+x279+x247+x246+x245+x244+x249+x248+x282+x281+x280);
op[0]=((0.02811834)+(((1.47024)*gclwh6_5*x112))+(((0.73512)*gclwh8_5*x113))+((gclwh8_5*x150))+(((-1.0)*gclwh4_14*x188))+(((-1.47024)*gclwh8_5*x104))+(((-1.0)*gclwh6_5*x173))+((gclwh10_5*x129))+(((0.000514731024)*x138))+(((-0.000514731024)*x103))+(((0.73512)*gclwh10_5*x121))+(((-0.73512)*gclwh6_5*x100))+(((-1.47024)*gclwh10_5*x108)));
op[1]=((((-1.0)*gclwh14_3*x105))+(((-1.0)*x294))+(((-6.62818236399287e-8)*x137))+(((6.62818236399287e-8)*x119))+(((0.000378645093629984)*x148))+(((0.000378645093629984)*x149))+(((-0.54076693488498)*gclwh6_3*x100))+x293+(((0.54076693488498)*pp*x119))+(((1.08153411490998)*gclwh6_3*x112))+(((-1.08153411490998)*gclwh10_3*x108)));
op[2]=((((1.68304)*gclwh6_12*x112))+(((-1.68304)*gclwh10_12*x108))+((gclwh8_12*x101))+(((-1.0)*gclwh6_12*x140))+((gclwh12_8*x106))+(((-0.000589232304)*x124))+(((0.84152)*gclwh8_12*x113))+(((-0.84152)*gclwh6_12*x100))+(((0.84152)*gclwh10_12*x121))+(((1.031451148152e-7)*x144))+((gclwh4_8*x117))+(((-1.68304)*gclwh8_12*x104)));
op[3]=0;
op[4]=((-0.0040698)+(((-0.2128)*gclwh6_5*x112))+(((0.2128)*gclwh10_5*x108))+(((0.1064)*gclwh6_5*x100))+(((-7.450128e-5)*x138))+(((-0.1064)*gclwh10_5*x121))+(((0.2128)*gclwh8_5*x104))+((gclwh4_14*x179))+(((-1.0)*gclwh8_5*x229))+(((7.450128e-5)*x103))+(((1.3041449064e-8)*x182))+(((-1.0)*gclwh10_5*x193))+(((-1.0)*gclwh8_5*x192)));
op[5]=((((-0.02337320610998)*gclwh10_3*x108))+(((0.01168648048498)*pp*x119))+(((-1.0)*x294))+(((8.182959459104e-6)*x149))+(((8.182959459104e-6)*x148))+x293+(((-8.182959459104e-6)*x178))+(((1.43242705331615e-9)*x119))+(((0.02337320610998)*gclwh6_3*x112))+(((-1.43242705331615e-9)*x137))+(((-0.01168648048498)*gclwh6_3*x100)));
op[6]=((((-1.0)*gclwh15_1*x105))+(((-1.0)*x292))+(((0.000378645093629984)*x125))+(((0.000378645093629984)*x147))+x291);
op[7]=((0.02811834)+(((-0.73512)*gclwh7_7*x100))+((x120*x158))+(((-0.000514731024)*x171))+((gclwh9_7*x150))+(((-1.47024)*gclwh9_7*x104))+(((-1.47024)*gclwh11_7*x108))+(((1.47024)*gclwh7_7*x112))+(((9.01036657512e-8)*x120))+((gclwh5_15*x188))+(((0.73512)*gclwh9_7*x113))+(((-9.01036657512e-8)*x156))+((gclwh13_15*x132)));
op[8]=0;
op[9]=((((0.84152)*gclwh9_13*x113))+((gclwh9_13*x101))+(((-1.0)*gclwh13_11*x106))+(((-0.84152)*gclwh7_13*x100))+((gclwh15_11*x162))+(((0.84152)*gclwh11_13*x121))+(((1.68304)*gclwh7_13*x112))+(((-1.031451148152e-7)*x139))+(((-1.68304)*gclwh9_13*x104))+(((-1.0)*gclwh5_11*x117))+(((-1.68304)*gclwh11_13*x108))+(((1.031451148152e-7)*x180)));
op[10]=((((8.182959459104e-6)*x125))+(((-1.0)*x292))+(((8.182959459104e-6)*x147))+x291+(((-8.182959459104e-6)*x170)));
op[11]=((-0.0040698)+(((-1.0)*gclwh5_15*x179))+(((-0.2128)*gclwh7_7*x112))+(((-1.0)*x120*x169))+(((0.2128)*gclwh11_7*x108))+(((0.1064)*gclwh7_7*x100))+(((-1.0)*gclwh9_7*x192))+(((0.2128)*gclwh9_7*x104))+(((-1.0)*gclwh13_15*x155))+(((-1.3041449064e-8)*x120))+(((7.450128e-5)*x171))+(((1.3041449064e-8)*x156))+(((-1.0)*gclwh9_7*x229)));
op[12]=(((gclwh10_5*x188))+(((0.73512)*gclwh12_14*x100))+(((-1.47024)*gclwh4_14*x108))+(((-1.0)*gclwh6_5*x132))+(((-1.0)*gclwh14_14*x150))+(((9.01036657512e-8)*x109))+((x109*x158))+(((-0.73512)*gclwh14_14*x113))+((x104*x111))+(((0.000514731024)*x115))+(((-1.0)*x112*x141))+(((9.01036657512e-8)*x151)));
op[13]=((0.540035648775)+(((1.2257001e-7)*gclwh1_2*pz*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.0187749)*gclwh12_8*pp*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.0007002)*gclwh10_10*rxp2_2))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-6.62818236399287e-8)*gclwh12_3*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-2.34415144125e-9)*gclwh4_2*r22))+((gclwh12_3*r21*(pp*pp)))+(((-0.0007002)*pz))+(((1.08153411490998)*gclwh4_3*npz*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.0007002)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((1.3391325e-5)*gclwh8_2*rxp0_2))+(((1.2257001e-7)*gclwh4_10*r22))+(((1.08153411490998)*gclwh1_3*npx*pz))+(((2.34415144125e-9)*gclwh14_2*r20))+(((-0.000378645093629984)*gclwh6_3*rxp1_2))+(((-1.0)*gclwh14_10*pp*r20))+(((0.03825)*gclwh12_2*npy*pz))+(((0.000378645093629984)*gclwh10_3*rxp2_2))+(((0.0007002)*gclwh6_10*rxp1_2))+(((-1.08153411490998)*gclwh14_3*npx*pz))+(((-0.019125)*gclwh4_2*pp*r22))+(((-2.0)*gclwh12_10*npy*pz))+((gclwh12_10*pp*r21))+(((-0.03825)*gclwh14_2*npx*pz))+(((-0.0007002)*gclwh6_2*pz*rxp1_2))+(((0.0007002)*gclwh8_2*pz*rxp0_2))+(((-1.2257001e-7)*gclwh14_10*r20))+(((2.34415144125e-9)*gclwh3_2*r21))+(((2.34415144125e-9)*gclwh1_2*r20))+(((-0.0187749)*gclwh14_8*pp*r20))+(((1.2257001e-7)*gclwh14_2*pz*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.540767180025)*gclwh3_3*pp*r21))+(((-0.540767180025)*gclwh1_3*pp*r20))+(((-1.2257001e-7)*gclwh12_2*pz*r21))+(((-0.0007002)*gclwh8_10*rxp0_2))+(((-0.0007002)*gclwh10_3*pp*rxp2_2))+(((1.2257001e-7)*gclwh12_10*r21))+(((0.03825)*gclwh3_2*npy*pz))+(((2.0)*gclwh14_3*npx*pp*pz))+(((0.54076693488498)*gclwh14_3*pp*r20))+(((-0.019125)*gclwh12_2*pp*r21))+(((0.019125)*gclwh14_2*pp*r20))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((1.3391325e-5)*gclwh10_2*rxp2_2))+(((2.301239680749e-9)*gclwh12_8*r21))+(((0.03825)*gclwh1_2*npx*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0375498)*gclwh14_8*npx*pz))+(((6.62818236399287e-8)*gclwh14_3*r20))+(((-0.54076693488498)*gclwh4_3*pp*r22))+(((-0.019125)*gclwh3_2*pp*r21))+(((6.62818236399287e-8)*gclwh3_3*r21))+(((1.08153411490998)*gclwh12_3*npy*pz))+(((6.62818236399287e-8)*gclwh1_3*r20))+(((1.2257001e-7)*gclwh3_2*pz*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.2257001e-7)*gclwh4_2*pz*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.3391325e-5)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-2.34415144125e-9)*gclwh12_2*r21))+((gclwh4_10*pp*r22))+(((-0.0375498)*gclwh4_8*npz*pz))+(((-0.54076693488498)*gclwh12_3*pp*r21))+(((0.0187749)*gclwh4_8*pp*r22))+(((-2.301239680749e-9)*gclwh14_8*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0007002)*gclwh6_3*pp*rxp1_2))+(((0.03825)*gclwh4_2*npz*pz))+(((-0.0375498)*gclwh12_8*npy*pz))+(((-6.62818236399287e-8)*gclwh4_3*r22))+(((-0.019125)*gclwh1_2*pp*r20))+(((1.08153411490998)*gclwh3_3*npy*pz))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-2.0)*gclwh4_10*npz*pz))+(((2.301239680749e-9)*gclwh4_8*r22)));
op[14]=((0.03218814)+(((0.84152)*gclwh14_8*x113))+((gclwh10_12*x117))+(((-1.031451148152e-7)*x165))+(((-0.84152)*gclwh12_8*x100))+(((-1.0)*gclwh6_12*x106))+((gclwh14_8*x101))+(((-1.68304)*gclwh14_8*x104))+(((-1.0)*gclwh12_8*x140))+((gclwh8_12*x162))+(((-0.84152)*gclwh4_8*x121))+(((1.68304)*gclwh4_8*x108))+(((1.68304)*gclwh12_8*x112)));
op[15]=0;
op[16]=((((-0.2128)*gclwh14_14*x104))+((gclwh14_14*x229))+(((-0.1064)*gclwh12_14*x100))+(((-7.450128e-5)*x115))+(((-1.3041449064e-8)*x151))+(((0.2128)*gclwh4_14*x108))+(((-1.0)*gclwh10_5*x179))+(((0.2128)*gclwh12_14*x112))+((gclwh6_5*x155))+(((-1.0)*x109*x169))+(((1.3041449064e-8)*x161))+(((-1.3041449064e-8)*x109)));
op[17]=((0.010955194375)+(((1.2257001e-7)*gclwh1_2*pz*r20))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-0.01168648048498)*gclwh12_3*pp*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.0187749)*gclwh12_8*pp*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.0007002)*gclwh10_10*rxp2_2))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-2.34415144125e-9)*gclwh4_2*r22))+((gclwh12_3*r21*(pp*pp)))+(((-0.0007002)*pz))+(((0.02337320610998)*gclwh4_3*npz*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.0007002)*gclwh10_2*pz*rxp2_2))+(((2.0)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((1.3391325e-5)*gclwh8_2*rxp0_2))+(((1.2257001e-7)*gclwh4_10*r22))+(((2.34415144125e-9)*gclwh14_2*r20))+(((-0.01168648048498)*gclwh4_3*pp*r22))+(((-1.0)*gclwh14_10*pp*r20))+(((0.03825)*gclwh12_2*npy*pz))+(((0.0007002)*gclwh6_10*rxp1_2))+(((-0.019125)*gclwh4_2*pp*r22))+(((-2.0)*gclwh12_10*npy*pz))+((gclwh12_10*pp*r21))+(((0.01168648048498)*gclwh14_3*pp*r20))+(((-0.03825)*gclwh14_2*npx*pz))+(((-0.0007002)*gclwh6_2*pz*rxp1_2))+(((0.0007002)*gclwh8_2*pz*rxp0_2))+(((-0.011686725625)*gclwh1_3*pp*r20))+(((-1.2257001e-7)*gclwh14_10*r20))+(((2.34415144125e-9)*gclwh3_2*r21))+(((2.34415144125e-9)*gclwh1_2*r20))+(((-0.0187749)*gclwh14_8*pp*r20))+(((1.2257001e-7)*gclwh14_2*pz*r20))+((gclwh3_3*r21*(pp*pp)))+(((-0.02337320610998)*gclwh14_3*npx*pz))+((gclwh1_3*r20*(pp*pp)))+(((-1.2257001e-7)*gclwh12_2*pz*r21))+(((-0.0007002)*gclwh8_10*rxp0_2))+(((-0.0007002)*gclwh10_3*pp*rxp2_2))+(((1.2257001e-7)*gclwh12_10*r21))+(((0.03825)*gclwh3_2*npy*pz))+(((2.0)*gclwh14_3*npx*pp*pz))+(((8.182959459104e-6)*gclwh10_3*rxp2_2))+(((-0.019125)*gclwh12_2*pp*r21))+(((0.019125)*gclwh14_2*pp*r20))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((1.3391325e-5)*gclwh10_2*rxp2_2))+(((2.301239680749e-9)*gclwh12_8*r21))+(((0.03825)*gclwh1_2*npx*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0375498)*gclwh14_8*npx*pz))+(((-0.011686725625)*gclwh3_3*pp*r21))+(((-0.019125)*gclwh3_2*pp*r21))+(((-1.43242705331615e-9)*gclwh4_3*r22))+(((1.2257001e-7)*gclwh3_2*pz*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((1.43242705331615e-9)*gclwh1_3*r20))+(((-1.2257001e-7)*gclwh4_2*pz*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.3391325e-5)*gclwh6_2*rxp1_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-2.34415144125e-9)*gclwh12_2*r21))+((gclwh4_10*pp*r22))+(((1.43242705331615e-9)*gclwh14_3*r20))+(((-0.0375498)*gclwh4_8*npz*pz))+(((-8.182959459104e-6)*gclwh6_3*rxp1_2))+(((0.0187749)*gclwh4_8*pp*r22))+(((0.02337320610998)*gclwh12_3*npy*pz))+(((-2.301239680749e-9)*gclwh14_8*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0007002)*gclwh6_3*pp*rxp1_2))+(((0.02337320610998)*gclwh1_3*npx*pz))+(((0.03825)*gclwh4_2*npz*pz))+(((-0.0375498)*gclwh12_8*npy*pz))+(((-0.019125)*gclwh1_2*pp*r20))+(((1.43242705331615e-9)*gclwh3_3*r21))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.02337320610998)*gclwh3_3*npy*pz))+(((-2.0)*gclwh4_10*npz*pz))+(((-1.43242705331615e-9)*gclwh12_3*r21))+(((2.301239680749e-9)*gclwh4_8*r22)));
op[18]=((0.540035648775)+(((2.0)*gclwh15_9*npx*pz))+(((-2.34415144125e-9)*gclwh0_0*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.2257001e-7)*gclwh2_0*pz*r21))+(((-0.03825)*gclwh2_0*npy*pz))+(((0.03825)*gclwh13_0*npy*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((6.62818236399287e-8)*gclwh15_1*r20))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh15_9*pp*r20))+(((-0.03825)*gclwh15_0*npx*pz))+(((1.08153411490998)*gclwh5_1*npz*pz))+((gclwh2_0*pp*pz*r21))+(((-1.2257001e-7)*gclwh0_0*pz*r20))+((gclwh0_0*pp*pz*r20))+(((-0.019125)*gclwh13_0*pp*r21))+(((-0.0389502)*gclwh5_11*npz*pz))+(((-6.62818236399287e-8)*gclwh2_1*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.0389502)*gclwh15_11*npx*pz))+(((0.019125)*gclwh15_0*pp*r20))+(((-0.0007002)*gclwh11_9*rxp2_2))+(((-2.387063201751e-9)*gclwh15_11*r20))+(((0.0194751)*gclwh5_11*pp*r22))+(((-1.2257001e-7)*gclwh13_0*pz*r21))+(((1.3391325e-5)*gclwh9_0*rxp0_2))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((1.2257001e-7)*gclwh13_9*r21))+(((-6.62818236399287e-8)*gclwh0_1*r20))+(((-1.2257001e-7)*gclwh15_9*r20))+(((0.0007002)*gclwh11_0*pz*rxp2_2))+(((1.2257001e-7)*gclwh5_9*r22))+(((-0.019125)*gclwh5_0*pp*r22))+(((1.2257001e-7)*gclwh15_0*pz*r20))+(((0.0007002)*pz))+(((-1.08153411490998)*gclwh15_1*npx*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.3391325e-5)*gclwh7_0*rxp1_2))+(((0.540767180025)*gclwh2_1*pp*r21))+(((0.0007002)*gclwh7_9*rxp1_2))+(((1.3391325e-5)*gclwh11_0*rxp2_2))+(((-1.08153411490998)*gclwh0_1*npx*pz))+(((-6.62818236399287e-8)*gclwh5_1*r22))+(((-2.34415144125e-9)*gclwh2_0*r21))+(((-0.54076693488498)*gclwh13_1*pp*r21))+(((2.387063201751e-9)*gclwh5_11*r22))+(((-0.54076693488498)*gclwh5_1*pp*r22))+(((-2.0)*gclwh5_9*npz*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.03825)*gclwh5_0*npz*pz))+(((0.540767180025)*gclwh0_1*pp*r20))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((0.0007002)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0007002)*gclwh7_0*pz*rxp1_2))+(((-0.0194751)*gclwh15_11*pp*r20))+(((0.0194751)*gclwh13_11*pp*r21))+(((-1.2257001e-7)*gclwh5_0*pz*r22))+(((-0.0007002)*gclwh9_9*rxp0_2))+(((0.54076693488498)*gclwh15_1*pp*r20))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((1.08153411490998)*gclwh13_1*npy*pz))+(((0.019125)*gclwh0_0*pp*r20))+(((2.387063201751e-9)*gclwh13_11*r21))+(((-2.0)*gclwh13_9*npy*pz))+(((-0.0389502)*gclwh13_11*npy*pz))+((gclwh13_9*pp*r21))+(((2.34415144125e-9)*gclwh15_0*r20))+(((-1.08153411490998)*gclwh2_1*npy*pz))+((gclwh5_1*r22*(pp*pp)))+(((-0.03825)*gclwh0_0*npx*pz))+(((0.019125)*gclwh2_0*pp*r21))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+((gclwh5_9*pp*r22))+(((-2.34415144125e-9)*gclwh5_0*r22))+(((-2.34415144125e-9)*gclwh13_0*r21))+(((-6.62818236399287e-8)*gclwh13_1*r21))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[19]=((((-0.73512)*gclwh13_15*x100))+(((-1.0)*gclwh7_7*x132))+(((0.73512)*gclwh15_15*x113))+(((1.47024)*gclwh13_15*x112))+((gclwh11_7*x188))+(((-1.0)*gclwh13_15*x173))+(((0.000514731024)*x123))+((gclwh15_15*x150))+(((-1.47024)*gclwh15_15*x104))+(((-1.0)*gclwh5_15*x129))+(((-0.73512)*gclwh5_15*x121))+(((1.47024)*gclwh5_15*x108)));
op[20]=0;
op[21]=((-0.03218814)+(((-1.68304)*gclwh5_11*x108))+(((1.68304)*gclwh15_11*x104))+(((0.84152)*gclwh13_11*x100))+(((-1.0)*gclwh7_13*x106))+(((-0.84152)*gclwh15_11*x113))+((gclwh13_11*x140))+(((1.031451148152e-7)*gclwh5_11*r22))+((gclwh9_13*x162))+(((0.84152)*gclwh5_11*x121))+(((-1.0)*gclwh15_11*x101))+(((-1.68304)*gclwh13_11*x112))+((gclwh11_13*x117)));
op[22]=((0.010955194375)+(((2.0)*gclwh15_9*npx*pz))+(((-2.34415144125e-9)*gclwh0_0*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.02337320610998)*gclwh13_1*npy*pz))+(((1.43242705331615e-9)*gclwh15_1*r20))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.2257001e-7)*gclwh2_0*pz*r21))+(((0.01168648048498)*gclwh15_1*pp*r20))+(((-0.03825)*gclwh2_0*npy*pz))+(((0.03825)*gclwh13_0*npy*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-1.0)*gclwh15_9*pp*r20))+(((-0.03825)*gclwh15_0*npx*pz))+((gclwh2_0*pp*pz*r21))+(((-1.2257001e-7)*gclwh0_0*pz*r20))+(((-0.01168648048498)*gclwh13_1*pp*r21))+((gclwh0_0*pp*pz*r20))+(((-0.019125)*gclwh13_0*pp*r21))+(((-0.0389502)*gclwh5_11*npz*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((0.0389502)*gclwh15_11*npx*pz))+(((0.019125)*gclwh15_0*pp*r20))+(((-0.0007002)*gclwh11_9*rxp2_2))+(((-2.387063201751e-9)*gclwh15_11*r20))+(((0.0194751)*gclwh5_11*pp*r22))+(((-1.2257001e-7)*gclwh13_0*pz*r21))+(((1.3391325e-5)*gclwh9_0*rxp0_2))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((1.2257001e-7)*gclwh13_9*r21))+(((-1.2257001e-7)*gclwh15_9*r20))+(((-0.02337320610998)*gclwh2_1*npy*pz))+(((-0.01168648048498)*gclwh5_1*pp*r22))+(((0.0007002)*gclwh11_0*pz*rxp2_2))+(((1.2257001e-7)*gclwh5_9*r22))+(((-0.02337320610998)*gclwh15_1*npx*pz))+(((-0.019125)*gclwh5_0*pp*r22))+(((1.2257001e-7)*gclwh15_0*pz*r20))+(((0.0007002)*pz))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-1.43242705331615e-9)*gclwh2_1*r21))+(((-1.3391325e-5)*gclwh7_0*rxp1_2))+(((0.0007002)*gclwh7_9*rxp1_2))+(((1.3391325e-5)*gclwh11_0*rxp2_2))+(((-2.34415144125e-9)*gclwh2_0*r21))+(((0.02337320610998)*gclwh5_1*npz*pz))+(((2.387063201751e-9)*gclwh5_11*r22))+(((-2.0)*gclwh5_9*npz*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.03825)*gclwh5_0*npz*pz))+(((-1.43242705331615e-9)*gclwh0_1*r20))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((0.0007002)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0007002)*gclwh7_0*pz*rxp1_2))+(((-0.0194751)*gclwh15_11*pp*r20))+(((-0.02337320610998)*gclwh0_1*npx*pz))+(((0.0194751)*gclwh13_11*pp*r21))+(((-1.2257001e-7)*gclwh5_0*pz*r22))+(((-0.0007002)*gclwh9_9*rxp0_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.019125)*gclwh0_0*pp*r20))+(((2.387063201751e-9)*gclwh13_11*r21))+(((-2.0)*gclwh13_9*npy*pz))+(((-0.0389502)*gclwh13_11*npy*pz))+((gclwh13_9*pp*r21))+(((0.011686725625)*gclwh2_1*pp*r21))+(((2.34415144125e-9)*gclwh15_0*r20))+((gclwh5_1*r22*(pp*pp)))+(((-1.43242705331615e-9)*gclwh13_1*r21))+(((-0.03825)*gclwh0_0*npx*pz))+(((0.019125)*gclwh2_0*pp*r21))+(((-1.43242705331615e-9)*gclwh5_1*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((0.011686725625)*gclwh0_1*pp*r20))+((gclwh5_9*pp*r22))+(((-2.34415144125e-9)*gclwh5_0*r22))+(((-2.34415144125e-9)*gclwh13_0*r21))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[23]=((((-0.2128)*gclwh13_15*x112))+(((-1.0)*gclwh15_15*x192))+(((0.1064)*gclwh5_15*x121))+((gclwh7_7*x155))+(((-7.450128e-5)*x123))+(((0.2128)*gclwh15_15*x104))+(((0.1064)*gclwh13_15*x100))+((gclwh5_15*x193))+(((-0.2128)*gclwh5_15*x108))+(((1.3041449064e-8)*gclwh13_15*r21))+(((-1.0)*gclwh15_15*x229))+(((-1.0)*gclwh11_7*x179)));
op[24]=(x288+(((-1.0)*x289)));
op[25]=(((gclwh4_14*x107))+(((-0.001029462048)*x138))+(((0.001029462048)*x103)));
op[26]=((-0.3133547595)+(((-1.0)*gclwh12_4*x154))+(((-0.0255)*gclwh6_5*x100))+(((8.0)*gclwh8_4*x104))+(((-3.125535255e-9)*x182))+(((-0.051)*gclwh10_5*x108))+(((-4.0)*gclwh10_4*x121))+(((-1.0)*gclwh8_4*x157))+(((-3.57102e-5)*x138))+(((-8.0)*gclwh6_4*x112))+((gclwh8_5*x176))+((gclwh14_4*x184))+(((-0.051)*gclwh8_5*x104))+(((0.051)*gclwh6_5*x112))+(((0.0255)*gclwh8_5*x113))+((gclwh6_4*x164))+(((3.57102e-5)*x103))+((gclwh4_14*x191))+(((8.0)*gclwh10_4*x108))+(((0.0255)*gclwh10_5*x121))+(((4.0)*gclwh6_4*x100))+(((-4.0)*gclwh8_4*x113))+(((3.125535255e-9)*gclwh10_5*r22))+(((-1.0)*gclwh10_4*x131))+(((-1.0)*gclwh4_4*x190)));
op[27]=((((0.01603236)*pp*x119))+(((-2.51488)*gclwh8_2*x104))+(((-0.01603236)*gclwh6_3*x100))+(((-0.03206472)*gclwh10_3*x108))+(((-2.51488)*gclwh10_2*x108))+(((-1.25744)*gclwh6_2*x100))+(((2.51488)*gclwh6_2*x112))+((gclwh8_2*x194))+(((0.000880459488)*x130))+(((0.03206472)*gclwh6_3*x112))+(((1.1225858472e-5)*x149))+(((1.1225858472e-5)*x148))+(((0.000880459488)*x110))+(((-1.0)*gclwh14_2*x166))+(((-1.541244333744e-7)*x136))+(((1.25744)*gclwh8_2*x113))+(((1.25744)*gclwh10_2*x121))+(((1.9650865255236e-9)*x119))+(((-1.1225858472e-5)*x178))+(((-1.9650865255236e-9)*x137))+(((1.541244333744e-7)*x127)));
op[28]=(x289+(((-1.0)*x288)));
op[29]=((((0.00014900256)*x103))+((gclwh4_14*x146))+(((-0.00014900256)*x138)));
op[30]=(((gclwh5_15*x107))+(((-0.001029462048)*x171))+(((0.001029462048)*x186)));
op[31]=(x290+(((-1.0)*x287)));
op[32]=((((2.51488)*npy*x96))+(((1.25744)*gclwh9_0*x113))+(((-1.25744)*gclwh7_0*x100))+(((1.25744)*gclwh11_0*x121))+(((1.1225858472e-5)*x147))+(((-1.541244333744e-7)*x153))+(((-2.51488)*gclwh11_0*x108))+(((-1.0)*gclwh15_0*x166))+(((-1.1225858472e-5)*x170))+((gclwh9_0*x194))+(((1.541244333744e-7)*x134))+(((0.000880459488)*x183))+(((0.000880459488)*x187))+(((1.1225858472e-5)*x125))+(((-2.51488)*gclwh9_0*x104)));
op[33]=((-0.3133547595)+((gclwh7_6*x164))+(((-4.0)*gclwh11_6*x121))+(((3.125535255e-9)*x120))+(((8.0)*gclwh9_6*x104))+(((0.0255)*gclwh9_7*x113))+((gclwh9_7*x176))+(((4.0)*gclwh7_6*x100))+(((3.57102e-5)*x171))+(((-3.125535255e-9)*x156))+(((-4.0)*gclwh9_6*x113))+(((-1.0)*gclwh5_6*x190))+(((0.051)*gclwh7_7*x112))+(((-0.051)*gclwh9_7*x104))+(((-0.051)*gclwh11_7*x108))+(((-0.0255)*gclwh7_7*x100))+(((-1.0)*gclwh13_6*x154))+(((-3.57102e-5)*x186))+(((8.0)*gclwh11_6*x108))+(((-1.0)*gclwh11_6*x131))+(((-1.0)*gclwh9_6*x157))+(((0.0255)*pp*x120))+(((-8.0)*gclwh7_6*x112))+((gclwh15_6*x184))+(((-1.0)*gclwh5_15*x191)));
op[34]=((((-0.00014900256)*x171))+(((0.00014900256)*x186))+((gclwh5_15*x146)));
op[35]=((((-1.0)*x290))+x287);
op[36]=((1.08104667255)+(((2.0)*gclwh12_10*x100))+((gclwh6_10*x195))+(((-0.0255)*gclwh4_8*x108))+(((-2.0)*gclwh14_10*x113))+(((-1.5627676275e-9)*gclwh14_8*r20))+(((-1.0)*gclwh10_10*x118))+(((-1.0)*gclwh6_12*x159))+(((-4.0)*gclwh4_10*x108))+(((1.78551e-5)*gclwh8_12*rxp0_2))+(((-4.0)*gclwh12_10*x112))+(((1.5627676275e-9)*x165))+(((4.0)*gclwh14_10*x104))+(((-1.0)*gclwh8_10*x163))+((gclwh10_12*x135))+(((1.5627676275e-9)*gclwh12_8*r21))+(((-0.0255)*gclwh12_8*x112))+(((2.4514002e-7)*gclwh4_10*r22))+(((2.0)*gclwh4_10*x121))+(((-1.0)*gclwh14_10*x175))+(((0.01275)*gclwh4_8*x121))+(((0.01275)*gclwh12_8*x100))+(((0.0255)*gclwh14_8*x104))+(((-0.01275)*gclwh14_8*x113))+((gclwh12_10*x152)));
op[37]=((((1.802073315024e-7)*x161))+((x111*x113))+(((-1.802073315024e-7)*x151))+(((2.94048)*gclwh12_14*x112))+(((-1.802073315024e-7)*x109))+(((-2.94048)*gclwh14_14*x104))+(((-1.47024)*pp*x109))+(((2.94048)*gclwh4_14*x108))+(((-1.0)*x100*x141)));
op[38]=((((8.0)*gclwh14_4*x104))+(((-4.0)*gclwh14_4*x113))+(((-1.0)*gclwh8_4*x184))+(((-1.0)*gclwh14_4*x157))+(((-6.25107051e-9)*x151))+(((-8.0)*gclwh12_4*x112))+(((0.051)*gclwh14_14*x113))+(((6.25107051e-9)*x161))+((gclwh10_5*x135))+(((0.102)*gclwh12_14*x112))+(((4.0)*gclwh4_4*x121))+(((-1.0)*gclwh6_5*x159))+(((-0.051)*pp*x109))+(((-6.25107051e-9)*x109))+(((-1.0)*gclwh10_4*x190))+((gclwh12_4*x164))+(((-0.102)*gclwh14_14*x104))+(((4.0)*gclwh12_4*x100))+((gclwh6_4*x154))+(((1.78551e-5)*x115))+((gclwh4_4*x131))+(((0.102)*gclwh4_14*x108))+(((-0.051)*gclwh12_14*x100))+(((-8.0)*gclwh4_4*x108)));
IkReal x295=pp*pp;
IkReal x296=pz*pz;
IkReal x297=((0.0014004)*rxp2_2);
IkReal x298=(npy*pz);
IkReal x299=((1.2257001e-7)*r21);
IkReal x300=(gclwh7_0*pz);
IkReal x301=(pp*r22);
IkReal x302=(npx*pz);
IkReal x303=((1.031451148152e-7)*r20);
IkReal x304=(pp*r20);
IkReal x305=((2.4514002e-7)*r22);
IkReal x306=((0.000589232304)*rxp1_2);
IkReal x307=(npz*pz);
IkReal x308=(pp*r21);
IkReal x309=((1.541244333744e-7)*r20);
IkReal x310=((1.9650865255236e-9)*r21);
IkReal x311=((0.2128)*gclwh12_14);
IkReal x312=((1.2257001e-7)*r20);
IkReal x313=((0.000880459488)*rxp1_2);
IkReal x314=((7.450128e-5)*rxp0_2);
IkReal x315=(gclwh5_1*rxp2_2);
IkReal x316=((0.0007002)*pp);
IkReal x317=((2.6082898128e-8)*r22);
IkReal x318=((0.000589232304)*rxp2_2);
IkReal x319=((4.463775e-6)*rxp1_2);
IkReal x320=((0.2128)*gclwh13_15);
IkReal x321=(gclwh12_14*rxp1_2);
IkReal x322=((1.78551e-5)*rxp1_2);
IkReal x323=((1.2257001e-7)*r22);
IkReal x324=(gclwh4_3*rxp2_2);
IkReal x325=((0.000514731024)*rxp0_2);
IkReal x326=((0.000589232304)*rxp0_2);
IkReal x327=(gclwh15_1*rxp0_2);
IkReal x328=((9.01036657512e-8)*r22);
IkReal x329=((1.541244333744e-7)*r21);
IkReal x330=((7.8138381375e-10)*r20);
IkReal x331=((0.0007002)*pz);
IkReal x332=(gclwh8_5*r20);
IkReal x333=(gclwh14_2*rxp0_2);
IkReal x334=(gclwh13_15*r21);
IkReal x335=((9.01036657512e-8)*r21);
IkReal x336=((0.2128)*gclwh14_14);
IkReal x337=((1.9650865255236e-9)*r22);
IkReal x338=((1.9650865255236e-9)*r20);
IkReal x339=((1.47024)*gclwh15_15);
IkReal x340=((1.031451148152e-7)*r21);
IkReal x341=(gclwh14_14*r20);
IkReal x342=((1.3041449064e-8)*r22);
IkReal x343=((0.0007002)*rxp2_2);
IkReal x344=(gclwh6_2*pz);
IkReal x345=(gclwh4_2*rxp2_2);
IkReal x346=((0.000514731024)*rxp1_2);
IkReal x347=((1.47024)*gclwh5_15);
IkReal x348=((1.031451148152e-7)*r22);
IkReal x349=((1.78551e-5)*rxp0_2);
IkReal x350=(gclwh5_15*r22);
IkReal x351=((7.8138381375e-10)*r21);
IkReal x352=((1.78551e-5)*rxp2_2);
IkReal x353=((9.01036657512e-8)*r20);
IkReal x354=((0.2128)*gclwh4_14);
IkReal x355=((0.2128)*gclwh15_15);
IkReal x356=((1.5627676275e-9)*r20);
IkReal x357=((1.5627676275e-9)*r22);
IkReal x358=((2.0)*pp);
IkReal x359=((0.0007002)*rxp1_2);
IkReal x360=(gclwh11_0*pz);
IkReal x361=((7.8138381375e-10)*r22);
IkReal x362=(gclwh15_15*r20);
IkReal x363=(gclwh15_0*rxp0_2);
IkReal x364=((0.0014004)*rxp0_2);
IkReal x365=(gclwh14_3*rxp0_2);
IkReal x366=(gclwh8_2*pz);
IkReal x367=((2.4514002e-7)*r20);
IkReal x368=((1.47024)*gclwh13_15);
IkReal x369=((0.000378417441104984)*rxp1_2);
IkReal x370=((7.450128e-5)*rxp2_2);
IkReal x371=((1.541244333744e-7)*r22);
IkReal x372=(gclwh5_0*rxp2_2);
IkReal x373=(gclwh10_2*pz);
IkReal x374=((2.4514002e-7)*r21);
IkReal x375=(gclwh9_0*pz);
IkReal x376=((1.5627676275e-9)*r21);
IkReal x377=((0.2128)*gclwh5_15);
IkReal x378=((1.3041449064e-8)*r21);
IkReal x379=(gclwh6_3*r21);
IkReal x380=((7.450128e-5)*rxp1_2);
IkReal x381=((0.000880459488)*rxp0_2);
IkReal x382=((0.000880459488)*rxp2_2);
IkReal x383=((0.000514731024)*rxp2_2);
IkReal x384=(gclwh13_1*rxp1_2);
IkReal x385=(gclwh12_3*rxp1_2);
IkReal x386=(gclwh10_3*r22);
IkReal x387=((0.0007002)*rxp0_2);
IkReal x388=((0.0014004)*rxp1_2);
IkReal x389=(gclwh5_9*x305);
IkReal x390=(gclwh7_13*x322);
IkReal x391=(gclwh5_11*x357);
IkReal x392=(gclwh7_9*x388);
IkReal x393=(gclwh13_11*x376);
IkReal x394=(gclwh13_9*x374);
IkReal x395=(gclwh11_13*x352);
IkReal x396=(gclwh9_13*x349);
IkReal x397=(gclwh15_11*x356);
IkReal x398=(gclwh11_9*x297);
IkReal x399=(gclwh9_9*x364);
IkReal x400=(gclwh15_9*x367);
IkReal x401=(gclwh4_10*x343);
IkReal x402=(gclwh8_10*x304);
IkReal x403=(gclwh8_10*x312);
IkReal x404=((4.463775e-6)*x333);
IkReal x405=(gclwh10_10*x301);
IkReal x406=(gclwh12_10*x359);
IkReal x407=(gclwh6_2*x351);
IkReal x408=((4.21863498e-6)*gclwh14_8*rxp0_2);
IkReal x409=(gclwh10_10*x323);
IkReal x410=(gclwh8_2*x330);
IkReal x411=(gclwh6_10*x299);
IkReal x412=(gclwh14_10*x387);
IkReal x413=(gclwh12_2*x319);
IkReal x414=((4.21863498e-6)*gclwh4_8*rxp2_2);
IkReal x415=(gclwh10_2*x361);
IkReal x416=((4.21863498e-6)*gclwh12_8*rxp1_2);
IkReal x417=((4.463775e-6)*x345);
IkReal x418=((4.463775e-6)*x363);
IkReal x419=(gclwh9_9*x304);
IkReal x420=(gclwh13_9*x359);
IkReal x421=(gclwh7_0*x351);
IkReal x422=(gclwh5_9*x343);
IkReal x423=((4.70891502e-6)*gclwh15_11*rxp0_2);
IkReal x424=(gclwh11_9*x301);
IkReal x425=(gclwh11_9*x323);
IkReal x426=(gclwh9_9*x312);
IkReal x427=(gclwh7_9*x299);
IkReal x428=((4.70891502e-6)*gclwh5_11*rxp2_2);
IkReal x429=(gclwh15_9*x387);
IkReal x430=(gclwh11_0*x361);
IkReal x431=(gclwh9_0*x330);
IkReal x432=((4.70891502e-6)*gclwh13_11*rxp1_2);
IkReal x433=(gclwh13_0*x319);
IkReal x434=((4.463775e-6)*x372);
IkReal x435=((2.0)*x296);
IkReal x436=((4.0)*gclwh15_9*x302);
IkReal x437=((0.0255)*gclwh15_11*x302);
IkReal x438=((2.0)*gclwh13_9*x308);
IkReal x439=((0.01275)*gclwh13_11*x308);
IkReal x440=((0.01275)*gclwh5_11*x301);
IkReal x441=((2.0)*gclwh5_9*x301);
IkReal x442=((0.0255)*gclwh5_11*x307);
IkReal x443=((4.0)*gclwh13_9*x298);
IkReal x444=((4.0)*gclwh5_9*x307);
IkReal x445=((0.0255)*gclwh13_11*x298);
IkReal x446=((2.0)*gclwh15_9*x304);
IkReal x447=((0.01275)*gclwh15_11*x304);
IkReal x448=(x316*x365);
IkReal x449=((0.01275)*gclwh8_2*x302);
IkReal x450=(gclwh12_2*rxp1_2*x331);
IkReal x451=((2.0)*gclwh6_10*x298);
IkReal x452=(x295*x379);
IkReal x453=(x301*x373);
IkReal x454=(x312*x366);
IkReal x455=(x331*x345);
IkReal x456=(x323*x373);
IkReal x457=((0.01275)*gclwh10_2*x307);
IkReal x458=(x304*x366);
IkReal x459=((0.006375)*gclwh6_2*x308);
IkReal x460=(x331*x333);
IkReal x461=((0.006375)*gclwh8_2*x304);
IkReal x462=((2.0)*gclwh8_10*x302);
IkReal x463=(x316*x385);
IkReal x464=(x316*x324);
IkReal x465=((2.0)*gclwh10_10*x307);
IkReal x466=((0.006375)*gclwh10_2*x301);
IkReal x467=((1.0)*gclwh6_10*x308);
IkReal x468=((0.01275)*gclwh6_2*x298);
IkReal x469=(x299*x344);
IkReal x470=((0.006375)*gclwh7_0*x308);
IkReal x471=(x312*x375);
IkReal x472=(gclwh13_0*rxp1_2*x331);
IkReal x473=((0.01275)*gclwh9_0*x302);
IkReal x474=(x316*x327);
IkReal x475=(x301*x360);
IkReal x476=((2.0)*gclwh7_9*x298);
IkReal x477=(x331*x372);
IkReal x478=(x323*x360);
IkReal x479=((0.01275)*gclwh11_0*x307);
IkReal x480=(x304*x375);
IkReal x481=(x315*x316);
IkReal x482=((0.01275)*gclwh7_0*x298);
IkReal x483=((2.0)*gclwh9_9*x302);
IkReal x484=(x299*x300);
IkReal x485=(x331*x363);
IkReal x486=((1.0)*gclwh7_9*x308);
IkReal x487=((2.0)*gclwh11_9*x307);
IkReal x488=((0.006375)*gclwh11_0*x301);
IkReal x489=((0.006375)*gclwh9_0*x304);
IkReal x490=(x316*x384);
IkReal x491=(gclwh6_2*npy*x435);
IkReal x492=(gclwh10_3*x307*x358);
IkReal x493=((1.0)*x295*x386);
IkReal x494=(gclwh6_3*x298*x358);
IkReal x495=((1.0)*x308*x344);
IkReal x496=(gclwh10_2*npz*x435);
IkReal x497=(gclwh8_2*npx*x435);
IkReal x498=(gclwh7_0*npy*x435);
IkReal x499=(gclwh9_0*npx*x435);
IkReal x500=(gclwh11_0*npz*x435);
IkReal x501=((1.0)*x300*x308);
IkReal x502=(x389+x394+x391+x390+x393+x392+x438+x439+x436+x437+x441+x440);
IkReal x503=(x395+x397+x396+x399+x398+x400+x445+x444+x447+x446+x443+x442);
IkReal x504=(x480+x498+x418+x419+x426+x425+x424+x423+x422+x421+x420+x474+x475+x476+x477+x470+x471+x472+x473+x478+x479);
IkReal x505=(x489+x488+x481+x483+x482+x485+x484+x487+x486+x499+x490+x429+x428+x427+x430+x431+x432+x433+x434+x500+x501);
IkReal x506=(x492+x491+x401+x403+x402+x405+x404+x407+x406+x409+x408+x449+x448+x458+x459+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x507=(x493+x496+x497+x494+x495+x412+x413+x410+x411+x416+x417+x414+x415+x469+x468+x463+x462+x461+x460+x467+x466+x465+x464);
op[39]=((-0.03206472)+(((-0.01603236)*gclwh4_3*x301))+(((-1.0)*gclwh12_2*x329))+(((1.25744)*gclwh14_2*x304))+(((-1.25744)*gclwh4_2*x301))+(((-0.01603236)*gclwh1_3*x304))+(((-0.01603236)*gclwh3_3*x308))+((gclwh3_2*x329))+((gclwh1_2*x309))+(((0.03206472)*gclwh3_3*x298))+(((-1.1225858472e-5)*gclwh6_3*rxp1_2))+(((2.51488)*gclwh3_2*x298))+(((-0.03206472)*gclwh14_3*x302))+(((-1.0)*gclwh4_3*x337))+(((-1.25744)*gclwh1_2*x304))+(((-1.0)*gclwh4_2*x371))+((gclwh8_2*x381))+((gclwh1_3*x338))+((gclwh3_3*x310))+(((-1.0)*gclwh6_2*x313))+(((-1.0)*gclwh12_3*x310))+((gclwh10_2*x382))+(((0.01603236)*gclwh14_3*x304))+(((0.03206472)*gclwh12_3*x298))+(((1.1225858472e-5)*gclwh10_3*rxp2_2))+(((2.51488)*gclwh4_2*x307))+(((-2.51488)*gclwh14_2*x302))+((gclwh14_3*x338))+(((-1.25744)*gclwh3_2*x308))+((gclwh14_2*x309))+(((-0.01603236)*gclwh12_3*x308))+(((-1.25744)*gclwh12_2*x308))+(((2.51488)*gclwh1_2*x302))+(((0.03206472)*gclwh1_3*x302))+(((0.03206472)*gclwh4_3*x307))+(((2.51488)*gclwh12_2*x298)));
op[40]=((-0.02288576375)+(((-1.0)*gclwh10_12*x352))+(((-1.0)*gclwh4_8*x357))+(((-4.0)*gclwh14_10*x302))+((gclwh6_12*x322))+((gclwh14_8*x356))+(((0.0255)*gclwh12_8*x298))+(((-1.0)*gclwh6_10*x388))+(((-1.0)*gclwh8_12*x349))+(((-2.0)*gclwh4_10*x301))+(((4.0)*gclwh12_10*x298))+(((-0.01275)*gclwh4_8*x301))+(((0.0255)*gclwh4_8*x307))+(((-1.0)*gclwh12_10*x374))+(((-1.0)*gclwh12_8*x376))+(((0.01275)*gclwh14_8*x304))+(((-2.0)*gclwh12_10*x308))+(((-1.0)*gclwh4_10*x305))+(((-0.0255)*gclwh14_8*x302))+(((4.0)*gclwh4_10*x307))+(((2.0)*gclwh14_10*x304))+((gclwh14_10*x367))+((gclwh8_10*x364))+((gclwh10_10*x297))+(((-0.01275)*gclwh12_8*x308)));
op[41]=((((0.4256)*gclwh12_14*x298))+(((-1.0)*gclwh4_14*x317))+(((-2.6082898128e-8)*gclwh12_14*r21))+(((-1.0)*x308*x311))+((x304*x336))+(((-1.0)*x301*x354))+(((2.6082898128e-8)*x341))+(((-0.4256)*gclwh14_14*x302))+(((0.4256)*gclwh4_14*x307)));
op[42]=((((2.94048)*gclwh5_15*x307))+(((-1.802073315024e-7)*x350))+(((-1.0)*x308*x368))+(((-1.0)*x301*x347))+(((2.94048)*gclwh13_15*x298))+(((1.802073315024e-7)*x362))+((x304*x339))+(((-2.94048)*gclwh15_15*x302))+(((-1.802073315024e-7)*x334)));
op[43]=((-1.08104667255)+(((-1.0)*x502))+x503);
op[44]=((-0.03206472)+(((1.25744)*gclwh2_0*x308))+(((-0.03206472)*gclwh0_1*x302))+(((-1.0)*gclwh2_0*x329))+(((0.03206472)*gclwh13_1*x298))+(((0.01603236)*gclwh15_1*x304))+(((0.01603236)*gclwh2_1*x308))+(((0.03206472)*gclwh5_1*x307))+(((-2.51488)*gclwh2_0*x298))+(((-0.03206472)*gclwh15_1*x302))+(((-2.51488)*gclwh0_0*x302))+(((-1.0)*gclwh5_0*x371))+(((-0.01603236)*gclwh5_1*x301))+(((1.25744)*gclwh0_0*x304))+(((-1.0)*gclwh0_1*x338))+(((-1.25744)*gclwh5_0*x301))+(((-0.01603236)*gclwh13_1*x308))+(((-1.0)*gclwh7_0*x313))+(((-1.0)*gclwh0_0*x309))+(((1.25744)*gclwh15_0*x304))+(((-1.0)*gclwh13_1*x310))+(((2.51488)*gclwh13_0*x298))+(((-1.0)*gclwh2_1*x310))+(((2.51488)*gclwh5_0*x307))+(((-2.51488)*gclwh15_0*x302))+(((-1.25744)*gclwh13_0*x308))+(((-0.03206472)*gclwh2_1*x298))+(((0.01603236)*gclwh0_1*x304))+(((-1.0)*gclwh13_0*x329))+((gclwh9_0*x381))+((gclwh11_0*x382))+((gclwh15_0*x309))+(((-1.0)*gclwh5_1*x337))+((gclwh15_1*x338)));
op[45]=((((-0.102)*gclwh5_15*x307))+(((6.25107051e-9)*x334))+(((-0.0028008)*gclwh9_6*rxp0_2))+(((4.9028004e-7)*gclwh13_6*r21))+(((0.051)*gclwh13_15*x308))+(((-1.0)*gclwh7_7*x322))+(((-6.25107051e-9)*x362))+(((4.0)*gclwh5_6*x301))+(((8.0)*gclwh15_6*x302))+((gclwh11_7*x352))+(((4.0)*gclwh13_6*x308))+(((0.102)*gclwh15_15*x302))+(((0.0028008)*gclwh7_6*rxp1_2))+(((6.25107051e-9)*x350))+(((-4.9028004e-7)*gclwh15_6*r20))+(((0.051)*gclwh5_15*x301))+(((-4.0)*gclwh15_6*x304))+((gclwh9_7*x349))+(((-0.0028008)*gclwh11_6*rxp2_2))+(((-8.0)*gclwh5_6*x307))+(((-8.0)*gclwh13_6*x298))+(((4.9028004e-7)*gclwh5_6*r22))+(((-0.051)*gclwh15_15*x304))+(((-0.102)*gclwh13_15*x298)));
op[46]=((((2.6082898128e-8)*x362))+(((0.4256)*gclwh5_15*x307))+((x304*x355))+(((0.4256)*gclwh13_15*x298))+(((-1.0)*gclwh5_15*x317))+(((-1.0)*x308*x320))+(((-1.0)*x301*x377))+(((-0.4256)*gclwh15_15*x302))+(((-2.6082898128e-8)*x334)));
op[47]=((0.02288576375)+(((-1.0)*x503))+x502);
op[48]=((-0.00937278)+((gclwh4_14*x383))+(((0.73512)*gclwh8_5*x304))+(((-1.47024)*gclwh10_5*x307))+(((-1.0)*gclwh6_5*x335))+(((-1.0)*gclwh14_14*x325))+((gclwh10_5*x328))+(((0.73512)*gclwh10_5*x301))+(((0.000514731024)*x321))+(((1.47024)*gclwh6_5*x298))+(((-1.47024)*gclwh8_5*x302))+(((-0.73512)*gclwh6_5*x308))+(((9.01036657512e-8)*x332)));
op[49]=((((-1.08088386490998)*gclwh10_3*x307))+(((-6.62419730654274e-8)*x379))+(((6.62419730654274e-8)*x386))+(((-1.0)*x507))+(((0.000378417441104984)*x324))+(((-0.54044180988498)*gclwh6_3*x308))+(((1.08088386490998)*gclwh6_3*x298))+x506+((gclwh12_3*x369))+(((0.54044180988498)*gclwh10_3*x301))+(((-0.000378417441104984)*x365)));
op[50]=(((gclwh6_12*x340))+(((0.84152)*gclwh6_12*x308))+(((-1.0)*gclwh8_12*x303))+(((-0.84152)*gclwh8_12*x304))+(((1.68304)*gclwh10_12*x307))+(((-1.0)*gclwh10_12*x348))+((gclwh12_8*x306))+(((-0.84152)*gclwh10_12*x301))+((gclwh4_8*x318))+(((-1.68304)*gclwh6_12*x298))+(((-1.0)*gclwh14_8*x326))+(((1.68304)*gclwh8_12*x302)));
op[51]=0;
op[52]=((0.0013566)+((gclwh6_5*x378))+(((-1.0)*gclwh10_5*x342))+(((0.2128)*gclwh8_5*x302))+(((0.1064)*gclwh6_5*x308))+(((-0.2128)*gclwh6_5*x298))+(((-1.0)*gclwh4_14*x370))+(((-7.450128e-5)*x321))+(((-1.3041449064e-8)*x332))+(((-0.1064)*gclwh8_5*x304))+((gclwh14_14*x314))+(((0.2128)*gclwh10_5*x307))+(((-0.1064)*gclwh10_5*x301)));
op[53]=((((0.02272295610998)*gclwh6_3*x298))+(((-1.0)*x507))+(((7.955306934104e-6)*x324))+(((0.01136135548498)*gclwh10_3*x301))+(((-0.01136135548498)*gclwh6_3*x308))+(((-1.3925764788149e-9)*x379))+(((1.3925764788149e-9)*x386))+x506+(((7.955306934104e-6)*x385))+(((-7.955306934104e-6)*x365))+(((-0.02272295610998)*gclwh10_3*x307)));
op[54]=((((-1.0)*x505))+((gclwh13_1*x369))+(((-0.000378417441104984)*x327))+(((0.000378417441104984)*x315))+x504);
op[55]=((-0.00937278)+(((0.73512)*gclwh11_7*x301))+(((-1.0)*gclwh5_15*x383))+(((-1.0)*gclwh13_15*x346))+((gclwh11_7*x328))+(((-0.73512)*gclwh7_7*x308))+(((1.47024)*gclwh7_7*x298))+(((-1.47024)*gclwh11_7*x307))+((gclwh15_15*x325))+(((-1.47024)*gclwh9_7*x302))+(((0.73512)*gclwh9_7*x304))+((gclwh9_7*x353))+(((-1.0)*gclwh7_7*x335)));
op[56]=0;
op[57]=((((0.84152)*gclwh7_13*x308))+((gclwh15_11*x326))+(((1.68304)*gclwh9_13*x302))+(((1.68304)*gclwh11_13*x307))+(((-1.0)*gclwh5_11*x318))+(((-0.84152)*gclwh11_13*x301))+(((-0.84152)*gclwh9_13*x304))+(((-1.0)*gclwh11_13*x348))+(((-1.68304)*gclwh7_13*x298))+(((-1.0)*gclwh9_13*x303))+((gclwh7_13*x340))+(((-1.0)*gclwh13_11*x306)));
op[58]=((((-1.0)*x505))+(((-7.955306934104e-6)*x327))+x504+(((7.955306934104e-6)*x315))+(((7.955306934104e-6)*x384)));
op[59]=((0.0013566)+(((0.2128)*gclwh11_7*x307))+(((0.1064)*gclwh7_7*x308))+((gclwh13_15*x380))+(((-1.0)*gclwh15_15*x314))+((gclwh5_15*x370))+(((0.2128)*gclwh9_7*x302))+(((-0.1064)*gclwh11_7*x301))+(((-0.1064)*gclwh9_7*x304))+(((-1.0)*gclwh11_7*x342))+(((-0.2128)*gclwh7_7*x298))+((gclwh7_7*x378))+(((-1.3041449064e-8)*gclwh9_7*r20)));
op[60]=((((-0.73512)*gclwh12_14*x308))+(((-1.0)*gclwh4_14*x328))+(((1.47024)*gclwh4_14*x307))+((gclwh10_5*x383))+((gclwh8_5*x325))+(((-1.47024)*gclwh14_14*x302))+(((0.73512)*gclwh14_14*x304))+(((9.01036657512e-8)*x341))+(((-0.73512)*gclwh4_14*x301))+(((1.47024)*gclwh12_14*x298))+(((-1.0)*gclwh6_5*x346))+(((-1.0)*gclwh12_14*x335)));
op[61]=((-0.540360773775)+(((-0.01275)*gclwh3_2*npy*pz))+(((2.0)*gclwh12_10*npy*pz))+(((1.2257001e-7)*gclwh1_2*pz*r20))+(((-0.0120498)*gclwh4_8*npz*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+(((-0.54044180988498)*gclwh12_3*pp*r21))+((gclwh14_2*pp*pz*r20))+(((-7.8138381375e-10)*gclwh1_2*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-4.463775e-6)*gclwh8_2*rxp0_2))+(((-0.006375)*gclwh14_2*pp*r20))+(((1.2257001e-7)*gclwh14_10*r20))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.540442055025)*gclwh3_3*pp*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-6.62419730654274e-8)*gclwh12_3*r21))+(((-0.01275)*gclwh1_2*npx*pz))+(((-6.62419730654274e-8)*gclwh4_3*r22))+(((-7.8138381375e-10)*gclwh14_2*r20))+(((-1.2257001e-7)*gclwh12_10*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.0007002)*pz))+(((1.08088386490998)*gclwh3_3*npy*pz))+(((6.62419730654274e-8)*gclwh14_3*r20))+(((0.01275)*gclwh14_2*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.0007002)*gclwh10_2*pz*rxp2_2))+(((-0.01275)*gclwh4_2*npz*pz))+(((0.0060249)*gclwh4_8*pp*r22))+(((-7.8138381375e-10)*gclwh3_2*r21))+(((0.006375)*gclwh1_2*pp*r20))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.0007002)*gclwh10_10*rxp2_2))+(((4.463775e-6)*gclwh6_2*rxp1_2))+(((-0.0120498)*gclwh12_8*npy*pz))+(((0.006375)*gclwh12_2*pp*r21))+(((-7.38472053249e-10)*gclwh14_8*r20))+(((1.08088386490998)*gclwh1_3*npx*pz))+(((-0.0007002)*gclwh6_2*pz*rxp1_2))+(((0.0007002)*gclwh8_2*pz*rxp0_2))+(((1.2257001e-7)*gclwh14_2*pz*r20))+(((0.54044180988498)*gclwh14_3*pp*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.0007002)*gclwh6_10*rxp1_2))+(((-1.2257001e-7)*gclwh12_2*pz*r21))+(((-0.0007002)*gclwh10_3*pp*rxp2_2))+((gclwh14_10*pp*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((0.0007002)*gclwh8_10*rxp0_2))+(((1.08088386490998)*gclwh12_3*npy*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-1.08088386490998)*gclwh14_3*npx*pz))+(((-0.0060249)*gclwh14_8*pp*r20))+(((7.8138381375e-10)*gclwh12_2*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0120498)*gclwh14_8*npx*pz))+(((1.08088386490998)*gclwh4_3*npz*pz))+(((7.38472053249e-10)*gclwh4_8*r22))+(((-0.01275)*gclwh12_2*npy*pz))+(((6.62419730654274e-8)*gclwh3_3*r21))+(((0.0060249)*gclwh12_8*pp*r21))+(((6.62419730654274e-8)*gclwh1_3*r20))+(((-1.0)*gclwh12_10*pp*r21))+(((7.38472053249e-10)*gclwh12_8*r21))+(((-0.54044180988498)*gclwh4_3*pp*r22))+(((1.2257001e-7)*gclwh3_2*pz*r21))+(((0.006375)*gclwh3_2*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.2257001e-7)*gclwh4_2*pz*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.2257001e-7)*gclwh4_10*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((7.8138381375e-10)*gclwh4_2*r22))+(((0.000378417441104984)*gclwh10_3*rxp2_2))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0007002)*gclwh6_3*pp*rxp1_2))+(((0.006375)*gclwh4_2*pp*r22))+(((-0.540442055025)*gclwh1_3*pp*r20))+(((-2.0)*gclwh14_10*npx*pz))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.000378417441104984)*gclwh6_3*rxp1_2))+(((2.0)*gclwh4_10*npz*pz))+(((-1.0)*gclwh4_10*pp*r22))+(((-4.463775e-6)*gclwh10_2*rxp2_2)));
op[62]=((-0.01072938)+(((1.68304)*gclwh12_8*x298))+(((-1.0)*gclwh8_12*x326))+(((-0.84152)*gclwh12_8*x308))+(((-1.0)*gclwh10_12*x318))+(((0.84152)*gclwh14_8*x304))+(((-1.0)*gclwh4_8*x348))+(((1.68304)*gclwh4_8*x307))+(((-1.0)*gclwh12_8*x340))+((gclwh14_8*x303))+(((-1.68304)*gclwh14_8*x302))+(((-0.84152)*gclwh4_8*x301))+((gclwh6_12*x306)));
op[63]=0;
op[64]=((((0.1064)*gclwh12_14*x308))+(((0.1064)*gclwh4_14*x301))+(((-1.0)*x307*x354))+((gclwh4_14*x342))+((x302*x336))+(((-1.3041449064e-8)*x341))+((gclwh6_5*x380))+((gclwh12_14*x378))+(((-0.1064)*gclwh14_14*x304))+(((-1.0)*x298*x311))+(((-1.0)*gclwh8_5*x314))+(((-1.0)*gclwh10_5*x370)));
op[65]=((-0.011280319375)+(((-7.955306934104e-6)*gclwh6_3*rxp1_2))+(((-0.01275)*gclwh3_2*npy*pz))+(((2.0)*gclwh12_10*npy*pz))+(((1.2257001e-7)*gclwh1_2*pz*r20))+(((-0.0120498)*gclwh4_8*npz*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((-7.8138381375e-10)*gclwh1_2*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-4.463775e-6)*gclwh8_2*rxp0_2))+(((-0.006375)*gclwh14_2*pp*r20))+(((1.2257001e-7)*gclwh14_10*r20))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.01275)*gclwh1_2*npx*pz))+(((-7.8138381375e-10)*gclwh14_2*r20))+(((-1.2257001e-7)*gclwh12_10*r21))+((gclwh12_3*r21*(pp*pp)))+(((0.02272295610998)*gclwh12_3*npy*pz))+(((-0.0007002)*pz))+(((0.02272295610998)*gclwh4_3*npz*pz))+(((0.01275)*gclwh14_2*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.0007002)*gclwh10_2*pz*rxp2_2))+(((-0.01275)*gclwh4_2*npz*pz))+(((0.0060249)*gclwh4_8*pp*r22))+(((-7.8138381375e-10)*gclwh3_2*r21))+(((0.006375)*gclwh1_2*pp*r20))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((0.0007002)*gclwh10_10*rxp2_2))+(((0.02272295610998)*gclwh3_3*npy*pz))+(((-0.011361600625)*gclwh1_3*pp*r20))+(((4.463775e-6)*gclwh6_2*rxp1_2))+(((-0.0120498)*gclwh12_8*npy*pz))+(((0.006375)*gclwh12_2*pp*r21))+(((-7.38472053249e-10)*gclwh14_8*r20))+(((-0.0007002)*gclwh6_2*pz*rxp1_2))+(((0.0007002)*gclwh8_2*pz*rxp0_2))+(((0.01136135548498)*gclwh14_3*pp*r20))+(((1.3925764788149e-9)*gclwh14_3*r20))+(((1.2257001e-7)*gclwh14_2*pz*r20))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.0007002)*gclwh6_10*rxp1_2))+(((-1.2257001e-7)*gclwh12_2*pz*r21))+(((-0.0007002)*gclwh10_3*pp*rxp2_2))+((gclwh14_10*pp*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((0.0007002)*gclwh8_10*rxp0_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.0060249)*gclwh14_8*pp*r20))+(((-0.02272295610998)*gclwh14_3*npx*pz))+(((7.8138381375e-10)*gclwh12_2*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0120498)*gclwh14_8*npx*pz))+(((7.38472053249e-10)*gclwh4_8*r22))+(((-0.01275)*gclwh12_2*npy*pz))+(((0.0060249)*gclwh12_8*pp*r21))+(((7.955306934104e-6)*gclwh10_3*rxp2_2))+(((-1.0)*gclwh12_10*pp*r21))+(((7.38472053249e-10)*gclwh12_8*r21))+(((-0.01136135548498)*gclwh4_3*pp*r22))+(((1.2257001e-7)*gclwh3_2*pz*r21))+(((0.006375)*gclwh3_2*pp*r21))+((gclwh4_3*r22*(pp*pp)))+(((0.02272295610998)*gclwh1_3*npx*pz))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.3925764788149e-9)*gclwh4_3*r22))+(((-1.2257001e-7)*gclwh4_2*pz*r22))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((-1.2257001e-7)*gclwh4_10*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((1.3925764788149e-9)*gclwh1_3*r20))+(((7.8138381375e-10)*gclwh4_2*r22))+(((-0.01136135548498)*gclwh12_3*pp*r21))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.0007002)*gclwh6_3*pp*rxp1_2))+(((1.3925764788149e-9)*gclwh3_3*r21))+(((0.006375)*gclwh4_2*pp*r22))+(((-2.0)*gclwh14_10*npx*pz))+(((-0.011361600625)*gclwh3_3*pp*r21))+(((-1.3925764788149e-9)*gclwh12_3*r21))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((2.0)*gclwh4_10*npz*pz))+(((-1.0)*gclwh4_10*pp*r22))+(((-4.463775e-6)*gclwh10_2*rxp2_2)));
op[66]=((-0.540360773775)+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((1.08088386490998)*gclwh13_1*npy*pz))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-8.24295574251e-10)*gclwh15_11*r20))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.08088386490998)*gclwh15_1*npx*pz))+(((-1.2257001e-7)*gclwh2_0*pz*r21))+(((0.0007002)*gclwh9_9*rxp0_2))+(((2.0)*gclwh13_9*npy*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.01275)*gclwh2_0*npy*pz))+(((7.8138381375e-10)*gclwh0_0*r20))+((gclwh2_0*pp*pz*r21))+(((0.006375)*gclwh13_0*pp*r21))+(((-1.2257001e-7)*gclwh0_0*pz*r20))+(((-6.62419730654274e-8)*gclwh13_1*r21))+((gclwh0_0*pp*pz*r20))+(((-0.01275)*gclwh5_0*npz*pz))+(((-6.62419730654274e-8)*gclwh5_1*r22))+(((4.463775e-6)*gclwh7_0*rxp1_2))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((1.2257001e-7)*gclwh15_9*r20))+(((0.01275)*gclwh15_0*npx*pz))+(((-0.0134502)*gclwh13_11*npy*pz))+(((-1.2257001e-7)*gclwh13_0*pz*r21))+(((-1.2257001e-7)*gclwh13_9*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh15_9*pp*r20))+(((8.24295574251e-10)*gclwh5_11*r22))+(((0.540442055025)*gclwh2_1*pp*r21))+(((-7.8138381375e-10)*gclwh15_0*r20))+(((0.0007002)*gclwh11_0*pz*rxp2_2))+(((0.01275)*gclwh0_0*npx*pz))+(((1.2257001e-7)*gclwh15_0*pz*r20))+(((-0.54044180988498)*gclwh5_1*pp*r22))+(((0.0134502)*gclwh15_11*npx*pz))+(((0.0007002)*pz))+(((-0.006375)*gclwh0_0*pp*r20))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.0067251)*gclwh15_11*pp*r20))+(((-1.08088386490998)*gclwh0_1*npx*pz))+(((8.24295574251e-10)*gclwh13_11*r21))+(((-2.0)*gclwh15_9*npx*pz))+(((-1.2257001e-7)*gclwh5_9*r22))+(((-0.006375)*gclwh15_0*pp*r20))+(((0.0067251)*gclwh13_11*pp*r21))+(((1.08088386490998)*gclwh5_1*npz*pz))+(((7.8138381375e-10)*gclwh5_0*r22))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((0.54044180988498)*gclwh15_1*pp*r20))+(((6.62419730654274e-8)*gclwh15_1*r20))+(((7.8138381375e-10)*gclwh2_0*r21))+(((-6.62419730654274e-8)*gclwh0_1*r20))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-0.0134502)*gclwh5_11*npz*pz))+(((0.0007002)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0007002)*gclwh7_0*pz*rxp1_2))+(((-0.006375)*gclwh2_0*pp*r21))+(((-0.0007002)*gclwh7_9*rxp1_2))+(((-1.2257001e-7)*gclwh5_0*pz*r22))+(((-4.463775e-6)*gclwh9_0*rxp0_2))+(((-4.463775e-6)*gclwh11_0*rxp2_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.0067251)*gclwh5_11*pp*r22))+(((-0.54044180988498)*gclwh13_1*pp*r21))+(((0.540442055025)*gclwh0_1*pp*r20))+(((-1.0)*gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((7.8138381375e-10)*gclwh13_0*r21))+(((0.0007002)*gclwh11_9*rxp2_2))+(((-1.0)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-0.01275)*gclwh13_0*npy*pz))+(((0.006375)*gclwh5_0*pp*r22))+(((-6.62419730654274e-8)*gclwh2_1*r21))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.08088386490998)*gclwh2_1*npy*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[67]=((((-1.0)*x307*x347))+(((0.73512)*gclwh5_15*x301))+((gclwh11_7*x383))+(((0.73512)*gclwh13_15*x308))+((x302*x339))+(((-1.0)*gclwh15_15*x353))+(((-1.0)*gclwh7_7*x346))+((gclwh5_15*x328))+(((9.01036657512e-8)*x334))+((gclwh9_7*x325))+(((-1.0)*x298*x368))+(((-0.73512)*gclwh15_15*x304)));
op[68]=0;
op[69]=((0.01072938)+(((1.68304)*gclwh15_11*x302))+(((-1.68304)*gclwh5_11*x307))+((gclwh7_13*x306))+(((-1.0)*gclwh15_11*x303))+(((-0.84152)*gclwh15_11*x304))+((gclwh13_11*x340))+(((-1.68304)*gclwh13_11*x298))+(((-1.0)*gclwh9_13*x326))+(((0.84152)*gclwh13_11*x308))+(((-1.0)*gclwh11_13*x318))+((gclwh5_11*x348))+(((0.84152)*gclwh5_11*x301)));
op[70]=((-0.011280319375)+(((2.0)*gclwh2_1*npy*pp*pz))+(((2.0)*gclwh5_9*npz*pz))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-8.24295574251e-10)*gclwh15_11*r20))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.2257001e-7)*gclwh2_0*pz*r21))+(((0.0007002)*gclwh9_9*rxp0_2))+(((2.0)*gclwh13_9*npy*pz))+(((-0.02272295610998)*gclwh0_1*npx*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.01275)*gclwh2_0*npy*pz))+(((7.8138381375e-10)*gclwh0_0*r20))+(((-0.01136135548498)*gclwh13_1*pp*r21))+((gclwh2_0*pp*pz*r21))+(((0.006375)*gclwh13_0*pp*r21))+(((-1.2257001e-7)*gclwh0_0*pz*r20))+((gclwh0_0*pp*pz*r20))+(((-0.01275)*gclwh5_0*npz*pz))+(((4.463775e-6)*gclwh7_0*rxp1_2))+(((-1.3925764788149e-9)*gclwh13_1*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((1.2257001e-7)*gclwh15_9*r20))+(((0.01275)*gclwh15_0*npx*pz))+(((-0.0134502)*gclwh13_11*npy*pz))+(((-1.2257001e-7)*gclwh13_0*pz*r21))+(((-1.2257001e-7)*gclwh13_9*r21))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.011361600625)*gclwh0_1*pp*r20))+((gclwh15_9*pp*r20))+(((8.24295574251e-10)*gclwh5_11*r22))+(((-1.3925764788149e-9)*gclwh2_1*r21))+(((-7.8138381375e-10)*gclwh15_0*r20))+(((0.0007002)*gclwh11_0*pz*rxp2_2))+(((0.01275)*gclwh0_0*npx*pz))+(((0.011361600625)*gclwh2_1*pp*r21))+(((1.2257001e-7)*gclwh15_0*pz*r20))+(((0.0134502)*gclwh15_11*npx*pz))+(((-0.01136135548498)*gclwh5_1*pp*r22))+(((0.0007002)*pz))+(((-0.006375)*gclwh0_0*pp*r20))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.0067251)*gclwh15_11*pp*r20))+(((8.24295574251e-10)*gclwh13_11*r21))+(((-2.0)*gclwh15_9*npx*pz))+(((-1.2257001e-7)*gclwh5_9*r22))+(((-0.006375)*gclwh15_0*pp*r20))+(((0.0067251)*gclwh13_11*pp*r21))+(((0.02272295610998)*gclwh5_1*npz*pz))+(((7.8138381375e-10)*gclwh5_0*r22))+(((0.02272295610998)*gclwh13_1*npy*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((7.8138381375e-10)*gclwh2_0*r21))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((1.3925764788149e-9)*gclwh15_1*r20))+(((-0.0134502)*gclwh5_11*npz*pz))+(((0.0007002)*gclwh9_0*pz*rxp0_2))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.0007002)*gclwh7_0*pz*rxp1_2))+(((-0.02272295610998)*gclwh15_1*npx*pz))+(((-0.006375)*gclwh2_0*pp*r21))+(((0.01136135548498)*gclwh15_1*pp*r20))+(((-0.0007002)*gclwh7_9*rxp1_2))+(((-1.2257001e-7)*gclwh5_0*pz*r22))+(((-4.463775e-6)*gclwh9_0*rxp0_2))+(((-4.463775e-6)*gclwh11_0*rxp2_2))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-1.3925764788149e-9)*gclwh5_1*r22))+(((0.0067251)*gclwh5_11*pp*r22))+(((-0.02272295610998)*gclwh2_1*npy*pz))+(((-1.3925764788149e-9)*gclwh0_1*r20))+(((-1.0)*gclwh13_9*pp*r21))+((gclwh5_1*r22*(pp*pp)))+(((7.8138381375e-10)*gclwh13_0*r21))+(((0.0007002)*gclwh11_9*rxp2_2))+(((-1.0)*gclwh5_9*pp*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-0.01275)*gclwh13_0*npy*pz))+(((0.006375)*gclwh5_0*pp*r22))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[71]=((((1.3041449064e-8)*x362))+(((-1.0)*x302*x355))+(((-1.0)*gclwh5_15*x342))+(((-0.1064)*gclwh13_15*x308))+(((-1.0)*gclwh9_7*x314))+(((0.1064)*gclwh15_15*x304))+(((-0.1064)*gclwh5_15*x301))+((x307*x377))+(((-1.0)*gclwh11_7*x370))+((gclwh7_7*x380))+((x298*x320))+(((-1.3041449064e-8)*x334)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16], j4array[16], cj4array[16], sj4array[16];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ij2 += 3)
{
IkReal htj2 = zeror[ij2+0], htj3 = zeror[ij2+1], htj4 = zeror[ij2+2];
if(isnan(htj2)||isnan(htj3)||isnan(htj4)){
continue;
}
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
j4array[numsolutions]=((2.0)*(atan(htj4)));
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x508=htj2*htj2;
CheckValue<IkReal> x509=IKPowWithIntegerCheck(((1.0)+x508),-1);
if(!x509.valid){
continue;
}
cj2array[numsolutions]=((x509.value)*(((1.0)+(((-1.0)*x508)))));
CheckValue<IkReal> x510=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x510.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x510.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x511=htj3*htj3;
CheckValue<IkReal> x512=IKPowWithIntegerCheck(((1.0)+x511),-1);
if(!x512.valid){
continue;
}
cj3array[numsolutions]=((x512.value)*(((1.0)+(((-1.0)*x511)))));
CheckValue<IkReal> x513=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x513.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x513.value));
}
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x514=htj4*htj4;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(((1.0)+x514),-1);
if(!x515.valid){
continue;
}
cj4array[numsolutions]=((x515.value)*(((1.0)+(((-1.0)*x514)))));
CheckValue<IkReal> x516=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x516.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x516.value));
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j2valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj2 = 16;
_nj3 = 1;
_nj4 = 1;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
_ij4[0] = 0; _ij4[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( !j2valid[iij2] ) { continue; }
if( IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij2]-cj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij2]-sj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj4array[ij2]-cj4array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij2]-sj4array[iij2]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j2valid[iij2]=false; _ij2[1] = iij2; _ij3[1] = 0; _ij4[1] = 0;  break; 
}
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

    j3 = j3array[ij2]; cj3 = cj3array[ij2]; sj3 = sj3array[ij2];

    j4 = j4array[ij2]; cj4 = cj4array[ij2]; sj4 = sj4array[ij2];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[2];
j6eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j6eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x517=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x517);
rxp1_0=(pz*r11);
rxp1_1=(r01*x517);
j5eval[0]=r22;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x518=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x518);
rxp1_0=(pz*r11);
rxp1_1=(r01*x518);
j5eval[0]=cj4;
j5eval[1]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x521=IKPowWithIntegerCheck(r22,-1);
if(!x521.valid){
continue;
}
IkReal x519=x521.value;
IkReal x520=(sj2*x519);
CheckValue<IkReal> x522=IKPowWithIntegerCheck(cj4,-1);
if(!x522.valid){
continue;
}
if( IKabs((cj3*x520*(x522.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj3*x520)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj3*x520*(x522.value)))+IKsqr((sj3*x520))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj3*x520*(x522.value)), (sj3*x520));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x523=IKsin(j5);
IkReal x524=(r22*x523);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*(IKcos(j5)))));
evalcond[1]=(((sj4*x524))+(((-1.0)*cj2)));
evalcond[2]=(((cj4*x524))+(((-1.0)*cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x525=cj3*cj3;
IkReal x526=cj2*cj2;
IkReal x527=sj3*sj3;
IkReal x528=((8.0)*r01);
IkReal x529=(cj5*sj2);
IkReal x530=((12.0)*r02);
IkReal x531=(cj2*sj3);
IkReal x532=((4.0)*r00);
IkReal x533=(cj3*r12);
IkReal x534=(cj4*r00);
IkReal x535=((4.0)*r02);
IkReal x536=(sj2*sj5);
IkReal x537=(cj5*sj4);
IkReal x538=(cj3*r11);
IkReal x539=((16.0)*r01);
IkReal x540=(sj4*sj5);
IkReal x541=((4.0)*cj4*r01);
IkReal x542=(x525*x537);
IkReal x543=(x525*x540);
IkReal x544=(x526*x527);
IkReal x545=((4.0)*cj3*r10*x536);
IkReal x546=(x525*x541);
IkReal x547=((12.0)*x529*x533);
IkReal x548=((4.0)*x529*x533);
IkReal x549=(x531*x532*x536);
IkReal x550=(x532*x542);
IkReal x551=(x530*x543);
IkReal x552=(x529*x530*x531);
IkReal x553=(x535*x543);
IkReal x554=(x529*x531*x535);
IkReal x555=(x541*x544);
IkReal x556=(x532*x537*x544);
IkReal x557=(x530*x540*x544);
IkReal x558=(x535*x540*x544);
IkReal x559=(x558+x553+x554);
IkReal x560=(x552+x551+x557);
IkReal x561=(x550+x556+x555+x545+x546);
IkReal x562=((((-1.0)*x528*x537*x544))+((x528*x531*x536))+(((-1.0)*x528*x542))+(((8.0)*x534*x544))+(((-8.0)*x536*x538))+(((8.0)*x525*x534)));
op[0]=((((-1.0)*x559))+x548+x549+(((-1.0)*x561)));
op[1]=x562;
op[2]=(x547+x549+(((-1.0)*x561))+(((-1.0)*x560)));
op[3]=((((16.0)*x534*x544))+(((-1.0)*x539*x542))+(((-1.0)*x537*x539*x544))+(((-16.0)*x536*x538))+((x531*x536*x539))+(((16.0)*x525*x534)));
op[4]=((((-1.0)*x549))+x547+x561+(((-1.0)*x560)));
op[5]=x562;
op[6]=((((-1.0)*x549))+(((-1.0)*x559))+x548+x561);
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

j6evalpoly[0]=((((4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((htj6*htj6*htj6*htj6*htj6)*(((((8.0)*cj4*r10*(cj2*cj2)*(sj3*sj3)))+(((-8.0)*cj5*r11*sj4*(cj3*cj3)))+(((-8.0)*cj5*r11*sj4*(cj2*cj2)*(sj3*sj3)))+(((8.0)*cj3*r01*sj2*sj5))+(((8.0)*cj2*r11*sj2*sj3*sj5))+(((8.0)*cj4*r10*(cj3*cj3)))))))+(((htj6*htj6*htj6*htj6)*(((((-4.0)*cj5*r10*sj4*(cj3*cj3)))+(((-12.0)*cj3*cj5*r02*sj2))+(((4.0)*cj2*r10*sj2*sj3*sj5))+(((-12.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj4*r11*(cj3*cj3)))+(((4.0)*cj3*r00*sj2*sj5))+(((-4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((-12.0)*cj2*cj5*r12*sj2*sj3))+(((-12.0)*r12*sj4*sj5*(cj3*cj3)))))))+(((-4.0)*r12*sj4*sj5*(cj3*cj3)))+(((htj6*htj6)*(((((4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((-12.0)*cj3*cj5*r02*sj2))+(((-12.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj3*r00*sj2*sj5))+(((4.0)*cj4*r11*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+(((-12.0)*cj2*cj5*r12*sj2*sj3))+(((-12.0)*r12*sj4*sj5*(cj3*cj3)))+(((-4.0)*cj2*r10*sj2*sj3*sj5))))))+(((-4.0)*cj3*r00*sj2*sj5))+(((htj6*htj6*htj6*htj6*htj6*htj6)*(((((-4.0)*cj5*r10*sj4*(cj3*cj3)))+(((4.0)*cj2*r10*sj2*sj3*sj5))+(((-4.0)*cj4*r11*(cj3*cj3)))+(((-4.0)*r12*sj4*sj5*(cj3*cj3)))+(((4.0)*cj3*r00*sj2*sj5))+(((-4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj3*cj5*r02*sj2))+(((-4.0)*cj2*cj5*r12*sj2*sj3))))))+(((4.0)*cj4*r11*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+((htj6*(((((8.0)*cj4*r10*(cj2*cj2)*(sj3*sj3)))+(((-8.0)*cj5*r11*sj4*(cj3*cj3)))+(((-8.0)*cj5*r11*sj4*(cj2*cj2)*(sj3*sj3)))+(((8.0)*cj3*r01*sj2*sj5))+(((8.0)*cj2*r11*sj2*sj3*sj5))+(((8.0)*cj4*r10*(cj3*cj3)))))))+(((-4.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((htj6*htj6*htj6)*(((((16.0)*cj4*r10*(cj3*cj3)))+(((-16.0)*cj5*r11*sj4*(cj2*cj2)*(sj3*sj3)))+(((-16.0)*cj5*r11*sj4*(cj3*cj3)))+(((16.0)*cj4*r10*(cj2*cj2)*(sj3*sj3)))+(((16.0)*cj3*r01*sj2*sj5))+(((16.0)*cj2*r11*sj2*sj3*sj5))))))+(((-4.0)*cj3*cj5*r02*sj2))+(((-4.0)*cj2*cj5*r12*sj2*sj3))+(((-4.0)*cj2*r10*sj2*sj3*sj5)));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[2];
IkReal x563=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x563);
rxp1_0=(pz*r11);
rxp1_1=(r01*x563);
IkReal x564=cj2*cj2;
IkReal x565=cj3*cj3;
IkReal x566=((((-1.0)*x564*x565))+x564+x565);
j1eval[0]=x566;
j1eval[1]=IKsign(x566);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x567=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x567);
rxp1_0=(pz*r11);
rxp1_1=(r01*x567);
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x568=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x568);
rxp1_0=(pz*r11);
rxp1_1=(r01*x568);
j1eval[0]=sj2;
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x580=IKPowWithIntegerCheck(sj2,-1);
if(!x580.valid){
continue;
}
IkReal x569=x580.value;
IkReal x570=((1.0)*sj6);
IkReal x571=(cj4*r10);
IkReal x572=(r11*sj6);
IkReal x573=(sj2*sj5);
IkReal x574=((1.0)*cj6);
IkReal x575=(cj2*sj3);
IkReal x576=(cj4*r11);
IkReal x577=(cj5*sj4);
IkReal x578=(r12*sj4*sj5);
IkReal x579=(x575*x577);
CheckValue<IkReal> x581=IKPowWithIntegerCheck(cj3,-1);
if(!x581.valid){
continue;
}
if( IKabs((x569*(((((-1.0)*r10*x574*x577))+(((-1.0)*x570*x571))+(((-1.0)*x574*x576))+x578+((x572*x577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x569*(x581.value)*((((cj5*r12*sj2))+(((-1.0)*r10*x574*x579))+(((-1.0)*r11*x570*x573))+(((-1.0)*x574*x575*x576))+((x575*x578))+((x572*x579))+(((-1.0)*x570*x571*x575))+((cj6*r10*x573)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x569*(((((-1.0)*r10*x574*x577))+(((-1.0)*x570*x571))+(((-1.0)*x574*x576))+x578+((x572*x577))))))+IKsqr((x569*(x581.value)*((((cj5*r12*sj2))+(((-1.0)*r10*x574*x579))+(((-1.0)*r11*x570*x573))+(((-1.0)*x574*x575*x576))+((x575*x578))+((x572*x579))+(((-1.0)*x570*x571*x575))+((cj6*r10*x573))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x569*(((((-1.0)*r10*x574*x577))+(((-1.0)*x570*x571))+(((-1.0)*x574*x576))+x578+((x572*x577))))), (x569*(x581.value)*((((cj5*r12*sj2))+(((-1.0)*r10*x574*x579))+(((-1.0)*r11*x570*x573))+(((-1.0)*x574*x575*x576))+((x575*x578))+((x572*x579))+(((-1.0)*x570*x571*x575))+((cj6*r10*x573))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x582=IKcos(j1);
IkReal x583=IKsin(j1);
IkReal x584=((0.31436)*sj3);
IkReal x585=(r02*sj5);
IkReal x586=(r11*sj6);
IkReal x587=(cj4*cj5);
IkReal x588=(sj4*sj6);
IkReal x589=(r00*sj6);
IkReal x590=((0.0003501)*cj6);
IkReal x591=(cj5*sj4);
IkReal x592=(r12*sj5);
IkReal x593=(r01*sj6);
IkReal x594=(cj6*r11);
IkReal x595=((1.0)*cj4);
IkReal x596=(cj6*r01);
IkReal x597=((1.0)*sj3);
IkReal x598=((1.0)*cj5);
IkReal x599=(r10*sj6);
IkReal x600=(cj2*x582);
IkReal x601=(cj3*x583);
IkReal x602=((1.0)*cj6*r10);
IkReal x603=(sj2*x582);
IkReal x604=(sj2*x583);
IkReal x605=((1.0)*cj6*r00);
IkReal x606=(cj2*x583);
IkReal x607=(cj3*x582);
evalcond[0]=((((-1.0)*sj5*x602))+(((-1.0)*r12*x598))+(((-1.0)*x597*x606))+((sj5*x586))+x607);
evalcond[1]=((((-1.0)*sj5*x605))+(((-1.0)*x597*x600))+(((-1.0)*x601))+(((-1.0)*r02*x598))+((sj5*x593)));
evalcond[2]=((((-1.0)*x589*x595))+(((-1.0)*x603))+(((-1.0)*x591*x605))+(((-1.0)*x595*x596))+((cj5*r01*x588))+((sj4*x585)));
evalcond[3]=((((-1.0)*x604))+((sj4*x592))+(((-1.0)*x591*x602))+(((-1.0)*x594*x595))+(((-1.0)*x595*x599))+((x586*x591)));
evalcond[4]=(((r10*x588))+(((-1.0)*x587*x602))+((cj2*x601))+((sj3*x582))+((x586*x587))+((sj4*x594))+((cj4*x592)));
evalcond[5]=(((x584*x600))+(((0.42076)*x583))+(((0.31436)*x601))+((r01*x590))+(((-1.0)*px))+(((-0.01275)*x603))+(((0.0003501)*x589)));
evalcond[6]=(((x584*x606))+(((0.0003501)*x599))+(((-0.31436)*x607))+(((-1.0)*py))+((r11*x590))+(((-0.42076)*x582))+(((-0.01275)*x604)));
evalcond[7]=((((-1.0)*x587*x605))+((cj3*x600))+((sj4*x596))+((cj4*x585))+(((-1.0)*x583*x597))+((r00*x588))+((x587*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x608=(cj4*sj5);
IkReal x609=(cj3*cj5);
IkReal x610=(r11*sj6);
IkReal x611=(sj3*sj5);
IkReal x612=(cj3*cj6);
IkReal x613=((1.0)*sj4);
IkReal x614=((1.0)*cj4);
IkReal x615=(r10*sj6);
IkReal x616=((1.0)*cj3);
IkReal x617=((1.0)*r12*sj3);
IkReal x618=(cj4*cj5*cj6*r10);
CheckValue<IkReal> x619=IKPowWithIntegerCheck(cj2,-1);
if(!x619.valid){
continue;
}
if( IKabs(((x619.value)*(((((-1.0)*cj3*x613*x615))+(((-1.0)*r12*x608*x616))+(((-1.0)*cj5*x617))+((cj4*cj6*r10*x609))+(((-1.0)*cj6*r10*x611))+(((-1.0)*r11*x612*x613))+((x610*x611))+(((-1.0)*x609*x610*x614)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x610*x616))+(((-1.0)*cj6*r11*sj3*x613))+((r12*x609))+(((-1.0)*cj5*sj3*x610*x614))+((sj3*x618))+(((-1.0)*sj3*x613*x615))+((r10*sj5*x612))+(((-1.0)*x608*x617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x619.value)*(((((-1.0)*cj3*x613*x615))+(((-1.0)*r12*x608*x616))+(((-1.0)*cj5*x617))+((cj4*cj6*r10*x609))+(((-1.0)*cj6*r10*x611))+(((-1.0)*r11*x612*x613))+((x610*x611))+(((-1.0)*x609*x610*x614))))))+IKsqr(((((-1.0)*sj5*x610*x616))+(((-1.0)*cj6*r11*sj3*x613))+((r12*x609))+(((-1.0)*cj5*sj3*x610*x614))+((sj3*x618))+(((-1.0)*sj3*x613*x615))+((r10*sj5*x612))+(((-1.0)*x608*x617))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x619.value)*(((((-1.0)*cj3*x613*x615))+(((-1.0)*r12*x608*x616))+(((-1.0)*cj5*x617))+((cj4*cj6*r10*x609))+(((-1.0)*cj6*r10*x611))+(((-1.0)*r11*x612*x613))+((x610*x611))+(((-1.0)*x609*x610*x614))))), ((((-1.0)*sj5*x610*x616))+(((-1.0)*cj6*r11*sj3*x613))+((r12*x609))+(((-1.0)*cj5*sj3*x610*x614))+((sj3*x618))+(((-1.0)*sj3*x613*x615))+((r10*sj5*x612))+(((-1.0)*x608*x617))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x620=IKcos(j1);
IkReal x621=IKsin(j1);
IkReal x622=((0.31436)*sj3);
IkReal x623=(r02*sj5);
IkReal x624=(r11*sj6);
IkReal x625=(cj4*cj5);
IkReal x626=(sj4*sj6);
IkReal x627=(r00*sj6);
IkReal x628=((0.0003501)*cj6);
IkReal x629=(cj5*sj4);
IkReal x630=(r12*sj5);
IkReal x631=(r01*sj6);
IkReal x632=(cj6*r11);
IkReal x633=((1.0)*cj4);
IkReal x634=(cj6*r01);
IkReal x635=((1.0)*sj3);
IkReal x636=((1.0)*cj5);
IkReal x637=(r10*sj6);
IkReal x638=(cj2*x620);
IkReal x639=(cj3*x621);
IkReal x640=((1.0)*cj6*r10);
IkReal x641=(sj2*x620);
IkReal x642=(sj2*x621);
IkReal x643=((1.0)*cj6*r00);
IkReal x644=(cj2*x621);
IkReal x645=(cj3*x620);
evalcond[0]=((((-1.0)*sj5*x640))+(((-1.0)*r12*x636))+((sj5*x624))+(((-1.0)*x635*x644))+x645);
evalcond[1]=((((-1.0)*sj5*x643))+((sj5*x631))+(((-1.0)*r02*x636))+(((-1.0)*x635*x638))+(((-1.0)*x639)));
evalcond[2]=(((sj4*x623))+(((-1.0)*x641))+(((-1.0)*x629*x643))+(((-1.0)*x633*x634))+((cj5*r01*x626))+(((-1.0)*x627*x633)));
evalcond[3]=(((sj4*x630))+(((-1.0)*x642))+(((-1.0)*x629*x640))+(((-1.0)*x633*x637))+((x624*x629))+(((-1.0)*x632*x633)));
evalcond[4]=(((sj4*x632))+(((-1.0)*x625*x640))+((cj4*x630))+((r10*x626))+((sj3*x620))+((x624*x625))+((cj2*x639)));
evalcond[5]=((((0.42076)*x621))+(((-1.0)*px))+((r01*x628))+(((-0.01275)*x641))+(((0.31436)*x639))+((x622*x638))+(((0.0003501)*x627)));
evalcond[6]=((((-0.31436)*x645))+(((-1.0)*py))+((x622*x644))+(((-0.01275)*x642))+(((-0.42076)*x620))+(((0.0003501)*x637))+((r11*x628)));
evalcond[7]=(((sj4*x634))+((cj3*x638))+(((-1.0)*x621*x635))+(((-1.0)*x625*x643))+((cj4*x623))+((x625*x631))+((r00*x626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x646=cj2*cj2;
IkReal x647=cj3*cj3;
IkReal x648=((1.0)*cj5);
IkReal x649=(cj2*sj3);
IkReal x650=(sj5*sj6);
IkReal x651=((1.0)*cj6*sj5);
CheckValue<IkReal> x652=IKPowWithIntegerCheck(IKsign((x647+x646+(((-1.0)*x646*x647)))),-1);
if(!x652.valid){
continue;
}
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal((((cj3*r01*x650))+(((-1.0)*cj3*r00*x651))+(((-1.0)*r10*x649*x651))+(((-1.0)*cj3*r02*x648))+((r11*x649*x650))+(((-1.0)*r12*x648*x649)))),IkReal(((((-1.0)*cj3*r11*x650))+(((-1.0)*r02*x648*x649))+((r01*x649*x650))+((cj3*cj6*r10*sj5))+((cj3*cj5*r12))+(((-1.0)*r00*x649*x651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x652.value)))+(x653.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x654=IKcos(j1);
IkReal x655=IKsin(j1);
IkReal x656=((0.31436)*sj3);
IkReal x657=(r02*sj5);
IkReal x658=(r11*sj6);
IkReal x659=(cj4*cj5);
IkReal x660=(sj4*sj6);
IkReal x661=(r00*sj6);
IkReal x662=((0.0003501)*cj6);
IkReal x663=(cj5*sj4);
IkReal x664=(r12*sj5);
IkReal x665=(r01*sj6);
IkReal x666=(cj6*r11);
IkReal x667=((1.0)*cj4);
IkReal x668=(cj6*r01);
IkReal x669=((1.0)*sj3);
IkReal x670=((1.0)*cj5);
IkReal x671=(r10*sj6);
IkReal x672=(cj2*x654);
IkReal x673=(cj3*x655);
IkReal x674=((1.0)*cj6*r10);
IkReal x675=(sj2*x654);
IkReal x676=(sj2*x655);
IkReal x677=((1.0)*cj6*r00);
IkReal x678=(cj2*x655);
IkReal x679=(cj3*x654);
evalcond[0]=((((-1.0)*sj5*x674))+(((-1.0)*x669*x678))+((sj5*x658))+x679+(((-1.0)*r12*x670)));
evalcond[1]=((((-1.0)*r02*x670))+(((-1.0)*sj5*x677))+(((-1.0)*x669*x672))+(((-1.0)*x673))+((sj5*x665)));
evalcond[2]=(((sj4*x657))+(((-1.0)*x663*x677))+(((-1.0)*x661*x667))+((cj5*r01*x660))+(((-1.0)*x675))+(((-1.0)*x667*x668)));
evalcond[3]=(((sj4*x664))+(((-1.0)*x663*x674))+(((-1.0)*x667*x671))+(((-1.0)*x676))+(((-1.0)*x666*x667))+((x658*x663)));
evalcond[4]=(((cj2*x673))+((sj4*x666))+(((-1.0)*x659*x674))+((sj3*x654))+((cj4*x664))+((x658*x659))+((r10*x660)));
evalcond[5]=(((r01*x662))+(((0.0003501)*x661))+(((-0.01275)*x675))+(((-1.0)*px))+(((0.31436)*x673))+(((0.42076)*x655))+((x656*x672)));
evalcond[6]=((((0.0003501)*x671))+((r11*x662))+(((-0.01275)*x676))+(((-1.0)*py))+(((-0.42076)*x654))+(((-0.31436)*x679))+((x656*x678)));
evalcond[7]=(((cj4*x657))+((cj3*x672))+((r00*x660))+((sj4*x668))+(((-1.0)*x659*x677))+(((-1.0)*x655*x669))+((x659*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x681=IKPowWithIntegerCheck(r22,-1);
if(!x681.valid){
continue;
}
IkReal x680=x681.value;
CheckValue<IkReal> x682=IKPowWithIntegerCheck(sj4,-1);
if(!x682.valid){
continue;
}
if( IKabs((cj2*x680*(x682.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*sj3*x680)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*x680*(x682.value)))+IKsqr((sj2*sj3*x680))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*x680*(x682.value)), (sj2*sj3*x680));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x683=IKsin(j5);
IkReal x684=(r22*x683);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*(IKcos(j5)))));
evalcond[1]=((((-1.0)*cj2))+((sj4*x684)));
evalcond[2]=(((cj4*x684))+(((-1.0)*cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x685=cj3*cj3;
IkReal x686=cj2*cj2;
IkReal x687=sj3*sj3;
IkReal x688=((8.0)*r01);
IkReal x689=(cj5*sj2);
IkReal x690=((12.0)*r02);
IkReal x691=(cj2*sj3);
IkReal x692=((4.0)*r00);
IkReal x693=(cj3*r12);
IkReal x694=(cj4*r00);
IkReal x695=((4.0)*r02);
IkReal x696=(sj2*sj5);
IkReal x697=(cj5*sj4);
IkReal x698=(cj3*r11);
IkReal x699=((16.0)*r01);
IkReal x700=(sj4*sj5);
IkReal x701=((4.0)*cj4*r01);
IkReal x702=(x685*x697);
IkReal x703=(x685*x700);
IkReal x704=(x686*x687);
IkReal x705=((4.0)*cj3*r10*x696);
IkReal x706=(x685*x701);
IkReal x707=((12.0)*x689*x693);
IkReal x708=((4.0)*x689*x693);
IkReal x709=(x691*x692*x696);
IkReal x710=(x692*x702);
IkReal x711=(x690*x703);
IkReal x712=(x689*x690*x691);
IkReal x713=(x695*x703);
IkReal x714=(x689*x691*x695);
IkReal x715=(x701*x704);
IkReal x716=(x692*x697*x704);
IkReal x717=(x690*x700*x704);
IkReal x718=(x695*x700*x704);
IkReal x719=(x718+x713+x714);
IkReal x720=(x711+x712+x717);
IkReal x721=(x710+x715+x716+x706+x705);
IkReal x722=((((8.0)*x685*x694))+(((-8.0)*x696*x698))+(((-1.0)*x688*x702))+((x688*x691*x696))+(((-1.0)*x688*x697*x704))+(((8.0)*x694*x704)));
op[0]=((((-1.0)*x721))+(((-1.0)*x719))+x708+x709);
op[1]=x722;
op[2]=((((-1.0)*x721))+(((-1.0)*x720))+x709+x707);
op[3]=((((-1.0)*x697*x699*x704))+(((-16.0)*x696*x698))+(((-1.0)*x699*x702))+(((16.0)*x694*x704))+((x691*x696*x699))+(((16.0)*x685*x694)));
op[4]=((((-1.0)*x720))+(((-1.0)*x709))+x707+x721);
op[5]=x722;
op[6]=((((-1.0)*x719))+(((-1.0)*x709))+x708+x721);
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

j6evalpoly[0]=((((4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((htj6*htj6*htj6*htj6*htj6)*(((((8.0)*cj4*r10*(cj2*cj2)*(sj3*sj3)))+(((-8.0)*cj5*r11*sj4*(cj3*cj3)))+(((-8.0)*cj5*r11*sj4*(cj2*cj2)*(sj3*sj3)))+(((8.0)*cj3*r01*sj2*sj5))+(((8.0)*cj2*r11*sj2*sj3*sj5))+(((8.0)*cj4*r10*(cj3*cj3)))))))+(((htj6*htj6*htj6*htj6)*(((((-4.0)*cj5*r10*sj4*(cj3*cj3)))+(((-12.0)*cj3*cj5*r02*sj2))+(((4.0)*cj2*r10*sj2*sj3*sj5))+(((-12.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj4*r11*(cj3*cj3)))+(((4.0)*cj3*r00*sj2*sj5))+(((-4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((-12.0)*cj2*cj5*r12*sj2*sj3))+(((-12.0)*r12*sj4*sj5*(cj3*cj3)))))))+(((-4.0)*r12*sj4*sj5*(cj3*cj3)))+(((htj6*htj6)*(((((4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((-12.0)*cj3*cj5*r02*sj2))+(((-12.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj3*r00*sj2*sj5))+(((4.0)*cj4*r11*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+(((-12.0)*cj2*cj5*r12*sj2*sj3))+(((-12.0)*r12*sj4*sj5*(cj3*cj3)))+(((-4.0)*cj2*r10*sj2*sj3*sj5))))))+(((-4.0)*cj3*r00*sj2*sj5))+(((htj6*htj6*htj6*htj6*htj6*htj6)*(((((-4.0)*cj5*r10*sj4*(cj3*cj3)))+(((4.0)*cj2*r10*sj2*sj3*sj5))+(((-4.0)*cj4*r11*(cj3*cj3)))+(((-4.0)*r12*sj4*sj5*(cj3*cj3)))+(((4.0)*cj3*r00*sj2*sj5))+(((-4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj4*r11*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((-4.0)*cj3*cj5*r02*sj2))+(((-4.0)*cj2*cj5*r12*sj2*sj3))))))+(((4.0)*cj4*r11*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj3*cj3)))+(((4.0)*cj5*r10*sj4*(cj2*cj2)*(sj3*sj3)))+((htj6*(((((8.0)*cj4*r10*(cj2*cj2)*(sj3*sj3)))+(((-8.0)*cj5*r11*sj4*(cj3*cj3)))+(((-8.0)*cj5*r11*sj4*(cj2*cj2)*(sj3*sj3)))+(((8.0)*cj3*r01*sj2*sj5))+(((8.0)*cj2*r11*sj2*sj3*sj5))+(((8.0)*cj4*r10*(cj3*cj3)))))))+(((-4.0)*r12*sj4*sj5*(cj2*cj2)*(sj3*sj3)))+(((htj6*htj6*htj6)*(((((16.0)*cj4*r10*(cj3*cj3)))+(((-16.0)*cj5*r11*sj4*(cj2*cj2)*(sj3*sj3)))+(((-16.0)*cj5*r11*sj4*(cj3*cj3)))+(((16.0)*cj4*r10*(cj2*cj2)*(sj3*sj3)))+(((16.0)*cj3*r01*sj2*sj5))+(((16.0)*cj2*r11*sj2*sj3*sj5))))))+(((-4.0)*cj3*cj5*r02*sj2))+(((-4.0)*cj2*cj5*r12*sj2*sj3))+(((-4.0)*cj2*r10*sj2*sj3*sj5)));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[2];
IkReal x723=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x723);
rxp1_0=(pz*r11);
rxp1_1=(r01*x723);
IkReal x724=cj2*cj2;
IkReal x725=cj3*cj3;
IkReal x726=((((-1.0)*x724*x725))+x724+x725);
j1eval[0]=x726;
j1eval[1]=IKsign(x726);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x727=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x727);
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x728=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x728);
rxp1_0=(pz*r11);
rxp1_1=(r01*x728);
j1eval[0]=sj2;
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x740=IKPowWithIntegerCheck(sj2,-1);
if(!x740.valid){
continue;
}
IkReal x729=x740.value;
IkReal x730=((1.0)*sj6);
IkReal x731=(cj4*r10);
IkReal x732=(r11*sj6);
IkReal x733=(sj2*sj5);
IkReal x734=((1.0)*cj6);
IkReal x735=(cj2*sj3);
IkReal x736=(cj4*r11);
IkReal x737=(cj5*sj4);
IkReal x738=(r12*sj4*sj5);
IkReal x739=(x735*x737);
CheckValue<IkReal> x741=IKPowWithIntegerCheck(cj3,-1);
if(!x741.valid){
continue;
}
if( IKabs((x729*(((((-1.0)*r10*x734*x737))+(((-1.0)*x734*x736))+(((-1.0)*x730*x731))+x738+((x732*x737)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x729*(x741.value)*((((cj5*r12*sj2))+((x735*x738))+(((-1.0)*r10*x734*x739))+(((-1.0)*r11*x730*x733))+(((-1.0)*x734*x735*x736))+((cj6*r10*x733))+(((-1.0)*x730*x731*x735))+((x732*x739)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x729*(((((-1.0)*r10*x734*x737))+(((-1.0)*x734*x736))+(((-1.0)*x730*x731))+x738+((x732*x737))))))+IKsqr((x729*(x741.value)*((((cj5*r12*sj2))+((x735*x738))+(((-1.0)*r10*x734*x739))+(((-1.0)*r11*x730*x733))+(((-1.0)*x734*x735*x736))+((cj6*r10*x733))+(((-1.0)*x730*x731*x735))+((x732*x739))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x729*(((((-1.0)*r10*x734*x737))+(((-1.0)*x734*x736))+(((-1.0)*x730*x731))+x738+((x732*x737))))), (x729*(x741.value)*((((cj5*r12*sj2))+((x735*x738))+(((-1.0)*r10*x734*x739))+(((-1.0)*r11*x730*x733))+(((-1.0)*x734*x735*x736))+((cj6*r10*x733))+(((-1.0)*x730*x731*x735))+((x732*x739))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x742=IKcos(j1);
IkReal x743=IKsin(j1);
IkReal x744=((0.31436)*sj3);
IkReal x745=(r02*sj5);
IkReal x746=(r11*sj6);
IkReal x747=(cj4*cj5);
IkReal x748=(sj4*sj6);
IkReal x749=(r00*sj6);
IkReal x750=((0.0003501)*cj6);
IkReal x751=(cj5*sj4);
IkReal x752=(r12*sj5);
IkReal x753=(r01*sj6);
IkReal x754=(cj6*r11);
IkReal x755=((1.0)*cj4);
IkReal x756=(cj6*r01);
IkReal x757=((1.0)*sj3);
IkReal x758=((1.0)*cj5);
IkReal x759=(r10*sj6);
IkReal x760=(cj2*x742);
IkReal x761=(cj3*x743);
IkReal x762=((1.0)*cj6*r10);
IkReal x763=(sj2*x742);
IkReal x764=(sj2*x743);
IkReal x765=((1.0)*cj6*r00);
IkReal x766=(cj2*x743);
IkReal x767=(cj3*x742);
evalcond[0]=((((-1.0)*r12*x758))+(((-1.0)*x757*x766))+x767+((sj5*x746))+(((-1.0)*sj5*x762)));
evalcond[1]=((((-1.0)*r02*x758))+(((-1.0)*x757*x760))+((sj5*x753))+(((-1.0)*x761))+(((-1.0)*sj5*x765)));
evalcond[2]=(((cj5*r01*x748))+((sj4*x745))+(((-1.0)*x751*x765))+(((-1.0)*x755*x756))+(((-1.0)*x763))+(((-1.0)*x749*x755)));
evalcond[3]=((((-1.0)*x751*x762))+((sj4*x752))+(((-1.0)*x754*x755))+(((-1.0)*x755*x759))+((x746*x751))+(((-1.0)*x764)));
evalcond[4]=(((cj2*x761))+((sj4*x754))+((r10*x748))+((x746*x747))+(((-1.0)*x747*x762))+((sj3*x742))+((cj4*x752)));
evalcond[5]=((((0.31436)*x761))+(((-1.0)*px))+((r01*x750))+(((-0.01275)*x763))+((x744*x760))+(((0.42076)*x743))+(((0.0003501)*x749)));
evalcond[6]=((((0.0003501)*x759))+(((-1.0)*py))+(((-0.42076)*x742))+(((-0.31436)*x767))+(((-0.01275)*x764))+((r11*x750))+((x744*x766)));
evalcond[7]=(((cj3*x760))+((x747*x753))+((sj4*x756))+(((-1.0)*x747*x765))+((r00*x748))+(((-1.0)*x743*x757))+((cj4*x745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x768=(cj4*sj5);
IkReal x769=(cj3*cj5);
IkReal x770=(r11*sj6);
IkReal x771=(sj3*sj5);
IkReal x772=(cj3*cj6);
IkReal x773=((1.0)*sj4);
IkReal x774=((1.0)*cj4);
IkReal x775=(r10*sj6);
IkReal x776=((1.0)*cj3);
IkReal x777=((1.0)*r12*sj3);
IkReal x778=(cj4*cj5*cj6*r10);
CheckValue<IkReal> x779=IKPowWithIntegerCheck(cj2,-1);
if(!x779.valid){
continue;
}
if( IKabs(((x779.value)*(((((-1.0)*cj6*r10*x771))+((x770*x771))+((cj4*cj6*r10*x769))+(((-1.0)*r11*x772*x773))+(((-1.0)*r12*x768*x776))+(((-1.0)*cj5*x777))+(((-1.0)*x769*x770*x774))+(((-1.0)*cj3*x773*x775)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x768*x777))+(((-1.0)*sj3*x773*x775))+(((-1.0)*cj5*sj3*x770*x774))+((sj3*x778))+(((-1.0)*cj6*r11*sj3*x773))+((r12*x769))+((r10*sj5*x772))+(((-1.0)*sj5*x770*x776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x779.value)*(((((-1.0)*cj6*r10*x771))+((x770*x771))+((cj4*cj6*r10*x769))+(((-1.0)*r11*x772*x773))+(((-1.0)*r12*x768*x776))+(((-1.0)*cj5*x777))+(((-1.0)*x769*x770*x774))+(((-1.0)*cj3*x773*x775))))))+IKsqr(((((-1.0)*x768*x777))+(((-1.0)*sj3*x773*x775))+(((-1.0)*cj5*sj3*x770*x774))+((sj3*x778))+(((-1.0)*cj6*r11*sj3*x773))+((r12*x769))+((r10*sj5*x772))+(((-1.0)*sj5*x770*x776))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x779.value)*(((((-1.0)*cj6*r10*x771))+((x770*x771))+((cj4*cj6*r10*x769))+(((-1.0)*r11*x772*x773))+(((-1.0)*r12*x768*x776))+(((-1.0)*cj5*x777))+(((-1.0)*x769*x770*x774))+(((-1.0)*cj3*x773*x775))))), ((((-1.0)*x768*x777))+(((-1.0)*sj3*x773*x775))+(((-1.0)*cj5*sj3*x770*x774))+((sj3*x778))+(((-1.0)*cj6*r11*sj3*x773))+((r12*x769))+((r10*sj5*x772))+(((-1.0)*sj5*x770*x776))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x780=IKcos(j1);
IkReal x781=IKsin(j1);
IkReal x782=((0.31436)*sj3);
IkReal x783=(r02*sj5);
IkReal x784=(r11*sj6);
IkReal x785=(cj4*cj5);
IkReal x786=(sj4*sj6);
IkReal x787=(r00*sj6);
IkReal x788=((0.0003501)*cj6);
IkReal x789=(cj5*sj4);
IkReal x790=(r12*sj5);
IkReal x791=(r01*sj6);
IkReal x792=(cj6*r11);
IkReal x793=((1.0)*cj4);
IkReal x794=(cj6*r01);
IkReal x795=((1.0)*sj3);
IkReal x796=((1.0)*cj5);
IkReal x797=(r10*sj6);
IkReal x798=(cj2*x780);
IkReal x799=(cj3*x781);
IkReal x800=((1.0)*cj6*r10);
IkReal x801=(sj2*x780);
IkReal x802=(sj2*x781);
IkReal x803=((1.0)*cj6*r00);
IkReal x804=(cj2*x781);
IkReal x805=(cj3*x780);
evalcond[0]=((((-1.0)*sj5*x800))+((sj5*x784))+(((-1.0)*r12*x796))+(((-1.0)*x795*x804))+x805);
evalcond[1]=((((-1.0)*sj5*x803))+((sj5*x791))+(((-1.0)*x795*x798))+(((-1.0)*x799))+(((-1.0)*r02*x796)));
evalcond[2]=((((-1.0)*x801))+(((-1.0)*x793*x794))+((sj4*x783))+(((-1.0)*x789*x803))+(((-1.0)*x787*x793))+((cj5*r01*x786)));
evalcond[3]=((((-1.0)*x802))+(((-1.0)*x792*x793))+(((-1.0)*x793*x797))+((x784*x789))+((sj4*x790))+(((-1.0)*x789*x800)));
evalcond[4]=((((-1.0)*x785*x800))+((r10*x786))+((x784*x785))+((cj4*x790))+((sj4*x792))+((sj3*x780))+((cj2*x799)));
evalcond[5]=(((r01*x788))+(((0.42076)*x781))+(((0.31436)*x799))+((x782*x798))+(((-1.0)*px))+(((-0.01275)*x801))+(((0.0003501)*x787)));
evalcond[6]=(((x782*x804))+(((-0.31436)*x805))+(((-1.0)*py))+(((-0.42076)*x780))+((r11*x788))+(((-0.01275)*x802))+(((0.0003501)*x797)));
evalcond[7]=(((r00*x786))+(((-1.0)*x785*x803))+((x785*x791))+(((-1.0)*x781*x795))+((cj4*x783))+((sj4*x794))+((cj3*x798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x806=cj2*cj2;
IkReal x807=cj3*cj3;
IkReal x808=((1.0)*cj5);
IkReal x809=(cj2*sj3);
IkReal x810=(sj5*sj6);
IkReal x811=((1.0)*cj6*sj5);
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x808*x809))+(((-1.0)*r10*x809*x811))+(((-1.0)*cj3*r00*x811))+((cj3*r01*x810))+((r11*x809*x810))+(((-1.0)*cj3*r02*x808)))),IkReal(((((-1.0)*cj3*r11*x810))+(((-1.0)*r00*x809*x811))+((cj3*cj6*r10*sj5))+(((-1.0)*r02*x808*x809))+((r01*x809*x810))+((cj3*cj5*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813=IKPowWithIntegerCheck(IKsign(((((-1.0)*x806*x807))+x807+x806)),-1);
if(!x813.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x812.value)+(((1.5707963267949)*(x813.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x814=IKcos(j1);
IkReal x815=IKsin(j1);
IkReal x816=((0.31436)*sj3);
IkReal x817=(r02*sj5);
IkReal x818=(r11*sj6);
IkReal x819=(cj4*cj5);
IkReal x820=(sj4*sj6);
IkReal x821=(r00*sj6);
IkReal x822=((0.0003501)*cj6);
IkReal x823=(cj5*sj4);
IkReal x824=(r12*sj5);
IkReal x825=(r01*sj6);
IkReal x826=(cj6*r11);
IkReal x827=((1.0)*cj4);
IkReal x828=(cj6*r01);
IkReal x829=((1.0)*sj3);
IkReal x830=((1.0)*cj5);
IkReal x831=(r10*sj6);
IkReal x832=(cj2*x814);
IkReal x833=(cj3*x815);
IkReal x834=((1.0)*cj6*r10);
IkReal x835=(sj2*x814);
IkReal x836=(sj2*x815);
IkReal x837=((1.0)*cj6*r00);
IkReal x838=(cj2*x815);
IkReal x839=(cj3*x814);
evalcond[0]=(((sj5*x818))+(((-1.0)*r12*x830))+x839+(((-1.0)*sj5*x834))+(((-1.0)*x829*x838)));
evalcond[1]=((((-1.0)*r02*x830))+((sj5*x825))+(((-1.0)*x833))+(((-1.0)*sj5*x837))+(((-1.0)*x829*x832)));
evalcond[2]=(((sj4*x817))+((cj5*r01*x820))+(((-1.0)*x823*x837))+(((-1.0)*x827*x828))+(((-1.0)*x821*x827))+(((-1.0)*x835)));
evalcond[3]=((((-1.0)*x827*x831))+(((-1.0)*x823*x834))+(((-1.0)*x826*x827))+((x818*x823))+(((-1.0)*x836))+((sj4*x824)));
evalcond[4]=((((-1.0)*x819*x834))+((r10*x820))+((cj4*x824))+((sj3*x814))+((x818*x819))+((cj2*x833))+((sj4*x826)));
evalcond[5]=((((0.42076)*x815))+((x816*x832))+((r01*x822))+(((-1.0)*px))+(((0.31436)*x833))+(((0.0003501)*x821))+(((-0.01275)*x835)));
evalcond[6]=(((x816*x838))+(((-0.42076)*x814))+(((-1.0)*py))+(((0.0003501)*x831))+((r11*x822))+(((-0.01275)*x836))+(((-0.31436)*x839)));
evalcond[7]=((((-1.0)*x815*x829))+((x819*x825))+(((-1.0)*x819*x837))+((r00*x820))+((cj4*x817))+((cj3*x832))+((sj4*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x840=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x840);
rxp1_0=(pz*r11);
rxp1_1=(r01*x840);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x841=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x841);
rxp1_0=(pz*r11);
rxp1_1=(r01*x841);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=cj4;
j5eval[1]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x842=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x842);
rxp1_0=(pz*r11);
rxp1_1=(r01*x842);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x843=IKPowWithIntegerCheck(r22,-1);
if(!x843.valid){
continue;
}
sj5array[0]=(cj2*(x843.value));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x844=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x844);
rxp1_0=(pz*r11);
rxp1_1=(r01*x844);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x846 = IKatan2WithCheck(IkReal(((-1.0)*cj5*r00)),IkReal((cj5*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x846.valid){
continue;
}
IkReal x845=x846.value;
j6array[0]=((-1.0)*x845);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x845)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=(((cj5*r11*(IKsin(j6))))+(((-1.0)*cj5*r10*(IKcos(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x847=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x847);
rxp1_0=(pz*r11);
rxp1_1=(r01*x847);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=((sj6*sj6)+(cj6*cj6));
j1eval[2]=IKsign(sj3);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x848=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x848);
rxp1_0=(pz*r11);
rxp1_1=(r01*x848);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x849=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x849);
rxp1_0=(pz*r11);
rxp1_1=(r01*x849);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x851=IKPowWithIntegerCheck(sj3,-1);
if(!x851.valid){
continue;
}
IkReal x850=x851.value;
CheckValue<IkReal> x852=IKPowWithIntegerCheck(cj2,-1);
if(!x852.valid){
continue;
}
if( IKabs((x850*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x850*(x852.value)*((((r01*sj5*sj6))+(((-1.0)*cj6*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x850*((((r00*sj6))+((cj6*r01))))))+IKsqr((x850*(x852.value)*((((r01*sj5*sj6))+(((-1.0)*cj6*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x850*((((r00*sj6))+((cj6*r01))))), (x850*(x852.value)*((((r01*sj5*sj6))+(((-1.0)*cj6*r00*sj5))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x853=IKsin(j1);
IkReal x854=IKcos(j1);
IkReal x855=(cj6*r11);
IkReal x856=(r00*sj6);
IkReal x857=(r10*sj6);
IkReal x858=(sj5*sj6);
IkReal x859=(cj6*r01);
IkReal x860=((1.0)*cj6*sj5);
IkReal x861=(cj2*sj3*x854);
IkReal x862=((1.0)*sj3*x853);
evalcond[0]=(((sj3*x854))+x857+x855);
evalcond[1]=((((-1.0)*x862))+x856+x859);
evalcond[2]=((((-1.0)*r10*x860))+(((-1.0)*cj2*x862))+((r11*x858)));
evalcond[3]=((((-1.0)*r00*x860))+(((-1.0)*x861))+((r01*x858)));
evalcond[4]=((((0.31436)*x861))+(((0.0003501)*x856))+(((0.0003501)*x859))+(((0.42076)*x853))+(((-1.0)*px)));
evalcond[5]=((((0.0003501)*x855))+(((0.0003501)*x857))+(((-1.0)*py))+(((-0.42076)*x854))+(((0.31436)*cj2*sj3*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x863=(r10*sj6);
IkReal x864=((0.747124251354692)*cj2);
IkReal x865=(cj6*r11);
CheckValue<IkReal> x866=IKPowWithIntegerCheck(sj3,-1);
if(!x866.valid){
continue;
}
if( IKabs(((((-0.000832065785721076)*r00*sj6))+((x863*x864))+(((2.37665177298222)*px))+((x864*x865))+(((-0.000832065785721076)*cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x866.value)*(((((-1.0)*x863))+(((-1.0)*x865)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.000832065785721076)*r00*sj6))+((x863*x864))+(((2.37665177298222)*px))+((x864*x865))+(((-0.000832065785721076)*cj6*r01))))+IKsqr(((x866.value)*(((((-1.0)*x863))+(((-1.0)*x865))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.000832065785721076)*r00*sj6))+((x863*x864))+(((2.37665177298222)*px))+((x864*x865))+(((-0.000832065785721076)*cj6*r01))), ((x866.value)*(((((-1.0)*x863))+(((-1.0)*x865))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x867=IKsin(j1);
IkReal x868=IKcos(j1);
IkReal x869=(cj6*r11);
IkReal x870=(r00*sj6);
IkReal x871=(r10*sj6);
IkReal x872=(sj5*sj6);
IkReal x873=(cj6*r01);
IkReal x874=((1.0)*cj6*sj5);
IkReal x875=(cj2*sj3*x868);
IkReal x876=((1.0)*sj3*x867);
evalcond[0]=(((sj3*x868))+x869+x871);
evalcond[1]=(x870+x873+(((-1.0)*x876)));
evalcond[2]=((((-1.0)*cj2*x876))+((r11*x872))+(((-1.0)*r10*x874)));
evalcond[3]=(((r01*x872))+(((-1.0)*r00*x874))+(((-1.0)*x875)));
evalcond[4]=((((0.0003501)*x870))+(((0.0003501)*x873))+(((0.42076)*x867))+(((-1.0)*px))+(((0.31436)*x875)));
evalcond[5]=((((0.0003501)*x871))+(((0.0003501)*x869))+(((-0.42076)*x868))+(((-1.0)*py))+(((0.31436)*cj2*sj3*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x877=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal((((r00*sj6))+((cj6*r01)))),IkReal(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x877.value)))+(x878.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x879=IKsin(j1);
IkReal x880=IKcos(j1);
IkReal x881=(cj6*r11);
IkReal x882=(r00*sj6);
IkReal x883=(r10*sj6);
IkReal x884=(sj5*sj6);
IkReal x885=(cj6*r01);
IkReal x886=((1.0)*cj6*sj5);
IkReal x887=(cj2*sj3*x880);
IkReal x888=((1.0)*sj3*x879);
evalcond[0]=(((sj3*x880))+x881+x883);
evalcond[1]=((((-1.0)*x888))+x885+x882);
evalcond[2]=(((r11*x884))+(((-1.0)*cj2*x888))+(((-1.0)*r10*x886)));
evalcond[3]=(((r01*x884))+(((-1.0)*x887))+(((-1.0)*r00*x886)));
evalcond[4]=((((0.0003501)*x882))+(((0.0003501)*x885))+(((0.42076)*x879))+(((0.31436)*x887))+(((-1.0)*px)));
evalcond[5]=((((0.31436)*cj2*sj3*x879))+(((0.0003501)*x883))+(((0.0003501)*x881))+(((-0.42076)*x880))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x889=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x889);
rxp1_0=(pz*r11);
rxp1_1=(r01*x889);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x890=IKPowWithIntegerCheck(r22,-1);
if(!x890.valid){
continue;
}
sj5array[0]=((-1.0)*cj2*(x890.value));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x891=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x891);
rxp1_0=(pz*r11);
rxp1_1=(r01*x891);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x893 = IKatan2WithCheck(IkReal((cj5*r00)),IkReal(((-1.0)*cj5*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x893.valid){
continue;
}
IkReal x892=x893.value;
j6array[0]=((-1.0)*x892);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x892)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj5*r11*(IKsin(j6))))+((cj5*r10*(IKcos(j6)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x894=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x894);
rxp1_0=(pz*r11);
rxp1_1=(r01*x894);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=((sj6*sj6)+(cj6*cj6));
j1eval[2]=IKsign(sj3);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[4];
IkReal x895=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x895);
rxp1_0=(pz*r11);
rxp1_1=(r01*x895);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x896=(cj2*sj3);
j1eval[0]=x896;
j1eval[1]=IKsign(x896);
j1eval[2]=sj5;
j1eval[3]=((sj6*sj6)+(cj6*cj6));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  || IKabs(j1eval[3]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x897=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x897);
rxp1_0=(pz*r11);
rxp1_1=(r01*x897);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(sj3,-1);
if(!x899.valid){
continue;
}
IkReal x898=x899.value;
CheckValue<IkReal> x900=IKPowWithIntegerCheck(cj2,-1);
if(!x900.valid){
continue;
}
if( IKabs((x898*(x900.value)*(((((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x898*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x898*(x900.value)*(((((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))))+IKsqr((x898*((((r10*sj6))+((cj6*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x898*(x900.value)*(((((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6))))), (x898*((((r10*sj6))+((cj6*r11))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x901=IKsin(j1);
IkReal x902=IKcos(j1);
IkReal x903=(sj5*sj6);
IkReal x904=(r00*sj6);
IkReal x905=((0.0003501)*cj6);
IkReal x906=((1.0)*cj6);
IkReal x907=(r10*sj6);
IkReal x908=(sj5*x906);
IkReal x909=(cj2*sj3*x902);
IkReal x910=((1.0)*sj3*x901);
evalcond[0]=(((sj3*x902))+(((-1.0)*r11*x906))+(((-1.0)*x907)));
evalcond[1]=((((-1.0)*x910))+(((-1.0)*r01*x906))+(((-1.0)*x904)));
evalcond[2]=(((r11*x903))+(((-1.0)*r10*x908))+(((-1.0)*cj2*x910)));
evalcond[3]=(((r01*x903))+(((-1.0)*r00*x908))+(((-1.0)*x909)));
evalcond[4]=(((r01*x905))+(((-1.0)*px))+(((0.42076)*x901))+(((0.0003501)*x904))+(((0.31436)*x909)));
evalcond[5]=((((-0.42076)*x902))+((r11*x905))+(((0.31436)*cj2*sj3*x901))+(((-1.0)*py))+(((0.0003501)*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x911=(sj5*sj6);
IkReal x912=((1.0)*cj6*sj5);
CheckValue<IkReal> x913=IKPowWithIntegerCheck(IKsign((cj2*sj3)),-1);
if(!x913.valid){
continue;
}
CheckValue<IkReal> x914 = IKatan2WithCheck(IkReal((((r11*x911))+(((-1.0)*r10*x912)))),IkReal(((((-1.0)*r00*x912))+((r01*x911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x914.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x913.value)))+(x914.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x915=IKsin(j1);
IkReal x916=IKcos(j1);
IkReal x917=(sj5*sj6);
IkReal x918=(r00*sj6);
IkReal x919=((0.0003501)*cj6);
IkReal x920=((1.0)*cj6);
IkReal x921=(r10*sj6);
IkReal x922=(sj5*x920);
IkReal x923=(cj2*sj3*x916);
IkReal x924=((1.0)*sj3*x915);
evalcond[0]=((((-1.0)*r11*x920))+((sj3*x916))+(((-1.0)*x921)));
evalcond[1]=((((-1.0)*x924))+(((-1.0)*x918))+(((-1.0)*r01*x920)));
evalcond[2]=((((-1.0)*r10*x922))+(((-1.0)*cj2*x924))+((r11*x917)));
evalcond[3]=((((-1.0)*x923))+(((-1.0)*r00*x922))+((r01*x917)));
evalcond[4]=((((0.31436)*x923))+(((-1.0)*px))+(((0.42076)*x915))+(((0.0003501)*x918))+((r01*x919)));
evalcond[5]=((((0.31436)*cj2*sj3*x915))+(((-0.42076)*x916))+((r11*x919))+(((-1.0)*py))+(((0.0003501)*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x925=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x925.valid){
continue;
}
CheckValue<IkReal> x926 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)))),IkReal((((r10*sj6))+((cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x925.value)))+(x926.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x927=IKsin(j1);
IkReal x928=IKcos(j1);
IkReal x929=(sj5*sj6);
IkReal x930=(r00*sj6);
IkReal x931=((0.0003501)*cj6);
IkReal x932=((1.0)*cj6);
IkReal x933=(r10*sj6);
IkReal x934=(sj5*x932);
IkReal x935=(cj2*sj3*x928);
IkReal x936=((1.0)*sj3*x927);
evalcond[0]=((((-1.0)*r11*x932))+(((-1.0)*x933))+((sj3*x928)));
evalcond[1]=((((-1.0)*x930))+(((-1.0)*r01*x932))+(((-1.0)*x936)));
evalcond[2]=((((-1.0)*r10*x934))+(((-1.0)*cj2*x936))+((r11*x929)));
evalcond[3]=((((-1.0)*x935))+((r01*x929))+(((-1.0)*r00*x934)));
evalcond[4]=((((0.31436)*x935))+(((-1.0)*px))+((r01*x931))+(((0.42076)*x927))+(((0.0003501)*x930)));
evalcond[5]=((((0.31436)*cj2*sj3*x927))+(((-1.0)*py))+(((-0.42076)*x928))+((r11*x931))+(((0.0003501)*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x937=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x937);
rxp1_0=(pz*r11);
rxp1_1=(r01*x937);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=r22;
j5eval[1]=((IKabs((sj2*sj3)))+(IKabs((cj3*sj2))));
j5eval[2]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x938 = IKatan2WithCheck(IkReal((cj3*sj2)),IkReal((sj2*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
CheckValue<IkReal> x939=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x939.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x938.value)+(((1.5707963267949)*(x939.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*(IKcos(j5)))));
evalcond[1]=(((r22*(IKsin(j5))))+(((-1.0)*cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x940=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x940);
rxp1_0=(pz*r11);
rxp1_1=(r01*x940);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x941=r11*r11;
IkReal x942=r10*r10;
IkReal x943=(cj3*cj5);
IkReal x944=(sj3*sj5);
IkReal x945=((4.0)*x942);
IkReal x946=((4.0)*r00*r10);
IkReal x947=((4.0)*r01*r11);
IkReal x948=((4.0)*x941);
IkReal x949=(((x944*x948))+((x944*x945)));
IkReal x950=(((x943*x948))+((x943*x945)));
IkReal x951=(((x943*x947))+((x943*x946)));
IkReal x952=(((x944*x947))+((x944*x946)));
j1eval[0]=((((0.5)*(IKabs(((((-1.0)*x952))+x951)))))+(IKabs(((((-1.0)*x951))+x952)))+(((0.5)*(IKabs(((((-1.0)*x949))+x950)))))+(IKabs(((((-1.0)*x950))+x949))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x953=(r01*r11);
IkReal x954=(r00*r10);
IkReal x955=((4.0)*cj3*cj5);
IkReal x956=((4.0)*sj3*sj5);
IkReal x957=(((x953*x955))+((x954*x955)));
IkReal x958=(((x953*x956))+((x954*x956)));
IkReal x959=((((-1.0)*x957))+x958);
IkReal x960=((((-1.0)*x958))+x957);
op[0]=x959;
op[1]=0;
op[2]=x959;
op[3]=0;
op[4]=x960;
op[5]=0;
op[6]=x960;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x961=r10*r10;
IkReal x962=r11*r11;
IkReal x963=(cj3*cj5);
IkReal x964=(sj3*sj5);
IkReal x965=((4.0)*x961);
IkReal x966=((4.0)*x962);
IkReal x967=(x963*x965);
IkReal x968=(x963*x966);
IkReal x969=(x967+x968);
IkReal x970=(((x964*x966))+((x964*x965)));
IkReal x971=(x970+(((-1.0)*x969)));
j1evalpoly[0]=(((x971*(htj1*htj1*htj1*htj1*htj1*htj1)))+((x971*(htj1*htj1*htj1*htj1)))+x969+(((htj1*htj1)*((x969+(((-1.0)*x970))))))+(((-1.0)*x970)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j6eval[4];
IkReal x972=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x972);
rxp1_0=(pz*r11);
rxp1_1=(r01*x972);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j6eval[0]=r22;
j6eval[1]=sj2;
j6eval[2]=((sj1*sj1)+(cj1*cj1));
j6eval[3]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x973=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x973);
rxp1_0=(pz*r11);
rxp1_1=(r01*x973);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j6eval[0]=sj5;
j6eval[1]=((((sj1*sj1)*(sj2*sj2)*(sj5*sj5)))+(((cj1*cj1)*(cj3*cj3))));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x974=(cj1*cj3);
IkReal x975=((1.0)*r11);
IkReal x976=(sj1*sj2*sj5);
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal(((((-1.0)*x974*x975))+(((-1.0)*r10*x976)))),IkReal((((r10*x974))+(((-1.0)*x975*x976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x977.value)))+(x978.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x979=IKsin(j6);
IkReal x980=IKcos(j6);
IkReal x981=((1.0)*sj2);
IkReal x982=((0.01275)*sj2);
IkReal x983=((1.0)*sj1);
IkReal x984=((0.31436)*cj3);
IkReal x985=(sj5*x979);
IkReal x986=(r00*x979);
IkReal x987=((0.0003501)*x980);
IkReal x988=((1.0)*x980);
IkReal x989=(r10*x979);
IkReal x990=(cj5*x979);
IkReal x991=(cj5*x988);
evalcond[0]=((((-1.0)*r10*sj5*x988))+((r11*x985))+((cj1*cj3)));
evalcond[1]=((((-1.0)*cj1*x981))+(((-1.0)*x986))+(((-1.0)*r01*x988)));
evalcond[2]=((((-1.0)*x989))+(((-1.0)*sj1*x981))+(((-1.0)*r11*x988)));
evalcond[3]=(((cj1*sj3))+(((-1.0)*r10*x991))+((r11*x990)));
evalcond[4]=((((-1.0)*cj3*x983))+((r01*x985))+(((-1.0)*r00*sj5*x988)));
evalcond[5]=(((r01*x990))+(((-1.0)*r00*x991))+(((-1.0)*sj3*x983)));
evalcond[6]=((((-1.0)*cj1*x982))+(((0.0003501)*x986))+((r01*x987))+((sj1*x984))+(((-1.0)*px))+(((0.42076)*sj1)));
evalcond[7]=((((-1.0)*cj1*x984))+(((0.0003501)*x989))+(((-0.42076)*cj1))+(((-1.0)*py))+((r11*x987))+(((-1.0)*sj1*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x992=(cj1*sj2);
IkReal x993=(sj1*sj2);
CheckValue<IkReal> x994 = IKatan2WithCheck(IkReal((((r01*x993))+(((-1.0)*r11*x992)))),IkReal(((((-1.0)*r00*x993))+((r10*x992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x994.valid){
continue;
}
CheckValue<IkReal> x995=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x995.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x994.value)+(((1.5707963267949)*(x995.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x996=IKsin(j6);
IkReal x997=IKcos(j6);
IkReal x998=((1.0)*sj2);
IkReal x999=((0.01275)*sj2);
IkReal x1000=((1.0)*sj1);
IkReal x1001=((0.31436)*cj3);
IkReal x1002=(sj5*x996);
IkReal x1003=(r00*x996);
IkReal x1004=((0.0003501)*x997);
IkReal x1005=((1.0)*x997);
IkReal x1006=(r10*x996);
IkReal x1007=(cj5*x996);
IkReal x1008=(cj5*x1005);
evalcond[0]=(((r11*x1002))+(((-1.0)*r10*sj5*x1005))+((cj1*cj3)));
evalcond[1]=((((-1.0)*x1003))+(((-1.0)*r01*x1005))+(((-1.0)*cj1*x998)));
evalcond[2]=((((-1.0)*x1006))+(((-1.0)*sj1*x998))+(((-1.0)*r11*x1005)));
evalcond[3]=((((-1.0)*r10*x1008))+((cj1*sj3))+((r11*x1007)));
evalcond[4]=(((r01*x1002))+(((-1.0)*r00*sj5*x1005))+(((-1.0)*cj3*x1000)));
evalcond[5]=(((r01*x1007))+(((-1.0)*sj3*x1000))+(((-1.0)*r00*x1008)));
evalcond[6]=(((r01*x1004))+((sj1*x1001))+(((-1.0)*px))+(((0.0003501)*x1003))+(((0.42076)*sj1))+(((-1.0)*cj1*x999)));
evalcond[7]=((((-1.0)*sj1*x999))+(((-0.42076)*cj1))+(((-1.0)*py))+(((0.0003501)*x1006))+(((-1.0)*cj1*x1001))+((r11*x1004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x1009=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1009);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1009);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=r22;
j5eval[1]=((IKabs((sj2*sj3)))+(IKabs((cj3*sj2))));
j5eval[2]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1010 = IKatan2WithCheck(IkReal(((-1.0)*cj3*sj2)),IkReal((sj2*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x1010.valid){
continue;
}
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1011.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1010.value)+(((1.5707963267949)*(x1011.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1012=((1.0)*r22);
evalcond[0]=(((sj2*sj3))+(((-1.0)*x1012*(IKcos(j5)))));
evalcond[1]=((((-1.0)*x1012*(IKsin(j5))))+(((-1.0)*cj3*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1013=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1013);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1013);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1014=r10*r10;
IkReal x1015=r11*r11;
IkReal x1016=(cj3*cj5);
IkReal x1017=(sj3*sj5);
IkReal x1018=((4.0)*x1014);
IkReal x1019=((4.0)*r00*r10);
IkReal x1020=((4.0)*x1015);
IkReal x1021=((4.0)*r01*r11);
IkReal x1022=(((x1017*x1021))+((x1016*x1019))+((x1017*x1019))+((x1016*x1021)));
IkReal x1023=(((x1017*x1020))+((x1016*x1018))+((x1017*x1018))+((x1016*x1020)));
j1eval[0]=((((1.5)*(IKabs(x1022))))+(((1.5)*(IKabs(x1023)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1024=(sj3*sj5);
IkReal x1025=(cj3*cj5);
IkReal x1026=((4.0)*r01*r11);
IkReal x1027=((4.0)*r00*r10);
IkReal x1028=((((-1.0)*x1025*x1026))+(((-1.0)*x1025*x1027))+(((-1.0)*x1024*x1026))+(((-1.0)*x1024*x1027)));
IkReal x1029=(((x1025*x1027))+((x1025*x1026))+((x1024*x1027))+((x1024*x1026)));
op[0]=x1028;
op[1]=0;
op[2]=x1028;
op[3]=0;
op[4]=x1029;
op[5]=0;
op[6]=x1029;
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1030=r10*r10;
IkReal x1031=r11*r11;
IkReal x1032=(cj3*cj5);
IkReal x1033=(sj3*sj5);
IkReal x1034=((4.0)*x1030);
IkReal x1035=((4.0)*x1031);
IkReal x1036=(x1033*x1035);
IkReal x1037=(x1032*x1034);
IkReal x1038=(x1033*x1034);
IkReal x1039=(x1032*x1035);
IkReal x1040=(x1038+x1039+x1036+x1037);
IkReal x1041=((-1.0)*x1040);
j1evalpoly[0]=(x1040+((x1041*(htj1*htj1*htj1*htj1*htj1*htj1)))+((x1040*(htj1*htj1)))+((x1041*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j6eval[4];
IkReal x1042=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1042);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1042);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=r22;
j6eval[1]=sj2;
j6eval[2]=((sj1*sj1)+(cj1*cj1));
j6eval[3]=IKsign(r22);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1043=(cj1*sj2);
IkReal x1044=(sj1*sj2);
CheckValue<IkReal> x1045 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1044))+((r11*x1043)))),IkReal(((((-1.0)*r10*x1043))+((r00*x1044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1045.valid){
continue;
}
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1046.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1045.value)+(((1.5707963267949)*(x1046.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1047=IKsin(j6);
IkReal x1048=IKcos(j6);
IkReal x1049=((1.0)*sj2);
IkReal x1050=((0.01275)*sj2);
IkReal x1051=((1.0)*sj1);
IkReal x1052=((0.31436)*cj3);
IkReal x1053=(sj5*x1047);
IkReal x1054=(cj5*x1048);
IkReal x1055=(r10*x1047);
IkReal x1056=(r00*x1047);
IkReal x1057=((0.0003501)*x1048);
IkReal x1058=((1.0)*sj5*x1048);
IkReal x1059=((1.0)*cj5*x1047);
evalcond[0]=(x1056+(((-1.0)*cj1*x1049))+((r01*x1048)));
evalcond[1]=(x1055+((r11*x1048))+(((-1.0)*sj1*x1049)));
evalcond[2]=(((r11*x1053))+(((-1.0)*r10*x1058))+((cj1*cj3)));
evalcond[3]=(((cj1*sj3))+(((-1.0)*r11*x1059))+((r10*x1054)));
evalcond[4]=((((-1.0)*r00*x1058))+((r01*x1053))+(((-1.0)*cj3*x1051)));
evalcond[5]=((((-1.0)*r01*x1059))+((r00*x1054))+(((-1.0)*sj3*x1051)));
evalcond[6]=((((-1.0)*cj1*x1050))+((sj1*x1052))+(((-1.0)*px))+((r01*x1057))+(((0.42076)*sj1))+(((0.0003501)*x1056)));
evalcond[7]=(((r11*x1057))+(((-1.0)*cj1*x1052))+(((-0.42076)*cj1))+(((-1.0)*py))+(((-1.0)*sj1*x1050))+(((0.0003501)*x1055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(r22,-1);
if(!x1062.valid){
continue;
}
IkReal x1060=x1062.value;
IkReal x1061=(sj2*x1060);
CheckValue<IkReal> x1063=IKPowWithIntegerCheck(cj4,-1);
if(!x1063.valid){
continue;
}
if( IKabs((cj3*x1061*(x1063.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj3*x1061)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj3*x1061*(x1063.value)))+IKsqr((sj3*x1061))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj3*x1061*(x1063.value)), (sj3*x1061));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1064=IKsin(j5);
IkReal x1065=(r22*x1064);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*(IKcos(j5)))));
evalcond[1]=(((sj4*x1065))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*cj3*sj2))+((cj4*x1065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x1066=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1066);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1066);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1067=sj2*sj2;
IkReal x1068=((16.0)*r11);
IkReal x1069=(cj3*sj2);
IkReal x1070=(cj5*sj4);
IkReal x1071=((4.0)*cj4);
IkReal x1072=(cj4*r00);
IkReal x1073=((8.0)*r11);
IkReal x1074=((4.0)*r00);
IkReal x1075=((4.0)*r10);
IkReal x1076=(cj4*r10);
IkReal x1077=((8.0)*r01);
IkReal x1078=((16.0)*r01);
IkReal x1079=(sj5*x1067);
IkReal x1080=(cj2*sj2*sj3);
IkReal x1081=(x1074*x1079);
IkReal x1082=(((r11*x1071*x1080))+((x1070*x1075*x1080)));
IkReal x1083=(((r01*x1069*x1071))+((x1069*x1070*x1074))+((x1075*x1079)));
IkReal x1084=(((x1069*x1070*x1075))+((r11*x1069*x1071))+((x1070*x1074*x1080))+((r01*x1071*x1080)));
j6eval[0]=((((0.5)*(IKabs((((x1078*x1079))+(((16.0)*x1072*x1080))+(((16.0)*x1069*x1076))+(((-1.0)*x1070*x1078*x1080))+(((-1.0)*x1068*x1069*x1070)))))))+(IKabs((((x1069*x1070*x1077))+((x1073*x1079))+(((-8.0)*x1069*x1072))+(((-1.0)*x1070*x1073*x1080))+(((8.0)*x1076*x1080)))))+(((0.5)*(IKabs((((x1068*x1079))+((x1069*x1070*x1078))+(((16.0)*x1076*x1080))+(((-1.0)*x1068*x1070*x1080))+(((-16.0)*x1069*x1072)))))))+(IKabs((x1083+(((-1.0)*x1082)))))+(((0.5)*(IKabs((x1084+(((-1.0)*x1081)))))))+(((0.5)*(IKabs((x1082+(((-1.0)*x1083)))))))+(IKabs((x1081+(((-1.0)*x1084)))))+(IKabs((((x1077*x1079))+(((-1.0)*x1070*x1077*x1080))+(((8.0)*x1072*x1080))+(((8.0)*x1069*x1076))+(((-1.0)*x1069*x1070*x1073))))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j6]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x1085=sj2*sj2;
IkReal x1086=(cj3*r01);
IkReal x1087=(cj4*sj2);
IkReal x1088=(cj3*r00);
IkReal x1089=((4.0)*x1087);
IkReal x1090=(cj2*r11*sj3);
IkReal x1091=(cj2*r10*sj3);
IkReal x1092=((16.0)*cj5*sj2*sj4);
IkReal x1093=(r11*sj5*x1085);
IkReal x1094=((8.0)*cj5*sj2*sj4);
IkReal x1095=((4.0)*cj5*sj2*sj4);
IkReal x1096=(((x1089*x1090))+((x1091*x1095)));
IkReal x1097=(((x1088*x1095))+(((4.0)*r10*sj5*x1085))+((x1086*x1089)));
IkReal x1098=(x1097+(((-1.0)*x1096)));
IkReal x1099=((((8.0)*x1093))+(((-1.0)*x1090*x1094))+((x1086*x1094))+(((8.0)*x1087*x1091))+(((-8.0)*x1087*x1088)));
IkReal x1100=(x1096+(((-1.0)*x1097)));
op[0]=x1098;
op[1]=x1099;
op[2]=x1098;
op[3]=((((-16.0)*x1087*x1088))+(((16.0)*x1087*x1091))+(((-1.0)*x1090*x1092))+((x1086*x1092))+(((16.0)*x1093)));
op[4]=x1100;
op[5]=x1099;
op[6]=x1100;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x1101=sj2*sj2;
IkReal x1102=((16.0)*sj2);
IkReal x1103=(cj2*sj3);
IkReal x1104=(cj4*r00);
IkReal x1105=(cj5*sj4);
IkReal x1106=(cj3*r11);
IkReal x1107=((8.0)*sj2);
IkReal x1108=(cj3*r10);
IkReal x1109=((4.0)*sj2);
IkReal x1110=(r01*sj5*x1101);
IkReal x1111=((4.0)*r00*sj5*x1101);
IkReal x1112=(cj4*x1106*x1109);
IkReal x1113=(cj4*r01*x1103*x1109);
IkReal x1114=(x1105*x1108*x1109);
IkReal x1115=(r00*x1103*x1105*x1109);
IkReal x1116=(x1113+x1112+x1115+x1114);
IkReal x1117=((((-1.0)*r01*x1103*x1105*x1107))+((cj4*x1107*x1108))+(((-1.0)*x1105*x1106*x1107))+((x1103*x1104*x1107))+(((8.0)*x1110)));
IkReal x1118=(x1111+(((-1.0)*x1116)));
j6evalpoly[0]=(x1116+((x1118*(htj6*htj6*htj6*htj6*htj6*htj6)))+((x1118*(htj6*htj6*htj6*htj6)))+((x1117*(htj6*htj6*htj6*htj6*htj6)))+(((htj6*htj6*htj6)*((((x1102*x1103*x1104))+((cj4*x1102*x1108))+(((-1.0)*r01*x1102*x1103*x1105))+(((16.0)*x1110))+(((-1.0)*x1102*x1105*x1106))))))+(((htj6*htj6)*((x1116+(((-1.0)*x1111))))))+((htj6*x1117))+(((-1.0)*x1111)));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[3];
IkReal x1119=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1119);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1119);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1120=cj2*cj2;
IkReal x1121=cj3*cj3;
IkReal x1122=sj5*sj5;
IkReal x1123=sj6*sj6;
IkReal x1124=cj6*cj6;
IkReal x1125=sj3*sj3;
IkReal x1126=(x1122*x1124);
IkReal x1127=(x1120*x1125);
IkReal x1128=(x1122*x1123);
IkReal x1129=(x1120+x1121+(((-1.0)*x1120*x1121)));
j1eval[0]=x1129;
j1eval[1]=(((x1127*x1128))+((x1121*x1126))+((x1121*x1128))+((x1126*x1127)));
j1eval[2]=IKsign(x1129);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1130=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1130);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1130);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1131=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1131);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1131);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=sj2;
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1132=(cj6*r01);
IkReal x1133=(r00*sj6);
IkReal x1134=(sj3*sj4);
IkReal x1135=((1.0)*cj3*sj4);
if( IKabs((((x1133*x1134))+((x1132*x1134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1132*x1135))+(((-1.0)*x1133*x1135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1133*x1134))+((x1132*x1134))))+IKsqr(((((-1.0)*x1132*x1135))+(((-1.0)*x1133*x1135))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1133*x1134))+((x1132*x1134))), ((((-1.0)*x1132*x1135))+(((-1.0)*x1133*x1135))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1136=IKcos(j1);
IkReal x1137=IKsin(j1);
IkReal x1138=((1.0)*sj3);
IkReal x1139=(r00*sj6);
IkReal x1140=(cj6*r01);
IkReal x1141=(cj6*r11);
IkReal x1142=(r10*sj6);
IkReal x1143=(cj3*x1136);
IkReal x1144=(cj3*x1137);
IkReal x1145=(sj3*x1136);
IkReal x1146=(x1137*x1138);
evalcond[0]=(x1143+(((-1.0)*x1146)));
evalcond[1]=((((-1.0)*x1144))+(((-1.0)*x1136*x1138)));
evalcond[2]=(((sj4*x1142))+((sj4*x1141))+x1144+x1145);
evalcond[3]=(((sj4*x1140))+x1143+((sj4*x1139))+(((-1.0)*x1146)));
evalcond[4]=((((0.42076)*x1137))+(((-1.0)*px))+(((0.31436)*x1144))+(((0.31436)*x1145))+(((0.0003501)*x1139))+(((0.0003501)*x1140)));
evalcond[5]=((((-0.42076)*x1136))+(((-1.0)*py))+(((-0.31436)*x1143))+(((0.31436)*sj3*x1137))+(((0.0003501)*x1141))+(((0.0003501)*x1142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1147=(cj3*sj4);
IkReal x1148=(cj6*r01);
IkReal x1149=(r00*sj6);
IkReal x1150=(sj3*sj4);
if( IKabs((((x1149*x1150))+((x1148*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1147*x1149))+((x1147*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1149*x1150))+((x1148*x1150))))+IKsqr((((x1147*x1149))+((x1147*x1148))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1149*x1150))+((x1148*x1150))), (((x1147*x1149))+((x1147*x1148))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1151=IKcos(j1);
IkReal x1152=IKsin(j1);
IkReal x1153=(r00*sj6);
IkReal x1154=(cj6*r01);
IkReal x1155=(cj6*r11);
IkReal x1156=(r10*sj6);
IkReal x1157=(sj3*x1151);
IkReal x1158=(cj3*x1152);
IkReal x1159=(sj3*x1152);
IkReal x1160=(cj3*x1151);
IkReal x1161=((1.0)*x1158);
evalcond[0]=(x1159+x1160);
evalcond[1]=(x1157+(((-1.0)*x1161)));
evalcond[2]=(x1157+(((-1.0)*x1161))+((sj4*x1156))+((sj4*x1155)));
evalcond[3]=((((-1.0)*x1159))+(((-1.0)*x1160))+((sj4*x1154))+((sj4*x1153)));
evalcond[4]=((((0.42076)*x1152))+(((0.31436)*x1158))+(((-1.0)*px))+(((0.0003501)*x1154))+(((0.0003501)*x1153))+(((-0.31436)*x1157)));
evalcond[5]=((((-0.31436)*x1160))+(((-1.0)*py))+(((-0.42076)*x1151))+(((0.0003501)*x1156))+(((0.0003501)*x1155))+(((-0.31436)*x1159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1162=(sj4*sj6);
IkReal x1163=(cj6*sj4);
if( IKabs((((r00*x1162))+((r01*x1163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1162))+(((-1.0)*r11*x1163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1162))+((r01*x1163))))+IKsqr(((((-1.0)*r10*x1162))+(((-1.0)*r11*x1163))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x1162))+((r01*x1163))), ((((-1.0)*r10*x1162))+(((-1.0)*r11*x1163))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1164=IKcos(j1);
IkReal x1165=IKsin(j1);
IkReal x1166=((0.31436)*cj2);
IkReal x1167=(r00*sj6);
IkReal x1168=((0.0003501)*cj6);
IkReal x1169=(r01*sj4);
IkReal x1170=(cj5*sj6);
IkReal x1171=(r10*sj4);
IkReal x1172=(r11*sj4);
IkReal x1173=(sj2*x1164);
IkReal x1174=(sj2*x1165);
IkReal x1175=((-1.0)*cj2);
IkReal x1176=((1.0)*cj5*cj6);
evalcond[0]=(x1165*x1175);
evalcond[1]=(x1164*x1175);
evalcond[2]=(x1164+((sj6*x1171))+((cj6*x1172)));
evalcond[3]=(((sj4*x1167))+((cj6*x1169))+(((-1.0)*x1165)));
evalcond[4]=((((-1.0)*r00*sj4*x1176))+((x1169*x1170))+(((-1.0)*x1173)));
evalcond[5]=((((-1.0)*x1171*x1176))+((x1170*x1172))+(((-1.0)*x1174)));
evalcond[6]=(((x1164*x1166))+(((0.42076)*x1165))+((r01*x1168))+(((-0.01275)*x1173))+(((0.0003501)*x1167))+(((-1.0)*px)));
evalcond[7]=(((x1165*x1166))+(((-0.42076)*x1164))+(((-0.01275)*x1174))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+((r11*x1168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1177=((1.0)*sj4);
if( IKabs(((((-1.0)*cj6*r01*x1177))+(((-1.0)*r00*sj6*x1177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj4*sj6))+((cj6*r11*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r01*x1177))+(((-1.0)*r00*sj6*x1177))))+IKsqr((((r10*sj4*sj6))+((cj6*r11*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj6*r01*x1177))+(((-1.0)*r00*sj6*x1177))), (((r10*sj4*sj6))+((cj6*r11*sj4))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1178=IKsin(j1);
IkReal x1179=IKcos(j1);
IkReal x1180=(r00*sj6);
IkReal x1181=((0.0003501)*cj6);
IkReal x1182=((0.01275)*sj2);
IkReal x1183=(r01*sj4);
IkReal x1184=(cj5*sj6);
IkReal x1185=(r10*sj4);
IkReal x1186=(r11*sj4);
IkReal x1187=(cj2*x1179);
IkReal x1188=((1.0)*x1179);
IkReal x1189=(cj2*x1178);
IkReal x1190=((1.0)*cj5*cj6);
evalcond[0]=x1189;
evalcond[1]=x1187;
evalcond[2]=(((cj6*x1183))+x1178+((sj4*x1180)));
evalcond[3]=(((cj6*x1186))+(((-1.0)*x1188))+((sj6*x1185)));
evalcond[4]=((((-1.0)*r00*sj4*x1190))+((x1183*x1184))+(((-1.0)*sj2*x1188)));
evalcond[5]=(((x1184*x1186))+(((-1.0)*sj2*x1178))+(((-1.0)*x1185*x1190)));
evalcond[6]=((((0.42076)*x1178))+((r01*x1181))+(((-1.0)*x1179*x1182))+(((-1.0)*px))+(((0.0003501)*x1180))+(((-0.31436)*x1187)));
evalcond[7]=((((-0.42076)*x1179))+(((-1.0)*x1178*x1182))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+((r11*x1181))+(((-0.31436)*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1191=((1.0)*cj4);
if( IKabs(((((-1.0)*cj6*r11*x1191))+(((-1.0)*r10*sj6*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x1191))+(((-1.0)*r00*sj6*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r11*x1191))+(((-1.0)*r10*sj6*x1191))))+IKsqr(((((-1.0)*cj6*r01*x1191))+(((-1.0)*r00*sj6*x1191))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj6*r11*x1191))+(((-1.0)*r10*sj6*x1191))), ((((-1.0)*cj6*r01*x1191))+(((-1.0)*r00*sj6*x1191))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1192=IKcos(j1);
IkReal x1193=IKsin(j1);
IkReal x1194=(r00*sj6);
IkReal x1195=((0.0003501)*cj6);
IkReal x1196=(cj4*r11);
IkReal x1197=((1.0)*cj6);
IkReal x1198=(cj5*sj6);
IkReal x1199=(cj4*r01);
IkReal x1200=((1.0)*cj4);
IkReal x1201=(r10*sj6);
IkReal x1202=(cj3*x1193);
IkReal x1203=((1.0)*x1193);
IkReal x1204=(cj3*x1192);
IkReal x1205=(cj4*cj5*x1197);
evalcond[0]=x1204;
evalcond[1]=((-1.0)*x1202);
evalcond[2]=((((-1.0)*x1197*x1199))+(((-1.0)*x1194*x1200))+(((-1.0)*x1192)));
evalcond[3]=((((-1.0)*x1200*x1201))+(((-1.0)*x1196*x1197))+(((-1.0)*x1203)));
evalcond[4]=((((-1.0)*r10*x1205))+((x1196*x1198))+((sj3*x1192)));
evalcond[5]=((((-1.0)*sj3*x1203))+((x1198*x1199))+(((-1.0)*r00*x1205)));
evalcond[6]=((((0.42076)*x1193))+((r01*x1195))+(((0.0003501)*x1194))+(((-1.0)*px))+(((-0.01275)*x1192))+(((0.31436)*x1202)));
evalcond[7]=((((0.0003501)*x1201))+(((-0.31436)*x1204))+(((-0.42076)*x1192))+(((-1.0)*py))+(((-0.01275)*x1193))+((r11*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1206=(cj4*sj6);
IkReal x1207=(cj4*cj6);
if( IKabs((((r10*x1206))+((r11*x1207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1207))+((r00*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1206))+((r11*x1207))))+IKsqr((((r01*x1207))+((r00*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1206))+((r11*x1207))), (((r01*x1207))+((r00*x1206))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1208=IKcos(j1);
IkReal x1209=IKsin(j1);
IkReal x1210=(r00*sj6);
IkReal x1211=((0.0003501)*cj6);
IkReal x1212=(cj4*r11);
IkReal x1213=((1.0)*cj6);
IkReal x1214=(cj5*sj6);
IkReal x1215=(cj4*r01);
IkReal x1216=((1.0)*cj4);
IkReal x1217=(r10*sj6);
IkReal x1218=(cj3*x1209);
IkReal x1219=(cj3*x1208);
IkReal x1220=(cj4*cj5*x1213);
evalcond[0]=x1219;
evalcond[1]=((-1.0)*x1218);
evalcond[2]=(x1208+(((-1.0)*x1213*x1215))+(((-1.0)*x1210*x1216)));
evalcond[3]=(x1209+(((-1.0)*x1216*x1217))+(((-1.0)*x1212*x1213)));
evalcond[4]=(((x1212*x1214))+(((-1.0)*r10*x1220))+((sj3*x1208)));
evalcond[5]=(((x1214*x1215))+(((-1.0)*sj3*x1209))+(((-1.0)*r00*x1220)));
evalcond[6]=((((0.01275)*x1208))+(((0.31436)*x1218))+((r01*x1211))+(((-1.0)*px))+(((0.42076)*x1209))+(((0.0003501)*x1210)));
evalcond[7]=(((r11*x1211))+(((0.01275)*x1209))+(((-0.42076)*x1208))+(((-1.0)*py))+(((-0.31436)*x1219))+(((0.0003501)*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1221=((0.000832065785721076)*sj6);
IkReal x1222=((0.000832065785721076)*cj6);
if( IKabs(((((-1.0)*r01*x1222))+(((-1.0)*r00*x1221))+(((2.37665177298222)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37665177298222)*py))+((r10*x1221))+((r11*x1222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1222))+(((-1.0)*r00*x1221))+(((2.37665177298222)*px))))+IKsqr(((((-2.37665177298222)*py))+((r10*x1221))+((r11*x1222))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1222))+(((-1.0)*r00*x1221))+(((2.37665177298222)*px))), ((((-2.37665177298222)*py))+((r10*x1221))+((r11*x1222))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1223=IKcos(j1);
IkReal x1224=IKsin(j1);
IkReal x1225=((0.0003501)*sj6);
IkReal x1226=((0.0003501)*cj6);
IkReal x1227=(cj4*sj6);
IkReal x1228=(sj4*sj6);
IkReal x1229=(cj6*sj4);
IkReal x1230=((1.0)*cj4*cj6);
evalcond[0]=(((r01*x1226))+((r00*x1225))+(((0.42076)*x1224))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+((r10*x1225))+(((-0.42076)*x1223))+((r11*x1226)));
evalcond[2]=(((sj3*x1223))+((r10*x1228))+(((-1.0)*r10*x1230))+((r11*x1227))+((r11*x1229)));
evalcond[3]=((((-1.0)*r00*x1230))+((r01*x1227))+((r01*x1229))+((r00*x1228))+(((-1.0)*sj3*x1224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1231=((0.000832065785721076)*sj6);
IkReal x1232=((0.000832065785721076)*cj6);
if( IKabs(((((-1.0)*r00*x1231))+(((-1.0)*r01*x1232))+(((2.37665177298222)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37665177298222)*py))+((r10*x1231))+((r11*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1231))+(((-1.0)*r01*x1232))+(((2.37665177298222)*px))))+IKsqr(((((-2.37665177298222)*py))+((r10*x1231))+((r11*x1232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1231))+(((-1.0)*r01*x1232))+(((2.37665177298222)*px))), ((((-2.37665177298222)*py))+((r10*x1231))+((r11*x1232))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1233=IKcos(j1);
IkReal x1234=IKsin(j1);
IkReal x1235=(r00*sj6);
IkReal x1236=((0.0003501)*cj6);
IkReal x1237=(r10*sj6);
IkReal x1238=(cj6*sj4);
IkReal x1239=(cj4*cj6);
IkReal x1240=((1.0)*cj4*sj6);
evalcond[0]=(((r01*x1236))+(((0.42076)*x1234))+(((-1.0)*px))+(((0.0003501)*x1235)));
evalcond[1]=((((-1.0)*py))+(((-0.42076)*x1233))+((r11*x1236))+(((0.0003501)*x1237)));
evalcond[2]=(((sj3*x1233))+((r10*x1239))+(((-1.0)*r11*x1240))+((sj4*x1237))+((r11*x1238)));
evalcond[3]=(((r00*x1239))+((r01*x1238))+((sj4*x1235))+(((-1.0)*sj3*x1234))+(((-1.0)*r01*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(sj2,-1);
if(!x1249.valid){
continue;
}
IkReal x1241=x1249.value;
IkReal x1242=(cj2*sj3);
IkReal x1243=(r11*sj6);
IkReal x1244=(cj5*sj4);
IkReal x1245=(sj2*sj5);
IkReal x1246=((1.0)*cj6);
IkReal x1247=(cj4*r11);
IkReal x1248=((1.0)*cj4*r10*sj6);
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(cj3,-1);
if(!x1250.valid){
continue;
}
if( IKabs((x1241*(((((-1.0)*x1248))+((x1243*x1244))+(((-1.0)*r10*x1244*x1246))+(((-1.0)*x1246*x1247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1241*(x1250.value)*(((((-1.0)*r10*x1242*x1244*x1246))+(((-1.0)*x1242*x1248))+(((-1.0)*x1243*x1245))+((x1242*x1243*x1244))+((cj6*r10*x1245))+(((-1.0)*x1242*x1246*x1247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1241*(((((-1.0)*x1248))+((x1243*x1244))+(((-1.0)*r10*x1244*x1246))+(((-1.0)*x1246*x1247))))))+IKsqr((x1241*(x1250.value)*(((((-1.0)*r10*x1242*x1244*x1246))+(((-1.0)*x1242*x1248))+(((-1.0)*x1243*x1245))+((x1242*x1243*x1244))+((cj6*r10*x1245))+(((-1.0)*x1242*x1246*x1247))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1241*(((((-1.0)*x1248))+((x1243*x1244))+(((-1.0)*r10*x1244*x1246))+(((-1.0)*x1246*x1247))))), (x1241*(x1250.value)*(((((-1.0)*r10*x1242*x1244*x1246))+(((-1.0)*x1242*x1248))+(((-1.0)*x1243*x1245))+((x1242*x1243*x1244))+((cj6*r10*x1245))+(((-1.0)*x1242*x1246*x1247))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1251=IKcos(j1);
IkReal x1252=IKsin(j1);
IkReal x1253=((0.31436)*sj3);
IkReal x1254=(r11*sj6);
IkReal x1255=(cj4*cj5);
IkReal x1256=(r00*sj6);
IkReal x1257=((0.0003501)*cj6);
IkReal x1258=(r01*sj6);
IkReal x1259=(cj5*sj4);
IkReal x1260=((1.0)*sj3);
IkReal x1261=((1.0)*cj4);
IkReal x1262=(cj6*r11);
IkReal x1263=(cj6*r01);
IkReal x1264=(r10*sj6);
IkReal x1265=(cj2*x1251);
IkReal x1266=(cj3*x1252);
IkReal x1267=((1.0)*cj6*r10);
IkReal x1268=(sj2*x1251);
IkReal x1269=(sj2*x1252);
IkReal x1270=((1.0)*cj6*r00);
IkReal x1271=(cj2*x1252);
IkReal x1272=(cj3*x1251);
evalcond[0]=(x1272+((sj5*x1254))+(((-1.0)*x1260*x1271))+(((-1.0)*sj5*x1267)));
evalcond[1]=(((sj5*x1258))+(((-1.0)*x1260*x1265))+(((-1.0)*sj5*x1270))+(((-1.0)*x1266)));
evalcond[2]=((((-1.0)*x1259*x1270))+(((-1.0)*x1261*x1263))+((x1258*x1259))+(((-1.0)*x1256*x1261))+(((-1.0)*x1268)));
evalcond[3]=((((-1.0)*x1261*x1264))+(((-1.0)*x1261*x1262))+((x1254*x1259))+(((-1.0)*x1269))+(((-1.0)*x1259*x1267)));
evalcond[4]=(((sj4*x1264))+((sj4*x1262))+((cj2*x1266))+(((-1.0)*x1255*x1267))+((x1254*x1255))+((sj3*x1251)));
evalcond[5]=((((-1.0)*x1255*x1270))+((sj4*x1256))+((cj3*x1265))+((sj4*x1263))+(((-1.0)*x1252*x1260))+((x1255*x1258)));
evalcond[6]=((((0.0003501)*x1256))+(((0.31436)*x1266))+((x1253*x1265))+(((-1.0)*px))+(((0.42076)*x1252))+(((-0.01275)*x1268))+((r01*x1257)));
evalcond[7]=(((r11*x1257))+(((0.0003501)*x1264))+(((-0.31436)*x1272))+((x1253*x1271))+(((-1.0)*py))+(((-0.01275)*x1269))+(((-0.42076)*x1251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1273=(r11*sj3);
IkReal x1274=(sj5*sj6);
IkReal x1275=(cj3*r11);
IkReal x1276=((1.0)*sj6);
IkReal x1277=(cj4*cj5);
IkReal x1278=(cj3*r10);
IkReal x1279=(cj6*sj5);
IkReal x1280=(r10*sj3);
IkReal x1281=((1.0)*cj6*sj4);
IkReal x1282=(cj6*r10*x1277);
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(cj2,-1);
if(!x1283.valid){
continue;
}
if( IKabs(((x1283.value)*((((cj6*x1277*x1278))+(((-1.0)*x1275*x1281))+((x1273*x1274))+(((-1.0)*x1279*x1280))+(((-1.0)*sj4*x1276*x1278))+(((-1.0)*x1275*x1276*x1277)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1273*x1276*x1277))+(((-1.0)*x1274*x1275))+((x1278*x1279))+((cj6*x1277*x1280))+(((-1.0)*x1273*x1281))+(((-1.0)*sj4*x1276*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1283.value)*((((cj6*x1277*x1278))+(((-1.0)*x1275*x1281))+((x1273*x1274))+(((-1.0)*x1279*x1280))+(((-1.0)*sj4*x1276*x1278))+(((-1.0)*x1275*x1276*x1277))))))+IKsqr(((((-1.0)*x1273*x1276*x1277))+(((-1.0)*x1274*x1275))+((x1278*x1279))+((cj6*x1277*x1280))+(((-1.0)*x1273*x1281))+(((-1.0)*sj4*x1276*x1280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1283.value)*((((cj6*x1277*x1278))+(((-1.0)*x1275*x1281))+((x1273*x1274))+(((-1.0)*x1279*x1280))+(((-1.0)*sj4*x1276*x1278))+(((-1.0)*x1275*x1276*x1277))))), ((((-1.0)*x1273*x1276*x1277))+(((-1.0)*x1274*x1275))+((x1278*x1279))+((cj6*x1277*x1280))+(((-1.0)*x1273*x1281))+(((-1.0)*sj4*x1276*x1280))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1284=IKcos(j1);
IkReal x1285=IKsin(j1);
IkReal x1286=((0.31436)*sj3);
IkReal x1287=(r11*sj6);
IkReal x1288=(cj4*cj5);
IkReal x1289=(r00*sj6);
IkReal x1290=((0.0003501)*cj6);
IkReal x1291=(r01*sj6);
IkReal x1292=(cj5*sj4);
IkReal x1293=((1.0)*sj3);
IkReal x1294=((1.0)*cj4);
IkReal x1295=(cj6*r11);
IkReal x1296=(cj6*r01);
IkReal x1297=(r10*sj6);
IkReal x1298=(cj2*x1284);
IkReal x1299=(cj3*x1285);
IkReal x1300=((1.0)*cj6*r10);
IkReal x1301=(sj2*x1284);
IkReal x1302=(sj2*x1285);
IkReal x1303=((1.0)*cj6*r00);
IkReal x1304=(cj2*x1285);
IkReal x1305=(cj3*x1284);
evalcond[0]=(x1305+((sj5*x1287))+(((-1.0)*sj5*x1300))+(((-1.0)*x1293*x1304)));
evalcond[1]=(((sj5*x1291))+(((-1.0)*sj5*x1303))+(((-1.0)*x1293*x1298))+(((-1.0)*x1299)));
evalcond[2]=((((-1.0)*x1301))+(((-1.0)*x1289*x1294))+((x1291*x1292))+(((-1.0)*x1292*x1303))+(((-1.0)*x1294*x1296)));
evalcond[3]=(((x1287*x1292))+(((-1.0)*x1302))+(((-1.0)*x1292*x1300))+(((-1.0)*x1294*x1295))+(((-1.0)*x1294*x1297)));
evalcond[4]=(((cj2*x1299))+(((-1.0)*x1288*x1300))+((x1287*x1288))+((sj4*x1295))+((sj4*x1297))+((sj3*x1284)));
evalcond[5]=(((cj3*x1298))+((sj4*x1289))+(((-1.0)*x1288*x1303))+((x1288*x1291))+((sj4*x1296))+(((-1.0)*x1285*x1293)));
evalcond[6]=(((x1286*x1298))+(((-0.01275)*x1301))+(((-1.0)*px))+(((0.0003501)*x1289))+(((0.42076)*x1285))+((r01*x1290))+(((0.31436)*x1299)));
evalcond[7]=((((-0.31436)*x1305))+(((0.0003501)*x1297))+((x1286*x1304))+(((-0.01275)*x1302))+(((-1.0)*py))+((r11*x1290))+(((-0.42076)*x1284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1306=cj2*cj2;
IkReal x1307=cj3*cj3;
IkReal x1308=(r11*sj6);
IkReal x1309=((1.0)*cj6);
IkReal x1310=(cj3*sj5);
IkReal x1311=(r01*sj6);
IkReal x1312=(cj2*sj3*sj5);
CheckValue<IkReal> x1313=IKPowWithIntegerCheck(IKsign((x1306+x1307+(((-1.0)*x1306*x1307)))),-1);
if(!x1313.valid){
continue;
}
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal((((x1310*x1311))+((x1308*x1312))+(((-1.0)*r10*x1309*x1312))+(((-1.0)*r00*x1309*x1310)))),IkReal((((cj6*r10*x1310))+((x1311*x1312))+(((-1.0)*r00*x1309*x1312))+(((-1.0)*x1308*x1310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1313.value)))+(x1314.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1315=IKcos(j1);
IkReal x1316=IKsin(j1);
IkReal x1317=((0.31436)*sj3);
IkReal x1318=(r11*sj6);
IkReal x1319=(cj4*cj5);
IkReal x1320=(r00*sj6);
IkReal x1321=((0.0003501)*cj6);
IkReal x1322=(r01*sj6);
IkReal x1323=(cj5*sj4);
IkReal x1324=((1.0)*sj3);
IkReal x1325=((1.0)*cj4);
IkReal x1326=(cj6*r11);
IkReal x1327=(cj6*r01);
IkReal x1328=(r10*sj6);
IkReal x1329=(cj2*x1315);
IkReal x1330=(cj3*x1316);
IkReal x1331=((1.0)*cj6*r10);
IkReal x1332=(sj2*x1315);
IkReal x1333=(sj2*x1316);
IkReal x1334=((1.0)*cj6*r00);
IkReal x1335=(cj2*x1316);
IkReal x1336=(cj3*x1315);
evalcond[0]=(x1336+(((-1.0)*x1324*x1335))+((sj5*x1318))+(((-1.0)*sj5*x1331)));
evalcond[1]=((((-1.0)*x1324*x1329))+((sj5*x1322))+(((-1.0)*x1330))+(((-1.0)*sj5*x1334)));
evalcond[2]=((((-1.0)*x1332))+(((-1.0)*x1323*x1334))+((x1322*x1323))+(((-1.0)*x1325*x1327))+(((-1.0)*x1320*x1325)));
evalcond[3]=((((-1.0)*x1333))+(((-1.0)*x1323*x1331))+(((-1.0)*x1325*x1326))+(((-1.0)*x1325*x1328))+((x1318*x1323)));
evalcond[4]=(((x1318*x1319))+((sj3*x1315))+(((-1.0)*x1319*x1331))+((sj4*x1328))+((sj4*x1326))+((cj2*x1330)));
evalcond[5]=((((-1.0)*x1319*x1334))+((x1319*x1322))+((cj3*x1329))+((sj4*x1320))+((sj4*x1327))+(((-1.0)*x1316*x1324)));
evalcond[6]=(((r01*x1321))+(((0.0003501)*x1320))+(((-0.01275)*x1332))+(((0.42076)*x1316))+(((-1.0)*px))+(((0.31436)*x1330))+((x1317*x1329)));
evalcond[7]=((((-0.31436)*x1336))+((x1317*x1335))+(((0.0003501)*x1328))+(((-0.01275)*x1333))+((r11*x1321))+(((-1.0)*py))+(((-0.42076)*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1338=IKPowWithIntegerCheck(r22,-1);
if(!x1338.valid){
continue;
}
IkReal x1337=x1338.value;
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(sj4,-1);
if(!x1339.valid){
continue;
}
if( IKabs((cj2*x1337*(x1339.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*sj3*x1337)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*x1337*(x1339.value)))+IKsqr((sj2*sj3*x1337))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*x1337*(x1339.value)), (sj2*sj3*x1337));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1340=IKsin(j5);
IkReal x1341=(r22*x1340);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*(IKcos(j5)))));
evalcond[1]=(((sj4*x1341))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*cj3*sj2))+((cj4*x1341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[1];
IkReal x1342=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1342);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1342);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1343=sj2*sj2;
IkReal x1344=((16.0)*r11);
IkReal x1345=(cj3*sj2);
IkReal x1346=(cj5*sj4);
IkReal x1347=((4.0)*cj4);
IkReal x1348=(cj4*r00);
IkReal x1349=((8.0)*r11);
IkReal x1350=((4.0)*r00);
IkReal x1351=((4.0)*r10);
IkReal x1352=(cj4*r10);
IkReal x1353=((8.0)*r01);
IkReal x1354=((16.0)*r01);
IkReal x1355=(sj5*x1343);
IkReal x1356=(cj2*sj2*sj3);
IkReal x1357=(x1350*x1355);
IkReal x1358=(((x1346*x1351*x1356))+((r11*x1347*x1356)));
IkReal x1359=(((r01*x1345*x1347))+((x1351*x1355))+((x1345*x1346*x1350)));
IkReal x1360=(((r11*x1345*x1347))+((x1346*x1350*x1356))+((r01*x1347*x1356))+((x1345*x1346*x1351)));
j6eval[0]=((IKabs((x1359+(((-1.0)*x1358)))))+(((0.5)*(IKabs((x1360+(((-1.0)*x1357)))))))+(((0.5)*(IKabs(((((16.0)*x1345*x1352))+(((-1.0)*x1346*x1354*x1356))+(((16.0)*x1348*x1356))+((x1354*x1355))+(((-1.0)*x1344*x1345*x1346)))))))+(((0.5)*(IKabs(((((16.0)*x1352*x1356))+((x1344*x1355))+(((-16.0)*x1345*x1348))+(((-1.0)*x1344*x1346*x1356))+((x1345*x1346*x1354)))))))+(IKabs(((((-8.0)*x1345*x1348))+((x1349*x1355))+(((8.0)*x1352*x1356))+(((-1.0)*x1346*x1349*x1356))+((x1345*x1346*x1353)))))+(IKabs(((((-1.0)*x1346*x1353*x1356))+(((-1.0)*x1345*x1346*x1349))+(((8.0)*x1348*x1356))+(((8.0)*x1345*x1352))+((x1353*x1355)))))+(((0.5)*(IKabs((x1358+(((-1.0)*x1359)))))))+(IKabs((x1357+(((-1.0)*x1360))))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j6]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j6evalpoly[1];
IkReal x1361=sj2*sj2;
IkReal x1362=(cj3*r01);
IkReal x1363=(cj4*sj2);
IkReal x1364=(cj3*r00);
IkReal x1365=((4.0)*x1363);
IkReal x1366=(cj2*r11*sj3);
IkReal x1367=(cj2*r10*sj3);
IkReal x1368=((16.0)*cj5*sj2*sj4);
IkReal x1369=(r11*sj5*x1361);
IkReal x1370=((8.0)*cj5*sj2*sj4);
IkReal x1371=((4.0)*cj5*sj2*sj4);
IkReal x1372=(((x1367*x1371))+((x1365*x1366)));
IkReal x1373=((((4.0)*r10*sj5*x1361))+((x1364*x1371))+((x1362*x1365)));
IkReal x1374=(x1373+(((-1.0)*x1372)));
IkReal x1375=((((-8.0)*x1363*x1364))+((x1362*x1370))+(((-1.0)*x1366*x1370))+(((8.0)*x1369))+(((8.0)*x1363*x1367)));
IkReal x1376=(x1372+(((-1.0)*x1373)));
op[0]=x1374;
op[1]=x1375;
op[2]=x1374;
op[3]=((((-1.0)*x1366*x1368))+(((16.0)*x1369))+(((-16.0)*x1363*x1364))+(((16.0)*x1363*x1367))+((x1362*x1368)));
op[4]=x1376;
op[5]=x1375;
op[6]=x1376;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x1377=sj2*sj2;
IkReal x1378=((16.0)*sj2);
IkReal x1379=(cj2*sj3);
IkReal x1380=(cj4*r00);
IkReal x1381=(cj5*sj4);
IkReal x1382=(cj3*r11);
IkReal x1383=((8.0)*sj2);
IkReal x1384=(cj3*r10);
IkReal x1385=((4.0)*sj2);
IkReal x1386=(r01*sj5*x1377);
IkReal x1387=((4.0)*r00*sj5*x1377);
IkReal x1388=(cj4*x1382*x1385);
IkReal x1389=(cj4*r01*x1379*x1385);
IkReal x1390=(x1381*x1384*x1385);
IkReal x1391=(r00*x1379*x1381*x1385);
IkReal x1392=(x1388+x1389+x1391+x1390);
IkReal x1393=(((cj4*x1383*x1384))+(((-1.0)*x1381*x1382*x1383))+(((8.0)*x1386))+(((-1.0)*r01*x1379*x1381*x1383))+((x1379*x1380*x1383)));
IkReal x1394=(x1387+(((-1.0)*x1392)));
j6evalpoly[0]=((((-1.0)*x1387))+x1392+((htj6*x1393))+((x1394*(htj6*htj6*htj6*htj6*htj6*htj6)))+((x1393*(htj6*htj6*htj6*htj6*htj6)))+(((htj6*htj6*htj6)*(((((16.0)*x1386))+((x1378*x1379*x1380))+((cj4*x1378*x1384))+(((-1.0)*r01*x1378*x1379*x1381))+(((-1.0)*x1378*x1381*x1382))))))+((x1394*(htj6*htj6*htj6*htj6)))+(((htj6*htj6)*(((((-1.0)*x1387))+x1392)))));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j1eval[3];
IkReal x1395=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1395);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1395);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1396=cj2*cj2;
IkReal x1397=cj3*cj3;
IkReal x1398=sj5*sj5;
IkReal x1399=sj6*sj6;
IkReal x1400=cj6*cj6;
IkReal x1401=sj3*sj3;
IkReal x1402=(x1398*x1400);
IkReal x1403=(x1396*x1401);
IkReal x1404=(x1398*x1399);
IkReal x1405=(x1397+x1396+(((-1.0)*x1396*x1397)));
j1eval[0]=x1405;
j1eval[1]=(((x1397*x1402))+((x1397*x1404))+((x1403*x1404))+((x1402*x1403)));
j1eval[2]=IKsign(x1405);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1406=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1406);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1406);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1407=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1407);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1407);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j1eval[0]=sj2;
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1408=(cj6*r01);
IkReal x1409=(r00*sj6);
IkReal x1410=(sj3*sj4);
IkReal x1411=((1.0)*cj3*sj4);
if( IKabs((((x1409*x1410))+((x1408*x1410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1408*x1411))+(((-1.0)*x1409*x1411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1409*x1410))+((x1408*x1410))))+IKsqr(((((-1.0)*x1408*x1411))+(((-1.0)*x1409*x1411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1409*x1410))+((x1408*x1410))), ((((-1.0)*x1408*x1411))+(((-1.0)*x1409*x1411))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1412=IKcos(j1);
IkReal x1413=IKsin(j1);
IkReal x1414=((1.0)*sj3);
IkReal x1415=(r00*sj6);
IkReal x1416=(cj6*r01);
IkReal x1417=(cj6*r11);
IkReal x1418=(r10*sj6);
IkReal x1419=(cj3*x1412);
IkReal x1420=(cj3*x1413);
IkReal x1421=(sj3*x1412);
IkReal x1422=(x1413*x1414);
evalcond[0]=(x1419+(((-1.0)*x1422)));
evalcond[1]=((((-1.0)*x1412*x1414))+(((-1.0)*x1420)));
evalcond[2]=(((sj4*x1418))+((sj4*x1417))+x1421+x1420);
evalcond[3]=(((sj4*x1415))+((sj4*x1416))+x1419+(((-1.0)*x1422)));
evalcond[4]=((((0.31436)*x1421))+(((0.31436)*x1420))+(((0.0003501)*x1416))+(((0.0003501)*x1415))+(((-1.0)*px))+(((0.42076)*x1413)));
evalcond[5]=((((0.0003501)*x1418))+(((0.0003501)*x1417))+(((-0.31436)*x1419))+(((-0.42076)*x1412))+(((0.31436)*sj3*x1413))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1423=(cj3*sj4);
IkReal x1424=(cj6*r01);
IkReal x1425=(r00*sj6);
IkReal x1426=(sj3*sj4);
if( IKabs((((x1425*x1426))+((x1424*x1426)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1423*x1424))+((x1423*x1425)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1425*x1426))+((x1424*x1426))))+IKsqr((((x1423*x1424))+((x1423*x1425))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1425*x1426))+((x1424*x1426))), (((x1423*x1424))+((x1423*x1425))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1427=IKcos(j1);
IkReal x1428=IKsin(j1);
IkReal x1429=(r00*sj6);
IkReal x1430=(cj6*r01);
IkReal x1431=(cj6*r11);
IkReal x1432=(r10*sj6);
IkReal x1433=(sj3*x1427);
IkReal x1434=(cj3*x1428);
IkReal x1435=(sj3*x1428);
IkReal x1436=(cj3*x1427);
IkReal x1437=((1.0)*x1434);
evalcond[0]=(x1436+x1435);
evalcond[1]=((((-1.0)*x1437))+x1433);
evalcond[2]=((((-1.0)*x1437))+x1433+((sj4*x1432))+((sj4*x1431)));
evalcond[3]=((((-1.0)*x1436))+(((-1.0)*x1435))+((sj4*x1429))+((sj4*x1430)));
evalcond[4]=((((0.0003501)*x1430))+(((0.42076)*x1428))+(((-1.0)*px))+(((-0.31436)*x1433))+(((0.0003501)*x1429))+(((0.31436)*x1434)));
evalcond[5]=((((0.0003501)*x1431))+(((0.0003501)*x1432))+(((-1.0)*py))+(((-0.31436)*x1436))+(((-0.31436)*x1435))+(((-0.42076)*x1427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1438=(sj4*sj6);
IkReal x1439=(cj6*sj4);
if( IKabs((((r01*x1439))+((r00*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1438))+(((-1.0)*r11*x1439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1439))+((r00*x1438))))+IKsqr(((((-1.0)*r10*x1438))+(((-1.0)*r11*x1439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x1439))+((r00*x1438))), ((((-1.0)*r10*x1438))+(((-1.0)*r11*x1439))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1440=IKcos(j1);
IkReal x1441=IKsin(j1);
IkReal x1442=((0.31436)*cj2);
IkReal x1443=(r00*sj6);
IkReal x1444=((0.0003501)*cj6);
IkReal x1445=(r01*sj4);
IkReal x1446=(cj5*sj6);
IkReal x1447=(r10*sj4);
IkReal x1448=(r11*sj4);
IkReal x1449=(sj2*x1440);
IkReal x1450=(sj2*x1441);
IkReal x1451=((-1.0)*cj2);
IkReal x1452=((1.0)*cj5*cj6);
evalcond[0]=(x1441*x1451);
evalcond[1]=(x1440*x1451);
evalcond[2]=(((sj6*x1447))+((cj6*x1448))+x1440);
evalcond[3]=(((sj4*x1443))+(((-1.0)*x1441))+((cj6*x1445)));
evalcond[4]=(((x1445*x1446))+(((-1.0)*x1449))+(((-1.0)*r00*sj4*x1452)));
evalcond[5]=((((-1.0)*x1447*x1452))+(((-1.0)*x1450))+((x1446*x1448)));
evalcond[6]=((((-0.01275)*x1449))+((x1440*x1442))+(((-1.0)*px))+(((0.42076)*x1441))+((r01*x1444))+(((0.0003501)*x1443)));
evalcond[7]=((((-0.42076)*x1440))+((r11*x1444))+((x1441*x1442))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.01275)*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1453=((1.0)*sj4);
if( IKabs(((((-1.0)*cj6*r01*x1453))+(((-1.0)*r00*sj6*x1453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj4*sj6))+((cj6*r11*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r01*x1453))+(((-1.0)*r00*sj6*x1453))))+IKsqr((((r10*sj4*sj6))+((cj6*r11*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj6*r01*x1453))+(((-1.0)*r00*sj6*x1453))), (((r10*sj4*sj6))+((cj6*r11*sj4))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1454=IKsin(j1);
IkReal x1455=IKcos(j1);
IkReal x1456=(r00*sj6);
IkReal x1457=((0.0003501)*cj6);
IkReal x1458=((0.01275)*sj2);
IkReal x1459=(r01*sj4);
IkReal x1460=(cj5*sj6);
IkReal x1461=(r10*sj4);
IkReal x1462=(r11*sj4);
IkReal x1463=(cj2*x1455);
IkReal x1464=((1.0)*x1455);
IkReal x1465=(cj2*x1454);
IkReal x1466=((1.0)*cj5*cj6);
evalcond[0]=x1465;
evalcond[1]=x1463;
evalcond[2]=(x1454+((sj4*x1456))+((cj6*x1459)));
evalcond[3]=(((cj6*x1462))+(((-1.0)*x1464))+((sj6*x1461)));
evalcond[4]=(((x1459*x1460))+(((-1.0)*r00*sj4*x1466))+(((-1.0)*sj2*x1464)));
evalcond[5]=((((-1.0)*sj2*x1454))+((x1460*x1462))+(((-1.0)*x1461*x1466)));
evalcond[6]=((((0.0003501)*x1456))+(((-0.31436)*x1463))+(((-1.0)*x1455*x1458))+(((-1.0)*px))+((r01*x1457))+(((0.42076)*x1454)));
evalcond[7]=((((-0.42076)*x1455))+(((-0.31436)*x1465))+(((-1.0)*x1454*x1458))+((r11*x1457))+(((0.0003501)*r10*sj6))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1467=((1.0)*cj4);
if( IKabs(((((-1.0)*r10*sj6*x1467))+(((-1.0)*cj6*r11*x1467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x1467))+(((-1.0)*cj6*r01*x1467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj6*x1467))+(((-1.0)*cj6*r11*x1467))))+IKsqr(((((-1.0)*r00*sj6*x1467))+(((-1.0)*cj6*r01*x1467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj6*x1467))+(((-1.0)*cj6*r11*x1467))), ((((-1.0)*r00*sj6*x1467))+(((-1.0)*cj6*r01*x1467))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1468=IKcos(j1);
IkReal x1469=IKsin(j1);
IkReal x1470=(r00*sj6);
IkReal x1471=((0.0003501)*cj6);
IkReal x1472=(cj4*r11);
IkReal x1473=((1.0)*cj6);
IkReal x1474=(cj5*sj6);
IkReal x1475=(cj4*r01);
IkReal x1476=((1.0)*cj4);
IkReal x1477=(r10*sj6);
IkReal x1478=(cj3*x1469);
IkReal x1479=((1.0)*x1469);
IkReal x1480=(cj3*x1468);
IkReal x1481=(cj4*cj5*x1473);
evalcond[0]=x1480;
evalcond[1]=((-1.0)*x1478);
evalcond[2]=((((-1.0)*x1470*x1476))+(((-1.0)*x1468))+(((-1.0)*x1473*x1475)));
evalcond[3]=((((-1.0)*x1476*x1477))+(((-1.0)*x1479))+(((-1.0)*x1472*x1473)));
evalcond[4]=(((sj3*x1468))+((x1472*x1474))+(((-1.0)*r10*x1481)));
evalcond[5]=((((-1.0)*r00*x1481))+((x1474*x1475))+(((-1.0)*sj3*x1479)));
evalcond[6]=((((0.31436)*x1478))+(((0.42076)*x1469))+(((-1.0)*px))+(((-0.01275)*x1468))+((r01*x1471))+(((0.0003501)*x1470)));
evalcond[7]=(((r11*x1471))+(((-1.0)*py))+(((-0.42076)*x1468))+(((-0.01275)*x1469))+(((-0.31436)*x1480))+(((0.0003501)*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1482=(cj4*sj6);
IkReal x1483=(cj4*cj6);
if( IKabs((((r10*x1482))+((r11*x1483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1483))+((r00*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1482))+((r11*x1483))))+IKsqr((((r01*x1483))+((r00*x1482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1482))+((r11*x1483))), (((r01*x1483))+((r00*x1482))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1484=IKcos(j1);
IkReal x1485=IKsin(j1);
IkReal x1486=(r00*sj6);
IkReal x1487=((0.0003501)*cj6);
IkReal x1488=(cj4*r11);
IkReal x1489=((1.0)*cj6);
IkReal x1490=(cj5*sj6);
IkReal x1491=(cj4*r01);
IkReal x1492=((1.0)*cj4);
IkReal x1493=(r10*sj6);
IkReal x1494=(cj3*x1485);
IkReal x1495=(cj3*x1484);
IkReal x1496=(cj4*cj5*x1489);
evalcond[0]=x1495;
evalcond[1]=((-1.0)*x1494);
evalcond[2]=((((-1.0)*x1486*x1492))+x1484+(((-1.0)*x1489*x1491)));
evalcond[3]=((((-1.0)*x1492*x1493))+x1485+(((-1.0)*x1488*x1489)));
evalcond[4]=(((sj3*x1484))+((x1488*x1490))+(((-1.0)*r10*x1496)));
evalcond[5]=((((-1.0)*r00*x1496))+(((-1.0)*sj3*x1485))+((x1490*x1491)));
evalcond[6]=(((r01*x1487))+(((-1.0)*px))+(((0.01275)*x1484))+(((0.31436)*x1494))+(((0.42076)*x1485))+(((0.0003501)*x1486)));
evalcond[7]=((((-0.42076)*x1484))+((r11*x1487))+(((-1.0)*py))+(((0.01275)*x1485))+(((-0.31436)*x1495))+(((0.0003501)*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1497=((0.000832065785721076)*sj6);
IkReal x1498=((0.000832065785721076)*cj6);
if( IKabs(((((-1.0)*r00*x1497))+(((-1.0)*r01*x1498))+(((2.37665177298222)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1497))+(((-2.37665177298222)*py))+((r11*x1498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1497))+(((-1.0)*r01*x1498))+(((2.37665177298222)*px))))+IKsqr((((r10*x1497))+(((-2.37665177298222)*py))+((r11*x1498))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1497))+(((-1.0)*r01*x1498))+(((2.37665177298222)*px))), (((r10*x1497))+(((-2.37665177298222)*py))+((r11*x1498))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1499=IKcos(j1);
IkReal x1500=IKsin(j1);
IkReal x1501=((0.0003501)*sj6);
IkReal x1502=((0.0003501)*cj6);
IkReal x1503=(cj4*sj6);
IkReal x1504=(sj4*sj6);
IkReal x1505=(cj6*sj4);
IkReal x1506=((1.0)*cj4*cj6);
evalcond[0]=((((0.42076)*x1500))+((r01*x1502))+((r00*x1501))+(((-1.0)*px)));
evalcond[1]=(((r11*x1502))+(((-0.42076)*x1499))+((r10*x1501))+(((-1.0)*py)));
evalcond[2]=(((sj3*x1499))+((r11*x1503))+((r11*x1505))+((r10*x1504))+(((-1.0)*r10*x1506)));
evalcond[3]=((((-1.0)*r00*x1506))+((r01*x1505))+((r01*x1503))+((r00*x1504))+(((-1.0)*sj3*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1507=((0.000832065785721076)*sj6);
IkReal x1508=((0.000832065785721076)*cj6);
if( IKabs(((((-1.0)*r01*x1508))+(((-1.0)*r00*x1507))+(((2.37665177298222)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1508))+(((-2.37665177298222)*py))+((r10*x1507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1508))+(((-1.0)*r00*x1507))+(((2.37665177298222)*px))))+IKsqr((((r11*x1508))+(((-2.37665177298222)*py))+((r10*x1507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x1508))+(((-1.0)*r00*x1507))+(((2.37665177298222)*px))), (((r11*x1508))+(((-2.37665177298222)*py))+((r10*x1507))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1509=IKcos(j1);
IkReal x1510=IKsin(j1);
IkReal x1511=(r00*sj6);
IkReal x1512=((0.0003501)*cj6);
IkReal x1513=(r10*sj6);
IkReal x1514=(cj6*sj4);
IkReal x1515=(cj4*cj6);
IkReal x1516=((1.0)*cj4*sj6);
evalcond[0]=((((0.42076)*x1510))+((r01*x1512))+(((-1.0)*px))+(((0.0003501)*x1511)));
evalcond[1]=(((r11*x1512))+(((-0.42076)*x1509))+(((-1.0)*py))+(((0.0003501)*x1513)));
evalcond[2]=(((sj3*x1509))+((r11*x1514))+((r10*x1515))+((sj4*x1513))+(((-1.0)*r11*x1516)));
evalcond[3]=((((-1.0)*r01*x1516))+((r01*x1514))+(((-1.0)*sj3*x1510))+((r00*x1515))+((sj4*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(sj2,-1);
if(!x1525.valid){
continue;
}
IkReal x1517=x1525.value;
IkReal x1518=(cj2*sj3);
IkReal x1519=(r11*sj6);
IkReal x1520=(cj5*sj4);
IkReal x1521=(sj2*sj5);
IkReal x1522=((1.0)*cj6);
IkReal x1523=(cj4*r11);
IkReal x1524=((1.0)*cj4*r10*sj6);
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(cj3,-1);
if(!x1526.valid){
continue;
}
if( IKabs((x1517*((((x1519*x1520))+(((-1.0)*x1524))+(((-1.0)*x1522*x1523))+(((-1.0)*r10*x1520*x1522)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1517*(x1526.value)*(((((-1.0)*r10*x1518*x1520*x1522))+((cj6*r10*x1521))+((x1518*x1519*x1520))+(((-1.0)*x1519*x1521))+(((-1.0)*x1518*x1524))+(((-1.0)*x1518*x1522*x1523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1517*((((x1519*x1520))+(((-1.0)*x1524))+(((-1.0)*x1522*x1523))+(((-1.0)*r10*x1520*x1522))))))+IKsqr((x1517*(x1526.value)*(((((-1.0)*r10*x1518*x1520*x1522))+((cj6*r10*x1521))+((x1518*x1519*x1520))+(((-1.0)*x1519*x1521))+(((-1.0)*x1518*x1524))+(((-1.0)*x1518*x1522*x1523))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x1517*((((x1519*x1520))+(((-1.0)*x1524))+(((-1.0)*x1522*x1523))+(((-1.0)*r10*x1520*x1522))))), (x1517*(x1526.value)*(((((-1.0)*r10*x1518*x1520*x1522))+((cj6*r10*x1521))+((x1518*x1519*x1520))+(((-1.0)*x1519*x1521))+(((-1.0)*x1518*x1524))+(((-1.0)*x1518*x1522*x1523))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1527=IKcos(j1);
IkReal x1528=IKsin(j1);
IkReal x1529=((0.31436)*sj3);
IkReal x1530=(r11*sj6);
IkReal x1531=(cj4*cj5);
IkReal x1532=(r00*sj6);
IkReal x1533=((0.0003501)*cj6);
IkReal x1534=(r01*sj6);
IkReal x1535=(cj5*sj4);
IkReal x1536=((1.0)*sj3);
IkReal x1537=((1.0)*cj4);
IkReal x1538=(cj6*r11);
IkReal x1539=(cj6*r01);
IkReal x1540=(r10*sj6);
IkReal x1541=(cj2*x1527);
IkReal x1542=(cj3*x1528);
IkReal x1543=((1.0)*cj6*r10);
IkReal x1544=(sj2*x1527);
IkReal x1545=(sj2*x1528);
IkReal x1546=((1.0)*cj6*r00);
IkReal x1547=(cj2*x1528);
IkReal x1548=(cj3*x1527);
evalcond[0]=(((sj5*x1530))+x1548+(((-1.0)*x1536*x1547))+(((-1.0)*sj5*x1543)));
evalcond[1]=((((-1.0)*x1542))+((sj5*x1534))+(((-1.0)*x1536*x1541))+(((-1.0)*sj5*x1546)));
evalcond[2]=((((-1.0)*x1544))+(((-1.0)*x1535*x1546))+(((-1.0)*x1537*x1539))+(((-1.0)*x1532*x1537))+((x1534*x1535)));
evalcond[3]=((((-1.0)*x1545))+(((-1.0)*x1535*x1543))+(((-1.0)*x1537*x1538))+((x1530*x1535))+(((-1.0)*x1537*x1540)));
evalcond[4]=(((sj3*x1527))+(((-1.0)*x1531*x1543))+((x1530*x1531))+((cj2*x1542))+((sj4*x1540))+((sj4*x1538)));
evalcond[5]=(((x1531*x1534))+(((-1.0)*x1531*x1546))+((cj3*x1541))+(((-1.0)*x1528*x1536))+((sj4*x1539))+((sj4*x1532)));
evalcond[6]=(((r01*x1533))+(((-0.01275)*x1544))+(((-1.0)*px))+(((0.31436)*x1542))+((x1529*x1541))+(((0.42076)*x1528))+(((0.0003501)*x1532)));
evalcond[7]=((((0.0003501)*x1540))+((r11*x1533))+(((-0.01275)*x1545))+(((-0.42076)*x1527))+(((-1.0)*py))+((x1529*x1547))+(((-0.31436)*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1549=(r11*sj3);
IkReal x1550=(sj5*sj6);
IkReal x1551=(cj3*r11);
IkReal x1552=((1.0)*sj6);
IkReal x1553=(cj4*cj5);
IkReal x1554=(cj3*r10);
IkReal x1555=(cj6*sj5);
IkReal x1556=(r10*sj3);
IkReal x1557=((1.0)*cj6*sj4);
IkReal x1558=(cj6*r10*x1553);
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(cj2,-1);
if(!x1559.valid){
continue;
}
if( IKabs(((x1559.value)*(((((-1.0)*x1555*x1556))+((x1549*x1550))+((cj6*x1553*x1554))+(((-1.0)*sj4*x1552*x1554))+(((-1.0)*x1551*x1557))+(((-1.0)*x1551*x1552*x1553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1550*x1551))+(((-1.0)*x1549*x1557))+((x1554*x1555))+(((-1.0)*x1549*x1552*x1553))+((cj6*x1553*x1556))+(((-1.0)*sj4*x1552*x1556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1559.value)*(((((-1.0)*x1555*x1556))+((x1549*x1550))+((cj6*x1553*x1554))+(((-1.0)*sj4*x1552*x1554))+(((-1.0)*x1551*x1557))+(((-1.0)*x1551*x1552*x1553))))))+IKsqr(((((-1.0)*x1550*x1551))+(((-1.0)*x1549*x1557))+((x1554*x1555))+(((-1.0)*x1549*x1552*x1553))+((cj6*x1553*x1556))+(((-1.0)*sj4*x1552*x1556))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1559.value)*(((((-1.0)*x1555*x1556))+((x1549*x1550))+((cj6*x1553*x1554))+(((-1.0)*sj4*x1552*x1554))+(((-1.0)*x1551*x1557))+(((-1.0)*x1551*x1552*x1553))))), ((((-1.0)*x1550*x1551))+(((-1.0)*x1549*x1557))+((x1554*x1555))+(((-1.0)*x1549*x1552*x1553))+((cj6*x1553*x1556))+(((-1.0)*sj4*x1552*x1556))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1560=IKcos(j1);
IkReal x1561=IKsin(j1);
IkReal x1562=((0.31436)*sj3);
IkReal x1563=(r11*sj6);
IkReal x1564=(cj4*cj5);
IkReal x1565=(r00*sj6);
IkReal x1566=((0.0003501)*cj6);
IkReal x1567=(r01*sj6);
IkReal x1568=(cj5*sj4);
IkReal x1569=((1.0)*sj3);
IkReal x1570=((1.0)*cj4);
IkReal x1571=(cj6*r11);
IkReal x1572=(cj6*r01);
IkReal x1573=(r10*sj6);
IkReal x1574=(cj2*x1560);
IkReal x1575=(cj3*x1561);
IkReal x1576=((1.0)*cj6*r10);
IkReal x1577=(sj2*x1560);
IkReal x1578=(sj2*x1561);
IkReal x1579=((1.0)*cj6*r00);
IkReal x1580=(cj2*x1561);
IkReal x1581=(cj3*x1560);
evalcond[0]=(x1581+((sj5*x1563))+(((-1.0)*sj5*x1576))+(((-1.0)*x1569*x1580)));
evalcond[1]=((((-1.0)*x1569*x1574))+((sj5*x1567))+(((-1.0)*sj5*x1579))+(((-1.0)*x1575)));
evalcond[2]=(((x1567*x1568))+(((-1.0)*x1565*x1570))+(((-1.0)*x1570*x1572))+(((-1.0)*x1568*x1579))+(((-1.0)*x1577)));
evalcond[3]=((((-1.0)*x1570*x1573))+(((-1.0)*x1570*x1571))+(((-1.0)*x1568*x1576))+((x1563*x1568))+(((-1.0)*x1578)));
evalcond[4]=(((sj4*x1571))+((sj4*x1573))+((cj2*x1575))+(((-1.0)*x1564*x1576))+((x1563*x1564))+((sj3*x1560)));
evalcond[5]=(((sj4*x1565))+((sj4*x1572))+((cj3*x1574))+(((-1.0)*x1564*x1579))+((x1564*x1567))+(((-1.0)*x1561*x1569)));
evalcond[6]=((((0.0003501)*x1565))+(((-0.01275)*x1577))+(((-1.0)*px))+(((0.31436)*x1575))+(((0.42076)*x1561))+((x1562*x1574))+((r01*x1566)));
evalcond[7]=((((0.0003501)*x1573))+(((-0.01275)*x1578))+((r11*x1566))+(((-1.0)*py))+(((-0.31436)*x1581))+(((-0.42076)*x1560))+((x1562*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1582=cj2*cj2;
IkReal x1583=cj3*cj3;
IkReal x1584=(r11*sj6);
IkReal x1585=((1.0)*cj6);
IkReal x1586=(cj3*sj5);
IkReal x1587=(r01*sj6);
IkReal x1588=(cj2*sj3*sj5);
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1582*x1583))+x1582+x1583)),-1);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal((((x1586*x1587))+(((-1.0)*r00*x1585*x1586))+((x1584*x1588))+(((-1.0)*r10*x1585*x1588)))),IkReal((((x1587*x1588))+((cj6*r10*x1586))+(((-1.0)*r00*x1585*x1588))+(((-1.0)*x1584*x1586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1589.value)))+(x1590.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1591=IKcos(j1);
IkReal x1592=IKsin(j1);
IkReal x1593=((0.31436)*sj3);
IkReal x1594=(r11*sj6);
IkReal x1595=(cj4*cj5);
IkReal x1596=(r00*sj6);
IkReal x1597=((0.0003501)*cj6);
IkReal x1598=(r01*sj6);
IkReal x1599=(cj5*sj4);
IkReal x1600=((1.0)*sj3);
IkReal x1601=((1.0)*cj4);
IkReal x1602=(cj6*r11);
IkReal x1603=(cj6*r01);
IkReal x1604=(r10*sj6);
IkReal x1605=(cj2*x1591);
IkReal x1606=(cj3*x1592);
IkReal x1607=((1.0)*cj6*r10);
IkReal x1608=(sj2*x1591);
IkReal x1609=(sj2*x1592);
IkReal x1610=((1.0)*cj6*r00);
IkReal x1611=(cj2*x1592);
IkReal x1612=(cj3*x1591);
evalcond[0]=(x1612+(((-1.0)*x1600*x1611))+((sj5*x1594))+(((-1.0)*sj5*x1607)));
evalcond[1]=((((-1.0)*x1606))+(((-1.0)*x1600*x1605))+(((-1.0)*sj5*x1610))+((sj5*x1598)));
evalcond[2]=((((-1.0)*x1608))+(((-1.0)*x1601*x1603))+((x1598*x1599))+(((-1.0)*x1599*x1610))+(((-1.0)*x1596*x1601)));
evalcond[3]=((((-1.0)*x1609))+((x1594*x1599))+(((-1.0)*x1601*x1604))+(((-1.0)*x1601*x1602))+(((-1.0)*x1599*x1607)));
evalcond[4]=(((x1594*x1595))+(((-1.0)*x1595*x1607))+((sj4*x1604))+((sj4*x1602))+((cj2*x1606))+((sj3*x1591)));
evalcond[5]=((((-1.0)*x1592*x1600))+((sj4*x1596))+(((-1.0)*x1595*x1610))+((sj4*x1603))+((cj3*x1605))+((x1595*x1598)));
evalcond[6]=(((r01*x1597))+(((0.0003501)*x1596))+(((0.31436)*x1606))+(((-1.0)*px))+(((-0.01275)*x1608))+((x1593*x1605))+(((0.42076)*x1592)));
evalcond[7]=((((0.0003501)*x1604))+((r11*x1597))+((x1593*x1611))+(((-0.31436)*x1612))+(((-1.0)*py))+(((-0.01275)*x1609))+(((-0.42076)*x1591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x1615 = IKatan2WithCheck(IkReal(((0.0003501)*r21)),IkReal(((0.0003501)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1615.valid){
continue;
}
IkReal x1613=((1.0)*(x1615.value));
if((((((1.2257001e-7)*(r21*r21)))+(((1.2257001e-7)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKabs(IKsqrt(((((1.2257001e-7)*(r21*r21)))+(((1.2257001e-7)*(r20*r20)))))),-1);
if(!x1616.valid){
continue;
}
if( (((-1.0)*(x1616.value)*(((-0.006375)+(((-0.31436)*sj2*sj3))+(((-1.0)*pz))+(((-0.01275)*cj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1616.value)*(((-0.006375)+(((-0.31436)*sj2*sj3))+(((-1.0)*pz))+(((-0.01275)*cj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1614=((-1.0)*(IKasin(((-1.0)*(x1616.value)*(((-0.006375)+(((-0.31436)*sj2*sj3))+(((-1.0)*pz))+(((-0.01275)*cj2))))))));
j6array[0]=((((-1.0)*x1614))+(((-1.0)*x1613)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1613))+(((1.0)*x1614)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5eval[2];
IkReal x1617=r21*r21;
IkReal x1618=cj6*cj6;
IkReal x1619=((1.0)*cj4);
IkReal x1620=(cj4*x1617);
IkReal x1621=((((-1.0)*x1619*(r22*r22)))+(((2.0)*cj4*cj6*r20*r21*sj6))+(((-1.0)*x1617*x1619))+((x1618*x1620))+(((-1.0)*x1618*x1619*(r20*r20))));
j5eval[0]=x1621;
j5eval[1]=IKsign(x1621);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1622=r21*r21;
IkReal x1623=cj6*cj6;
IkReal x1624=((1.0)*sj4);
IkReal x1625=(sj4*x1623);
IkReal x1626=((((-1.0)*x1623*x1624*(r20*r20)))+((x1622*x1625))+(((-1.0)*x1624*(r22*r22)))+(((-1.0)*x1622*x1624))+(((2.0)*cj6*r20*r21*sj4*sj6)));
j5eval[0]=x1626;
j5eval[1]=IKsign(x1626);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1627=cj2*cj2;
IkReal x1628=cj3*cj3;
IkReal x1629=(cj2*sj2*sj3);
IkReal x1630=(x1627*x1628);
j1eval[0]=((22.1054841707646)+(((12.3075638396343)*x1627))+(((-1.0)*x1629))+(((33.0007843137255)*cj3))+(((12.3278431372549)*x1628))+(((-12.3278431372549)*x1630)));
j1eval[1]=IKsign(((0.1772015401)+(((-0.00801618)*x1629))+(((0.0988222096)*x1628))+(((-0.0988222096)*x1630))+(((0.2645402272)*cj3))+(((0.0986596471)*x1627))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1631=((1.0)*sj6);
IkReal x1632=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r11*x1632))+(((-1.0)*r10*x1631)))))+(IKabs(((((-1.0)*r01*x1632))+(((-1.0)*r00*x1631))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1633=cj6*cj6;
IkReal x1634=r21*r21;
IkReal x1635=(sj2*sj3);
IkReal x1636=(cj6*r20);
IkReal x1637=(cj3*sj2);
IkReal x1638=(r21*sj6);
IkReal x1639=((r22*r22)+x1634+(((-1.0)*x1633*x1634))+((x1633*(r20*r20)))+(((-2.0)*x1636*x1638)));
j5eval[0]=x1639;
j5eval[1]=((IKabs(((((-1.0)*x1635*x1638))+((x1635*x1636))+((r22*x1637)))))+(IKabs((((x1637*x1638))+(((-1.0)*x1636*x1637))+((r22*x1635))))));
j5eval[2]=IKsign(x1639);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=((((1.33846545362005)*sj2))+((cj3*sj2)));
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1640=((196475000.0)*sj3);
IkReal x1641=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*py*x1640))+(((-1.0)*px*x1641))+(((-262975000.0)*px)))))+(IKabs(((((-1.0)*px*x1640))+((py*x1641))+(((262975000.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j5eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
IkReal x1642=x1643.value;
j5array[0]=((-1.0)*x1642);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1642)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1644=IKsin(j5);
evalcond[0]=((((-1.0)*r22*(IKcos(j5))))+(((-1.0)*cj6*r20*x1644))+((r21*sj6*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1645=((196475000.0)*sj3);
IkReal x1646=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*py*x1645))+(((-1.0)*px*x1646))+(((-262975000.0)*px)))))+(IKabs(((((-1.0)*px*x1645))+((py*x1646))+(((262975000.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((-1.0)+(((-1.33846545362005)*cj3)));
j1eval[1]=IKsign(((-7859.0)+(((-10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1647=(r12*sj5);
IkReal x1648=((7859.0)*cj3);
IkReal x1649=(cj5*cj6*r10);
IkReal x1650=(cj5*r11*sj6);
CheckValue<IkReal> x1651=IKPowWithIntegerCheck(sj3,-1);
if(!x1651.valid){
continue;
}
if( IKabs(((((-0.747124251354692)*x1649))+(((2.37665177298222)*px))+(((0.747124251354692)*x1647))+(((0.747124251354692)*x1650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x1651.value)*(((((10519.0)*x1650))+((x1648*x1650))+(((-10519.0)*x1649))+(((25000.0)*cj3*px))+((x1647*x1648))+(((-1.0)*x1648*x1649))+(((10519.0)*x1647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.747124251354692)*x1649))+(((2.37665177298222)*px))+(((0.747124251354692)*x1647))+(((0.747124251354692)*x1650))))+IKsqr(((-9.50660709192889e-5)*(x1651.value)*(((((10519.0)*x1650))+((x1648*x1650))+(((-10519.0)*x1649))+(((25000.0)*cj3*px))+((x1647*x1648))+(((-1.0)*x1648*x1649))+(((10519.0)*x1647))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.747124251354692)*x1649))+(((2.37665177298222)*px))+(((0.747124251354692)*x1647))+(((0.747124251354692)*x1650))), ((-9.50660709192889e-5)*(x1651.value)*(((((10519.0)*x1650))+((x1648*x1650))+(((-10519.0)*x1649))+(((25000.0)*cj3*px))+((x1647*x1648))+(((-1.0)*x1648*x1649))+(((10519.0)*x1647))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1652=IKsin(j1);
IkReal x1653=IKcos(j1);
IkReal x1654=((1.0)*sj3);
IkReal x1655=(sj5*sj6);
IkReal x1656=(cj5*sj6);
IkReal x1657=((1.0)*cj5);
IkReal x1658=(cj3*x1653);
IkReal x1659=(cj3*x1652);
IkReal x1660=((1.0)*cj6*r10);
IkReal x1661=((1.0)*cj6*r00);
IkReal x1662=(sj3*x1653);
IkReal x1663=(x1652*x1654);
evalcond[0]=((((-1.0)*px))+(((0.31436)*x1659))+(((0.42076)*x1652))+(((0.31436)*x1662)));
evalcond[1]=((((0.31436)*sj3*x1652))+(((-0.42076)*x1653))+(((-1.0)*py))+(((-0.31436)*x1658)));
evalcond[2]=((((-1.0)*cj6*r10*x1657))+x1662+x1659+((r11*x1656))+((r12*sj5)));
evalcond[3]=(x1658+((r01*x1656))+(((-1.0)*cj6*r00*x1657))+((r02*sj5))+(((-1.0)*x1663)));
evalcond[4]=((((-1.0)*sj5*x1660))+x1658+((r11*x1655))+(((-1.0)*r12*x1657))+(((-1.0)*x1663)));
evalcond[5]=((((-1.0)*sj5*x1661))+(((-1.0)*x1653*x1654))+(((-1.0)*x1659))+((r01*x1655))+(((-1.0)*r02*x1657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1664=((7859.0)*cj3);
IkReal x1665=(r12*sj5);
IkReal x1666=((7859.0)*sj3);
IkReal x1667=((25000.0)*py);
IkReal x1668=(cj5*cj6*r10);
IkReal x1669=(cj5*r11*sj6);
CheckValue<IkReal> x1670 = IKatan2WithCheck(IkReal(((((10519.0)*x1669))+(((10519.0)*x1665))+(((-1.0)*sj3*x1667))+(((-10519.0)*x1668))+((x1664*x1669))+((x1664*x1665))+(((-1.0)*x1664*x1668)))),IkReal((((cj3*x1667))+((x1666*x1669))+((x1665*x1666))+(((-1.0)*x1666*x1668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1670.valid){
continue;
}
CheckValue<IkReal> x1671=IKPowWithIntegerCheck(IKsign(((-7859.0)+(((-10519.0)*cj3)))),-1);
if(!x1671.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1670.value)+(((1.5707963267949)*(x1671.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1672=IKsin(j1);
IkReal x1673=IKcos(j1);
IkReal x1674=((1.0)*sj3);
IkReal x1675=(sj5*sj6);
IkReal x1676=(cj5*sj6);
IkReal x1677=((1.0)*cj5);
IkReal x1678=(cj3*x1673);
IkReal x1679=(cj3*x1672);
IkReal x1680=((1.0)*cj6*r10);
IkReal x1681=((1.0)*cj6*r00);
IkReal x1682=(sj3*x1673);
IkReal x1683=(x1672*x1674);
evalcond[0]=((((0.42076)*x1672))+(((-1.0)*px))+(((0.31436)*x1682))+(((0.31436)*x1679)));
evalcond[1]=((((-0.31436)*x1678))+(((-1.0)*py))+(((0.31436)*sj3*x1672))+(((-0.42076)*x1673)));
evalcond[2]=((((-1.0)*cj6*r10*x1677))+x1679+x1682+((r12*sj5))+((r11*x1676)));
evalcond[3]=((((-1.0)*x1683))+x1678+((r02*sj5))+((r01*x1676))+(((-1.0)*cj6*r00*x1677)));
evalcond[4]=((((-1.0)*sj5*x1680))+(((-1.0)*x1683))+x1678+(((-1.0)*r12*x1677))+((r11*x1675)));
evalcond[5]=((((-1.0)*sj5*x1681))+(((-1.0)*x1673*x1674))+(((-1.0)*r02*x1677))+(((-1.0)*x1679))+((r01*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1684=((196475000.0)*sj3);
IkReal x1685=((196475000.0)*cj3);
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1684))+(((-262975000.0)*px))+(((-1.0)*px*x1685)))),IkReal(((((262975000.0)*py))+((py*x1685))+(((-1.0)*px*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x1687.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1686.value)+(((1.5707963267949)*(x1687.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1688=IKsin(j1);
IkReal x1689=IKcos(j1);
IkReal x1690=((1.0)*sj3);
IkReal x1691=(sj5*sj6);
IkReal x1692=(cj5*sj6);
IkReal x1693=((1.0)*cj5);
IkReal x1694=(cj3*x1689);
IkReal x1695=(cj3*x1688);
IkReal x1696=((1.0)*cj6*r10);
IkReal x1697=((1.0)*cj6*r00);
IkReal x1698=(sj3*x1689);
IkReal x1699=(x1688*x1690);
evalcond[0]=((((0.42076)*x1688))+(((-1.0)*px))+(((0.31436)*x1695))+(((0.31436)*x1698)));
evalcond[1]=((((-0.42076)*x1689))+(((0.31436)*sj3*x1688))+(((-0.31436)*x1694))+(((-1.0)*py)));
evalcond[2]=(x1695+x1698+((r11*x1692))+(((-1.0)*cj6*r10*x1693))+((r12*sj5)));
evalcond[3]=(((r01*x1692))+(((-1.0)*x1699))+x1694+(((-1.0)*cj6*r00*x1693))+((r02*sj5)));
evalcond[4]=((((-1.0)*x1699))+(((-1.0)*r12*x1693))+x1694+((r11*x1691))+(((-1.0)*sj5*x1696)));
evalcond[5]=(((r01*x1691))+(((-1.0)*x1695))+(((-1.0)*r02*x1693))+(((-1.0)*sj5*x1697))+(((-1.0)*x1689*x1690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1700=((196475000.0)*sj3);
IkReal x1701=((196475000.0)*cj3);
CheckValue<IkReal> x1702 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1700))+(((-1.0)*px*x1701))+(((-262975000.0)*px)))),IkReal(((((-1.0)*px*x1700))+(((262975000.0)*py))+((py*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1702.valid){
continue;
}
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x1703.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1702.value)+(((1.5707963267949)*(x1703.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1704=IKsin(j1);
IkReal x1705=IKcos(j1);
IkReal x1706=((0.31436)*cj3);
IkReal x1707=((0.31436)*sj3);
evalcond[0]=((((0.42076)*x1704))+((x1705*x1707))+((x1704*x1706))+(((-1.0)*px)));
evalcond[1]=((((-0.42076)*x1705))+((x1704*x1707))+(((-1.0)*py))+(((-1.0)*x1705*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1708=(cj1*sj3);
IkReal x1709=(cj3*sj1);
IkReal x1710=(r21*sj6);
IkReal x1711=((1.0)*r22);
IkReal x1712=((1.0)*cj6*r20);
IkReal x1713=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x1713;
j5eval[1]=IKsign(x1713);
j5eval[2]=((IKabs(((((-1.0)*x1709*x1711))+(((-1.0)*x1708*x1711)))))+(IKabs((((x1709*x1710))+(((-1.0)*x1709*x1712))+(((-1.0)*x1708*x1712))+((x1708*x1710))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1714=(sj1*sj3);
IkReal x1715=(cj6*r20);
IkReal x1716=((1.0)*sj6);
IkReal x1717=((1.0)*cj1*cj3);
IkReal x1718=((((-1.0)*cj6*r11))+(((-1.0)*r10*x1716)));
j5eval[0]=x1718;
j5eval[1]=((IKabs((((r22*x1714))+(((-1.0)*r22*x1717)))))+(IKabs((((x1714*x1715))+((cj1*cj3*r21*sj6))+(((-1.0)*x1715*x1717))+(((-1.0)*r21*x1714*x1716))))));
j5eval[2]=IKsign(x1718);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1719=cj6*cj6;
IkReal x1720=(cj6*r20);
IkReal x1721=(cj1*sj3);
IkReal x1722=(r11*r21);
IkReal x1723=(cj3*sj1);
IkReal x1724=(r21*sj6);
IkReal x1725=(((r11*sj6*x1720))+((cj6*r10*x1724))+(((-1.0)*r10*r20*x1719))+(((-1.0)*r12*r22))+(((-1.0)*x1722))+((x1719*x1722)));
j5eval[0]=x1725;
j5eval[1]=((IKabs((((x1723*x1724))+(((-1.0)*x1720*x1723))+(((-1.0)*x1720*x1721))+((x1721*x1724)))))+(IKabs((((r22*x1723))+((r22*x1721))))));
j5eval[2]=IKsign(x1725);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1726=cj6*cj6;
IkReal x1727=(cj3*sj1);
IkReal x1728=(cj6*r20);
IkReal x1729=(cj1*sj3);
IkReal x1730=(r21*sj6);
IkReal x1731=(r11*r21);
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal((((r22*x1729))+((r22*x1727)))),IkReal((((x1729*x1730))+(((-1.0)*x1728*x1729))+((x1727*x1730))+(((-1.0)*x1727*x1728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign((((r11*sj6*x1728))+((cj6*r10*x1730))+(((-1.0)*r12*r22))+((x1726*x1731))+(((-1.0)*r10*r20*x1726))+(((-1.0)*x1731)))),-1);
if(!x1733.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1732.value)+(((1.5707963267949)*(x1733.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1734=IKcos(j5);
IkReal x1735=IKsin(j5);
IkReal x1736=(cj1*cj3);
IkReal x1737=(cj3*sj1);
IkReal x1738=((1.0)*sj3);
IkReal x1739=(sj1*x1738);
IkReal x1740=(sj6*x1735);
IkReal x1741=((1.0)*x1734);
IkReal x1742=(sj6*x1734);
IkReal x1743=((1.0)*cj6*x1735);
evalcond[0]=(((r22*x1735))+((r21*x1742))+(((-1.0)*cj6*r20*x1741)));
evalcond[1]=((((-1.0)*r22*x1741))+((r21*x1740))+(((-1.0)*r20*x1743)));
evalcond[2]=(x1737+((cj1*sj3))+(((-1.0)*cj6*r10*x1741))+((r12*x1735))+((r11*x1742)));
evalcond[3]=(x1736+(((-1.0)*cj6*r00*x1741))+((r02*x1735))+((r01*x1742))+(((-1.0)*x1739)));
evalcond[4]=((((-1.0)*r12*x1741))+x1736+(((-1.0)*r10*x1743))+((r11*x1740))+(((-1.0)*x1739)));
evalcond[5]=((((-1.0)*r00*x1743))+(((-1.0)*x1737))+((r01*x1740))+(((-1.0)*cj1*x1738))+(((-1.0)*r02*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1744=(sj1*sj3);
IkReal x1745=(cj6*r20);
IkReal x1746=((1.0)*sj6);
IkReal x1747=((1.0)*cj1*cj3);
CheckValue<IkReal> x1748 = IKatan2WithCheck(IkReal((((x1744*x1745))+((cj1*cj3*r21*sj6))+(((-1.0)*x1745*x1747))+(((-1.0)*r21*x1744*x1746)))),IkReal((((r22*x1744))+(((-1.0)*r22*x1747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1748.valid){
continue;
}
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1746))+(((-1.0)*cj6*r11)))),-1);
if(!x1749.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1748.value)+(((1.5707963267949)*(x1749.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1750=IKcos(j5);
IkReal x1751=IKsin(j5);
IkReal x1752=(cj1*cj3);
IkReal x1753=(cj3*sj1);
IkReal x1754=((1.0)*sj3);
IkReal x1755=(sj1*x1754);
IkReal x1756=(sj6*x1751);
IkReal x1757=((1.0)*x1750);
IkReal x1758=(sj6*x1750);
IkReal x1759=((1.0)*cj6*x1751);
evalcond[0]=(((r22*x1751))+((r21*x1758))+(((-1.0)*cj6*r20*x1757)));
evalcond[1]=((((-1.0)*r22*x1757))+((r21*x1756))+(((-1.0)*r20*x1759)));
evalcond[2]=(x1753+((cj1*sj3))+(((-1.0)*cj6*r10*x1757))+((r11*x1758))+((r12*x1751)));
evalcond[3]=(x1752+(((-1.0)*cj6*r00*x1757))+((r02*x1751))+(((-1.0)*x1755))+((r01*x1758)));
evalcond[4]=((((-1.0)*r12*x1757))+x1752+(((-1.0)*r10*x1759))+(((-1.0)*x1755))+((r11*x1756)));
evalcond[5]=((((-1.0)*cj1*x1754))+(((-1.0)*x1753))+(((-1.0)*r00*x1759))+((r01*x1756))+(((-1.0)*r02*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1760=(cj1*sj3);
IkReal x1761=(cj3*sj1);
IkReal x1762=(r21*sj6);
IkReal x1763=((1.0)*r22);
IkReal x1764=((1.0)*cj6*r20);
CheckValue<IkReal> x1765=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x1765.valid){
continue;
}
CheckValue<IkReal> x1766 = IKatan2WithCheck(IkReal(((((-1.0)*x1761*x1764))+(((-1.0)*x1760*x1764))+((x1761*x1762))+((x1760*x1762)))),IkReal(((((-1.0)*x1761*x1763))+(((-1.0)*x1760*x1763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1766.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1765.value)))+(x1766.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1767=IKcos(j5);
IkReal x1768=IKsin(j5);
IkReal x1769=(cj1*cj3);
IkReal x1770=(cj3*sj1);
IkReal x1771=((1.0)*sj3);
IkReal x1772=(sj1*x1771);
IkReal x1773=(sj6*x1768);
IkReal x1774=((1.0)*x1767);
IkReal x1775=(sj6*x1767);
IkReal x1776=((1.0)*cj6*x1768);
evalcond[0]=((((-1.0)*cj6*r20*x1774))+((r21*x1775))+((r22*x1768)));
evalcond[1]=((((-1.0)*r20*x1776))+((r21*x1773))+(((-1.0)*r22*x1774)));
evalcond[2]=((((-1.0)*cj6*r10*x1774))+x1770+((r11*x1775))+((cj1*sj3))+((r12*x1768)));
evalcond[3]=(x1769+((r01*x1775))+(((-1.0)*x1772))+((r02*x1768))+(((-1.0)*cj6*r00*x1774)));
evalcond[4]=(x1769+((r11*x1773))+(((-1.0)*r10*x1776))+(((-1.0)*x1772))+(((-1.0)*r12*x1774)));
evalcond[5]=((((-1.0)*cj1*x1771))+(((-1.0)*x1770))+((r01*x1773))+(((-1.0)*r02*x1774))+(((-1.0)*r00*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1777=((196475000.0)*sj3);
IkReal x1778=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*px*x1778))+(((-262975000.0)*px))+((py*x1777)))))+(IKabs((((px*x1777))+(((262975000.0)*py))+((py*x1778))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j5eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
IkReal x1779=x1780.value;
j5array[0]=((-1.0)*x1779);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1779)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1781=IKsin(j5);
evalcond[0]=((((-1.0)*r22*(IKcos(j5))))+((r21*sj6*x1781))+(((-1.0)*cj6*r20*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1782=((196475000.0)*sj3);
IkReal x1783=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs((((py*x1782))+(((-262975000.0)*px))+(((-1.0)*px*x1783)))))+(IKabs((((py*x1783))+(((262975000.0)*py))+((px*x1782))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((1.33846545362005)*cj3)));
j1eval[1]=IKsign(((7859.0)+(((10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1784=(r12*sj5);
IkReal x1785=((7859.0)*cj3);
IkReal x1786=(cj5*cj6*r10);
IkReal x1787=(cj5*r11*sj6);
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(sj3,-1);
if(!x1788.valid){
continue;
}
if( IKabs(((((0.747124251354692)*x1786))+(((2.37665177298222)*px))+(((-0.747124251354692)*x1784))+(((-0.747124251354692)*x1787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x1788.value)*(((((-25000.0)*cj3*px))+(((10519.0)*x1784))+(((10519.0)*x1787))+((x1784*x1785))+(((-1.0)*x1785*x1786))+(((-10519.0)*x1786))+((x1785*x1787)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.747124251354692)*x1786))+(((2.37665177298222)*px))+(((-0.747124251354692)*x1784))+(((-0.747124251354692)*x1787))))+IKsqr(((-9.50660709192889e-5)*(x1788.value)*(((((-25000.0)*cj3*px))+(((10519.0)*x1784))+(((10519.0)*x1787))+((x1784*x1785))+(((-1.0)*x1785*x1786))+(((-10519.0)*x1786))+((x1785*x1787))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.747124251354692)*x1786))+(((2.37665177298222)*px))+(((-0.747124251354692)*x1784))+(((-0.747124251354692)*x1787))), ((-9.50660709192889e-5)*(x1788.value)*(((((-25000.0)*cj3*px))+(((10519.0)*x1784))+(((10519.0)*x1787))+((x1784*x1785))+(((-1.0)*x1785*x1786))+(((-10519.0)*x1786))+((x1785*x1787))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j1);
IkReal x1790=IKcos(j1);
IkReal x1791=(sj5*sj6);
IkReal x1792=(cj5*sj6);
IkReal x1793=((1.0)*cj5);
IkReal x1794=(sj3*x1790);
IkReal x1795=(cj3*x1789);
IkReal x1796=((1.0)*cj6*r10);
IkReal x1797=(sj3*x1789);
IkReal x1798=((1.0)*cj6*r00);
IkReal x1799=(cj3*x1790);
IkReal x1800=((1.0)*x1795);
evalcond[0]=((((0.31436)*x1795))+(((-0.31436)*x1794))+(((-1.0)*px))+(((0.42076)*x1789)));
evalcond[1]=((((-0.31436)*x1799))+(((-0.31436)*x1797))+(((-1.0)*py))+(((-0.42076)*x1790)));
evalcond[2]=(x1799+x1797+(((-1.0)*r12*x1793))+(((-1.0)*sj5*x1796))+((r11*x1791)));
evalcond[3]=(x1794+(((-1.0)*x1800))+((r12*sj5))+(((-1.0)*cj6*r10*x1793))+((r11*x1792)));
evalcond[4]=(x1794+(((-1.0)*x1800))+(((-1.0)*sj5*x1798))+(((-1.0)*r02*x1793))+((r01*x1791)));
evalcond[5]=((((-1.0)*cj6*r00*x1793))+((r02*sj5))+(((-1.0)*x1799))+(((-1.0)*x1797))+((r01*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1801=(r11*sj6);
IkReal x1802=(cj6*r10);
IkReal x1803=((10519.0)*sj5);
IkReal x1804=((25000.0)*px);
IkReal x1805=((7859.0)*cj3*sj5);
IkReal x1806=((7859.0)*cj5*r12);
IkReal x1807=((7859.0)*sj3*sj5);
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal((((x1802*x1807))+((cj3*x1804))+(((-1.0)*x1801*x1807))+((sj3*x1806)))),IkReal((((x1802*x1805))+((x1802*x1803))+((cj3*x1806))+(((10519.0)*cj5*r12))+(((-1.0)*x1801*x1803))+(((-1.0)*x1801*x1805))+(((-1.0)*sj3*x1804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign(((7859.0)+(((10519.0)*cj3)))),-1);
if(!x1809.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1810=IKsin(j1);
IkReal x1811=IKcos(j1);
IkReal x1812=(sj5*sj6);
IkReal x1813=(cj5*sj6);
IkReal x1814=((1.0)*cj5);
IkReal x1815=(sj3*x1811);
IkReal x1816=(cj3*x1810);
IkReal x1817=((1.0)*cj6*r10);
IkReal x1818=(sj3*x1810);
IkReal x1819=((1.0)*cj6*r00);
IkReal x1820=(cj3*x1811);
IkReal x1821=((1.0)*x1816);
evalcond[0]=((((-0.31436)*x1815))+(((-1.0)*px))+(((0.31436)*x1816))+(((0.42076)*x1810)));
evalcond[1]=((((-0.31436)*x1820))+(((-0.31436)*x1818))+(((-0.42076)*x1811))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*sj5*x1817))+(((-1.0)*r12*x1814))+x1820+x1818+((r11*x1812)));
evalcond[3]=((((-1.0)*x1821))+(((-1.0)*cj6*r10*x1814))+x1815+((r12*sj5))+((r11*x1813)));
evalcond[4]=((((-1.0)*x1821))+(((-1.0)*sj5*x1819))+(((-1.0)*r02*x1814))+((r01*x1812))+x1815);
evalcond[5]=((((-1.0)*cj6*r00*x1814))+(((-1.0)*x1820))+((r02*sj5))+((r01*x1813))+(((-1.0)*x1818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1822=((196475000.0)*sj3);
IkReal x1823=((196475000.0)*cj3);
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal((((py*x1822))+(((-262975000.0)*px))+(((-1.0)*px*x1823)))),IkReal((((py*x1823))+(((262975000.0)*py))+((px*x1822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
CheckValue<IkReal> x1825=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x1825.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1824.value)+(((1.5707963267949)*(x1825.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j1);
IkReal x1827=IKcos(j1);
IkReal x1828=(sj5*sj6);
IkReal x1829=(cj5*sj6);
IkReal x1830=((1.0)*cj5);
IkReal x1831=(sj3*x1827);
IkReal x1832=(cj3*x1826);
IkReal x1833=((1.0)*cj6*r10);
IkReal x1834=(sj3*x1826);
IkReal x1835=((1.0)*cj6*r00);
IkReal x1836=(cj3*x1827);
IkReal x1837=((1.0)*x1832);
evalcond[0]=((((0.31436)*x1832))+(((-1.0)*px))+(((-0.31436)*x1831))+(((0.42076)*x1826)));
evalcond[1]=((((-1.0)*py))+(((-0.31436)*x1836))+(((-0.31436)*x1834))+(((-0.42076)*x1827)));
evalcond[2]=(x1836+x1834+(((-1.0)*sj5*x1833))+(((-1.0)*r12*x1830))+((r11*x1828)));
evalcond[3]=((((-1.0)*cj6*r10*x1830))+(((-1.0)*x1837))+x1831+((r12*sj5))+((r11*x1829)));
evalcond[4]=((((-1.0)*x1837))+((r01*x1828))+x1831+(((-1.0)*sj5*x1835))+(((-1.0)*r02*x1830)));
evalcond[5]=((((-1.0)*x1836))+(((-1.0)*x1834))+((r01*x1829))+((r02*sj5))+(((-1.0)*cj6*r00*x1830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1838=((196475000.0)*sj3);
IkReal x1839=((196475000.0)*cj3);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((((-262975000.0)*px))+(((-1.0)*px*x1839))+((py*x1838)))),IkReal((((px*x1838))+(((262975000.0)*py))+((py*x1839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
CheckValue<IkReal> x1841=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x1841.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1840.value)+(((1.5707963267949)*(x1841.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1842=IKsin(j1);
IkReal x1843=IKcos(j1);
IkReal x1844=((0.31436)*cj3);
IkReal x1845=((0.31436)*sj3);
evalcond[0]=((((-1.0)*x1843*x1845))+(((0.42076)*x1842))+(((-1.0)*px))+((x1842*x1844)));
evalcond[1]=((((-1.0)*x1843*x1844))+(((-1.0)*x1842*x1845))+(((-1.0)*py))+(((-0.42076)*x1843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1846=(cj3*sj1);
IkReal x1847=(cj1*sj3);
IkReal x1848=(cj6*r20);
IkReal x1849=(r21*sj6);
IkReal x1850=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x1850;
j5eval[1]=((IKabs(((((-1.0)*x1846*x1849))+(((-1.0)*x1847*x1848))+((x1847*x1849))+((x1846*x1848)))))+(IKabs((((r22*x1846))+(((-1.0)*r22*x1847))))));
j5eval[2]=IKsign(x1850);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1851=(cj1*cj3);
IkReal x1852=(sj1*sj3);
IkReal x1853=(cj6*r20);
IkReal x1854=((1.0)*r21*sj6);
IkReal x1855=((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)));
j5eval[0]=x1855;
j5eval[1]=IKsign(x1855);
j5eval[2]=((IKabs((((r22*x1851))+((r22*x1852)))))+(IKabs((((x1852*x1853))+((x1851*x1853))+(((-1.0)*x1852*x1854))+(((-1.0)*x1851*x1854))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1856=cj6*cj6;
IkReal x1857=((1.0)*r22);
IkReal x1858=(cj3*sj1);
IkReal x1859=(cj6*r20);
IkReal x1860=((1.0)*r21);
IkReal x1861=(cj1*sj3);
IkReal x1862=(r21*sj6);
IkReal x1863=((((-1.0)*r01*x1860))+(((-1.0)*r02*x1857))+(((-1.0)*r00*r20*x1856))+((cj6*r00*x1862))+((r01*r21*x1856))+((r01*sj6*x1859)));
j5eval[0]=x1863;
j5eval[1]=IKsign(x1863);
j5eval[2]=((IKabs((((r22*x1858))+(((-1.0)*x1857*x1861)))))+(IKabs(((((-1.0)*x1859*x1861))+(((-1.0)*sj6*x1858*x1860))+((x1858*x1859))+((x1861*x1862))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1864=cj6*cj6;
IkReal x1865=((1.0)*r22);
IkReal x1866=(cj3*sj1);
IkReal x1867=(cj6*r20);
IkReal x1868=((1.0)*r21);
IkReal x1869=(cj1*sj3);
IkReal x1870=(r21*sj6);
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(IKsign((((r01*r21*x1864))+(((-1.0)*r02*x1865))+((r01*sj6*x1867))+(((-1.0)*r00*r20*x1864))+((cj6*r00*x1870))+(((-1.0)*r01*x1868)))),-1);
if(!x1871.valid){
continue;
}
CheckValue<IkReal> x1872 = IKatan2WithCheck(IkReal(((((-1.0)*x1867*x1869))+(((-1.0)*sj6*x1866*x1868))+((x1866*x1867))+((x1869*x1870)))),IkReal((((r22*x1866))+(((-1.0)*x1865*x1869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1872.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1871.value)))+(x1872.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1873=IKcos(j5);
IkReal x1874=IKsin(j5);
IkReal x1875=(cj1*sj3);
IkReal x1876=((1.0)*cj3);
IkReal x1877=(sj1*sj3);
IkReal x1878=(sj1*x1876);
IkReal x1879=(sj6*x1874);
IkReal x1880=((1.0)*x1873);
IkReal x1881=(sj6*x1873);
IkReal x1882=((1.0)*cj6*x1874);
evalcond[0]=(((r21*x1881))+((r22*x1874))+(((-1.0)*cj6*r20*x1880)));
evalcond[1]=((((-1.0)*r22*x1880))+((r21*x1879))+(((-1.0)*r20*x1882)));
evalcond[2]=((((-1.0)*r12*x1880))+x1877+(((-1.0)*r10*x1882))+((cj1*cj3))+((r11*x1879)));
evalcond[3]=((((-1.0)*x1878))+(((-1.0)*cj6*r10*x1880))+x1875+((r12*x1874))+((r11*x1881)));
evalcond[4]=((((-1.0)*x1878))+(((-1.0)*r02*x1880))+((r01*x1879))+x1875+(((-1.0)*r00*x1882)));
evalcond[5]=(((r02*x1874))+(((-1.0)*cj6*r00*x1880))+((r01*x1881))+(((-1.0)*cj1*x1876))+(((-1.0)*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1883=(cj1*cj3);
IkReal x1884=(sj1*sj3);
IkReal x1885=(cj6*r20);
IkReal x1886=((1.0)*r21*sj6);
CheckValue<IkReal> x1887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))),-1);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal((((x1883*x1885))+(((-1.0)*x1883*x1886))+(((-1.0)*x1884*x1886))+((x1884*x1885)))),IkReal((((r22*x1883))+((r22*x1884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1887.value)))+(x1888.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1889=IKcos(j5);
IkReal x1890=IKsin(j5);
IkReal x1891=(cj1*sj3);
IkReal x1892=((1.0)*cj3);
IkReal x1893=(sj1*sj3);
IkReal x1894=(sj1*x1892);
IkReal x1895=(sj6*x1890);
IkReal x1896=((1.0)*x1889);
IkReal x1897=(sj6*x1889);
IkReal x1898=((1.0)*cj6*x1890);
evalcond[0]=(((r22*x1890))+(((-1.0)*cj6*r20*x1896))+((r21*x1897)));
evalcond[1]=((((-1.0)*r22*x1896))+(((-1.0)*r20*x1898))+((r21*x1895)));
evalcond[2]=(((r11*x1895))+(((-1.0)*r10*x1898))+(((-1.0)*r12*x1896))+x1893+((cj1*cj3)));
evalcond[3]=(((r11*x1897))+(((-1.0)*cj6*r10*x1896))+x1891+(((-1.0)*x1894))+((r12*x1890)));
evalcond[4]=((((-1.0)*r02*x1896))+((r01*x1895))+x1891+(((-1.0)*r00*x1898))+(((-1.0)*x1894)));
evalcond[5]=(((r02*x1890))+((r01*x1897))+(((-1.0)*cj1*x1892))+(((-1.0)*cj6*r00*x1896))+(((-1.0)*x1893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1899=(cj3*sj1);
IkReal x1900=(cj1*sj3);
IkReal x1901=(cj6*r20);
IkReal x1902=(r21*sj6);
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal((((x1900*x1902))+(((-1.0)*x1899*x1902))+((x1899*x1901))+(((-1.0)*x1900*x1901)))),IkReal((((r22*x1899))+(((-1.0)*r22*x1900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1903.value)))+(x1904.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1905=IKcos(j5);
IkReal x1906=IKsin(j5);
IkReal x1907=(cj1*sj3);
IkReal x1908=((1.0)*cj3);
IkReal x1909=(sj1*sj3);
IkReal x1910=(sj1*x1908);
IkReal x1911=(sj6*x1906);
IkReal x1912=((1.0)*x1905);
IkReal x1913=(sj6*x1905);
IkReal x1914=((1.0)*cj6*x1906);
evalcond[0]=(((r22*x1906))+((r21*x1913))+(((-1.0)*cj6*r20*x1912)));
evalcond[1]=((((-1.0)*r22*x1912))+((r21*x1911))+(((-1.0)*r20*x1914)));
evalcond[2]=((((-1.0)*r12*x1912))+((r11*x1911))+x1909+(((-1.0)*r10*x1914))+((cj1*cj3)));
evalcond[3]=(((r12*x1906))+((r11*x1913))+x1907+(((-1.0)*cj6*r10*x1912))+(((-1.0)*x1910)));
evalcond[4]=((((-1.0)*r00*x1914))+(((-1.0)*r02*x1912))+((r01*x1911))+x1907+(((-1.0)*x1910)));
evalcond[5]=(((r01*x1913))+(((-1.0)*cj1*x1908))+(((-1.0)*x1909))+(((-1.0)*cj6*r00*x1912))+((r02*x1906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1915=(r00*sj6);
IkReal x1916=((0.0131001)*sj2);
IkReal x1917=(cj6*r01);
IkReal x1918=((0.31436)*cj2*sj3);
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(((((0.31436)*cj3*sj2))+(((0.42076)*sj2))),-1);
if(!x1919.valid){
continue;
}
CheckValue<IkReal> x1920=IKPowWithIntegerCheck(sj2,-1);
if(!x1920.valid){
continue;
}
if( IKabs(((x1919.value)*((((x1917*x1918))+(((-1.0)*x1915*x1916))+((px*sj2))+(((-1.0)*x1916*x1917))+((x1915*x1918)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1920.value)*(((((-1.0)*x1917))+(((-1.0)*x1915)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1919.value)*((((x1917*x1918))+(((-1.0)*x1915*x1916))+((px*sj2))+(((-1.0)*x1916*x1917))+((x1915*x1918))))))+IKsqr(((x1920.value)*(((((-1.0)*x1917))+(((-1.0)*x1915))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1919.value)*((((x1917*x1918))+(((-1.0)*x1915*x1916))+((px*sj2))+(((-1.0)*x1916*x1917))+((x1915*x1918))))), ((x1920.value)*(((((-1.0)*x1917))+(((-1.0)*x1915))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1921=IKcos(j1);
IkReal x1922=IKsin(j1);
IkReal x1923=(cj6*r01);
IkReal x1924=((0.31436)*cj3);
IkReal x1925=(r00*sj6);
IkReal x1926=(r10*sj6);
IkReal x1927=(cj6*r11);
IkReal x1928=((0.31436)*cj2*sj3);
IkReal x1929=(sj2*x1922);
IkReal x1930=(sj2*x1921);
evalcond[0]=((((-1.0)*x1923))+(((-1.0)*x1925))+(((-1.0)*x1930)));
evalcond[1]=((((-1.0)*x1927))+(((-1.0)*x1929))+(((-1.0)*x1926)));
evalcond[2]=((((0.42076)*x1922))+((x1921*x1928))+(((0.0003501)*x1925))+(((0.0003501)*x1923))+(((-1.0)*px))+(((-0.01275)*x1930))+((x1922*x1924)));
evalcond[3]=((((-0.01275)*x1929))+(((0.0003501)*x1926))+(((0.0003501)*x1927))+(((-1.0)*py))+(((-1.0)*x1921*x1924))+(((-0.42076)*x1921))+((x1922*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1931=((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)));
j5eval[0]=x1931;
j5eval[1]=IKsign(x1931);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1932=cj6*cj6;
IkReal x1933=r21*r21;
IkReal x1934=(sj2*sj3);
IkReal x1935=(cj6*r20);
IkReal x1936=(cj3*sj2);
IkReal x1937=(r21*sj6);
IkReal x1938=((r22*r22)+(((-2.0)*x1935*x1937))+x1933+((x1932*(r20*r20)))+(((-1.0)*x1932*x1933)));
j5eval[0]=x1938;
j5eval[1]=((IKabs((((x1934*x1935))+(((-1.0)*x1934*x1937))+((r22*x1936)))))+(IKabs((((r22*x1934))+(((-1.0)*x1935*x1936))+((x1936*x1937))))));
j5eval[2]=IKsign(x1938);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1939=cj6*cj6;
IkReal x1940=(r11*r21);
IkReal x1941=(cj6*sj6);
IkReal x1942=((((-1.0)*r10*r20*x1939))+(((-1.0)*r12*r22))+((x1939*x1940))+(((-1.0)*x1940))+((r11*r20*x1941))+((r10*r21*x1941)));
j5eval[0]=x1942;
j5eval[1]=IKsign(x1942);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1943=(cj1*sj3);
IkReal x1944=(cj3*sj1);
IkReal x1945=(r21*sj6);
IkReal x1946=((1.0)*r22);
IkReal x1947=((1.0)*cj6*r20);
IkReal x1948=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x1948;
j5eval[1]=IKsign(x1948);
j5eval[2]=((IKabs(((((-1.0)*x1943*x1946))+(((-1.0)*x1944*x1946)))))+(IKabs((((x1943*x1945))+(((-1.0)*x1943*x1947))+((x1944*x1945))+(((-1.0)*x1944*x1947))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1949=(sj1*sj3);
IkReal x1950=(cj6*r20);
IkReal x1951=((1.0)*sj6);
IkReal x1952=((1.0)*cj1*cj3);
IkReal x1953=((((-1.0)*cj6*r11))+(((-1.0)*r10*x1951)));
j5eval[0]=x1953;
j5eval[1]=((IKabs(((((-1.0)*r22*x1952))+((r22*x1949)))))+(IKabs(((((-1.0)*x1950*x1952))+((cj1*cj3*r21*sj6))+(((-1.0)*r21*x1949*x1951))+((x1949*x1950))))));
j5eval[2]=IKsign(x1953);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1954=cj6*cj6;
IkReal x1955=(cj6*r20);
IkReal x1956=(cj1*sj3);
IkReal x1957=(r11*r21);
IkReal x1958=(cj3*sj1);
IkReal x1959=(r21*sj6);
IkReal x1960=((((-1.0)*r10*r20*x1954))+(((-1.0)*r12*r22))+((x1954*x1957))+((r11*sj6*x1955))+(((-1.0)*x1957))+((cj6*r10*x1959)));
j5eval[0]=x1960;
j5eval[1]=((IKabs((((x1958*x1959))+(((-1.0)*x1955*x1956))+(((-1.0)*x1955*x1958))+((x1956*x1959)))))+(IKabs((((r22*x1956))+((r22*x1958))))));
j5eval[2]=IKsign(x1960);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x1961=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x1961;
j5eval[1]=IKsign(x1961);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x1962=((1.0)*cj6);
IkReal x1963=((((-1.0)*r10*sj6))+(((-1.0)*r11*x1962)));
j5eval[0]=x1963;
j5eval[1]=IKsign(x1963);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x1962))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x1964=cj6*cj6;
IkReal x1965=(r11*r21);
IkReal x1966=(r21*sj6);
IkReal x1967=(cj6*r20);
IkReal x1968=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x1964))+((x1964*x1965))+(((-1.0)*x1965))+((r11*sj6*x1967))+((cj6*r10*x1966)));
j5eval[0]=x1968;
j5eval[1]=IKsign(x1968);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x1967))+x1966))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1969=cj6*cj6;
IkReal x1970=(r21*sj6);
IkReal x1971=(cj6*r20);
IkReal x1972=(r11*r21);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((((-1.0)*x1971))+x1970)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974=IKPowWithIntegerCheck(IKsign((((x1969*x1972))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x1969))+(((-1.0)*x1972))+((r11*sj6*x1971))+((cj6*r10*x1970)))),-1);
if(!x1974.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1973.value)+(((1.5707963267949)*(x1974.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1975=IKcos(j5);
IkReal x1976=IKsin(j5);
IkReal x1977=(cj6*r10);
IkReal x1978=(cj6*r00);
IkReal x1979=(cj6*r20);
IkReal x1980=(sj6*x1975);
IkReal x1981=(sj6*x1976);
IkReal x1982=((1.0)*x1975);
IkReal x1983=((1.0)*x1976);
evalcond[0]=((((-1.0)*x1979*x1982))+((r21*x1980))+((r22*x1976)));
evalcond[1]=(((r12*x1976))+((r11*x1980))+(((-1.0)*x1977*x1982)));
evalcond[2]=((((-1.0)*x1979*x1983))+((r21*x1981))+(((-1.0)*r22*x1982)));
evalcond[3]=((((-1.0)*r02*x1982))+((r01*x1981))+(((-1.0)*x1978*x1983)));
evalcond[4]=((1.0)+((r02*x1976))+((r01*x1980))+(((-1.0)*x1978*x1982)));
evalcond[5]=((1.0)+((r11*x1981))+(((-1.0)*r12*x1982))+(((-1.0)*x1977*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1984=((1.0)*cj6);
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x1984)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
CheckValue<IkReal> x1986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x1984)))),-1);
if(!x1986.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1985.value)+(((1.5707963267949)*(x1986.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1987=IKcos(j5);
IkReal x1988=IKsin(j5);
IkReal x1989=(cj6*r10);
IkReal x1990=(cj6*r00);
IkReal x1991=(cj6*r20);
IkReal x1992=(sj6*x1987);
IkReal x1993=(sj6*x1988);
IkReal x1994=((1.0)*x1987);
IkReal x1995=((1.0)*x1988);
evalcond[0]=(((r21*x1992))+((r22*x1988))+(((-1.0)*x1991*x1994)));
evalcond[1]=(((r11*x1992))+((r12*x1988))+(((-1.0)*x1989*x1994)));
evalcond[2]=(((r21*x1993))+(((-1.0)*x1991*x1995))+(((-1.0)*r22*x1994)));
evalcond[3]=((((-1.0)*r02*x1994))+(((-1.0)*x1990*x1995))+((r01*x1993)));
evalcond[4]=((1.0)+(((-1.0)*x1990*x1994))+((r01*x1992))+((r02*x1988)));
evalcond[5]=((1.0)+((r11*x1993))+(((-1.0)*x1989*x1995))+(((-1.0)*r12*x1994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1996.value)))+(x1997.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1998=IKcos(j5);
IkReal x1999=IKsin(j5);
IkReal x2000=(cj6*r10);
IkReal x2001=(cj6*r00);
IkReal x2002=(cj6*r20);
IkReal x2003=(sj6*x1998);
IkReal x2004=(sj6*x1999);
IkReal x2005=((1.0)*x1998);
IkReal x2006=((1.0)*x1999);
evalcond[0]=(((r21*x2003))+(((-1.0)*x2002*x2005))+((r22*x1999)));
evalcond[1]=(((r11*x2003))+((r12*x1999))+(((-1.0)*x2000*x2005)));
evalcond[2]=(((r21*x2004))+(((-1.0)*r22*x2005))+(((-1.0)*x2002*x2006)));
evalcond[3]=(((r01*x2004))+(((-1.0)*x2001*x2006))+(((-1.0)*r02*x2005)));
evalcond[4]=((1.0)+((r01*x2003))+((r02*x1999))+(((-1.0)*x2001*x2005)));
evalcond[5]=((1.0)+((r11*x2004))+(((-1.0)*r12*x2005))+(((-1.0)*x2000*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2007=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2007;
j5eval[1]=IKsign(x2007);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2008=((1.0)*cj6);
IkReal x2009=((((-1.0)*r21*x2008))+(((-1.0)*r20*sj6)));
j5eval[0]=x2009;
j5eval[1]=((IKabs(((((-1.0)*r10*x2008))+((r11*sj6)))))+(IKabs(r12)));
j5eval[2]=IKsign(x2009);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2010=cj6*cj6;
IkReal x2011=r11*r11;
IkReal x2012=(r11*sj6);
IkReal x2013=(cj6*r10);
IkReal x2014=((r12*r12)+((x2010*(r10*r10)))+x2011+(((-2.0)*x2012*x2013))+(((-1.0)*x2010*x2011)));
j5eval[0]=x2014;
j5eval[1]=IKsign(x2014);
j5eval[2]=((IKabs(r12))+(IKabs((x2012+(((-1.0)*x2013))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2015=cj6*cj6;
IkReal x2016=r11*r11;
IkReal x2017=(r11*sj6);
IkReal x2018=(cj6*r10);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal((x2017+(((-1.0)*x2018)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2016+((x2015*(r10*r10)))+(((-1.0)*x2015*x2016))+(((-2.0)*x2017*x2018)))),-1);
if(!x2020.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2019.value)+(((1.5707963267949)*(x2020.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2021=IKcos(j5);
IkReal x2022=IKsin(j5);
IkReal x2023=(cj6*r10);
IkReal x2024=(cj6*r00);
IkReal x2025=(cj6*r20);
IkReal x2026=(sj6*x2021);
IkReal x2027=(sj6*x2022);
IkReal x2028=((1.0)*x2021);
IkReal x2029=((1.0)*x2022);
evalcond[0]=(((r22*x2022))+(((-1.0)*x2025*x2028))+((r21*x2026)));
evalcond[1]=((((-1.0)*x2023*x2028))+((r11*x2026))+((r12*x2022)));
evalcond[2]=((((-1.0)*r22*x2028))+(((-1.0)*x2025*x2029))+((r21*x2027)));
evalcond[3]=(((r01*x2027))+(((-1.0)*r02*x2028))+(((-1.0)*x2024*x2029)));
evalcond[4]=((-1.0)+((r01*x2026))+((r02*x2022))+(((-1.0)*x2024*x2028)));
evalcond[5]=((-1.0)+(((-1.0)*x2023*x2029))+((r11*x2027))+(((-1.0)*r12*x2028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2030=((1.0)*cj6);
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2030))+(((-1.0)*r20*sj6)))),-1);
if(!x2031.valid){
continue;
}
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2030))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2031.value)))+(x2032.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2033=IKcos(j5);
IkReal x2034=IKsin(j5);
IkReal x2035=(cj6*r10);
IkReal x2036=(cj6*r00);
IkReal x2037=(cj6*r20);
IkReal x2038=(sj6*x2033);
IkReal x2039=(sj6*x2034);
IkReal x2040=((1.0)*x2033);
IkReal x2041=((1.0)*x2034);
evalcond[0]=(((r22*x2034))+((r21*x2038))+(((-1.0)*x2037*x2040)));
evalcond[1]=(((r12*x2034))+(((-1.0)*x2035*x2040))+((r11*x2038)));
evalcond[2]=(((r21*x2039))+(((-1.0)*r22*x2040))+(((-1.0)*x2037*x2041)));
evalcond[3]=((((-1.0)*r02*x2040))+((r01*x2039))+(((-1.0)*x2036*x2041)));
evalcond[4]=((-1.0)+((r01*x2038))+((r02*x2034))+(((-1.0)*x2036*x2040)));
evalcond[5]=((-1.0)+(((-1.0)*x2035*x2041))+((r11*x2039))+(((-1.0)*r12*x2040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
CheckValue<IkReal> x2043=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2043.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2042.value)+(((1.5707963267949)*(x2043.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2044=IKcos(j5);
IkReal x2045=IKsin(j5);
IkReal x2046=(cj6*r10);
IkReal x2047=(cj6*r00);
IkReal x2048=(cj6*r20);
IkReal x2049=(sj6*x2044);
IkReal x2050=(sj6*x2045);
IkReal x2051=((1.0)*x2044);
IkReal x2052=((1.0)*x2045);
evalcond[0]=(((r22*x2045))+((r21*x2049))+(((-1.0)*x2048*x2051)));
evalcond[1]=(((r11*x2049))+((r12*x2045))+(((-1.0)*x2046*x2051)));
evalcond[2]=((((-1.0)*r22*x2051))+(((-1.0)*x2048*x2052))+((r21*x2050)));
evalcond[3]=(((r01*x2050))+(((-1.0)*r02*x2051))+(((-1.0)*x2047*x2052)));
evalcond[4]=((-1.0)+((r02*x2045))+((r01*x2049))+(((-1.0)*x2047*x2051)));
evalcond[5]=((-1.0)+((r11*x2050))+(((-1.0)*r12*x2051))+(((-1.0)*x2046*x2052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2053=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2053;
j5eval[1]=IKsign(x2053);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2054=((1.0)*cj6);
IkReal x2055=((((-1.0)*r21*x2054))+(((-1.0)*r20*sj6)));
j5eval[0]=x2055;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2054))+((r11*sj6))))));
j5eval[2]=IKsign(x2055);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2056=cj6*cj6;
IkReal x2057=r11*r11;
IkReal x2058=(r11*sj6);
IkReal x2059=(cj6*r10);
IkReal x2060=((r12*r12)+x2057+(((-1.0)*x2056*x2057))+(((-2.0)*x2058*x2059))+((x2056*(r10*r10))));
j5eval[0]=x2060;
j5eval[1]=IKsign(x2060);
j5eval[2]=((IKabs((x2058+(((-1.0)*x2059)))))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2061=cj6*cj6;
IkReal x2062=r11*r11;
IkReal x2063=(r11*sj6);
IkReal x2064=(cj6*r10);
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign((((x2061*(r10*r10)))+(r12*r12)+x2062+(((-2.0)*x2063*x2064))+(((-1.0)*x2061*x2062)))),-1);
if(!x2065.valid){
continue;
}
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal((x2063+(((-1.0)*x2064)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2065.value)))+(x2066.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2067=IKcos(j5);
IkReal x2068=IKsin(j5);
IkReal x2069=(cj6*r10);
IkReal x2070=(cj6*r00);
IkReal x2071=(cj6*r20);
IkReal x2072=(sj6*x2067);
IkReal x2073=(sj6*x2068);
IkReal x2074=((1.0)*x2067);
IkReal x2075=((1.0)*x2068);
evalcond[0]=(((r22*x2068))+(((-1.0)*x2071*x2074))+((r21*x2072)));
evalcond[1]=(((r12*x2068))+((r11*x2072))+(((-1.0)*x2069*x2074)));
evalcond[2]=((((-1.0)*x2071*x2075))+(((-1.0)*r22*x2074))+((r21*x2073)));
evalcond[3]=((((-1.0)*r02*x2074))+(((-1.0)*x2070*x2075))+((r01*x2073)));
evalcond[4]=((-1.0)+(((-1.0)*x2070*x2074))+((r02*x2068))+((r01*x2072)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2074))+((r11*x2073))+(((-1.0)*x2069*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2076=((1.0)*cj6);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2076))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2076))+(((-1.0)*r20*sj6)))),-1);
if(!x2078.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2077.value)+(((1.5707963267949)*(x2078.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2079=IKcos(j5);
IkReal x2080=IKsin(j5);
IkReal x2081=(cj6*r10);
IkReal x2082=(cj6*r00);
IkReal x2083=(cj6*r20);
IkReal x2084=(sj6*x2079);
IkReal x2085=(sj6*x2080);
IkReal x2086=((1.0)*x2079);
IkReal x2087=((1.0)*x2080);
evalcond[0]=((((-1.0)*x2083*x2086))+((r21*x2084))+((r22*x2080)));
evalcond[1]=((((-1.0)*x2081*x2086))+((r11*x2084))+((r12*x2080)));
evalcond[2]=((((-1.0)*r22*x2086))+(((-1.0)*x2083*x2087))+((r21*x2085)));
evalcond[3]=((((-1.0)*r02*x2086))+((r01*x2085))+(((-1.0)*x2082*x2087)));
evalcond[4]=((-1.0)+((r02*x2080))+((r01*x2084))+(((-1.0)*x2082*x2086)));
evalcond[5]=((-1.0)+(((-1.0)*x2081*x2087))+(((-1.0)*r12*x2086))+((r11*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2089.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2088.value)+(((1.5707963267949)*(x2089.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2090=IKcos(j5);
IkReal x2091=IKsin(j5);
IkReal x2092=(cj6*r10);
IkReal x2093=(cj6*r00);
IkReal x2094=(cj6*r20);
IkReal x2095=(sj6*x2090);
IkReal x2096=(sj6*x2091);
IkReal x2097=((1.0)*x2090);
IkReal x2098=((1.0)*x2091);
evalcond[0]=((((-1.0)*x2094*x2097))+((r22*x2091))+((r21*x2095)));
evalcond[1]=((((-1.0)*x2092*x2097))+((r12*x2091))+((r11*x2095)));
evalcond[2]=((((-1.0)*x2094*x2098))+((r21*x2096))+(((-1.0)*r22*x2097)));
evalcond[3]=(((r01*x2096))+(((-1.0)*x2093*x2098))+(((-1.0)*r02*x2097)));
evalcond[4]=((-1.0)+((r01*x2095))+(((-1.0)*x2093*x2097))+((r02*x2091)));
evalcond[5]=((-1.0)+(((-1.0)*x2092*x2098))+(((-1.0)*r12*x2097))+((r11*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2099=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2099;
j5eval[1]=IKsign(x2099);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2100=((1.0)*cj6);
IkReal x2101=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2100)));
j5eval[0]=x2101;
j5eval[1]=IKsign(x2101);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x2100))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2102=cj6*cj6;
IkReal x2103=(r11*r21);
IkReal x2104=(r21*sj6);
IkReal x2105=(cj6*r20);
IkReal x2106=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x2102))+((cj6*r10*x2104))+((x2102*x2103))+(((-1.0)*x2103))+((r11*sj6*x2105)));
j5eval[0]=x2106;
j5eval[1]=IKsign(x2106);
j5eval[2]=((IKabs(r22))+(IKabs((x2104+(((-1.0)*x2105))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2107=cj6*cj6;
IkReal x2108=(r21*sj6);
IkReal x2109=(cj6*r20);
IkReal x2110=(r11*r21);
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x2107))+((cj6*r10*x2108))+((x2107*x2110))+((r11*sj6*x2109))+(((-1.0)*x2110)))),-1);
if(!x2111.valid){
continue;
}
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal((x2108+(((-1.0)*x2109)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2111.value)))+(x2112.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2113=IKcos(j5);
IkReal x2114=IKsin(j5);
IkReal x2115=(cj6*r10);
IkReal x2116=(cj6*r00);
IkReal x2117=(cj6*r20);
IkReal x2118=(sj6*x2113);
IkReal x2119=(sj6*x2114);
IkReal x2120=((1.0)*x2113);
IkReal x2121=((1.0)*x2114);
evalcond[0]=((((-1.0)*x2117*x2120))+((r21*x2118))+((r22*x2114)));
evalcond[1]=(((r12*x2114))+(((-1.0)*x2115*x2120))+((r11*x2118)));
evalcond[2]=((((-1.0)*x2117*x2121))+(((-1.0)*r22*x2120))+((r21*x2119)));
evalcond[3]=((((-1.0)*x2116*x2121))+((r01*x2119))+(((-1.0)*r02*x2120)));
evalcond[4]=((1.0)+(((-1.0)*x2116*x2120))+((r01*x2118))+((r02*x2114)));
evalcond[5]=((1.0)+(((-1.0)*x2115*x2121))+(((-1.0)*r12*x2120))+((r11*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2122=((1.0)*cj6);
CheckValue<IkReal> x2123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2122)))),-1);
if(!x2123.valid){
continue;
}
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2122)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2123.value)))+(x2124.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2125=IKcos(j5);
IkReal x2126=IKsin(j5);
IkReal x2127=(cj6*r10);
IkReal x2128=(cj6*r00);
IkReal x2129=(cj6*r20);
IkReal x2130=(sj6*x2125);
IkReal x2131=(sj6*x2126);
IkReal x2132=((1.0)*x2125);
IkReal x2133=((1.0)*x2126);
evalcond[0]=(((r21*x2130))+(((-1.0)*x2129*x2132))+((r22*x2126)));
evalcond[1]=(((r12*x2126))+((r11*x2130))+(((-1.0)*x2127*x2132)));
evalcond[2]=((((-1.0)*r22*x2132))+((r21*x2131))+(((-1.0)*x2129*x2133)));
evalcond[3]=(((r01*x2131))+(((-1.0)*x2128*x2133))+(((-1.0)*r02*x2132)));
evalcond[4]=((1.0)+((r02*x2126))+((r01*x2130))+(((-1.0)*x2128*x2132)));
evalcond[5]=((1.0)+(((-1.0)*r12*x2132))+((r11*x2131))+(((-1.0)*x2127*x2133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2134.value)))+(x2135.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2136=IKcos(j5);
IkReal x2137=IKsin(j5);
IkReal x2138=(cj6*r10);
IkReal x2139=(cj6*r00);
IkReal x2140=(cj6*r20);
IkReal x2141=(sj6*x2136);
IkReal x2142=(sj6*x2137);
IkReal x2143=((1.0)*x2136);
IkReal x2144=((1.0)*x2137);
evalcond[0]=((((-1.0)*x2140*x2143))+((r22*x2137))+((r21*x2141)));
evalcond[1]=((((-1.0)*x2138*x2143))+((r11*x2141))+((r12*x2137)));
evalcond[2]=((((-1.0)*x2140*x2144))+(((-1.0)*r22*x2143))+((r21*x2142)));
evalcond[3]=((((-1.0)*r02*x2143))+((r01*x2142))+(((-1.0)*x2139*x2144)));
evalcond[4]=((1.0)+((r02*x2137))+((r01*x2141))+(((-1.0)*x2139*x2143)));
evalcond[5]=((1.0)+(((-1.0)*x2138*x2144))+((r11*x2142))+(((-1.0)*r12*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2145=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2145;
j5eval[1]=IKsign(x2145);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2146=((1.0)*cj6);
IkReal x2147=((((-1.0)*r21*x2146))+(((-1.0)*r20*sj6)));
j5eval[0]=x2147;
j5eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x2146)))))+(IKabs(r12)));
j5eval[2]=IKsign(x2147);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2148=cj6*cj6;
IkReal x2149=r11*r11;
IkReal x2150=(r11*sj6);
IkReal x2151=(cj6*r10);
IkReal x2152=((r12*r12)+x2149+(((-2.0)*x2150*x2151))+((x2148*(r10*r10)))+(((-1.0)*x2148*x2149)));
j5eval[0]=x2152;
j5eval[1]=IKsign(x2152);
j5eval[2]=((IKabs(r12))+(IKabs((x2150+(((-1.0)*x2151))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2153=cj6*cj6;
IkReal x2154=r11*r11;
IkReal x2155=(r11*sj6);
IkReal x2156=(cj6*r10);
CheckValue<IkReal> x2157=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2154+(((-2.0)*x2155*x2156))+(((-1.0)*x2153*x2154))+((x2153*(r10*r10))))),-1);
if(!x2157.valid){
continue;
}
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal((x2155+(((-1.0)*x2156)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2157.value)))+(x2158.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2159=IKcos(j5);
IkReal x2160=IKsin(j5);
IkReal x2161=(cj6*r10);
IkReal x2162=(cj6*r00);
IkReal x2163=(cj6*r20);
IkReal x2164=(sj6*x2159);
IkReal x2165=(sj6*x2160);
IkReal x2166=((1.0)*x2159);
IkReal x2167=((1.0)*x2160);
evalcond[0]=((((-1.0)*x2163*x2166))+((r21*x2164))+((r22*x2160)));
evalcond[1]=(((r12*x2160))+(((-1.0)*x2161*x2166))+((r11*x2164)));
evalcond[2]=((((-1.0)*x2163*x2167))+((r21*x2165))+(((-1.0)*r22*x2166)));
evalcond[3]=(((r01*x2165))+(((-1.0)*r02*x2166))+(((-1.0)*x2162*x2167)));
evalcond[4]=((-1.0)+((r01*x2164))+((r02*x2160))+(((-1.0)*x2162*x2166)));
evalcond[5]=((-1.0)+(((-1.0)*x2161*x2167))+(((-1.0)*r12*x2166))+((r11*x2165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2168=((1.0)*cj6);
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2168))+(((-1.0)*r20*sj6)))),-1);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2168))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2169.value)))+(x2170.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2171=IKcos(j5);
IkReal x2172=IKsin(j5);
IkReal x2173=(cj6*r10);
IkReal x2174=(cj6*r00);
IkReal x2175=(cj6*r20);
IkReal x2176=(sj6*x2171);
IkReal x2177=(sj6*x2172);
IkReal x2178=((1.0)*x2171);
IkReal x2179=((1.0)*x2172);
evalcond[0]=(((r22*x2172))+((r21*x2176))+(((-1.0)*x2175*x2178)));
evalcond[1]=(((r11*x2176))+(((-1.0)*x2173*x2178))+((r12*x2172)));
evalcond[2]=(((r21*x2177))+(((-1.0)*x2175*x2179))+(((-1.0)*r22*x2178)));
evalcond[3]=(((r01*x2177))+(((-1.0)*x2174*x2179))+(((-1.0)*r02*x2178)));
evalcond[4]=((-1.0)+((r01*x2176))+(((-1.0)*x2174*x2178))+((r02*x2172)));
evalcond[5]=((-1.0)+((r11*x2177))+(((-1.0)*x2173*x2179))+(((-1.0)*r12*x2178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2181.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2182=IKcos(j5);
IkReal x2183=IKsin(j5);
IkReal x2184=(cj6*r10);
IkReal x2185=(cj6*r00);
IkReal x2186=(cj6*r20);
IkReal x2187=(sj6*x2182);
IkReal x2188=(sj6*x2183);
IkReal x2189=((1.0)*x2182);
IkReal x2190=((1.0)*x2183);
evalcond[0]=(((r22*x2183))+(((-1.0)*x2186*x2189))+((r21*x2187)));
evalcond[1]=(((r12*x2183))+((r11*x2187))+(((-1.0)*x2184*x2189)));
evalcond[2]=((((-1.0)*x2186*x2190))+((r21*x2188))+(((-1.0)*r22*x2189)));
evalcond[3]=((((-1.0)*x2185*x2190))+(((-1.0)*r02*x2189))+((r01*x2188)));
evalcond[4]=((-1.0)+(((-1.0)*x2185*x2189))+((r02*x2183))+((r01*x2187)));
evalcond[5]=((-1.0)+(((-1.0)*x2184*x2190))+((r11*x2188))+(((-1.0)*r12*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2191=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2191;
j5eval[1]=IKsign(x2191);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2192=((1.0)*cj6);
IkReal x2193=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2192)));
j5eval[0]=x2193;
j5eval[1]=IKsign(x2193);
j5eval[2]=((IKabs(((((-1.0)*r20*x2192))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2194=cj6*cj6;
IkReal x2195=(r11*r21);
IkReal x2196=(r21*sj6);
IkReal x2197=(cj6*r20);
IkReal x2198=(((r11*sj6*x2197))+((x2194*x2195))+(((-1.0)*x2195))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x2194))+((cj6*r10*x2196)));
j5eval[0]=x2198;
j5eval[1]=IKsign(x2198);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x2197))+x2196))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2199=cj6*cj6;
IkReal x2200=(r21*sj6);
IkReal x2201=(cj6*r20);
IkReal x2202=(r11*r21);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((((-1.0)*x2201))+x2200)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2202))+(((-1.0)*r12*r22))+((r11*sj6*x2201))+((cj6*r10*x2200))+((x2199*x2202))+(((-1.0)*r10*r20*x2199)))),-1);
if(!x2204.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2203.value)+(((1.5707963267949)*(x2204.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2205=IKcos(j5);
IkReal x2206=IKsin(j5);
IkReal x2207=(cj6*r10);
IkReal x2208=(cj6*r00);
IkReal x2209=(cj6*r20);
IkReal x2210=(sj6*x2205);
IkReal x2211=(sj6*x2206);
IkReal x2212=((1.0)*x2205);
IkReal x2213=((1.0)*x2206);
evalcond[0]=((((-1.0)*x2209*x2212))+((r21*x2210))+((r22*x2206)));
evalcond[1]=((((-1.0)*x2207*x2212))+((r12*x2206))+((r11*x2210)));
evalcond[2]=((((-1.0)*r22*x2212))+(((-1.0)*x2209*x2213))+((r21*x2211)));
evalcond[3]=(((r01*x2211))+(((-1.0)*x2208*x2213))+(((-1.0)*r02*x2212)));
evalcond[4]=((1.0)+((r02*x2206))+((r01*x2210))+(((-1.0)*x2208*x2212)));
evalcond[5]=((1.0)+(((-1.0)*x2207*x2213))+(((-1.0)*r12*x2212))+((r11*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2214=((1.0)*cj6);
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2214)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
CheckValue<IkReal> x2216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2214)))),-1);
if(!x2216.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2215.value)+(((1.5707963267949)*(x2216.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2217=IKcos(j5);
IkReal x2218=IKsin(j5);
IkReal x2219=(cj6*r10);
IkReal x2220=(cj6*r00);
IkReal x2221=(cj6*r20);
IkReal x2222=(sj6*x2217);
IkReal x2223=(sj6*x2218);
IkReal x2224=((1.0)*x2217);
IkReal x2225=((1.0)*x2218);
evalcond[0]=((((-1.0)*x2221*x2224))+((r21*x2222))+((r22*x2218)));
evalcond[1]=((((-1.0)*x2219*x2224))+((r12*x2218))+((r11*x2222)));
evalcond[2]=((((-1.0)*x2221*x2225))+((r21*x2223))+(((-1.0)*r22*x2224)));
evalcond[3]=((((-1.0)*x2220*x2225))+(((-1.0)*r02*x2224))+((r01*x2223)));
evalcond[4]=((1.0)+(((-1.0)*x2220*x2224))+((r01*x2222))+((r02*x2218)));
evalcond[5]=((1.0)+(((-1.0)*x2219*x2225))+(((-1.0)*r12*x2224))+((r11*x2223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2226.value)))+(x2227.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2228=IKcos(j5);
IkReal x2229=IKsin(j5);
IkReal x2230=(cj6*r10);
IkReal x2231=(cj6*r00);
IkReal x2232=(cj6*r20);
IkReal x2233=(sj6*x2228);
IkReal x2234=(sj6*x2229);
IkReal x2235=((1.0)*x2228);
IkReal x2236=((1.0)*x2229);
evalcond[0]=(((r22*x2229))+(((-1.0)*x2232*x2235))+((r21*x2233)));
evalcond[1]=(((r12*x2229))+(((-1.0)*x2230*x2235))+((r11*x2233)));
evalcond[2]=((((-1.0)*x2232*x2236))+((r21*x2234))+(((-1.0)*r22*x2235)));
evalcond[3]=((((-1.0)*r02*x2235))+(((-1.0)*x2231*x2236))+((r01*x2234)));
evalcond[4]=((1.0)+((r02*x2229))+(((-1.0)*x2231*x2235))+((r01*x2233)));
evalcond[5]=((1.0)+(((-1.0)*r12*x2235))+(((-1.0)*x2230*x2236))+((r11*x2234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2237=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2237;
j5eval[1]=IKsign(x2237);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2238=((1.0)*cj6);
IkReal x2239=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2238)));
j5eval[0]=x2239;
j5eval[1]=IKsign(x2239);
j5eval[2]=((IKabs(((((-1.0)*r20*x2238))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2240=cj6*cj6;
IkReal x2241=(r11*r21);
IkReal x2242=(r21*sj6);
IkReal x2243=(cj6*r20);
IkReal x2244=((((-1.0)*x2241))+(((-1.0)*r10*r20*x2240))+(((-1.0)*r12*r22))+((cj6*r10*x2242))+((x2240*x2241))+((r11*sj6*x2243)));
j5eval[0]=x2244;
j5eval[1]=IKsign(x2244);
j5eval[2]=((IKabs(r22))+(IKabs((x2242+(((-1.0)*x2243))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2245=cj6*cj6;
IkReal x2246=(r21*sj6);
IkReal x2247=(cj6*r20);
IkReal x2248=(r11*r21);
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2248))+(((-1.0)*r10*r20*x2245))+(((-1.0)*r12*r22))+((cj6*r10*x2246))+((r11*sj6*x2247))+((x2245*x2248)))),-1);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal((x2246+(((-1.0)*x2247)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2249.value)))+(x2250.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2251=IKcos(j5);
IkReal x2252=IKsin(j5);
IkReal x2253=(cj6*r10);
IkReal x2254=(cj6*r00);
IkReal x2255=(cj6*r20);
IkReal x2256=(sj6*x2251);
IkReal x2257=(sj6*x2252);
IkReal x2258=((1.0)*x2251);
IkReal x2259=((1.0)*x2252);
evalcond[0]=((((-1.0)*x2255*x2258))+((r22*x2252))+((r21*x2256)));
evalcond[1]=(((r12*x2252))+(((-1.0)*x2253*x2258))+((r11*x2256)));
evalcond[2]=((((-1.0)*x2255*x2259))+(((-1.0)*r22*x2258))+((r21*x2257)));
evalcond[3]=((((-1.0)*r02*x2258))+((r01*x2257))+(((-1.0)*x2254*x2259)));
evalcond[4]=((1.0)+((r01*x2256))+((r02*x2252))+(((-1.0)*x2254*x2258)));
evalcond[5]=((1.0)+(((-1.0)*x2253*x2259))+(((-1.0)*r12*x2258))+((r11*x2257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2260=((1.0)*cj6);
CheckValue<IkReal> x2261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2260)))),-1);
if(!x2261.valid){
continue;
}
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2260)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2261.value)))+(x2262.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2263=IKcos(j5);
IkReal x2264=IKsin(j5);
IkReal x2265=(cj6*r10);
IkReal x2266=(cj6*r00);
IkReal x2267=(cj6*r20);
IkReal x2268=(sj6*x2263);
IkReal x2269=(sj6*x2264);
IkReal x2270=((1.0)*x2263);
IkReal x2271=((1.0)*x2264);
evalcond[0]=(((r21*x2268))+((r22*x2264))+(((-1.0)*x2267*x2270)));
evalcond[1]=(((r11*x2268))+((r12*x2264))+(((-1.0)*x2265*x2270)));
evalcond[2]=(((r21*x2269))+(((-1.0)*r22*x2270))+(((-1.0)*x2267*x2271)));
evalcond[3]=(((r01*x2269))+(((-1.0)*x2266*x2271))+(((-1.0)*r02*x2270)));
evalcond[4]=((1.0)+((r01*x2268))+(((-1.0)*x2266*x2270))+((r02*x2264)));
evalcond[5]=((1.0)+((r11*x2269))+(((-1.0)*x2265*x2271))+(((-1.0)*r12*x2270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2272=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2272.valid){
continue;
}
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2272.value)))+(x2273.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2274=IKcos(j5);
IkReal x2275=IKsin(j5);
IkReal x2276=(cj6*r10);
IkReal x2277=(cj6*r00);
IkReal x2278=(cj6*r20);
IkReal x2279=(sj6*x2274);
IkReal x2280=(sj6*x2275);
IkReal x2281=((1.0)*x2274);
IkReal x2282=((1.0)*x2275);
evalcond[0]=(((r21*x2279))+((r22*x2275))+(((-1.0)*x2278*x2281)));
evalcond[1]=((((-1.0)*x2276*x2281))+((r11*x2279))+((r12*x2275)));
evalcond[2]=((((-1.0)*x2278*x2282))+((r21*x2280))+(((-1.0)*r22*x2281)));
evalcond[3]=((((-1.0)*r02*x2281))+(((-1.0)*x2277*x2282))+((r01*x2280)));
evalcond[4]=((1.0)+((r01*x2279))+(((-1.0)*x2277*x2281))+((r02*x2275)));
evalcond[5]=((1.0)+(((-1.0)*x2276*x2282))+((r11*x2280))+(((-1.0)*r12*x2281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2283=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2283;
j5eval[1]=IKsign(x2283);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2284=((1.0)*cj6);
IkReal x2285=((((-1.0)*r21*x2284))+(((-1.0)*r20*sj6)));
j5eval[0]=x2285;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2284))+((r11*sj6))))));
j5eval[2]=IKsign(x2285);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2286=cj6*cj6;
IkReal x2287=r11*r11;
IkReal x2288=(r11*sj6);
IkReal x2289=(cj6*r10);
IkReal x2290=((r12*r12)+((x2286*(r10*r10)))+x2287+(((-1.0)*x2286*x2287))+(((-2.0)*x2288*x2289)));
j5eval[0]=x2290;
j5eval[1]=IKsign(x2290);
j5eval[2]=((IKabs(r12))+(IKabs((x2288+(((-1.0)*x2289))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2291=cj6*cj6;
IkReal x2292=r11*r11;
IkReal x2293=(r11*sj6);
IkReal x2294=(cj6*r10);
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal((x2293+(((-1.0)*x2294)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
CheckValue<IkReal> x2296=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2292+((x2291*(r10*r10)))+(((-1.0)*x2291*x2292))+(((-2.0)*x2293*x2294)))),-1);
if(!x2296.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2295.value)+(((1.5707963267949)*(x2296.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2297=IKcos(j5);
IkReal x2298=IKsin(j5);
IkReal x2299=(cj6*r10);
IkReal x2300=(cj6*r00);
IkReal x2301=(cj6*r20);
IkReal x2302=(sj6*x2297);
IkReal x2303=(sj6*x2298);
IkReal x2304=((1.0)*x2297);
IkReal x2305=((1.0)*x2298);
evalcond[0]=((((-1.0)*x2301*x2304))+((r22*x2298))+((r21*x2302)));
evalcond[1]=(((r11*x2302))+(((-1.0)*x2299*x2304))+((r12*x2298)));
evalcond[2]=((((-1.0)*x2301*x2305))+(((-1.0)*r22*x2304))+((r21*x2303)));
evalcond[3]=((((-1.0)*x2300*x2305))+((r01*x2303))+(((-1.0)*r02*x2304)));
evalcond[4]=((-1.0)+(((-1.0)*x2300*x2304))+((r02*x2298))+((r01*x2302)));
evalcond[5]=((-1.0)+((r11*x2303))+(((-1.0)*x2299*x2305))+(((-1.0)*r12*x2304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2306=((1.0)*cj6);
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2306))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
CheckValue<IkReal> x2308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2306))+(((-1.0)*r20*sj6)))),-1);
if(!x2308.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2307.value)+(((1.5707963267949)*(x2308.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2309=IKcos(j5);
IkReal x2310=IKsin(j5);
IkReal x2311=(cj6*r10);
IkReal x2312=(cj6*r00);
IkReal x2313=(cj6*r20);
IkReal x2314=(sj6*x2309);
IkReal x2315=(sj6*x2310);
IkReal x2316=((1.0)*x2309);
IkReal x2317=((1.0)*x2310);
evalcond[0]=(((r21*x2314))+((r22*x2310))+(((-1.0)*x2313*x2316)));
evalcond[1]=((((-1.0)*x2311*x2316))+((r11*x2314))+((r12*x2310)));
evalcond[2]=((((-1.0)*r22*x2316))+((r21*x2315))+(((-1.0)*x2313*x2317)));
evalcond[3]=((((-1.0)*x2312*x2317))+((r01*x2315))+(((-1.0)*r02*x2316)));
evalcond[4]=((-1.0)+(((-1.0)*x2312*x2316))+((r01*x2314))+((r02*x2310)));
evalcond[5]=((-1.0)+(((-1.0)*x2311*x2317))+((r11*x2315))+(((-1.0)*r12*x2316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2319.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2318.value)+(((1.5707963267949)*(x2319.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2320=IKcos(j5);
IkReal x2321=IKsin(j5);
IkReal x2322=(cj6*r10);
IkReal x2323=(cj6*r00);
IkReal x2324=(cj6*r20);
IkReal x2325=(sj6*x2320);
IkReal x2326=(sj6*x2321);
IkReal x2327=((1.0)*x2320);
IkReal x2328=((1.0)*x2321);
evalcond[0]=((((-1.0)*x2324*x2327))+((r22*x2321))+((r21*x2325)));
evalcond[1]=(((r11*x2325))+(((-1.0)*x2322*x2327))+((r12*x2321)));
evalcond[2]=((((-1.0)*x2324*x2328))+(((-1.0)*r22*x2327))+((r21*x2326)));
evalcond[3]=((((-1.0)*x2323*x2328))+((r01*x2326))+(((-1.0)*r02*x2327)));
evalcond[4]=((-1.0)+((r02*x2321))+(((-1.0)*x2323*x2327))+((r01*x2325)));
evalcond[5]=((-1.0)+((r11*x2326))+(((-1.0)*x2322*x2328))+(((-1.0)*r12*x2327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x2329=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2329);
rxp1_1=(px*r21);
rxp1_2=(r11*x2329);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2330=((1.0)*cj1);
j5eval[0]=r02;
j5eval[1]=IKsign(r02);
j5eval[2]=((IKabs((((sj1*sj3))+(((-1.0)*cj3*x2330)))))+(IKabs(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x2330))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x2331=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2331);
rxp1_1=(px*r21);
rxp1_2=(r11*x2331);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2332=((1.0)*cj1);
IkReal x2333=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[0]=x2333;
j5eval[1]=IKsign(x2333);
j5eval[2]=((IKabs(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x2332)))))+(IKabs((((sj1*sj3))+(((-1.0)*cj3*x2332))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2334=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2334);
rxp1_1=(px*r21);
rxp1_2=(r11*x2334);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2335=((1.0)*cj1);
CheckValue<IkReal> x2336=IKPowWithIntegerCheck(r02,-1);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x2337.valid){
continue;
}
if( IKabs(((x2336.value)*((((sj1*sj3))+(((-1.0)*cj3*x2335)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2337.value)*(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x2335)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2336.value)*((((sj1*sj3))+(((-1.0)*cj3*x2335))))))+IKsqr(((x2337.value)*(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x2335))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x2336.value)*((((sj1*sj3))+(((-1.0)*cj3*x2335))))), ((x2337.value)*(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x2335))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2338=IKsin(j5);
IkReal x2339=IKcos(j5);
IkReal x2340=(cj1*cj3);
IkReal x2341=(cj1*sj3);
IkReal x2342=(r11*sj6);
IkReal x2343=(r21*sj6);
IkReal x2344=(cj3*sj1);
IkReal x2345=(cj6*r10);
IkReal x2346=(cj6*r20);
IkReal x2347=((1.0)*sj1*sj3);
IkReal x2348=((1.0)*x2339);
IkReal x2349=((1.0)*x2338);
evalcond[0]=(((r02*x2338))+x2340+(((-1.0)*x2347)));
evalcond[1]=((((-1.0)*x2346*x2349))+((x2338*x2343)));
evalcond[2]=((((-1.0)*x2346*x2348))+((x2339*x2343)));
evalcond[3]=((((-1.0)*x2341))+(((-1.0)*x2344))+(((-1.0)*r02*x2348)));
evalcond[4]=((((-1.0)*x2345*x2348))+x2344+x2341+((x2339*x2342)));
evalcond[5]=((((-1.0)*x2345*x2349))+x2340+((x2338*x2342))+(((-1.0)*x2347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2350=((1.0)*cj1);
CheckValue<IkReal> x2351 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x2350))+((sj1*sj3)))),IkReal(((((-1.0)*sj3*x2350))+(((-1.0)*cj3*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2351.valid){
continue;
}
CheckValue<IkReal> x2352=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10))+((r11*sj6)))),-1);
if(!x2352.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2351.value)+(((1.5707963267949)*(x2352.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2353=IKsin(j5);
IkReal x2354=IKcos(j5);
IkReal x2355=(cj1*cj3);
IkReal x2356=(cj1*sj3);
IkReal x2357=(r11*sj6);
IkReal x2358=(r21*sj6);
IkReal x2359=(cj3*sj1);
IkReal x2360=(cj6*r10);
IkReal x2361=(cj6*r20);
IkReal x2362=((1.0)*sj1*sj3);
IkReal x2363=((1.0)*x2354);
IkReal x2364=((1.0)*x2353);
evalcond[0]=(x2355+(((-1.0)*x2362))+((r02*x2353)));
evalcond[1]=(((x2353*x2358))+(((-1.0)*x2361*x2364)));
evalcond[2]=(((x2354*x2358))+(((-1.0)*x2361*x2363)));
evalcond[3]=((((-1.0)*x2359))+(((-1.0)*x2356))+(((-1.0)*r02*x2363)));
evalcond[4]=(x2359+x2356+((x2354*x2357))+(((-1.0)*x2360*x2363)));
evalcond[5]=(x2355+(((-1.0)*x2362))+((x2353*x2357))+(((-1.0)*x2360*x2364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2365=((1.0)*cj1);
CheckValue<IkReal> x2366=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x2366.valid){
continue;
}
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x2365))+((sj1*sj3)))),IkReal(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x2365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2366.value)))+(x2367.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2368=IKsin(j5);
IkReal x2369=IKcos(j5);
IkReal x2370=(cj1*cj3);
IkReal x2371=(cj1*sj3);
IkReal x2372=(r11*sj6);
IkReal x2373=(r21*sj6);
IkReal x2374=(cj3*sj1);
IkReal x2375=(cj6*r10);
IkReal x2376=(cj6*r20);
IkReal x2377=((1.0)*sj1*sj3);
IkReal x2378=((1.0)*x2369);
IkReal x2379=((1.0)*x2368);
evalcond[0]=(((r02*x2368))+x2370+(((-1.0)*x2377)));
evalcond[1]=(((x2368*x2373))+(((-1.0)*x2376*x2379)));
evalcond[2]=((((-1.0)*x2376*x2378))+((x2369*x2373)));
evalcond[3]=((((-1.0)*r02*x2378))+(((-1.0)*x2374))+(((-1.0)*x2371)));
evalcond[4]=(x2374+x2371+(((-1.0)*x2375*x2378))+((x2369*x2372)));
evalcond[5]=(((x2368*x2372))+x2370+(((-1.0)*x2377))+(((-1.0)*x2375*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2380=cj6*cj6;
IkReal x2381=(cj3*sj1);
IkReal x2382=(cj6*r20);
IkReal x2383=(cj1*sj3);
IkReal x2384=(r21*sj6);
IkReal x2385=(r11*r21);
CheckValue<IkReal> x2386=IKPowWithIntegerCheck(IKsign((((cj6*r10*x2384))+(((-1.0)*r12*r22))+(((-1.0)*x2385))+(((-1.0)*r10*r20*x2380))+((x2380*x2385))+((r11*sj6*x2382)))),-1);
if(!x2386.valid){
continue;
}
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal((((r22*x2381))+((r22*x2383)))),IkReal((((x2381*x2384))+((x2383*x2384))+(((-1.0)*x2381*x2382))+(((-1.0)*x2382*x2383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2386.value)))+(x2387.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2388=IKcos(j5);
IkReal x2389=IKsin(j5);
IkReal x2390=(cj1*cj3);
IkReal x2391=(cj3*sj1);
IkReal x2392=((1.0)*sj3);
IkReal x2393=(sj1*x2392);
IkReal x2394=(sj6*x2389);
IkReal x2395=((1.0)*x2388);
IkReal x2396=(sj6*x2388);
IkReal x2397=((1.0)*cj6*x2389);
evalcond[0]=((((-1.0)*cj6*r20*x2395))+((r22*x2389))+((r21*x2396)));
evalcond[1]=((((-1.0)*r20*x2397))+(((-1.0)*r22*x2395))+((r21*x2394)));
evalcond[2]=(x2391+((cj1*sj3))+(((-1.0)*cj6*r10*x2395))+((r11*x2396))+((r12*x2389)));
evalcond[3]=(((r01*x2396))+x2390+((r02*x2389))+(((-1.0)*x2393))+(((-1.0)*cj6*r00*x2395)));
evalcond[4]=((((-1.0)*r10*x2397))+x2390+(((-1.0)*x2393))+((r11*x2394))+(((-1.0)*r12*x2395)));
evalcond[5]=((((-1.0)*r00*x2397))+(((-1.0)*cj1*x2392))+(((-1.0)*r02*x2395))+((r01*x2394))+(((-1.0)*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2398=(sj1*sj3);
IkReal x2399=(cj6*r20);
IkReal x2400=((1.0)*sj6);
IkReal x2401=((1.0)*cj1*cj3);
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x2400)))),-1);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal(((((-1.0)*x2399*x2401))+((cj1*cj3*r21*sj6))+((x2398*x2399))+(((-1.0)*r21*x2398*x2400)))),IkReal((((r22*x2398))+(((-1.0)*r22*x2401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2402.value)))+(x2403.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2404=IKcos(j5);
IkReal x2405=IKsin(j5);
IkReal x2406=(cj1*cj3);
IkReal x2407=(cj3*sj1);
IkReal x2408=((1.0)*sj3);
IkReal x2409=(sj1*x2408);
IkReal x2410=(sj6*x2405);
IkReal x2411=((1.0)*x2404);
IkReal x2412=(sj6*x2404);
IkReal x2413=((1.0)*cj6*x2405);
evalcond[0]=(((r21*x2412))+((r22*x2405))+(((-1.0)*cj6*r20*x2411)));
evalcond[1]=((((-1.0)*r20*x2413))+((r21*x2410))+(((-1.0)*r22*x2411)));
evalcond[2]=(x2407+((r11*x2412))+(((-1.0)*cj6*r10*x2411))+((cj1*sj3))+((r12*x2405)));
evalcond[3]=(x2406+(((-1.0)*x2409))+((r01*x2412))+((r02*x2405))+(((-1.0)*cj6*r00*x2411)));
evalcond[4]=(x2406+((r11*x2410))+(((-1.0)*x2409))+(((-1.0)*r12*x2411))+(((-1.0)*r10*x2413)));
evalcond[5]=((((-1.0)*r00*x2413))+(((-1.0)*x2407))+((r01*x2410))+(((-1.0)*r02*x2411))+(((-1.0)*cj1*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2414=(cj1*sj3);
IkReal x2415=(cj3*sj1);
IkReal x2416=(r21*sj6);
IkReal x2417=((1.0)*r22);
IkReal x2418=((1.0)*cj6*r20);
CheckValue<IkReal> x2419=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x2419.valid){
continue;
}
CheckValue<IkReal> x2420 = IKatan2WithCheck(IkReal(((((-1.0)*x2414*x2418))+((x2414*x2416))+(((-1.0)*x2415*x2418))+((x2415*x2416)))),IkReal(((((-1.0)*x2414*x2417))+(((-1.0)*x2415*x2417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2420.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2419.value)))+(x2420.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2421=IKcos(j5);
IkReal x2422=IKsin(j5);
IkReal x2423=(cj1*cj3);
IkReal x2424=(cj3*sj1);
IkReal x2425=((1.0)*sj3);
IkReal x2426=(sj1*x2425);
IkReal x2427=(sj6*x2422);
IkReal x2428=((1.0)*x2421);
IkReal x2429=(sj6*x2421);
IkReal x2430=((1.0)*cj6*x2422);
evalcond[0]=(((r22*x2422))+((r21*x2429))+(((-1.0)*cj6*r20*x2428)));
evalcond[1]=(((r21*x2427))+(((-1.0)*r22*x2428))+(((-1.0)*r20*x2430)));
evalcond[2]=(x2424+((cj1*sj3))+((r11*x2429))+((r12*x2422))+(((-1.0)*cj6*r10*x2428)));
evalcond[3]=(x2423+(((-1.0)*cj6*r00*x2428))+((r01*x2429))+(((-1.0)*x2426))+((r02*x2422)));
evalcond[4]=(x2423+(((-1.0)*r12*x2428))+((r11*x2427))+(((-1.0)*x2426))+(((-1.0)*r10*x2430)));
evalcond[5]=((((-1.0)*r02*x2428))+(((-1.0)*r00*x2430))+((r01*x2427))+(((-1.0)*x2424))+(((-1.0)*cj1*x2425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2431=(cj3*sj1);
IkReal x2432=(cj1*sj3);
IkReal x2433=(cj6*r20);
IkReal x2434=(r21*sj6);
IkReal x2435=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x2435;
j5eval[1]=((IKabs((((r22*x2431))+(((-1.0)*r22*x2432)))))+(IKabs(((((-1.0)*x2431*x2434))+((x2432*x2434))+((x2431*x2433))+(((-1.0)*x2432*x2433))))));
j5eval[2]=IKsign(x2435);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2436=(cj1*cj3);
IkReal x2437=(sj1*sj3);
IkReal x2438=(cj6*r20);
IkReal x2439=((1.0)*r21*sj6);
IkReal x2440=((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)));
j5eval[0]=x2440;
j5eval[1]=IKsign(x2440);
j5eval[2]=((IKabs((((x2437*x2438))+((x2436*x2438))+(((-1.0)*x2436*x2439))+(((-1.0)*x2437*x2439)))))+(IKabs((((r22*x2437))+((r22*x2436))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2441=cj6*cj6;
IkReal x2442=((1.0)*r22);
IkReal x2443=(cj3*sj1);
IkReal x2444=(cj6*r20);
IkReal x2445=((1.0)*r21);
IkReal x2446=(cj1*sj3);
IkReal x2447=(r21*sj6);
IkReal x2448=((((-1.0)*r00*r20*x2441))+((cj6*r00*x2447))+((r01*r21*x2441))+((r01*sj6*x2444))+(((-1.0)*r01*x2445))+(((-1.0)*r02*x2442)));
j5eval[0]=x2448;
j5eval[1]=IKsign(x2448);
j5eval[2]=((IKabs((((x2446*x2447))+((x2443*x2444))+(((-1.0)*x2444*x2446))+(((-1.0)*sj6*x2443*x2445)))))+(IKabs((((r22*x2443))+(((-1.0)*x2442*x2446))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2449=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2449;
j5eval[1]=IKsign(x2449);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2450=((1.0)*cj6);
IkReal x2451=((((-1.0)*r21*x2450))+(((-1.0)*r20*sj6)));
j5eval[0]=x2451;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2450))+((r11*sj6))))));
j5eval[2]=IKsign(x2451);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2452=cj6*cj6;
IkReal x2453=(r11*r21);
IkReal x2454=(r21*sj6);
IkReal x2455=(cj6*r20);
IkReal x2456=((((-1.0)*r10*r20*x2452))+((x2452*x2453))+(((-1.0)*r12*r22))+((r11*sj6*x2455))+(((-1.0)*x2453))+((cj6*r10*x2454)));
j5eval[0]=x2456;
j5eval[1]=IKsign(x2456);
j5eval[2]=((IKabs((x2454+(((-1.0)*x2455)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2457=cj6*cj6;
IkReal x2458=(r21*sj6);
IkReal x2459=(cj6*r20);
IkReal x2460=(r11*r21);
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x2457))+(((-1.0)*r12*r22))+(((-1.0)*x2460))+((r11*sj6*x2459))+((x2457*x2460))+((cj6*r10*x2458)))),-1);
if(!x2461.valid){
continue;
}
CheckValue<IkReal> x2462 = IKatan2WithCheck(IkReal((x2458+(((-1.0)*x2459)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2462.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2461.value)))+(x2462.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2463=IKcos(j5);
IkReal x2464=IKsin(j5);
IkReal x2465=(cj6*r10);
IkReal x2466=(cj6*r00);
IkReal x2467=(cj6*r20);
IkReal x2468=(sj6*x2463);
IkReal x2469=(sj6*x2464);
IkReal x2470=((1.0)*x2463);
IkReal x2471=((1.0)*x2464);
evalcond[0]=((((-1.0)*x2467*x2470))+((r21*x2468))+((r22*x2464)));
evalcond[1]=(((r12*x2464))+((r11*x2468))+(((-1.0)*x2465*x2470)));
evalcond[2]=((((-1.0)*x2467*x2471))+((r21*x2469))+(((-1.0)*r22*x2470)));
evalcond[3]=(((r01*x2469))+(((-1.0)*r02*x2470))+(((-1.0)*x2466*x2471)));
evalcond[4]=((-1.0)+((r01*x2468))+((r02*x2464))+(((-1.0)*x2466*x2470)));
evalcond[5]=((1.0)+(((-1.0)*r12*x2470))+((r11*x2469))+(((-1.0)*x2465*x2471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2472=((1.0)*cj6);
CheckValue<IkReal> x2473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2472))+(((-1.0)*r20*sj6)))),-1);
if(!x2473.valid){
continue;
}
CheckValue<IkReal> x2474 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x2472)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2474.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2473.value)))+(x2474.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2475=IKcos(j5);
IkReal x2476=IKsin(j5);
IkReal x2477=(cj6*r10);
IkReal x2478=(cj6*r00);
IkReal x2479=(cj6*r20);
IkReal x2480=(sj6*x2475);
IkReal x2481=(sj6*x2476);
IkReal x2482=((1.0)*x2475);
IkReal x2483=((1.0)*x2476);
evalcond[0]=(((r21*x2480))+((r22*x2476))+(((-1.0)*x2479*x2482)));
evalcond[1]=(((r12*x2476))+(((-1.0)*x2477*x2482))+((r11*x2480)));
evalcond[2]=((((-1.0)*r22*x2482))+((r21*x2481))+(((-1.0)*x2479*x2483)));
evalcond[3]=(((r01*x2481))+(((-1.0)*r02*x2482))+(((-1.0)*x2478*x2483)));
evalcond[4]=((-1.0)+((r01*x2480))+((r02*x2476))+(((-1.0)*x2478*x2482)));
evalcond[5]=((1.0)+(((-1.0)*x2477*x2483))+((r11*x2481))+(((-1.0)*r12*x2482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2484 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2484.valid){
continue;
}
CheckValue<IkReal> x2485=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2485.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2484.value)+(((1.5707963267949)*(x2485.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2486=IKcos(j5);
IkReal x2487=IKsin(j5);
IkReal x2488=(cj6*r10);
IkReal x2489=(cj6*r00);
IkReal x2490=(cj6*r20);
IkReal x2491=(sj6*x2486);
IkReal x2492=(sj6*x2487);
IkReal x2493=((1.0)*x2486);
IkReal x2494=((1.0)*x2487);
evalcond[0]=((((-1.0)*x2490*x2493))+((r22*x2487))+((r21*x2491)));
evalcond[1]=(((r11*x2491))+(((-1.0)*x2488*x2493))+((r12*x2487)));
evalcond[2]=((((-1.0)*x2490*x2494))+((r21*x2492))+(((-1.0)*r22*x2493)));
evalcond[3]=((((-1.0)*r02*x2493))+(((-1.0)*x2489*x2494))+((r01*x2492)));
evalcond[4]=((-1.0)+((r02*x2487))+(((-1.0)*x2489*x2493))+((r01*x2491)));
evalcond[5]=((1.0)+((r11*x2492))+(((-1.0)*x2488*x2494))+(((-1.0)*r12*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2495=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2495;
j5eval[1]=IKsign(x2495);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2496=((1.0)*cj6);
IkReal x2497=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2496)));
j5eval[0]=x2497;
j5eval[1]=IKsign(x2497);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x2496)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2498=cj6*cj6;
IkReal x2499=r11*r11;
IkReal x2500=(r11*sj6);
IkReal x2501=(cj6*r10);
IkReal x2502=((r12*r12)+x2499+((x2498*(r10*r10)))+(((-2.0)*x2500*x2501))+(((-1.0)*x2498*x2499)));
j5eval[0]=x2502;
j5eval[1]=IKsign(x2502);
j5eval[2]=((IKabs(r12))+(IKabs((x2500+(((-1.0)*x2501))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2503=cj6*cj6;
IkReal x2504=r11*r11;
IkReal x2505=(r11*sj6);
IkReal x2506=(cj6*r10);
CheckValue<IkReal> x2507=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2504+(((-2.0)*x2505*x2506))+(((-1.0)*x2503*x2504))+((x2503*(r10*r10))))),-1);
if(!x2507.valid){
continue;
}
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal((x2505+(((-1.0)*x2506)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2507.value)))+(x2508.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2509=IKcos(j5);
IkReal x2510=IKsin(j5);
IkReal x2511=(cj6*r10);
IkReal x2512=(cj6*r00);
IkReal x2513=(cj6*r20);
IkReal x2514=(sj6*x2509);
IkReal x2515=(sj6*x2510);
IkReal x2516=((1.0)*x2509);
IkReal x2517=((1.0)*x2510);
evalcond[0]=(((r22*x2510))+(((-1.0)*x2513*x2516))+((r21*x2514)));
evalcond[1]=(((r11*x2514))+(((-1.0)*x2511*x2516))+((r12*x2510)));
evalcond[2]=((((-1.0)*x2513*x2517))+(((-1.0)*r22*x2516))+((r21*x2515)));
evalcond[3]=((((-1.0)*x2512*x2517))+((r01*x2515))+(((-1.0)*r02*x2516)));
evalcond[4]=((1.0)+((r02*x2510))+(((-1.0)*x2512*x2516))+((r01*x2514)));
evalcond[5]=((-1.0)+((r11*x2515))+(((-1.0)*r12*x2516))+(((-1.0)*x2511*x2517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2518=((1.0)*cj6);
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2518)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
CheckValue<IkReal> x2520=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2518)))),-1);
if(!x2520.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2519.value)+(((1.5707963267949)*(x2520.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2521=IKcos(j5);
IkReal x2522=IKsin(j5);
IkReal x2523=(cj6*r10);
IkReal x2524=(cj6*r00);
IkReal x2525=(cj6*r20);
IkReal x2526=(sj6*x2521);
IkReal x2527=(sj6*x2522);
IkReal x2528=((1.0)*x2521);
IkReal x2529=((1.0)*x2522);
evalcond[0]=(((r22*x2522))+(((-1.0)*x2525*x2528))+((r21*x2526)));
evalcond[1]=((((-1.0)*x2523*x2528))+((r12*x2522))+((r11*x2526)));
evalcond[2]=((((-1.0)*x2525*x2529))+((r21*x2527))+(((-1.0)*r22*x2528)));
evalcond[3]=((((-1.0)*x2524*x2529))+((r01*x2527))+(((-1.0)*r02*x2528)));
evalcond[4]=((1.0)+(((-1.0)*x2524*x2528))+((r02*x2522))+((r01*x2526)));
evalcond[5]=((-1.0)+(((-1.0)*x2523*x2529))+(((-1.0)*r12*x2528))+((r11*x2527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2530.value)))+(x2531.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2532=IKcos(j5);
IkReal x2533=IKsin(j5);
IkReal x2534=(cj6*r10);
IkReal x2535=(cj6*r00);
IkReal x2536=(cj6*r20);
IkReal x2537=(sj6*x2532);
IkReal x2538=(sj6*x2533);
IkReal x2539=((1.0)*x2532);
IkReal x2540=((1.0)*x2533);
evalcond[0]=(((r21*x2537))+((r22*x2533))+(((-1.0)*x2536*x2539)));
evalcond[1]=((((-1.0)*x2534*x2539))+((r12*x2533))+((r11*x2537)));
evalcond[2]=((((-1.0)*x2536*x2540))+((r21*x2538))+(((-1.0)*r22*x2539)));
evalcond[3]=(((r01*x2538))+(((-1.0)*r02*x2539))+(((-1.0)*x2535*x2540)));
evalcond[4]=((1.0)+((r01*x2537))+(((-1.0)*x2535*x2539))+((r02*x2533)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2539))+((r11*x2538))+(((-1.0)*x2534*x2540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2541=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2541;
j5eval[1]=IKsign(x2541);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2542=((1.0)*cj6);
IkReal x2543=((((-1.0)*r21*x2542))+(((-1.0)*r20*sj6)));
j5eval[0]=x2543;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2542))+((r11*sj6))))));
j5eval[2]=IKsign(x2543);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2544=cj6*cj6;
IkReal x2545=(r11*r21);
IkReal x2546=(r21*sj6);
IkReal x2547=(cj6*r20);
IkReal x2548=(((r11*sj6*x2547))+(((-1.0)*r10*r20*x2544))+(((-1.0)*r12*r22))+(((-1.0)*x2545))+((cj6*r10*x2546))+((x2544*x2545)));
j5eval[0]=x2548;
j5eval[1]=IKsign(x2548);
j5eval[2]=((IKabs((x2546+(((-1.0)*x2547)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2549=cj6*cj6;
IkReal x2550=(r21*sj6);
IkReal x2551=(cj6*r20);
IkReal x2552=(r11*r21);
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x2549))+(((-1.0)*r12*r22))+(((-1.0)*x2552))+((r11*sj6*x2551))+((x2549*x2552))+((cj6*r10*x2550)))),-1);
if(!x2553.valid){
continue;
}
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((x2550+(((-1.0)*x2551)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2553.value)))+(x2554.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2555=IKcos(j5);
IkReal x2556=IKsin(j5);
IkReal x2557=(cj6*r10);
IkReal x2558=(cj6*r00);
IkReal x2559=(cj6*r20);
IkReal x2560=(sj6*x2555);
IkReal x2561=(sj6*x2556);
IkReal x2562=((1.0)*x2555);
IkReal x2563=((1.0)*x2556);
evalcond[0]=(((r22*x2556))+(((-1.0)*x2559*x2562))+((r21*x2560)));
evalcond[1]=(((r12*x2556))+(((-1.0)*x2557*x2562))+((r11*x2560)));
evalcond[2]=((((-1.0)*r22*x2562))+(((-1.0)*x2559*x2563))+((r21*x2561)));
evalcond[3]=(((r01*x2561))+(((-1.0)*r02*x2562))+(((-1.0)*x2558*x2563)));
evalcond[4]=((-1.0)+((r01*x2560))+(((-1.0)*x2558*x2562))+((r02*x2556)));
evalcond[5]=((1.0)+(((-1.0)*x2557*x2563))+((r11*x2561))+(((-1.0)*r12*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2564=((1.0)*cj6);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x2564)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2564))+(((-1.0)*r20*sj6)))),-1);
if(!x2566.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2565.value)+(((1.5707963267949)*(x2566.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2567=IKcos(j5);
IkReal x2568=IKsin(j5);
IkReal x2569=(cj6*r10);
IkReal x2570=(cj6*r00);
IkReal x2571=(cj6*r20);
IkReal x2572=(sj6*x2567);
IkReal x2573=(sj6*x2568);
IkReal x2574=((1.0)*x2567);
IkReal x2575=((1.0)*x2568);
evalcond[0]=(((r22*x2568))+((r21*x2572))+(((-1.0)*x2571*x2574)));
evalcond[1]=((((-1.0)*x2569*x2574))+((r11*x2572))+((r12*x2568)));
evalcond[2]=(((r21*x2573))+(((-1.0)*x2571*x2575))+(((-1.0)*r22*x2574)));
evalcond[3]=((((-1.0)*x2570*x2575))+((r01*x2573))+(((-1.0)*r02*x2574)));
evalcond[4]=((-1.0)+(((-1.0)*x2570*x2574))+((r01*x2572))+((r02*x2568)));
evalcond[5]=((1.0)+(((-1.0)*x2569*x2575))+(((-1.0)*r12*x2574))+((r11*x2573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2577.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2576.value)+(((1.5707963267949)*(x2577.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2578=IKcos(j5);
IkReal x2579=IKsin(j5);
IkReal x2580=(cj6*r10);
IkReal x2581=(cj6*r00);
IkReal x2582=(cj6*r20);
IkReal x2583=(sj6*x2578);
IkReal x2584=(sj6*x2579);
IkReal x2585=((1.0)*x2578);
IkReal x2586=((1.0)*x2579);
evalcond[0]=(((r21*x2583))+(((-1.0)*x2582*x2585))+((r22*x2579)));
evalcond[1]=(((r12*x2579))+((r11*x2583))+(((-1.0)*x2580*x2585)));
evalcond[2]=(((r21*x2584))+(((-1.0)*x2582*x2586))+(((-1.0)*r22*x2585)));
evalcond[3]=(((r01*x2584))+(((-1.0)*r02*x2585))+(((-1.0)*x2581*x2586)));
evalcond[4]=((-1.0)+((r01*x2583))+((r02*x2579))+(((-1.0)*x2581*x2585)));
evalcond[5]=((1.0)+((r11*x2584))+(((-1.0)*x2580*x2586))+(((-1.0)*r12*x2585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2587=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2587;
j5eval[1]=IKsign(x2587);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2588=((1.0)*cj6);
IkReal x2589=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2588)));
j5eval[0]=x2589;
j5eval[1]=IKsign(x2589);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x2588))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2590=cj6*cj6;
IkReal x2591=r11*r11;
IkReal x2592=(r11*sj6);
IkReal x2593=(cj6*r10);
IkReal x2594=((r12*r12)+x2591+(((-2.0)*x2592*x2593))+(((-1.0)*x2590*x2591))+((x2590*(r10*r10))));
j5eval[0]=x2594;
j5eval[1]=IKsign(x2594);
j5eval[2]=((IKabs(r12))+(IKabs((x2592+(((-1.0)*x2593))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2595=cj6*cj6;
IkReal x2596=r11*r11;
IkReal x2597=(r11*sj6);
IkReal x2598=(cj6*r10);
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2596+(((-2.0)*x2597*x2598))+(((-1.0)*x2595*x2596))+((x2595*(r10*r10))))),-1);
if(!x2599.valid){
continue;
}
CheckValue<IkReal> x2600 = IKatan2WithCheck(IkReal((x2597+(((-1.0)*x2598)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2600.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2599.value)))+(x2600.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2601=IKcos(j5);
IkReal x2602=IKsin(j5);
IkReal x2603=(cj6*r10);
IkReal x2604=(cj6*r00);
IkReal x2605=(cj6*r20);
IkReal x2606=(sj6*x2601);
IkReal x2607=(sj6*x2602);
IkReal x2608=((1.0)*x2601);
IkReal x2609=((1.0)*x2602);
evalcond[0]=(((r21*x2606))+(((-1.0)*x2605*x2608))+((r22*x2602)));
evalcond[1]=(((r12*x2602))+(((-1.0)*x2603*x2608))+((r11*x2606)));
evalcond[2]=((((-1.0)*r22*x2608))+((r21*x2607))+(((-1.0)*x2605*x2609)));
evalcond[3]=((((-1.0)*r02*x2608))+((r01*x2607))+(((-1.0)*x2604*x2609)));
evalcond[4]=((1.0)+((r02*x2602))+((r01*x2606))+(((-1.0)*x2604*x2608)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2608))+(((-1.0)*x2603*x2609))+((r11*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2610=((1.0)*cj6);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2610)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2610)))),-1);
if(!x2612.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2611.value)+(((1.5707963267949)*(x2612.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2613=IKcos(j5);
IkReal x2614=IKsin(j5);
IkReal x2615=(cj6*r10);
IkReal x2616=(cj6*r00);
IkReal x2617=(cj6*r20);
IkReal x2618=(sj6*x2613);
IkReal x2619=(sj6*x2614);
IkReal x2620=((1.0)*x2613);
IkReal x2621=((1.0)*x2614);
evalcond[0]=((((-1.0)*x2617*x2620))+((r22*x2614))+((r21*x2618)));
evalcond[1]=(((r11*x2618))+(((-1.0)*x2615*x2620))+((r12*x2614)));
evalcond[2]=((((-1.0)*x2617*x2621))+(((-1.0)*r22*x2620))+((r21*x2619)));
evalcond[3]=(((r01*x2619))+(((-1.0)*r02*x2620))+(((-1.0)*x2616*x2621)));
evalcond[4]=((1.0)+((r01*x2618))+((r02*x2614))+(((-1.0)*x2616*x2620)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2620))+((r11*x2619))+(((-1.0)*x2615*x2621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2622=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2622.valid){
continue;
}
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2622.value)))+(x2623.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2624=IKcos(j5);
IkReal x2625=IKsin(j5);
IkReal x2626=(cj6*r10);
IkReal x2627=(cj6*r00);
IkReal x2628=(cj6*r20);
IkReal x2629=(sj6*x2624);
IkReal x2630=(sj6*x2625);
IkReal x2631=((1.0)*x2624);
IkReal x2632=((1.0)*x2625);
evalcond[0]=((((-1.0)*x2628*x2631))+((r22*x2625))+((r21*x2629)));
evalcond[1]=(((r11*x2629))+((r12*x2625))+(((-1.0)*x2626*x2631)));
evalcond[2]=((((-1.0)*x2628*x2632))+((r21*x2630))+(((-1.0)*r22*x2631)));
evalcond[3]=((((-1.0)*r02*x2631))+((r01*x2630))+(((-1.0)*x2627*x2632)));
evalcond[4]=((1.0)+((r01*x2629))+((r02*x2625))+(((-1.0)*x2627*x2631)));
evalcond[5]=((-1.0)+((r11*x2630))+(((-1.0)*r12*x2631))+(((-1.0)*x2626*x2632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2633=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2633;
j5eval[1]=IKsign(x2633);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2634=((1.0)*cj6);
IkReal x2635=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2634)));
j5eval[0]=x2635;
j5eval[1]=IKsign(x2635);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x2634)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x2636=cj6*cj6;
IkReal x2637=r11*r11;
IkReal x2638=(r11*sj6);
IkReal x2639=(cj6*r10);
IkReal x2640=((r12*r12)+(((-2.0)*x2638*x2639))+((x2636*(r10*r10)))+(((-1.0)*x2636*x2637))+x2637);
j5eval[0]=x2640;
j5eval[1]=IKsign(x2640);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2639))+x2638))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2641=cj6*cj6;
IkReal x2642=r11*r11;
IkReal x2643=(r11*sj6);
IkReal x2644=(cj6*r10);
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal(((((-1.0)*x2644))+x2643)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2641*x2642))+(((-2.0)*x2643*x2644))+((x2641*(r10*r10)))+x2642)),-1);
if(!x2646.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2645.value)+(((1.5707963267949)*(x2646.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2647=IKcos(j5);
IkReal x2648=IKsin(j5);
IkReal x2649=(cj6*r10);
IkReal x2650=(cj6*r00);
IkReal x2651=(cj6*r20);
IkReal x2652=(sj6*x2647);
IkReal x2653=(sj6*x2648);
IkReal x2654=((1.0)*x2647);
IkReal x2655=((1.0)*x2648);
evalcond[0]=((((-1.0)*x2651*x2654))+((r21*x2652))+((r22*x2648)));
evalcond[1]=(((r12*x2648))+((r11*x2652))+(((-1.0)*x2649*x2654)));
evalcond[2]=((((-1.0)*r22*x2654))+(((-1.0)*x2651*x2655))+((r21*x2653)));
evalcond[3]=((((-1.0)*x2650*x2655))+(((-1.0)*r02*x2654))+((r01*x2653)));
evalcond[4]=((1.0)+(((-1.0)*x2650*x2654))+((r02*x2648))+((r01*x2652)));
evalcond[5]=((-1.0)+((r11*x2653))+(((-1.0)*r12*x2654))+(((-1.0)*x2649*x2655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2656=((1.0)*cj6);
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2656)))),-1);
if(!x2657.valid){
continue;
}
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2656)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2657.value)))+(x2658.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2659=IKcos(j5);
IkReal x2660=IKsin(j5);
IkReal x2661=(cj6*r10);
IkReal x2662=(cj6*r00);
IkReal x2663=(cj6*r20);
IkReal x2664=(sj6*x2659);
IkReal x2665=(sj6*x2660);
IkReal x2666=((1.0)*x2659);
IkReal x2667=((1.0)*x2660);
evalcond[0]=(((r21*x2664))+((r22*x2660))+(((-1.0)*x2663*x2666)));
evalcond[1]=(((r12*x2660))+(((-1.0)*x2661*x2666))+((r11*x2664)));
evalcond[2]=(((r21*x2665))+(((-1.0)*x2663*x2667))+(((-1.0)*r22*x2666)));
evalcond[3]=((((-1.0)*x2662*x2667))+(((-1.0)*r02*x2666))+((r01*x2665)));
evalcond[4]=((1.0)+((r02*x2660))+(((-1.0)*x2662*x2666))+((r01*x2664)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2666))+(((-1.0)*x2661*x2667))+((r11*x2665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2668=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2668.value)))+(x2669.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2670=IKcos(j5);
IkReal x2671=IKsin(j5);
IkReal x2672=(cj6*r10);
IkReal x2673=(cj6*r00);
IkReal x2674=(cj6*r20);
IkReal x2675=(sj6*x2670);
IkReal x2676=(sj6*x2671);
IkReal x2677=((1.0)*x2670);
IkReal x2678=((1.0)*x2671);
evalcond[0]=(((r21*x2675))+(((-1.0)*x2674*x2677))+((r22*x2671)));
evalcond[1]=(((r12*x2671))+(((-1.0)*x2672*x2677))+((r11*x2675)));
evalcond[2]=(((r21*x2676))+(((-1.0)*x2674*x2678))+(((-1.0)*r22*x2677)));
evalcond[3]=((((-1.0)*x2673*x2678))+(((-1.0)*r02*x2677))+((r01*x2676)));
evalcond[4]=((1.0)+((r02*x2671))+(((-1.0)*x2673*x2677))+((r01*x2675)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2677))+(((-1.0)*x2672*x2678))+((r11*x2676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2679=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2679;
j5eval[1]=IKsign(x2679);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2680=((1.0)*cj6);
IkReal x2681=((((-1.0)*r21*x2680))+(((-1.0)*r20*sj6)));
j5eval[0]=x2681;
j5eval[1]=((IKabs(r12))+(IKabs((((r11*sj6))+(((-1.0)*r10*x2680))))));
j5eval[2]=IKsign(x2681);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x2682=cj6*cj6;
IkReal x2683=(r11*r21);
IkReal x2684=(r21*sj6);
IkReal x2685=(cj6*r20);
IkReal x2686=((((-1.0)*r10*r20*x2682))+(((-1.0)*r12*r22))+(((-1.0)*x2683))+((x2682*x2683))+((cj6*r10*x2684))+((r11*sj6*x2685)));
j5eval[0]=x2686;
j5eval[1]=IKsign(x2686);
j5eval[2]=((IKabs(((((-1.0)*x2685))+x2684)))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2687=cj6*cj6;
IkReal x2688=(r21*sj6);
IkReal x2689=(cj6*r20);
IkReal x2690=(r11*r21);
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x2687))+(((-1.0)*r12*r22))+((x2687*x2690))+(((-1.0)*x2690))+((cj6*r10*x2688))+((r11*sj6*x2689)))),-1);
if(!x2691.valid){
continue;
}
CheckValue<IkReal> x2692 = IKatan2WithCheck(IkReal(((((-1.0)*x2689))+x2688)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2692.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2691.value)))+(x2692.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2693=IKcos(j5);
IkReal x2694=IKsin(j5);
IkReal x2695=(cj6*r10);
IkReal x2696=(cj6*r00);
IkReal x2697=(cj6*r20);
IkReal x2698=(sj6*x2693);
IkReal x2699=(sj6*x2694);
IkReal x2700=((1.0)*x2693);
IkReal x2701=((1.0)*x2694);
evalcond[0]=(((r22*x2694))+(((-1.0)*x2697*x2700))+((r21*x2698)));
evalcond[1]=(((r12*x2694))+(((-1.0)*x2695*x2700))+((r11*x2698)));
evalcond[2]=((((-1.0)*r22*x2700))+(((-1.0)*x2697*x2701))+((r21*x2699)));
evalcond[3]=((((-1.0)*r02*x2700))+(((-1.0)*x2696*x2701))+((r01*x2699)));
evalcond[4]=((-1.0)+(((-1.0)*x2696*x2700))+((r01*x2698))+((r02*x2694)));
evalcond[5]=((1.0)+(((-1.0)*r12*x2700))+(((-1.0)*x2695*x2701))+((r11*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2702=((1.0)*cj6);
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2702))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2702))+(((-1.0)*r20*sj6)))),-1);
if(!x2704.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2703.value)+(((1.5707963267949)*(x2704.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2705=IKcos(j5);
IkReal x2706=IKsin(j5);
IkReal x2707=(cj6*r10);
IkReal x2708=(cj6*r00);
IkReal x2709=(cj6*r20);
IkReal x2710=(sj6*x2705);
IkReal x2711=(sj6*x2706);
IkReal x2712=((1.0)*x2705);
IkReal x2713=((1.0)*x2706);
evalcond[0]=(((r22*x2706))+(((-1.0)*x2709*x2712))+((r21*x2710)));
evalcond[1]=(((r12*x2706))+((r11*x2710))+(((-1.0)*x2707*x2712)));
evalcond[2]=((((-1.0)*x2709*x2713))+(((-1.0)*r22*x2712))+((r21*x2711)));
evalcond[3]=((((-1.0)*r02*x2712))+(((-1.0)*x2708*x2713))+((r01*x2711)));
evalcond[4]=((-1.0)+(((-1.0)*x2708*x2712))+((r02*x2706))+((r01*x2710)));
evalcond[5]=((1.0)+((r11*x2711))+(((-1.0)*r12*x2712))+(((-1.0)*x2707*x2713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2715.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2714.value)+(((1.5707963267949)*(x2715.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2716=IKcos(j5);
IkReal x2717=IKsin(j5);
IkReal x2718=(cj6*r10);
IkReal x2719=(cj6*r00);
IkReal x2720=(cj6*r20);
IkReal x2721=(sj6*x2716);
IkReal x2722=(sj6*x2717);
IkReal x2723=((1.0)*x2716);
IkReal x2724=((1.0)*x2717);
evalcond[0]=(((r22*x2717))+(((-1.0)*x2720*x2723))+((r21*x2721)));
evalcond[1]=(((r12*x2717))+(((-1.0)*x2718*x2723))+((r11*x2721)));
evalcond[2]=((((-1.0)*x2720*x2724))+((r21*x2722))+(((-1.0)*r22*x2723)));
evalcond[3]=((((-1.0)*x2719*x2724))+((r01*x2722))+(((-1.0)*r02*x2723)));
evalcond[4]=((-1.0)+(((-1.0)*x2719*x2723))+((r02*x2717))+((r01*x2721)));
evalcond[5]=((1.0)+(((-1.0)*x2718*x2724))+(((-1.0)*r12*x2723))+((r11*x2722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2725=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x2725;
j5eval[1]=IKsign(x2725);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2726=((1.0)*cj6);
IkReal x2727=((((-1.0)*r10*sj6))+(((-1.0)*r11*x2726)));
j5eval[0]=x2727;
j5eval[1]=IKsign(x2727);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x2726))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x2728=cj6*cj6;
IkReal x2729=r11*r11;
IkReal x2730=(r11*sj6);
IkReal x2731=(cj6*r10);
IkReal x2732=(x2729+(r12*r12)+(((-2.0)*x2730*x2731))+((x2728*(r10*r10)))+(((-1.0)*x2728*x2729)));
j5eval[0]=x2732;
j5eval[1]=IKsign(x2732);
j5eval[2]=((IKabs((x2730+(((-1.0)*x2731)))))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2733=cj6*cj6;
IkReal x2734=r11*r11;
IkReal x2735=(r11*sj6);
IkReal x2736=(cj6*r10);
CheckValue<IkReal> x2737 = IKatan2WithCheck(IkReal((x2735+(((-1.0)*x2736)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2737.valid){
continue;
}
CheckValue<IkReal> x2738=IKPowWithIntegerCheck(IKsign((x2734+(((-2.0)*x2735*x2736))+(r12*r12)+(((-1.0)*x2733*x2734))+((x2733*(r10*r10))))),-1);
if(!x2738.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2737.value)+(((1.5707963267949)*(x2738.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2739=IKcos(j5);
IkReal x2740=IKsin(j5);
IkReal x2741=(cj6*r10);
IkReal x2742=(cj6*r00);
IkReal x2743=(cj6*r20);
IkReal x2744=(sj6*x2739);
IkReal x2745=(sj6*x2740);
IkReal x2746=((1.0)*x2739);
IkReal x2747=((1.0)*x2740);
evalcond[0]=((((-1.0)*x2743*x2746))+((r21*x2744))+((r22*x2740)));
evalcond[1]=(((r11*x2744))+((r12*x2740))+(((-1.0)*x2741*x2746)));
evalcond[2]=((((-1.0)*x2743*x2747))+((r21*x2745))+(((-1.0)*r22*x2746)));
evalcond[3]=(((r01*x2745))+(((-1.0)*r02*x2746))+(((-1.0)*x2742*x2747)));
evalcond[4]=((1.0)+((r01*x2744))+((r02*x2740))+(((-1.0)*x2742*x2746)));
evalcond[5]=((-1.0)+((r11*x2745))+(((-1.0)*x2741*x2747))+(((-1.0)*r12*x2746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2748=((1.0)*cj6);
CheckValue<IkReal> x2749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x2748)))),-1);
if(!x2749.valid){
continue;
}
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x2748)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2749.value)))+(x2750.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2751=IKcos(j5);
IkReal x2752=IKsin(j5);
IkReal x2753=(cj6*r10);
IkReal x2754=(cj6*r00);
IkReal x2755=(cj6*r20);
IkReal x2756=(sj6*x2751);
IkReal x2757=(sj6*x2752);
IkReal x2758=((1.0)*x2751);
IkReal x2759=((1.0)*x2752);
evalcond[0]=(((r22*x2752))+((r21*x2756))+(((-1.0)*x2755*x2758)));
evalcond[1]=(((r11*x2756))+((r12*x2752))+(((-1.0)*x2753*x2758)));
evalcond[2]=((((-1.0)*r22*x2758))+((r21*x2757))+(((-1.0)*x2755*x2759)));
evalcond[3]=(((r01*x2757))+(((-1.0)*x2754*x2759))+(((-1.0)*r02*x2758)));
evalcond[4]=((1.0)+((r01*x2756))+(((-1.0)*x2754*x2758))+((r02*x2752)));
evalcond[5]=((-1.0)+((r11*x2757))+(((-1.0)*x2753*x2759))+(((-1.0)*r12*x2758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2760=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2761.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2760.value)))+(x2761.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2762=IKcos(j5);
IkReal x2763=IKsin(j5);
IkReal x2764=(cj6*r10);
IkReal x2765=(cj6*r00);
IkReal x2766=(cj6*r20);
IkReal x2767=(sj6*x2762);
IkReal x2768=(sj6*x2763);
IkReal x2769=((1.0)*x2762);
IkReal x2770=((1.0)*x2763);
evalcond[0]=(((r21*x2767))+((r22*x2763))+(((-1.0)*x2766*x2769)));
evalcond[1]=((((-1.0)*x2764*x2769))+((r12*x2763))+((r11*x2767)));
evalcond[2]=((((-1.0)*x2766*x2770))+((r21*x2768))+(((-1.0)*r22*x2769)));
evalcond[3]=(((r01*x2768))+(((-1.0)*r02*x2769))+(((-1.0)*x2765*x2770)));
evalcond[4]=((1.0)+((r01*x2767))+((r02*x2763))+(((-1.0)*x2765*x2769)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x2769))+(((-1.0)*x2764*x2770))+((r11*x2768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2771=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x2771;
j5eval[1]=IKsign(x2771);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2772=((1.0)*cj6);
IkReal x2773=((((-1.0)*r21*x2772))+(((-1.0)*r20*sj6)));
j5eval[0]=x2773;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2772))+((r11*sj6))))));
j5eval[2]=IKsign(x2773);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x2774=cj6*cj6;
IkReal x2775=(r11*r21);
IkReal x2776=(r21*sj6);
IkReal x2777=(cj6*r20);
IkReal x2778=(((x2774*x2775))+(((-1.0)*x2775))+(((-1.0)*r12*r22))+((r11*sj6*x2777))+(((-1.0)*r10*r20*x2774))+((cj6*r10*x2776)));
j5eval[0]=x2778;
j5eval[1]=IKsign(x2778);
j5eval[2]=((IKabs((x2776+(((-1.0)*x2777)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2779=cj6*cj6;
IkReal x2780=(r21*sj6);
IkReal x2781=(cj6*r20);
IkReal x2782=(r11*r21);
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal((x2780+(((-1.0)*x2781)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign((((x2779*x2782))+(((-1.0)*r12*r22))+((cj6*r10*x2780))+(((-1.0)*r10*r20*x2779))+(((-1.0)*x2782))+((r11*sj6*x2781)))),-1);
if(!x2784.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2783.value)+(((1.5707963267949)*(x2784.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2785=IKcos(j5);
IkReal x2786=IKsin(j5);
IkReal x2787=(cj6*r10);
IkReal x2788=(cj6*r00);
IkReal x2789=(cj6*r20);
IkReal x2790=(sj6*x2785);
IkReal x2791=(sj6*x2786);
IkReal x2792=((1.0)*x2785);
IkReal x2793=((1.0)*x2786);
evalcond[0]=(((r21*x2790))+(((-1.0)*x2789*x2792))+((r22*x2786)));
evalcond[1]=((((-1.0)*x2787*x2792))+((r12*x2786))+((r11*x2790)));
evalcond[2]=(((r21*x2791))+(((-1.0)*x2789*x2793))+(((-1.0)*r22*x2792)));
evalcond[3]=(((r01*x2791))+(((-1.0)*x2788*x2793))+(((-1.0)*r02*x2792)));
evalcond[4]=((-1.0)+((r02*x2786))+((r01*x2790))+(((-1.0)*x2788*x2792)));
evalcond[5]=((1.0)+(((-1.0)*x2787*x2793))+((r11*x2791))+(((-1.0)*r12*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2794=((1.0)*cj6);
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2794))+(((-1.0)*r20*sj6)))),-1);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x2794)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2795.value)))+(x2796.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2797=IKcos(j5);
IkReal x2798=IKsin(j5);
IkReal x2799=(cj6*r10);
IkReal x2800=(cj6*r00);
IkReal x2801=(cj6*r20);
IkReal x2802=(sj6*x2797);
IkReal x2803=(sj6*x2798);
IkReal x2804=((1.0)*x2797);
IkReal x2805=((1.0)*x2798);
evalcond[0]=(((r22*x2798))+((r21*x2802))+(((-1.0)*x2801*x2804)));
evalcond[1]=(((r12*x2798))+(((-1.0)*x2799*x2804))+((r11*x2802)));
evalcond[2]=((((-1.0)*r22*x2804))+((r21*x2803))+(((-1.0)*x2801*x2805)));
evalcond[3]=((((-1.0)*x2800*x2805))+(((-1.0)*r02*x2804))+((r01*x2803)));
evalcond[4]=((-1.0)+(((-1.0)*x2800*x2804))+((r02*x2798))+((r01*x2802)));
evalcond[5]=((1.0)+(((-1.0)*r12*x2804))+(((-1.0)*x2799*x2805))+((r11*x2803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2806 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x2807.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2806.value)+(((1.5707963267949)*(x2807.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2808=IKcos(j5);
IkReal x2809=IKsin(j5);
IkReal x2810=(cj6*r10);
IkReal x2811=(cj6*r00);
IkReal x2812=(cj6*r20);
IkReal x2813=(sj6*x2808);
IkReal x2814=(sj6*x2809);
IkReal x2815=((1.0)*x2808);
IkReal x2816=((1.0)*x2809);
evalcond[0]=((((-1.0)*x2812*x2815))+((r21*x2813))+((r22*x2809)));
evalcond[1]=(((r12*x2809))+(((-1.0)*x2810*x2815))+((r11*x2813)));
evalcond[2]=((((-1.0)*x2812*x2816))+((r21*x2814))+(((-1.0)*r22*x2815)));
evalcond[3]=(((r01*x2814))+(((-1.0)*r02*x2815))+(((-1.0)*x2811*x2816)));
evalcond[4]=((-1.0)+((r01*x2813))+((r02*x2809))+(((-1.0)*x2811*x2815)));
evalcond[5]=((1.0)+(((-1.0)*r12*x2815))+(((-1.0)*x2810*x2816))+((r11*x2814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x2817=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2817);
rxp1_1=(px*r21);
rxp1_2=(r11*x2817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((IKabs((((cj1*sj3))+(((-1.0)*cj3*sj1)))))+(IKabs((((sj1*sj3))+((cj1*cj3))))));
j5eval[2]=IKsign(r02);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x2818=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2818);
rxp1_1=(px*r21);
rxp1_2=(r11*x2818);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2819=((1.0)*cj1);
IkReal x2820=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[0]=x2820;
j5eval[1]=IKsign(x2820);
j5eval[2]=((IKabs(((((-1.0)*sj1*sj3))+(((-1.0)*cj3*x2819)))))+(IKabs(((((-1.0)*sj3*x2819))+((cj3*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2821=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2821);
rxp1_1=(px*r21);
rxp1_2=(r11*x2821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2822=IKPowWithIntegerCheck(r02,-1);
if(!x2822.valid){
continue;
}
CheckValue<IkReal> x2823=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x2823.valid){
continue;
}
if( IKabs(((x2822.value)*((((sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2823.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2822.value)*((((sj1*sj3))+((cj1*cj3))))))+IKsqr(((x2823.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x2822.value)*((((sj1*sj3))+((cj1*cj3))))), ((x2823.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2824=IKsin(j5);
IkReal x2825=IKcos(j5);
IkReal x2826=(cj1*sj3);
IkReal x2827=(r11*sj6);
IkReal x2828=(r21*sj6);
IkReal x2829=((1.0)*cj3);
IkReal x2830=(cj6*r10);
IkReal x2831=(cj6*r20);
IkReal x2832=(sj1*sj3);
IkReal x2833=(sj1*x2829);
IkReal x2834=((1.0)*x2825);
IkReal x2835=((1.0)*x2824);
evalcond[0]=(((x2824*x2828))+(((-1.0)*x2831*x2835)));
evalcond[1]=((((-1.0)*x2833))+x2826+(((-1.0)*r02*x2834)));
evalcond[2]=(((x2825*x2828))+(((-1.0)*x2831*x2834)));
evalcond[3]=(((r02*x2824))+(((-1.0)*x2832))+(((-1.0)*cj1*x2829)));
evalcond[4]=(((x2824*x2827))+((cj1*cj3))+x2832+(((-1.0)*x2830*x2835)));
evalcond[5]=((((-1.0)*x2833))+((x2825*x2827))+x2826+(((-1.0)*x2830*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2836=((1.0)*sj3);
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10))+((r11*sj6)))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2836))+(((-1.0)*cj1*cj3)))),IkReal(((((-1.0)*cj1*x2836))+((cj3*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2838.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2837.value)))+(x2838.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2839=IKsin(j5);
IkReal x2840=IKcos(j5);
IkReal x2841=(cj1*sj3);
IkReal x2842=(r11*sj6);
IkReal x2843=(r21*sj6);
IkReal x2844=((1.0)*cj3);
IkReal x2845=(cj6*r10);
IkReal x2846=(cj6*r20);
IkReal x2847=(sj1*sj3);
IkReal x2848=(sj1*x2844);
IkReal x2849=((1.0)*x2840);
IkReal x2850=((1.0)*x2839);
evalcond[0]=(((x2839*x2843))+(((-1.0)*x2846*x2850)));
evalcond[1]=((((-1.0)*r02*x2849))+x2841+(((-1.0)*x2848)));
evalcond[2]=((((-1.0)*x2846*x2849))+((x2840*x2843)));
evalcond[3]=(((r02*x2839))+(((-1.0)*x2847))+(((-1.0)*cj1*x2844)));
evalcond[4]=((((-1.0)*x2845*x2850))+((cj1*cj3))+x2847+((x2839*x2842)));
evalcond[5]=((((-1.0)*x2845*x2849))+((x2840*x2842))+x2841+(((-1.0)*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2851=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal((((sj1*sj3))+((cj1*cj3)))),IkReal((((cj1*sj3))+(((-1.0)*cj3*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2851.value)))+(x2852.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2853=IKsin(j5);
IkReal x2854=IKcos(j5);
IkReal x2855=(cj1*sj3);
IkReal x2856=(r11*sj6);
IkReal x2857=(r21*sj6);
IkReal x2858=((1.0)*cj3);
IkReal x2859=(cj6*r10);
IkReal x2860=(cj6*r20);
IkReal x2861=(sj1*sj3);
IkReal x2862=(sj1*x2858);
IkReal x2863=((1.0)*x2854);
IkReal x2864=((1.0)*x2853);
evalcond[0]=(((x2853*x2857))+(((-1.0)*x2860*x2864)));
evalcond[1]=((((-1.0)*r02*x2863))+(((-1.0)*x2862))+x2855);
evalcond[2]=((((-1.0)*x2860*x2863))+((x2854*x2857)));
evalcond[3]=((((-1.0)*cj1*x2858))+(((-1.0)*x2861))+((r02*x2853)));
evalcond[4]=(((x2853*x2856))+(((-1.0)*x2859*x2864))+((cj1*cj3))+x2861);
evalcond[5]=((((-1.0)*x2859*x2863))+(((-1.0)*x2862))+x2855+((x2854*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2865=cj6*cj6;
IkReal x2866=((1.0)*r22);
IkReal x2867=(cj3*sj1);
IkReal x2868=(cj6*r20);
IkReal x2869=((1.0)*r21);
IkReal x2870=(cj1*sj3);
IkReal x2871=(r21*sj6);
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x2866))+((cj6*r00*x2871))+((r01*r21*x2865))+(((-1.0)*r01*x2869))+(((-1.0)*r00*r20*x2865))+((r01*sj6*x2868)))),-1);
if(!x2872.valid){
continue;
}
CheckValue<IkReal> x2873 = IKatan2WithCheck(IkReal((((x2870*x2871))+((x2867*x2868))+(((-1.0)*sj6*x2867*x2869))+(((-1.0)*x2868*x2870)))),IkReal((((r22*x2867))+(((-1.0)*x2866*x2870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2873.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2872.value)))+(x2873.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2874=IKcos(j5);
IkReal x2875=IKsin(j5);
IkReal x2876=(cj1*sj3);
IkReal x2877=((1.0)*cj3);
IkReal x2878=(sj1*sj3);
IkReal x2879=(sj1*x2877);
IkReal x2880=(sj6*x2875);
IkReal x2881=((1.0)*x2874);
IkReal x2882=(sj6*x2874);
IkReal x2883=((1.0)*cj6*x2875);
evalcond[0]=(((r22*x2875))+((r21*x2882))+(((-1.0)*cj6*r20*x2881)));
evalcond[1]=((((-1.0)*r22*x2881))+((r21*x2880))+(((-1.0)*r20*x2883)));
evalcond[2]=((((-1.0)*r10*x2883))+((r11*x2880))+((cj1*cj3))+x2878+(((-1.0)*r12*x2881)));
evalcond[3]=((((-1.0)*cj6*r10*x2881))+(((-1.0)*x2879))+((r11*x2882))+((r12*x2875))+x2876);
evalcond[4]=((((-1.0)*r02*x2881))+(((-1.0)*x2879))+(((-1.0)*r00*x2883))+((r01*x2880))+x2876);
evalcond[5]=((((-1.0)*x2878))+(((-1.0)*cj1*x2877))+((r01*x2882))+((r02*x2875))+(((-1.0)*cj6*r00*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2884=(cj1*cj3);
IkReal x2885=(sj1*sj3);
IkReal x2886=(cj6*r20);
IkReal x2887=((1.0)*r21*sj6);
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal((((x2884*x2886))+((x2885*x2886))+(((-1.0)*x2885*x2887))+(((-1.0)*x2884*x2887)))),IkReal((((r22*x2884))+((r22*x2885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))),-1);
if(!x2889.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2888.value)+(((1.5707963267949)*(x2889.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2890=IKcos(j5);
IkReal x2891=IKsin(j5);
IkReal x2892=(cj1*sj3);
IkReal x2893=((1.0)*cj3);
IkReal x2894=(sj1*sj3);
IkReal x2895=(sj1*x2893);
IkReal x2896=(sj6*x2891);
IkReal x2897=((1.0)*x2890);
IkReal x2898=(sj6*x2890);
IkReal x2899=((1.0)*cj6*x2891);
evalcond[0]=(((r21*x2898))+((r22*x2891))+(((-1.0)*cj6*r20*x2897)));
evalcond[1]=((((-1.0)*r22*x2897))+((r21*x2896))+(((-1.0)*r20*x2899)));
evalcond[2]=(((r11*x2896))+((cj1*cj3))+x2894+(((-1.0)*r10*x2899))+(((-1.0)*r12*x2897)));
evalcond[3]=((((-1.0)*cj6*r10*x2897))+((r11*x2898))+((r12*x2891))+(((-1.0)*x2895))+x2892);
evalcond[4]=((((-1.0)*r02*x2897))+((r01*x2896))+(((-1.0)*r00*x2899))+(((-1.0)*x2895))+x2892);
evalcond[5]=(((r01*x2898))+(((-1.0)*x2894))+((r02*x2891))+(((-1.0)*cj1*x2893))+(((-1.0)*cj6*r00*x2897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2900=(cj3*sj1);
IkReal x2901=(cj1*sj3);
IkReal x2902=(cj6*r20);
IkReal x2903=(r21*sj6);
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x2904.valid){
continue;
}
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal(((((-1.0)*x2901*x2902))+((x2901*x2903))+((x2900*x2902))+(((-1.0)*x2900*x2903)))),IkReal(((((-1.0)*r22*x2901))+((r22*x2900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2904.value)))+(x2905.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2906=IKcos(j5);
IkReal x2907=IKsin(j5);
IkReal x2908=(cj1*sj3);
IkReal x2909=((1.0)*cj3);
IkReal x2910=(sj1*sj3);
IkReal x2911=(sj1*x2909);
IkReal x2912=(sj6*x2907);
IkReal x2913=((1.0)*x2906);
IkReal x2914=(sj6*x2906);
IkReal x2915=((1.0)*cj6*x2907);
evalcond[0]=(((r22*x2907))+(((-1.0)*cj6*r20*x2913))+((r21*x2914)));
evalcond[1]=(((r21*x2912))+(((-1.0)*r20*x2915))+(((-1.0)*r22*x2913)));
evalcond[2]=(((r11*x2912))+(((-1.0)*r10*x2915))+(((-1.0)*r12*x2913))+((cj1*cj3))+x2910);
evalcond[3]=(((r11*x2914))+(((-1.0)*cj6*r10*x2913))+((r12*x2907))+x2908+(((-1.0)*x2911)));
evalcond[4]=(((r01*x2912))+(((-1.0)*r02*x2913))+x2908+(((-1.0)*x2911))+(((-1.0)*r00*x2915)));
evalcond[5]=(((r02*x2907))+((r01*x2914))+(((-1.0)*cj1*x2909))+(((-1.0)*x2910))+(((-1.0)*cj6*r00*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2916=((-1.0)*r00);
IkReal x2918 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2918)==0){
continue;
}
IkReal x2917=pow(x2918,-0.5);
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2916),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
IkReal gconst36=((-1.0)*(x2919.value));
IkReal gconst37=(r01*x2917);
IkReal gconst38=(x2916*x2917);
CheckValue<IkReal> x2920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2920.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2921=(r22*sj2);
IkReal x2922=(gconst38*r20);
IkReal x2923=(gconst37*r21*sj2);
CheckValue<IkReal> x2924=IKPowWithIntegerCheck(IKsign(((x2922*x2922)+(r22*r22)+(((-2.0)*gconst37*r21*x2922))+(((gconst37*gconst37)*(r21*r21))))),-1);
if(!x2924.valid){
continue;
}
CheckValue<IkReal> x2925 = IKatan2WithCheck(IkReal((((sj2*sj3*x2922))+(((-1.0)*sj3*x2923))+((cj3*x2921)))),IkReal((((sj3*x2921))+(((-1.0)*cj3*sj2*x2922))+((cj3*x2923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2925.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2924.value)))+(x2925.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2926=IKsin(j5);
IkReal x2927=IKcos(j5);
IkReal x2928=((1.0)*gconst38);
IkReal x2929=(cj1*cj2);
IkReal x2930=((1.0)*sj3);
IkReal x2931=(cj3*sj1);
IkReal x2932=(gconst37*x2926);
IkReal x2933=(gconst37*x2927);
IkReal x2934=((1.0)*x2927);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x2926*x2928))+((r21*x2932))+(((-1.0)*r22*x2934)));
evalcond[1]=(((r22*x2926))+((r21*x2933))+(((-1.0)*r20*x2927*x2928))+(((-1.0)*cj3*sj2)));
evalcond[2]=(((cj2*x2931))+((cj1*sj3))+(((-1.0)*r10*x2927*x2928))+((r12*x2926))+((r11*x2933)));
evalcond[3]=(((r01*x2933))+(((-1.0)*r00*x2927*x2928))+(((-1.0)*sj1*x2930))+((cj3*x2929))+((r02*x2926)));
evalcond[4]=((((-1.0)*r10*x2926*x2928))+(((-1.0)*cj2*sj1*x2930))+((cj1*cj3))+(((-1.0)*r12*x2934))+((r11*x2932)));
evalcond[5]=((((-1.0)*r00*x2926*x2928))+((r01*x2932))+(((-1.0)*x2929*x2930))+(((-1.0)*x2931))+(((-1.0)*r02*x2934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2935=((-1.0)*r01);
IkReal x2937 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2937)==0){
continue;
}
IkReal x2936=pow(x2937,-0.5);
CheckValue<IkReal> x2938 = IKatan2WithCheck(IkReal(x2935),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2938.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x2938.value))));
IkReal gconst40=(x2935*x2936);
IkReal gconst41=((1.0)*r00*x2936);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2939.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2940=(r22*sj2);
IkReal x2941=(cj3*sj2);
IkReal x2942=(gconst40*r21);
IkReal x2943=(gconst41*r20);
IkReal x2944=(sj2*sj3);
CheckValue<IkReal> x2945=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2942*x2943))+(x2943*x2943)+(x2942*x2942))),-1);
if(!x2945.valid){
continue;
}
CheckValue<IkReal> x2946 = IKatan2WithCheck(IkReal(((((-1.0)*x2942*x2944))+((cj3*x2940))+((x2943*x2944)))),IkReal((((x2941*x2942))+((sj3*x2940))+(((-1.0)*x2941*x2943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2946.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2945.value)))+(x2946.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2947=IKsin(j5);
IkReal x2948=IKcos(j5);
IkReal x2949=(cj1*cj2);
IkReal x2950=((1.0)*sj3);
IkReal x2951=((1.0)*gconst41);
IkReal x2952=(cj3*sj1);
IkReal x2953=(gconst40*x2948);
IkReal x2954=((1.0)*x2948);
IkReal x2955=(gconst40*x2947);
evalcond[0]=(((sj2*sj3))+((r21*x2955))+(((-1.0)*r20*x2947*x2951))+(((-1.0)*r22*x2954)));
evalcond[1]=(((r21*x2953))+(((-1.0)*r20*x2948*x2951))+((r22*x2947))+(((-1.0)*cj3*sj2)));
evalcond[2]=(((cj1*sj3))+((r12*x2947))+(((-1.0)*r10*x2948*x2951))+((r11*x2953))+((cj2*x2952)));
evalcond[3]=(((r02*x2947))+((r01*x2953))+(((-1.0)*r00*x2948*x2951))+(((-1.0)*sj1*x2950))+((cj3*x2949)));
evalcond[4]=((((-1.0)*r12*x2954))+(((-1.0)*r10*x2947*x2951))+((cj1*cj3))+(((-1.0)*cj2*sj1*x2950))+((r11*x2955)));
evalcond[5]=((((-1.0)*x2952))+(((-1.0)*r02*x2954))+((r01*x2955))+(((-1.0)*r00*x2947*x2951))+(((-1.0)*x2949*x2950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x2956=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2956);
rxp1_1=(px*r21);
rxp1_2=(r11*x2956);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((IKabs((cj3*sj1)))+(IKabs((sj1*sj3))));
j5eval[2]=IKsign(r02);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x2957=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2957);
rxp1_1=(px*r21);
rxp1_2=(r11*x2957);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x2958=(cj2*sj1);
IkReal x2959=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[0]=x2959;
j5eval[1]=IKsign(x2959);
j5eval[2]=((IKabs((cj3*x2958)))+(IKabs((sj3*x2958))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x2960=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2960);
rxp1_1=(px*r21);
rxp1_2=(r11*x2960);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2961=IKPowWithIntegerCheck(r02,-1);
if(!x2961.valid){
continue;
}
CheckValue<IkReal> x2962=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x2962.valid){
continue;
}
if( IKabs((sj1*sj3*(x2961.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj2*cj3*sj1*(x2962.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj3*(x2961.value)))+IKsqr(((-1.0)*cj2*cj3*sj1*(x2962.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj3*(x2961.value)), ((-1.0)*cj2*cj3*sj1*(x2962.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2963=IKsin(j5);
IkReal x2964=IKcos(j5);
IkReal x2965=(cj3*sj1);
IkReal x2966=(r11*sj6);
IkReal x2967=(r21*sj6);
IkReal x2968=(cj6*r10);
IkReal x2969=(cj6*r20);
IkReal x2970=((1.0)*x2964);
IkReal x2971=((1.0)*sj1*sj3);
IkReal x2972=((1.0)*x2963);
evalcond[0]=(((r02*x2963))+(((-1.0)*x2971)));
evalcond[1]=((((-1.0)*x2965))+(((-1.0)*r02*x2970)));
evalcond[2]=((((-1.0)*x2969*x2972))+((x2963*x2967)));
evalcond[3]=((((-1.0)*x2969*x2970))+((x2964*x2967)));
evalcond[4]=((((-1.0)*x2968*x2970))+((cj2*x2965))+((x2964*x2966)));
evalcond[5]=((((-1.0)*x2968*x2972))+(((-1.0)*cj2*x2971))+((x2963*x2966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2973=(cj2*sj1);
CheckValue<IkReal> x2974=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10))+((r11*sj6)))),-1);
if(!x2974.valid){
continue;
}
CheckValue<IkReal> x2975 = IKatan2WithCheck(IkReal((sj3*x2973)),IkReal(((-1.0)*cj3*x2973)),IKFAST_ATAN2_MAGTHRESH);
if(!x2975.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2974.value)))+(x2975.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2976=IKsin(j5);
IkReal x2977=IKcos(j5);
IkReal x2978=(cj3*sj1);
IkReal x2979=(r11*sj6);
IkReal x2980=(r21*sj6);
IkReal x2981=(cj6*r10);
IkReal x2982=(cj6*r20);
IkReal x2983=((1.0)*x2977);
IkReal x2984=((1.0)*sj1*sj3);
IkReal x2985=((1.0)*x2976);
evalcond[0]=(((r02*x2976))+(((-1.0)*x2984)));
evalcond[1]=((((-1.0)*x2978))+(((-1.0)*r02*x2983)));
evalcond[2]=(((x2976*x2980))+(((-1.0)*x2982*x2985)));
evalcond[3]=((((-1.0)*x2982*x2983))+((x2977*x2980)));
evalcond[4]=(((x2977*x2979))+(((-1.0)*x2981*x2983))+((cj2*x2978)));
evalcond[5]=((((-1.0)*cj2*x2984))+(((-1.0)*x2981*x2985))+((x2976*x2979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2986=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x2986.valid){
continue;
}
CheckValue<IkReal> x2987 = IKatan2WithCheck(IkReal((sj1*sj3)),IkReal(((-1.0)*cj3*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x2987.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2986.value)))+(x2987.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x2988=IKsin(j5);
IkReal x2989=IKcos(j5);
IkReal x2990=(cj3*sj1);
IkReal x2991=(r11*sj6);
IkReal x2992=(r21*sj6);
IkReal x2993=(cj6*r10);
IkReal x2994=(cj6*r20);
IkReal x2995=((1.0)*x2989);
IkReal x2996=((1.0)*sj1*sj3);
IkReal x2997=((1.0)*x2988);
evalcond[0]=((((-1.0)*x2996))+((r02*x2988)));
evalcond[1]=((((-1.0)*x2990))+(((-1.0)*r02*x2995)));
evalcond[2]=((((-1.0)*x2994*x2997))+((x2988*x2992)));
evalcond[3]=((((-1.0)*x2994*x2995))+((x2989*x2992)));
evalcond[4]=(((cj2*x2990))+(((-1.0)*x2993*x2995))+((x2989*x2991)));
evalcond[5]=((((-1.0)*cj2*x2996))+(((-1.0)*x2993*x2997))+((x2988*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2998=cj6*cj6;
IkReal x2999=(cj6*r20);
IkReal x3000=((1.0)*r12);
IkReal x3001=(r11*sj6);
IkReal x3002=((1.0)*sj3);
IkReal x3003=(cj6*r10);
IkReal x3004=(r21*sj6);
IkReal x3005=(cj1*sj3);
IkReal x3006=(sj2*sj3);
IkReal x3007=(r11*r21);
IkReal x3008=(cj2*cj3*sj1);
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal((((r22*x3005))+((r22*x3008))+((x3001*x3006))+(((-1.0)*sj2*x3002*x3003)))),IkReal(((((-1.0)*x3000*x3006))+(((-1.0)*x2999*x3008))+((x3004*x3008))+((x3004*x3005))+(((-1.0)*cj1*x2999*x3002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3007))+(((-1.0)*r22*x3000))+((x2999*x3001))+((x2998*x3007))+((x3003*x3004))+(((-1.0)*r10*r20*x2998)))),-1);
if(!x3010.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3009.value)+(((1.5707963267949)*(x3010.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3011=IKsin(j5);
IkReal x3012=IKcos(j5);
IkReal x3013=(cj1*cj2);
IkReal x3014=((1.0)*sj3);
IkReal x3015=(cj3*sj1);
IkReal x3016=(sj6*x3011);
IkReal x3017=((1.0)*x3012);
IkReal x3018=(sj6*x3012);
IkReal x3019=((1.0)*cj6*x3011);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x3017))+(((-1.0)*r20*x3019))+((r21*x3016)));
evalcond[1]=((((-1.0)*cj6*r20*x3017))+((r22*x3011))+(((-1.0)*cj3*sj2))+((r21*x3018)));
evalcond[2]=(((cj1*sj3))+((cj2*x3015))+((r12*x3011))+(((-1.0)*cj6*r10*x3017))+((r11*x3018)));
evalcond[3]=(((r01*x3018))+((cj3*x3013))+(((-1.0)*cj6*r00*x3017))+(((-1.0)*sj1*x3014))+((r02*x3011)));
evalcond[4]=((((-1.0)*r10*x3019))+(((-1.0)*r12*x3017))+(((-1.0)*cj2*sj1*x3014))+((r11*x3016))+((cj1*cj3)));
evalcond[5]=(((r01*x3016))+(((-1.0)*r02*x3017))+(((-1.0)*r00*x3019))+(((-1.0)*x3015))+(((-1.0)*x3013*x3014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3020=cj6*cj6;
IkReal x3021=r21*r21;
IkReal x3022=(sj2*sj3);
IkReal x3023=(cj6*r20);
IkReal x3024=(cj3*sj2);
IkReal x3025=(r21*sj6);
CheckValue<IkReal> x3026 = IKatan2WithCheck(IkReal(((((-1.0)*x3022*x3025))+((r22*x3024))+((x3022*x3023)))),IkReal((((r22*x3022))+((x3024*x3025))+(((-1.0)*x3023*x3024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(IKsign((x3021+(r22*r22)+(((-2.0)*x3023*x3025))+(((-1.0)*x3020*x3021))+((x3020*(r20*r20))))),-1);
if(!x3027.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3026.value)+(((1.5707963267949)*(x3027.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3028=IKsin(j5);
IkReal x3029=IKcos(j5);
IkReal x3030=(cj1*cj2);
IkReal x3031=((1.0)*sj3);
IkReal x3032=(cj3*sj1);
IkReal x3033=(sj6*x3028);
IkReal x3034=((1.0)*x3029);
IkReal x3035=(sj6*x3029);
IkReal x3036=((1.0)*cj6*x3028);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x3036))+((r21*x3033))+(((-1.0)*r22*x3034)));
evalcond[1]=((((-1.0)*cj6*r20*x3034))+(((-1.0)*cj3*sj2))+((r21*x3035))+((r22*x3028)));
evalcond[2]=(((r12*x3028))+((cj2*x3032))+(((-1.0)*cj6*r10*x3034))+((cj1*sj3))+((r11*x3035)));
evalcond[3]=(((cj3*x3030))+(((-1.0)*cj6*r00*x3034))+((r02*x3028))+((r01*x3035))+(((-1.0)*sj1*x3031)));
evalcond[4]=(((r11*x3033))+(((-1.0)*cj2*sj1*x3031))+(((-1.0)*r12*x3034))+((cj1*cj3))+(((-1.0)*r10*x3036)));
evalcond[5]=((((-1.0)*x3030*x3031))+(((-1.0)*r00*x3036))+(((-1.0)*x3032))+((r01*x3033))+(((-1.0)*r02*x3034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3037=(cj1*sj3);
IkReal x3038=(cj3*sj2);
IkReal x3039=((1.0)*sj6);
IkReal x3040=(cj6*r20);
IkReal x3041=(cj2*cj3*sj1);
IkReal x3042=(r21*x3039);
CheckValue<IkReal> x3043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3039))+(((-1.0)*cj6*r01)))),-1);
if(!x3043.valid){
continue;
}
CheckValue<IkReal> x3044 = IKatan2WithCheck(IkReal((((x3037*x3040))+(((-1.0)*r11*x3038*x3039))+((cj6*r10*x3038))+((x3040*x3041))+(((-1.0)*x3041*x3042))+(((-1.0)*x3037*x3042)))),IkReal((((r22*x3041))+((r12*x3038))+((r22*x3037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3043.value)))+(x3044.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3045=IKsin(j5);
IkReal x3046=IKcos(j5);
IkReal x3047=(cj1*cj2);
IkReal x3048=((1.0)*sj3);
IkReal x3049=(cj3*sj1);
IkReal x3050=(sj6*x3045);
IkReal x3051=((1.0)*x3046);
IkReal x3052=(sj6*x3046);
IkReal x3053=((1.0)*cj6*x3045);
evalcond[0]=(((sj2*sj3))+((r21*x3050))+(((-1.0)*r22*x3051))+(((-1.0)*r20*x3053)));
evalcond[1]=(((r22*x3045))+(((-1.0)*cj6*r20*x3051))+((r21*x3052))+(((-1.0)*cj3*sj2)));
evalcond[2]=(((cj1*sj3))+(((-1.0)*cj6*r10*x3051))+((r11*x3052))+((cj2*x3049))+((r12*x3045)));
evalcond[3]=(((r01*x3052))+(((-1.0)*cj6*r00*x3051))+((r02*x3045))+((cj3*x3047))+(((-1.0)*sj1*x3048)));
evalcond[4]=(((r11*x3050))+(((-1.0)*cj2*sj1*x3048))+((cj1*cj3))+(((-1.0)*r12*x3051))+(((-1.0)*r10*x3053)));
evalcond[5]=(((r01*x3050))+(((-1.0)*r02*x3051))+(((-1.0)*x3047*x3048))+(((-1.0)*x3049))+(((-1.0)*r00*x3053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3054=cj6*cj6;
IkReal x3055=r21*r21;
IkReal x3056=(sj2*sj3);
IkReal x3057=(cj6*r20);
IkReal x3058=(cj3*sj2);
IkReal x3059=(r21*sj6);
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal(((((-1.0)*x3056*x3059))+((x3056*x3057))+((r22*x3058)))),IkReal(((((-1.0)*x3057*x3058))+((r22*x3056))+((x3058*x3059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
CheckValue<IkReal> x3061=IKPowWithIntegerCheck(IKsign((x3055+(r22*r22)+((x3054*(r20*r20)))+(((-1.0)*x3054*x3055))+(((-2.0)*x3057*x3059)))),-1);
if(!x3061.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3060.value)+(((1.5707963267949)*(x3061.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x3062=IKsin(j5);
IkReal x3063=IKcos(j5);
IkReal x3064=(r21*sj6);
IkReal x3065=(cj6*r20);
IkReal x3066=((1.0)*x3063);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x3066))+(((-1.0)*x3062*x3065))+((x3062*x3064)));
evalcond[1]=(((r22*x3062))+(((-1.0)*cj3*sj2))+(((-1.0)*x3065*x3066))+((x3063*x3064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x3067=((1.0)*sj6);
IkReal x3068=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r00*x3067))+(((-1.0)*r01*x3068)))))+(IKabs(((((-1.0)*r10*x3067))+(((-1.0)*r11*x3068))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
j1eval[0]=cj2;
j1eval[1]=cj3;
j1eval[2]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3069=((1.0)*sj6);
IkReal x3070=((1.0)*cj6);
if( IKabs(((((-1.0)*r10*x3069))+(((-1.0)*r11*x3070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3070))+(((-1.0)*r00*x3069)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3069))+(((-1.0)*r11*x3070))))+IKsqr(((((-1.0)*r01*x3070))+(((-1.0)*r00*x3069))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x3069))+(((-1.0)*r11*x3070))), ((((-1.0)*r01*x3070))+(((-1.0)*r00*x3069))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3071=IKcos(j1);
IkReal x3072=IKsin(j1);
IkReal x3073=(r00*sj6);
IkReal x3074=(sj5*sj6);
IkReal x3075=((0.0003501)*cj6);
IkReal x3076=(r10*sj6);
IkReal x3077=(cj5*sj6);
IkReal x3078=((1.0)*cj6);
IkReal x3079=((1.0)*cj5);
IkReal x3080=(cj3*x3072);
IkReal x3081=(r10*x3078);
IkReal x3082=((1.0)*x3072);
IkReal x3083=(r00*x3078);
IkReal x3084=(cj3*x3071);
evalcond[0]=((((-1.0)*x3071))+(((-1.0)*x3073))+(((-1.0)*r01*x3078)));
evalcond[1]=((((-1.0)*x3076))+(((-1.0)*x3082))+(((-1.0)*r11*x3078)));
evalcond[2]=(((sj3*x3071))+(((-1.0)*cj5*x3081))+((r12*sj5))+((r11*x3077)));
evalcond[3]=(x3084+(((-1.0)*sj5*x3081))+(((-1.0)*r12*x3079))+((r11*x3074)));
evalcond[4]=(((r01*x3077))+(((-1.0)*sj3*x3082))+((r02*sj5))+(((-1.0)*cj5*x3083)));
evalcond[5]=(((r01*x3074))+(((-1.0)*r02*x3079))+(((-1.0)*sj5*x3083))+(((-1.0)*x3080)));
evalcond[6]=((((0.31436)*x3080))+((r01*x3075))+(((0.42076)*x3072))+(((-1.0)*px))+(((0.0003501)*x3073))+(((-0.01275)*x3071)));
evalcond[7]=((((-0.42076)*x3071))+(((-0.31436)*x3084))+(((-1.0)*py))+(((0.0003501)*x3076))+(((-0.01275)*x3072))+((r11*x3075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs((((r10*sj6))+((cj6*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj6))+((cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj6))+((cj6*r11))))+IKsqr((((r00*sj6))+((cj6*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj6))+((cj6*r11))), (((r00*sj6))+((cj6*r01))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3085=IKcos(j1);
IkReal x3086=IKsin(j1);
IkReal x3087=(sj5*sj6);
IkReal x3088=(r00*sj6);
IkReal x3089=((0.0003501)*cj6);
IkReal x3090=((1.0)*cj6);
IkReal x3091=(r10*sj6);
IkReal x3092=(cj5*sj6);
IkReal x3093=((1.0)*cj5);
IkReal x3094=(cj3*x3086);
IkReal x3095=(r10*x3090);
IkReal x3096=(cj3*x3085);
evalcond[0]=(x3085+(((-1.0)*x3088))+(((-1.0)*r01*x3090)));
evalcond[1]=((((-1.0)*r11*x3090))+x3086+(((-1.0)*x3091)));
evalcond[2]=((((-1.0)*cj5*x3095))+((r12*sj5))+((r11*x3092))+((sj3*x3085)));
evalcond[3]=((((-1.0)*r12*x3093))+x3096+((r11*x3087))+(((-1.0)*sj5*x3095)));
evalcond[4]=(((r01*x3092))+(((-1.0)*sj3*x3086))+(((-1.0)*cj5*r00*x3090))+((r02*sj5)));
evalcond[5]=((((-1.0)*r02*x3093))+((r01*x3087))+(((-1.0)*r00*sj5*x3090))+(((-1.0)*x3094)));
evalcond[6]=((((0.31436)*x3094))+(((0.0003501)*x3088))+(((0.01275)*x3085))+(((-1.0)*px))+((r01*x3089))+(((0.42076)*x3086)));
evalcond[7]=((((-0.31436)*x3096))+((r11*x3089))+(((0.01275)*x3086))+(((-0.42076)*x3085))+(((-1.0)*py))+(((0.0003501)*x3091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3097=(cj5*cj6);
IkReal x3098=(cj5*sj6);
if( IKabs((((r01*x3098))+((r02*sj5))+(((-1.0)*r00*x3097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3098))+((r10*x3097))+(((-1.0)*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3098))+((r02*sj5))+(((-1.0)*r00*x3097))))+IKsqr(((((-1.0)*r11*x3098))+((r10*x3097))+(((-1.0)*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x3098))+((r02*sj5))+(((-1.0)*r00*x3097))), ((((-1.0)*r11*x3098))+((r10*x3097))+(((-1.0)*r12*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3099=IKcos(j1);
IkReal x3100=IKsin(j1);
IkReal x3101=(r00*sj6);
IkReal x3102=(sj5*sj6);
IkReal x3103=((0.0003501)*cj6);
IkReal x3104=(r10*sj6);
IkReal x3105=((1.0)*cj6);
IkReal x3106=(cj5*sj6);
IkReal x3107=((1.0)*cj5);
IkReal x3108=(cj2*x3099);
IkReal x3109=(r10*x3105);
IkReal x3110=(sj2*x3099);
IkReal x3111=(sj2*x3100);
IkReal x3112=(r00*x3105);
IkReal x3113=((1.0)*x3100);
evalcond[0]=((((-1.0)*r01*x3105))+(((-1.0)*x3101))+(((-1.0)*x3110)));
evalcond[1]=((((-1.0)*r11*x3105))+(((-1.0)*x3104))+(((-1.0)*x3111)));
evalcond[2]=(((r11*x3106))+(((-1.0)*cj5*x3109))+x3099+((r12*sj5)));
evalcond[3]=((((-1.0)*x3113))+((r02*sj5))+((r01*x3106))+(((-1.0)*cj5*x3112)));
evalcond[4]=((((-1.0)*sj5*x3109))+((r11*x3102))+(((-1.0)*r12*x3107))+(((-1.0)*cj2*x3113)));
evalcond[5]=((((-1.0)*sj5*x3112))+(((-1.0)*x3108))+((r01*x3102))+(((-1.0)*r02*x3107)));
evalcond[6]=((((0.42076)*x3100))+(((-1.0)*px))+(((0.0003501)*x3101))+((r01*x3103))+(((0.31436)*x3108))+(((-0.01275)*x3110)));
evalcond[7]=(((r11*x3103))+(((-0.42076)*x3099))+(((-1.0)*py))+(((0.31436)*cj2*x3100))+(((0.0003501)*x3104))+(((-0.01275)*x3111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3114=((1.0)*sj6);
IkReal x3115=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r11*x3115))+(((-1.0)*r10*x3114)))))+(IKabs(((((-1.0)*r00*x3114))+(((-1.0)*r01*x3115))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3116=((1.0)*sj6);
CheckValue<IkReal> x3117=IKPowWithIntegerCheck(cj2,-1);
if(!x3117.valid){
continue;
}
CheckValue<IkReal> x3118=IKPowWithIntegerCheck(sj2,-1);
if(!x3118.valid){
continue;
}
if( IKabs(((x3117.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*x3116)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3118.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3116)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3117.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*x3116))))))+IKsqr(((x3118.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3116))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3117.value)*((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*x3116))))), ((x3118.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3116))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3119=IKsin(j1);
IkReal x3120=IKcos(j1);
IkReal x3121=(r00*sj6);
IkReal x3122=(sj5*sj6);
IkReal x3123=((0.0003501)*cj6);
IkReal x3124=((1.0)*cj6);
IkReal x3125=(r10*sj6);
IkReal x3126=(cj5*sj6);
IkReal x3127=((1.0)*cj5);
IkReal x3128=(r10*x3124);
IkReal x3129=(cj2*x3120);
IkReal x3130=(sj2*x3120);
IkReal x3131=(sj2*x3119);
IkReal x3132=(cj2*x3119);
evalcond[0]=((((-1.0)*x3121))+(((-1.0)*x3130))+(((-1.0)*r01*x3124)));
evalcond[1]=((((-1.0)*x3125))+(((-1.0)*x3131))+(((-1.0)*r11*x3124)));
evalcond[2]=((((-1.0)*cj5*r00*x3124))+x3119+((r01*x3126))+((r02*sj5)));
evalcond[3]=((((-1.0)*cj5*x3128))+(((-1.0)*x3120))+((r12*sj5))+((r11*x3126)));
evalcond[4]=(x3132+(((-1.0)*sj5*x3128))+(((-1.0)*r12*x3127))+((r11*x3122)));
evalcond[5]=(x3129+((r01*x3122))+(((-1.0)*r02*x3127))+(((-1.0)*r00*sj5*x3124)));
evalcond[6]=(((r01*x3123))+(((-0.31436)*x3129))+(((0.42076)*x3119))+(((-1.0)*px))+(((0.0003501)*x3121))+(((-0.01275)*x3130)));
evalcond[7]=((((-0.42076)*x3120))+(((-0.31436)*x3132))+(((-1.0)*py))+(((0.0003501)*x3125))+(((-0.01275)*x3131))+((r11*x3123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3133=((1.0)*r10);
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(sj2,-1);
if(!x3134.valid){
continue;
}
if( IKabs(((x3134.value)*(((((-1.0)*cj6*r11))+(((-1.0)*sj6*x3133)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11*sj6))+((r12*sj5))+(((-1.0)*cj5*cj6*x3133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3134.value)*(((((-1.0)*cj6*r11))+(((-1.0)*sj6*x3133))))))+IKsqr((((cj5*r11*sj6))+((r12*sj5))+(((-1.0)*cj5*cj6*x3133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3134.value)*(((((-1.0)*cj6*r11))+(((-1.0)*sj6*x3133))))), (((cj5*r11*sj6))+((r12*sj5))+(((-1.0)*cj5*cj6*x3133))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3135=IKsin(j1);
IkReal x3136=IKcos(j1);
IkReal x3137=(r00*sj6);
IkReal x3138=(sj5*sj6);
IkReal x3139=((0.0003501)*cj6);
IkReal x3140=((1.0)*cj6);
IkReal x3141=(r10*sj6);
IkReal x3142=(cj5*sj6);
IkReal x3143=((1.0)*cj5);
IkReal x3144=(r10*x3140);
IkReal x3145=(cj2*x3136);
IkReal x3146=(sj2*x3136);
IkReal x3147=(sj2*x3135);
IkReal x3148=(cj2*x3135);
evalcond[0]=((((-1.0)*x3146))+(((-1.0)*x3137))+(((-1.0)*r01*x3140)));
evalcond[1]=((((-1.0)*x3147))+(((-1.0)*x3141))+(((-1.0)*r11*x3140)));
evalcond[2]=((((-1.0)*cj5*r00*x3140))+x3135+((r01*x3142))+((r02*sj5)));
evalcond[3]=((((-1.0)*x3136))+((r11*x3142))+(((-1.0)*cj5*x3144))+((r12*sj5)));
evalcond[4]=(x3148+(((-1.0)*r12*x3143))+(((-1.0)*sj5*x3144))+((r11*x3138)));
evalcond[5]=(x3145+((r01*x3138))+(((-1.0)*r00*sj5*x3140))+(((-1.0)*r02*x3143)));
evalcond[6]=((((-0.31436)*x3145))+((r01*x3139))+(((-0.01275)*x3146))+(((0.42076)*x3135))+(((-1.0)*px))+(((0.0003501)*x3137)));
evalcond[7]=((((-0.31436)*x3148))+(((-0.01275)*x3147))+(((-0.42076)*x3136))+(((-1.0)*py))+((r11*x3139))+(((0.0003501)*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3149=((1.0)*sj6);
IkReal x3150=((1.0)*cj6);
CheckValue<IkReal> x3151 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3150))+(((-1.0)*r10*x3149)))),IkReal(((((-1.0)*r00*x3149))+(((-1.0)*r01*x3150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3151.valid){
continue;
}
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3152.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3151.value)+(((1.5707963267949)*(x3152.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3153=IKsin(j1);
IkReal x3154=IKcos(j1);
IkReal x3155=(r00*sj6);
IkReal x3156=(sj5*sj6);
IkReal x3157=((0.0003501)*cj6);
IkReal x3158=((1.0)*cj6);
IkReal x3159=(r10*sj6);
IkReal x3160=(cj5*sj6);
IkReal x3161=((1.0)*cj5);
IkReal x3162=(r10*x3158);
IkReal x3163=(cj2*x3154);
IkReal x3164=(sj2*x3154);
IkReal x3165=(sj2*x3153);
IkReal x3166=(cj2*x3153);
evalcond[0]=((((-1.0)*x3155))+(((-1.0)*x3164))+(((-1.0)*r01*x3158)));
evalcond[1]=((((-1.0)*r11*x3158))+(((-1.0)*x3159))+(((-1.0)*x3165)));
evalcond[2]=(x3153+(((-1.0)*cj5*r00*x3158))+((r02*sj5))+((r01*x3160)));
evalcond[3]=((((-1.0)*x3154))+((r11*x3160))+(((-1.0)*cj5*x3162))+((r12*sj5)));
evalcond[4]=((((-1.0)*r12*x3161))+x3166+((r11*x3156))+(((-1.0)*sj5*x3162)));
evalcond[5]=(x3163+(((-1.0)*r00*sj5*x3158))+((r01*x3156))+(((-1.0)*r02*x3161)));
evalcond[6]=((((-0.31436)*x3163))+(((-0.01275)*x3164))+(((-1.0)*px))+((r01*x3157))+(((0.42076)*x3153))+(((0.0003501)*x3155)));
evalcond[7]=(((r11*x3157))+(((-0.31436)*x3166))+(((-0.01275)*x3165))+(((-1.0)*py))+(((-0.42076)*x3154))+(((0.0003501)*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x3167=((196475000.0)*sj3);
IkReal x3168=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((262975000.0)*py))+((py*x3168))+(((-1.0)*px*x3167)))))+(IKabs(((((-262975000.0)*px))+(((-1.0)*py*x3167))+(((-1.0)*px*x3168))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((-1.0)+(((-1.33846545362005)*cj3)));
j1eval[1]=IKsign(((-7859.0)+(((-10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3169=(r12*sj5);
IkReal x3170=((7859.0)*cj3);
IkReal x3171=(cj5*cj6*r10);
IkReal x3172=(cj5*r11*sj6);
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(sj3,-1);
if(!x3173.valid){
continue;
}
if( IKabs(((((0.747124251354692)*x3172))+(((0.747124251354692)*x3169))+(((-0.747124251354692)*x3171))+(((2.37665177298222)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x3173.value)*(((((10519.0)*x3172))+(((-10519.0)*x3171))+(((10519.0)*x3169))+((x3170*x3172))+(((25000.0)*cj3*px))+(((-1.0)*x3170*x3171))+((x3169*x3170)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.747124251354692)*x3172))+(((0.747124251354692)*x3169))+(((-0.747124251354692)*x3171))+(((2.37665177298222)*px))))+IKsqr(((-9.50660709192889e-5)*(x3173.value)*(((((10519.0)*x3172))+(((-10519.0)*x3171))+(((10519.0)*x3169))+((x3170*x3172))+(((25000.0)*cj3*px))+(((-1.0)*x3170*x3171))+((x3169*x3170))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.747124251354692)*x3172))+(((0.747124251354692)*x3169))+(((-0.747124251354692)*x3171))+(((2.37665177298222)*px))), ((-9.50660709192889e-5)*(x3173.value)*(((((10519.0)*x3172))+(((-10519.0)*x3171))+(((10519.0)*x3169))+((x3170*x3172))+(((25000.0)*cj3*px))+(((-1.0)*x3170*x3171))+((x3169*x3170))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3174=IKsin(j1);
IkReal x3175=IKcos(j1);
IkReal x3176=((1.0)*sj3);
IkReal x3177=(sj5*sj6);
IkReal x3178=(cj5*sj6);
IkReal x3179=((1.0)*cj5);
IkReal x3180=(cj3*x3175);
IkReal x3181=(cj3*x3174);
IkReal x3182=((1.0)*cj6*r10);
IkReal x3183=((1.0)*cj6*r00);
IkReal x3184=(sj3*x3175);
IkReal x3185=(x3174*x3176);
evalcond[0]=((((0.31436)*x3181))+(((0.31436)*x3184))+(((0.42076)*x3174))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.42076)*x3175))+(((-0.31436)*x3180))+(((0.31436)*sj3*x3174)));
evalcond[2]=(((r11*x3178))+x3184+x3181+(((-1.0)*cj6*r10*x3179))+((r12*sj5)));
evalcond[3]=(x3180+((r02*sj5))+((r01*x3178))+(((-1.0)*x3185))+(((-1.0)*cj6*r00*x3179)));
evalcond[4]=(((r11*x3177))+x3180+(((-1.0)*r12*x3179))+(((-1.0)*sj5*x3182))+(((-1.0)*x3185)));
evalcond[5]=((((-1.0)*sj5*x3183))+((r01*x3177))+(((-1.0)*x3181))+(((-1.0)*r02*x3179))+(((-1.0)*x3175*x3176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3186=((7859.0)*cj3);
IkReal x3187=(r12*sj5);
IkReal x3188=((7859.0)*sj3);
IkReal x3189=((25000.0)*py);
IkReal x3190=(cj5*cj6*r10);
IkReal x3191=(cj5*r11*sj6);
CheckValue<IkReal> x3192 = IKatan2WithCheck(IkReal(((((10519.0)*x3191))+(((-10519.0)*x3190))+(((-1.0)*x3186*x3190))+(((10519.0)*x3187))+(((-1.0)*sj3*x3189))+((x3186*x3191))+((x3186*x3187)))),IkReal(((((-1.0)*x3188*x3190))+((x3188*x3191))+((x3187*x3188))+((cj3*x3189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3192.valid){
continue;
}
CheckValue<IkReal> x3193=IKPowWithIntegerCheck(IKsign(((-7859.0)+(((-10519.0)*cj3)))),-1);
if(!x3193.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3192.value)+(((1.5707963267949)*(x3193.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3194=IKsin(j1);
IkReal x3195=IKcos(j1);
IkReal x3196=((1.0)*sj3);
IkReal x3197=(sj5*sj6);
IkReal x3198=(cj5*sj6);
IkReal x3199=((1.0)*cj5);
IkReal x3200=(cj3*x3195);
IkReal x3201=(cj3*x3194);
IkReal x3202=((1.0)*cj6*r10);
IkReal x3203=((1.0)*cj6*r00);
IkReal x3204=(sj3*x3195);
IkReal x3205=(x3194*x3196);
evalcond[0]=((((-1.0)*px))+(((0.31436)*x3201))+(((0.31436)*x3204))+(((0.42076)*x3194)));
evalcond[1]=((((0.31436)*sj3*x3194))+(((-0.31436)*x3200))+(((-1.0)*py))+(((-0.42076)*x3195)));
evalcond[2]=(x3204+x3201+((r11*x3198))+((r12*sj5))+(((-1.0)*cj6*r10*x3199)));
evalcond[3]=(x3200+((r01*x3198))+(((-1.0)*cj6*r00*x3199))+((r02*sj5))+(((-1.0)*x3205)));
evalcond[4]=(x3200+((r11*x3197))+(((-1.0)*r12*x3199))+(((-1.0)*x3205))+(((-1.0)*sj5*x3202)));
evalcond[5]=((((-1.0)*x3201))+((r01*x3197))+(((-1.0)*r02*x3199))+(((-1.0)*sj5*x3203))+(((-1.0)*x3195*x3196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3206=((196475000.0)*sj3);
IkReal x3207=((196475000.0)*cj3);
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal(((((-262975000.0)*px))+(((-1.0)*py*x3206))+(((-1.0)*px*x3207)))),IkReal((((py*x3207))+(((262975000.0)*py))+(((-1.0)*px*x3206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x3209.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3208.value)+(((1.5707963267949)*(x3209.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3210=IKsin(j1);
IkReal x3211=IKcos(j1);
IkReal x3212=((1.0)*sj3);
IkReal x3213=(sj5*sj6);
IkReal x3214=(cj5*sj6);
IkReal x3215=((1.0)*cj5);
IkReal x3216=(cj3*x3211);
IkReal x3217=(cj3*x3210);
IkReal x3218=((1.0)*cj6*r10);
IkReal x3219=((1.0)*cj6*r00);
IkReal x3220=(sj3*x3211);
IkReal x3221=(x3210*x3212);
evalcond[0]=((((0.31436)*x3220))+(((-1.0)*px))+(((0.31436)*x3217))+(((0.42076)*x3210)));
evalcond[1]=((((-0.31436)*x3216))+(((-0.42076)*x3211))+(((-1.0)*py))+(((0.31436)*sj3*x3210)));
evalcond[2]=(x3217+x3220+((r11*x3214))+((r12*sj5))+(((-1.0)*cj6*r10*x3215)));
evalcond[3]=(((r01*x3214))+x3216+(((-1.0)*cj6*r00*x3215))+((r02*sj5))+(((-1.0)*x3221)));
evalcond[4]=(x3216+((r11*x3213))+(((-1.0)*sj5*x3218))+(((-1.0)*r12*x3215))+(((-1.0)*x3221)));
evalcond[5]=((((-1.0)*x3211*x3212))+((r01*x3213))+(((-1.0)*x3217))+(((-1.0)*sj5*x3219))+(((-1.0)*r02*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x3222=((196475000.0)*sj3);
IkReal x3223=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((262975000.0)*py))+((px*x3222))+((py*x3223)))))+(IKabs((((py*x3222))+(((-262975000.0)*px))+(((-1.0)*px*x3223))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((1.33846545362005)*cj3)));
j1eval[1]=IKsign(((7859.0)+(((10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3224=(r12*sj5);
IkReal x3225=((7859.0)*cj3);
IkReal x3226=(cj5*cj6*r10);
IkReal x3227=(cj5*r11*sj6);
CheckValue<IkReal> x3228=IKPowWithIntegerCheck(sj3,-1);
if(!x3228.valid){
continue;
}
if( IKabs(((((0.747124251354692)*x3226))+(((-0.747124251354692)*x3224))+(((-0.747124251354692)*x3227))+(((2.37665177298222)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x3228.value)*(((((-25000.0)*cj3*px))+(((-10519.0)*x3226))+(((-1.0)*x3225*x3226))+(((10519.0)*x3224))+(((10519.0)*x3227))+((x3225*x3227))+((x3224*x3225)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.747124251354692)*x3226))+(((-0.747124251354692)*x3224))+(((-0.747124251354692)*x3227))+(((2.37665177298222)*px))))+IKsqr(((-9.50660709192889e-5)*(x3228.value)*(((((-25000.0)*cj3*px))+(((-10519.0)*x3226))+(((-1.0)*x3225*x3226))+(((10519.0)*x3224))+(((10519.0)*x3227))+((x3225*x3227))+((x3224*x3225))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.747124251354692)*x3226))+(((-0.747124251354692)*x3224))+(((-0.747124251354692)*x3227))+(((2.37665177298222)*px))), ((-9.50660709192889e-5)*(x3228.value)*(((((-25000.0)*cj3*px))+(((-10519.0)*x3226))+(((-1.0)*x3225*x3226))+(((10519.0)*x3224))+(((10519.0)*x3227))+((x3225*x3227))+((x3224*x3225))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3229=IKsin(j1);
IkReal x3230=IKcos(j1);
IkReal x3231=(sj5*sj6);
IkReal x3232=(cj5*sj6);
IkReal x3233=((1.0)*cj5);
IkReal x3234=(sj3*x3230);
IkReal x3235=(cj3*x3229);
IkReal x3236=((1.0)*cj6*r10);
IkReal x3237=(sj3*x3229);
IkReal x3238=((1.0)*cj6*r00);
IkReal x3239=(cj3*x3230);
IkReal x3240=((1.0)*x3235);
evalcond[0]=((((-0.31436)*x3234))+(((-1.0)*px))+(((0.42076)*x3229))+(((0.31436)*x3235)));
evalcond[1]=((((-0.31436)*x3237))+(((-0.31436)*x3239))+(((-0.42076)*x3230))+(((-1.0)*py)));
evalcond[2]=(x3237+x3239+((r11*x3231))+(((-1.0)*r12*x3233))+(((-1.0)*sj5*x3236)));
evalcond[3]=(x3234+((r11*x3232))+(((-1.0)*x3240))+(((-1.0)*cj6*r10*x3233))+((r12*sj5)));
evalcond[4]=((((-1.0)*r02*x3233))+x3234+((r01*x3231))+(((-1.0)*x3240))+(((-1.0)*sj5*x3238)));
evalcond[5]=((((-1.0)*cj6*r00*x3233))+((r01*x3232))+(((-1.0)*x3237))+(((-1.0)*x3239))+((r02*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3241=(r11*sj6);
IkReal x3242=(cj6*r10);
IkReal x3243=((10519.0)*sj5);
IkReal x3244=((25000.0)*px);
IkReal x3245=((7859.0)*cj3*sj5);
IkReal x3246=((7859.0)*cj5*r12);
IkReal x3247=((7859.0)*sj3*sj5);
CheckValue<IkReal> x3248 = IKatan2WithCheck(IkReal((((sj3*x3246))+(((-1.0)*x3241*x3247))+((cj3*x3244))+((x3242*x3247)))),IkReal(((((10519.0)*cj5*r12))+(((-1.0)*sj3*x3244))+(((-1.0)*x3241*x3245))+(((-1.0)*x3241*x3243))+((cj3*x3246))+((x3242*x3243))+((x3242*x3245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3248.valid){
continue;
}
CheckValue<IkReal> x3249=IKPowWithIntegerCheck(IKsign(((7859.0)+(((10519.0)*cj3)))),-1);
if(!x3249.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3248.value)+(((1.5707963267949)*(x3249.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3250=IKsin(j1);
IkReal x3251=IKcos(j1);
IkReal x3252=(sj5*sj6);
IkReal x3253=(cj5*sj6);
IkReal x3254=((1.0)*cj5);
IkReal x3255=(sj3*x3251);
IkReal x3256=(cj3*x3250);
IkReal x3257=((1.0)*cj6*r10);
IkReal x3258=(sj3*x3250);
IkReal x3259=((1.0)*cj6*r00);
IkReal x3260=(cj3*x3251);
IkReal x3261=((1.0)*x3256);
evalcond[0]=((((0.31436)*x3256))+(((-0.31436)*x3255))+(((-1.0)*px))+(((0.42076)*x3250)));
evalcond[1]=((((-0.42076)*x3251))+(((-0.31436)*x3258))+(((-1.0)*py))+(((-0.31436)*x3260)));
evalcond[2]=(((r11*x3252))+x3260+x3258+(((-1.0)*sj5*x3257))+(((-1.0)*r12*x3254)));
evalcond[3]=(((r11*x3253))+x3255+(((-1.0)*cj6*r10*x3254))+(((-1.0)*x3261))+((r12*sj5)));
evalcond[4]=((((-1.0)*r02*x3254))+x3255+(((-1.0)*x3261))+((r01*x3252))+(((-1.0)*sj5*x3259)));
evalcond[5]=((((-1.0)*cj6*r00*x3254))+(((-1.0)*x3260))+((r02*sj5))+((r01*x3253))+(((-1.0)*x3258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3262=((196475000.0)*sj3);
IkReal x3263=((196475000.0)*cj3);
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal(((((-1.0)*px*x3263))+(((-262975000.0)*px))+((py*x3262)))),IkReal((((px*x3262))+(((262975000.0)*py))+((py*x3263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x3265.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3264.value)+(((1.5707963267949)*(x3265.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3266=IKsin(j1);
IkReal x3267=IKcos(j1);
IkReal x3268=(sj5*sj6);
IkReal x3269=(cj5*sj6);
IkReal x3270=((1.0)*cj5);
IkReal x3271=(sj3*x3267);
IkReal x3272=(cj3*x3266);
IkReal x3273=((1.0)*cj6*r10);
IkReal x3274=(sj3*x3266);
IkReal x3275=((1.0)*cj6*r00);
IkReal x3276=(cj3*x3267);
IkReal x3277=((1.0)*x3272);
evalcond[0]=((((0.31436)*x3272))+(((-1.0)*px))+(((-0.31436)*x3271))+(((0.42076)*x3266)));
evalcond[1]=((((-0.42076)*x3267))+(((-1.0)*py))+(((-0.31436)*x3276))+(((-0.31436)*x3274)));
evalcond[2]=((((-1.0)*r12*x3270))+x3276+x3274+((r11*x3268))+(((-1.0)*sj5*x3273)));
evalcond[3]=(x3271+(((-1.0)*x3277))+((r12*sj5))+((r11*x3269))+(((-1.0)*cj6*r10*x3270)));
evalcond[4]=(((r01*x3268))+x3271+(((-1.0)*x3277))+(((-1.0)*sj5*x3275))+(((-1.0)*r02*x3270)));
evalcond[5]=((((-1.0)*x3274))+(((-1.0)*x3276))+((r01*x3269))+((r02*sj5))+(((-1.0)*cj6*r00*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x3278=((1.0)*sj6);
IkReal x3279=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r00*x3278))+(((-1.0)*r01*x3279)))))+(IKabs(((((-1.0)*r11*x3279))+(((-1.0)*r10*x3278))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3280=((1.0)*sj6);
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(cj2,-1);
if(!x3281.valid){
continue;
}
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(sj2,-1);
if(!x3282.valid){
continue;
}
if( IKabs(((x3281.value)*(((((-1.0)*cj5*r11*x3280))+((cj5*cj6*r10))+(((-1.0)*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3282.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3280)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3281.value)*(((((-1.0)*cj5*r11*x3280))+((cj5*cj6*r10))+(((-1.0)*r12*sj5))))))+IKsqr(((x3282.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3280))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3281.value)*(((((-1.0)*cj5*r11*x3280))+((cj5*cj6*r10))+(((-1.0)*r12*sj5))))), ((x3282.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3280))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3283=IKcos(j1);
IkReal x3284=IKsin(j1);
IkReal x3285=(r00*sj6);
IkReal x3286=(sj5*sj6);
IkReal x3287=((0.0003501)*cj6);
IkReal x3288=(r10*sj6);
IkReal x3289=((1.0)*cj6);
IkReal x3290=(cj5*sj6);
IkReal x3291=((1.0)*cj5);
IkReal x3292=(r10*x3289);
IkReal x3293=(sj2*x3283);
IkReal x3294=(sj2*x3284);
IkReal x3295=(r00*x3289);
evalcond[0]=((((-1.0)*r01*x3289))+(((-1.0)*x3293))+(((-1.0)*x3285)));
evalcond[1]=((((-1.0)*x3294))+(((-1.0)*x3288))+(((-1.0)*r11*x3289)));
evalcond[2]=((((-1.0)*r12*x3291))+(((-1.0)*sj5*x3292))+x3283+((r11*x3286)));
evalcond[3]=((((-1.0)*cj5*x3292))+((r12*sj5))+((r11*x3290))+((cj2*x3284)));
evalcond[4]=(((r01*x3290))+((r02*sj5))+(((-1.0)*cj5*x3295))+((cj2*x3283)));
evalcond[5]=((((-1.0)*sj5*x3295))+(((-1.0)*r02*x3291))+(((-1.0)*x3284))+((r01*x3286)));
evalcond[6]=((((-1.0)*px))+(((0.73512)*x3284))+((r01*x3287))+(((-0.01275)*x3293))+(((0.0003501)*x3285)));
evalcond[7]=((((-1.0)*py))+(((-0.73512)*x3283))+((r11*x3287))+(((-0.01275)*x3294))+(((0.0003501)*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3296=((1.0)*r11);
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(sj2,-1);
if(!x3297.valid){
continue;
}
if( IKabs(((x3297.value)*(((((-1.0)*cj6*x3296))+(((-1.0)*r10*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*sj5*sj6*x3296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3297.value)*(((((-1.0)*cj6*x3296))+(((-1.0)*r10*sj6))))))+IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*sj5*sj6*x3296))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3297.value)*(((((-1.0)*cj6*x3296))+(((-1.0)*r10*sj6))))), (((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*sj5*sj6*x3296))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3298=IKcos(j1);
IkReal x3299=IKsin(j1);
IkReal x3300=(r00*sj6);
IkReal x3301=(sj5*sj6);
IkReal x3302=((0.0003501)*cj6);
IkReal x3303=(r10*sj6);
IkReal x3304=((1.0)*cj6);
IkReal x3305=(cj5*sj6);
IkReal x3306=((1.0)*cj5);
IkReal x3307=(r10*x3304);
IkReal x3308=(sj2*x3298);
IkReal x3309=(sj2*x3299);
IkReal x3310=(r00*x3304);
evalcond[0]=((((-1.0)*x3308))+(((-1.0)*x3300))+(((-1.0)*r01*x3304)));
evalcond[1]=((((-1.0)*x3309))+(((-1.0)*x3303))+(((-1.0)*r11*x3304)));
evalcond[2]=(x3298+((r11*x3301))+(((-1.0)*r12*x3306))+(((-1.0)*sj5*x3307)));
evalcond[3]=((((-1.0)*cj5*x3307))+((r11*x3305))+((r12*sj5))+((cj2*x3299)));
evalcond[4]=((((-1.0)*cj5*x3310))+((r02*sj5))+((r01*x3305))+((cj2*x3298)));
evalcond[5]=((((-1.0)*r02*x3306))+(((-1.0)*x3299))+(((-1.0)*sj5*x3310))+((r01*x3301)));
evalcond[6]=((((0.0003501)*x3300))+(((-1.0)*px))+(((0.73512)*x3299))+((r01*x3302))+(((-0.01275)*x3308)));
evalcond[7]=((((0.0003501)*x3303))+((r11*x3302))+(((-1.0)*py))+(((-0.73512)*x3298))+(((-0.01275)*x3309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3311=((1.0)*sj6);
IkReal x3312=((1.0)*cj6);
CheckValue<IkReal> x3313 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3312))+(((-1.0)*r10*x3311)))),IkReal(((((-1.0)*r01*x3312))+(((-1.0)*r00*x3311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3313.valid){
continue;
}
CheckValue<IkReal> x3314=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3314.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3313.value)+(((1.5707963267949)*(x3314.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3315=IKcos(j1);
IkReal x3316=IKsin(j1);
IkReal x3317=(r00*sj6);
IkReal x3318=(sj5*sj6);
IkReal x3319=((0.0003501)*cj6);
IkReal x3320=(r10*sj6);
IkReal x3321=((1.0)*cj6);
IkReal x3322=(cj5*sj6);
IkReal x3323=((1.0)*cj5);
IkReal x3324=(r10*x3321);
IkReal x3325=(sj2*x3315);
IkReal x3326=(sj2*x3316);
IkReal x3327=(r00*x3321);
evalcond[0]=((((-1.0)*x3325))+(((-1.0)*x3317))+(((-1.0)*r01*x3321)));
evalcond[1]=((((-1.0)*x3326))+(((-1.0)*x3320))+(((-1.0)*r11*x3321)));
evalcond[2]=(x3315+(((-1.0)*sj5*x3324))+((r11*x3318))+(((-1.0)*r12*x3323)));
evalcond[3]=((((-1.0)*cj5*x3324))+((r11*x3322))+((cj2*x3316))+((r12*sj5)));
evalcond[4]=((((-1.0)*cj5*x3327))+((r01*x3322))+((r02*sj5))+((cj2*x3315)));
evalcond[5]=((((-1.0)*r02*x3323))+(((-1.0)*sj5*x3327))+(((-1.0)*x3316))+((r01*x3318)));
evalcond[6]=((((0.0003501)*x3317))+(((-0.01275)*x3325))+(((0.73512)*x3316))+(((-1.0)*px))+((r01*x3319)));
evalcond[7]=((((-0.01275)*x3326))+((r11*x3319))+(((-1.0)*py))+(((-0.73512)*x3315))+(((0.0003501)*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3328=((1.0)*sj6);
IkReal x3329=((1.0)*cj6);
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs(((((-1.0)*r10*x3328))+(((-1.0)*r11*x3329)))))+(IKabs(((((-1.0)*r01*x3329))+(((-1.0)*r00*x3328))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=1.0;
j4=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=1.0;
j4=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3330=((1.0)*cj6);
CheckValue<IkReal> x3331=IKPowWithIntegerCheck(cj2,-1);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(sj2,-1);
if(!x3332.valid){
continue;
}
if( IKabs(((x3331.value)*((((cj5*r11*sj6))+((r12*sj5))+(((-1.0)*cj5*r10*x3330)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3332.value)*(((((-1.0)*r00*sj6))+(((-1.0)*r01*x3330)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3331.value)*((((cj5*r11*sj6))+((r12*sj5))+(((-1.0)*cj5*r10*x3330))))))+IKsqr(((x3332.value)*(((((-1.0)*r00*sj6))+(((-1.0)*r01*x3330))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x3331.value)*((((cj5*r11*sj6))+((r12*sj5))+(((-1.0)*cj5*r10*x3330))))), ((x3332.value)*(((((-1.0)*r00*sj6))+(((-1.0)*r01*x3330))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3333=IKsin(j1);
IkReal x3334=IKcos(j1);
IkReal x3335=(r00*sj6);
IkReal x3336=(sj5*sj6);
IkReal x3337=((0.0003501)*cj6);
IkReal x3338=((0.01275)*sj2);
IkReal x3339=((1.0)*cj6);
IkReal x3340=(r10*sj6);
IkReal x3341=(cj5*sj6);
IkReal x3342=((1.0)*cj5);
IkReal x3343=((1.0)*x3334);
IkReal x3344=(r10*x3339);
IkReal x3345=((1.0)*x3333);
evalcond[0]=((((-1.0)*sj2*x3343))+(((-1.0)*r01*x3339))+(((-1.0)*x3335)));
evalcond[1]=((((-1.0)*x3340))+(((-1.0)*sj2*x3345))+(((-1.0)*r11*x3339)));
evalcond[2]=(x3333+(((-1.0)*r02*x3342))+((r01*x3336))+(((-1.0)*r00*sj5*x3339)));
evalcond[3]=((((-1.0)*sj5*x3344))+(((-1.0)*x3343))+((r11*x3336))+(((-1.0)*r12*x3342)));
evalcond[4]=((((-1.0)*cj2*x3345))+(((-1.0)*cj5*x3344))+((r12*sj5))+((r11*x3341)));
evalcond[5]=((((-1.0)*cj5*r00*x3339))+(((-1.0)*cj2*x3343))+((r02*sj5))+((r01*x3341)));
evalcond[6]=((((0.0003501)*x3335))+(((0.1064)*x3333))+(((-1.0)*px))+(((-1.0)*x3334*x3338))+((r01*x3337)));
evalcond[7]=((((-1.0)*py))+((r11*x3337))+(((-0.1064)*x3334))+(((0.0003501)*x3340))+(((-1.0)*x3333*x3338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3346=((1.0)*sj6);
CheckValue<IkReal> x3347=IKPowWithIntegerCheck(sj2,-1);
if(!x3347.valid){
continue;
}
if( IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x3346))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3347.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3346)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x3346))+((cj5*r02))))+IKsqr(((x3347.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3346))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x3346))+((cj5*r02))), ((x3347.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x3346))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3348=IKsin(j1);
IkReal x3349=IKcos(j1);
IkReal x3350=(r00*sj6);
IkReal x3351=(sj5*sj6);
IkReal x3352=((0.0003501)*cj6);
IkReal x3353=((0.01275)*sj2);
IkReal x3354=((1.0)*cj6);
IkReal x3355=(r10*sj6);
IkReal x3356=(cj5*sj6);
IkReal x3357=((1.0)*cj5);
IkReal x3358=((1.0)*x3349);
IkReal x3359=(r10*x3354);
IkReal x3360=((1.0)*x3348);
evalcond[0]=((((-1.0)*sj2*x3358))+(((-1.0)*r01*x3354))+(((-1.0)*x3350)));
evalcond[1]=((((-1.0)*r11*x3354))+(((-1.0)*sj2*x3360))+(((-1.0)*x3355)));
evalcond[2]=((((-1.0)*r02*x3357))+x3348+((r01*x3351))+(((-1.0)*r00*sj5*x3354)));
evalcond[3]=((((-1.0)*x3358))+((r11*x3351))+(((-1.0)*sj5*x3359))+(((-1.0)*r12*x3357)));
evalcond[4]=((((-1.0)*cj2*x3360))+((r11*x3356))+((r12*sj5))+(((-1.0)*cj5*x3359)));
evalcond[5]=(((r01*x3356))+(((-1.0)*cj5*r00*x3354))+((r02*sj5))+(((-1.0)*cj2*x3358)));
evalcond[6]=((((0.0003501)*x3350))+(((-1.0)*x3349*x3353))+((r01*x3352))+(((-1.0)*px))+(((0.1064)*x3348)));
evalcond[7]=((((0.0003501)*x3355))+(((-1.0)*x3348*x3353))+((r11*x3352))+(((-0.1064)*x3349))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3361=((1.0)*sj6);
IkReal x3362=((1.0)*cj6);
CheckValue<IkReal> x3363 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3361))+(((-1.0)*r11*x3362)))),IkReal(((((-1.0)*r01*x3362))+(((-1.0)*r00*x3361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3364.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3363.value)+(((1.5707963267949)*(x3364.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3365=IKsin(j1);
IkReal x3366=IKcos(j1);
IkReal x3367=(r00*sj6);
IkReal x3368=(sj5*sj6);
IkReal x3369=((0.0003501)*cj6);
IkReal x3370=((0.01275)*sj2);
IkReal x3371=((1.0)*cj6);
IkReal x3372=(r10*sj6);
IkReal x3373=(cj5*sj6);
IkReal x3374=((1.0)*cj5);
IkReal x3375=((1.0)*x3366);
IkReal x3376=(r10*x3371);
IkReal x3377=((1.0)*x3365);
evalcond[0]=((((-1.0)*sj2*x3375))+(((-1.0)*x3367))+(((-1.0)*r01*x3371)));
evalcond[1]=((((-1.0)*x3372))+(((-1.0)*sj2*x3377))+(((-1.0)*r11*x3371)));
evalcond[2]=((((-1.0)*r00*sj5*x3371))+x3365+((r01*x3368))+(((-1.0)*r02*x3374)));
evalcond[3]=((((-1.0)*sj5*x3376))+(((-1.0)*x3375))+(((-1.0)*r12*x3374))+((r11*x3368)));
evalcond[4]=((((-1.0)*cj2*x3377))+(((-1.0)*cj5*x3376))+((r12*sj5))+((r11*x3373)));
evalcond[5]=(((r01*x3373))+(((-1.0)*cj2*x3375))+((r02*sj5))+(((-1.0)*cj5*r00*x3371)));
evalcond[6]=((((-1.0)*x3366*x3370))+((r01*x3369))+(((-1.0)*px))+(((0.0003501)*x3367))+(((0.1064)*x3365)));
evalcond[7]=((((-1.0)*x3365*x3370))+(((-1.0)*py))+(((-0.1064)*x3366))+(((0.0003501)*x3372))+((r11*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3382=IKPowWithIntegerCheck(sj2,-1);
if(!x3382.valid){
continue;
}
IkReal x3378=x3382.value;
IkReal x3379=(cj5*sj2);
IkReal x3380=(r00*sj6);
IkReal x3381=(cj6*r01);
CheckValue<IkReal> x3383=IKPowWithIntegerCheck(cj2,-1);
if(!x3383.valid){
continue;
}
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(cj3,-1);
if(!x3384.valid){
continue;
}
if( IKabs((x3378*(x3383.value)*(x3384.value)*((((cj6*r10*x3379))+(((-1.0)*r11*sj6*x3379))+((sj3*x3381))+((sj3*x3380))+(((-1.0)*r12*sj2*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3378*(((((-1.0)*x3380))+(((-1.0)*x3381)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3378*(x3383.value)*(x3384.value)*((((cj6*r10*x3379))+(((-1.0)*r11*sj6*x3379))+((sj3*x3381))+((sj3*x3380))+(((-1.0)*r12*sj2*sj5))))))+IKsqr((x3378*(((((-1.0)*x3380))+(((-1.0)*x3381))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3378*(x3383.value)*(x3384.value)*((((cj6*r10*x3379))+(((-1.0)*r11*sj6*x3379))+((sj3*x3381))+((sj3*x3380))+(((-1.0)*r12*sj2*sj5))))), (x3378*(((((-1.0)*x3380))+(((-1.0)*x3381))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3385=IKsin(j1);
IkReal x3386=IKcos(j1);
IkReal x3387=((0.31436)*sj3);
IkReal x3388=(r00*sj6);
IkReal x3389=((1.0)*sj3);
IkReal x3390=(sj5*sj6);
IkReal x3391=((0.0003501)*cj6);
IkReal x3392=((0.01275)*sj2);
IkReal x3393=((1.0)*cj6);
IkReal x3394=(r10*sj6);
IkReal x3395=((1.0)*sj2);
IkReal x3396=(cj5*sj6);
IkReal x3397=((1.0)*cj5);
IkReal x3398=(cj2*x3386);
IkReal x3399=(cj3*x3385);
IkReal x3400=(r10*x3393);
IkReal x3401=(cj2*x3385);
IkReal x3402=(cj3*x3386);
evalcond[0]=((((-1.0)*r01*x3393))+(((-1.0)*x3388))+(((-1.0)*x3386*x3395)));
evalcond[1]=((((-1.0)*x3385*x3395))+(((-1.0)*x3394))+(((-1.0)*r11*x3393)));
evalcond[2]=((((-1.0)*cj5*x3400))+((cj2*x3399))+((r11*x3396))+((r12*sj5))+((sj3*x3386)));
evalcond[3]=(((r01*x3396))+(((-1.0)*x3385*x3389))+((cj3*x3398))+((r02*sj5))+(((-1.0)*cj5*r00*x3393)));
evalcond[4]=((((-1.0)*x3389*x3401))+(((-1.0)*sj5*x3400))+x3402+((r11*x3390))+(((-1.0)*r12*x3397)));
evalcond[5]=(((r01*x3390))+(((-1.0)*x3399))+(((-1.0)*x3389*x3398))+(((-1.0)*r00*sj5*x3393))+(((-1.0)*r02*x3397)));
evalcond[6]=(((r01*x3391))+(((0.31436)*x3399))+((x3387*x3398))+(((-1.0)*x3386*x3392))+(((-1.0)*px))+(((0.42076)*x3385))+(((0.0003501)*x3388)));
evalcond[7]=((((-0.31436)*x3402))+(((-1.0)*x3385*x3392))+(((-0.42076)*x3386))+(((-1.0)*py))+((x3387*x3401))+((r11*x3391))+(((0.0003501)*x3394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(sj2,-1);
if(!x3408.valid){
continue;
}
IkReal x3403=x3408.value;
IkReal x3404=(cj5*sj2);
IkReal x3405=((1.0)*r11);
IkReal x3406=(r10*sj6);
IkReal x3407=(cj2*cj3);
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(sj3,-1);
if(!x3409.valid){
continue;
}
if( IKabs((x3403*(((((-1.0)*x3406))+(((-1.0)*cj6*x3405)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3403*(x3409.value)*((((x3406*x3407))+((cj6*r10*x3404))+((cj6*r11*x3407))+(((-1.0)*sj6*x3404*x3405))+(((-1.0)*r12*sj2*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3403*(((((-1.0)*x3406))+(((-1.0)*cj6*x3405))))))+IKsqr((x3403*(x3409.value)*((((x3406*x3407))+((cj6*r10*x3404))+((cj6*r11*x3407))+(((-1.0)*sj6*x3404*x3405))+(((-1.0)*r12*sj2*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x3403*(((((-1.0)*x3406))+(((-1.0)*cj6*x3405))))), (x3403*(x3409.value)*((((x3406*x3407))+((cj6*r10*x3404))+((cj6*r11*x3407))+(((-1.0)*sj6*x3404*x3405))+(((-1.0)*r12*sj2*sj5))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3410=IKsin(j1);
IkReal x3411=IKcos(j1);
IkReal x3412=((0.31436)*sj3);
IkReal x3413=(r00*sj6);
IkReal x3414=((1.0)*sj3);
IkReal x3415=(sj5*sj6);
IkReal x3416=((0.0003501)*cj6);
IkReal x3417=((0.01275)*sj2);
IkReal x3418=((1.0)*cj6);
IkReal x3419=(r10*sj6);
IkReal x3420=((1.0)*sj2);
IkReal x3421=(cj5*sj6);
IkReal x3422=((1.0)*cj5);
IkReal x3423=(cj2*x3411);
IkReal x3424=(cj3*x3410);
IkReal x3425=(r10*x3418);
IkReal x3426=(cj2*x3410);
IkReal x3427=(cj3*x3411);
evalcond[0]=((((-1.0)*x3413))+(((-1.0)*x3411*x3420))+(((-1.0)*r01*x3418)));
evalcond[1]=((((-1.0)*x3419))+(((-1.0)*x3410*x3420))+(((-1.0)*r11*x3418)));
evalcond[2]=(((sj3*x3411))+((r12*sj5))+(((-1.0)*cj5*x3425))+((cj2*x3424))+((r11*x3421)));
evalcond[3]=((((-1.0)*cj5*r00*x3418))+((r02*sj5))+(((-1.0)*x3410*x3414))+((cj3*x3423))+((r01*x3421)));
evalcond[4]=((((-1.0)*r12*x3422))+x3427+((r11*x3415))+(((-1.0)*sj5*x3425))+(((-1.0)*x3414*x3426)));
evalcond[5]=(((r01*x3415))+(((-1.0)*x3424))+(((-1.0)*r00*sj5*x3418))+(((-1.0)*r02*x3422))+(((-1.0)*x3414*x3423)));
evalcond[6]=((((-1.0)*x3411*x3417))+((x3412*x3423))+(((-1.0)*px))+((r01*x3416))+(((0.0003501)*x3413))+(((0.31436)*x3424))+(((0.42076)*x3410)));
evalcond[7]=(((x3412*x3426))+((r11*x3416))+(((-1.0)*py))+(((-0.42076)*x3411))+(((0.0003501)*x3419))+(((-0.31436)*x3427))+(((-1.0)*x3410*x3417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3428=((1.0)*sj6);
IkReal x3429=((1.0)*cj6);
CheckValue<IkReal> x3430=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3430.valid){
continue;
}
CheckValue<IkReal> x3431 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3428))+(((-1.0)*r11*x3429)))),IkReal(((((-1.0)*r01*x3429))+(((-1.0)*r00*x3428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3431.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3430.value)))+(x3431.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x3432=IKsin(j1);
IkReal x3433=IKcos(j1);
IkReal x3434=((0.31436)*sj3);
IkReal x3435=(r00*sj6);
IkReal x3436=((1.0)*sj3);
IkReal x3437=(sj5*sj6);
IkReal x3438=((0.0003501)*cj6);
IkReal x3439=((0.01275)*sj2);
IkReal x3440=((1.0)*cj6);
IkReal x3441=(r10*sj6);
IkReal x3442=((1.0)*sj2);
IkReal x3443=(cj5*sj6);
IkReal x3444=((1.0)*cj5);
IkReal x3445=(cj2*x3433);
IkReal x3446=(cj3*x3432);
IkReal x3447=(r10*x3440);
IkReal x3448=(cj2*x3432);
IkReal x3449=(cj3*x3433);
evalcond[0]=((((-1.0)*x3433*x3442))+(((-1.0)*x3435))+(((-1.0)*r01*x3440)));
evalcond[1]=((((-1.0)*x3432*x3442))+(((-1.0)*x3441))+(((-1.0)*r11*x3440)));
evalcond[2]=(((r11*x3443))+((sj3*x3433))+((r12*sj5))+(((-1.0)*cj5*x3447))+((cj2*x3446)));
evalcond[3]=(((cj3*x3445))+(((-1.0)*x3432*x3436))+((r02*sj5))+(((-1.0)*cj5*r00*x3440))+((r01*x3443)));
evalcond[4]=((((-1.0)*sj5*x3447))+x3449+(((-1.0)*x3436*x3448))+(((-1.0)*r12*x3444))+((r11*x3437)));
evalcond[5]=(((r01*x3437))+(((-1.0)*x3446))+(((-1.0)*r00*sj5*x3440))+(((-1.0)*x3436*x3445))+(((-1.0)*r02*x3444)));
evalcond[6]=(((r01*x3438))+(((0.0003501)*x3435))+(((0.31436)*x3446))+((x3434*x3445))+(((-1.0)*x3433*x3439))+(((-1.0)*px))+(((0.42076)*x3432)));
evalcond[7]=((((-1.0)*x3432*x3439))+((x3434*x3448))+(((0.0003501)*x3441))+(((-0.31436)*x3449))+(((-1.0)*py))+((r11*x3438))+(((-0.42076)*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3450=((1.0)*sj6);
IkReal x3451=((1.0)*cj6);
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3450))+(((-1.0)*r11*x3451)))),IkReal(((((-1.0)*r01*x3451))+(((-1.0)*r00*x3450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3452.value)))+(x3453.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3454=IKcos(j1);
IkReal x3455=IKsin(j1);
IkReal x3456=(cj6*r01);
IkReal x3457=((0.31436)*cj3);
IkReal x3458=(r00*sj6);
IkReal x3459=(r10*sj6);
IkReal x3460=(cj6*r11);
IkReal x3461=((0.31436)*cj2*sj3);
IkReal x3462=(sj2*x3455);
IkReal x3463=(sj2*x3454);
evalcond[0]=((((-1.0)*x3458))+(((-1.0)*x3456))+(((-1.0)*x3463)));
evalcond[1]=((((-1.0)*x3459))+(((-1.0)*x3462))+(((-1.0)*x3460)));
evalcond[2]=((((0.0003501)*x3458))+(((0.0003501)*x3456))+((x3455*x3457))+(((-1.0)*px))+((x3454*x3461))+(((0.42076)*x3455))+(((-0.01275)*x3463)));
evalcond[3]=(((x3455*x3461))+(((-0.42076)*x3454))+(((0.0003501)*x3459))+(((-1.0)*x3454*x3457))+(((-1.0)*py))+(((-0.01275)*x3462))+(((0.0003501)*x3460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x3464=((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)));
j5eval[0]=x3464;
j5eval[1]=IKsign(x3464);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x3465=cj6*cj6;
IkReal x3466=r21*r21;
IkReal x3467=(sj2*sj3);
IkReal x3468=(cj6*r20);
IkReal x3469=(cj3*sj2);
IkReal x3470=(r21*sj6);
IkReal x3471=((r22*r22)+((x3465*(r20*r20)))+(((-2.0)*x3468*x3470))+x3466+(((-1.0)*x3465*x3466)));
j5eval[0]=x3471;
j5eval[1]=((IKabs(((((-1.0)*x3467*x3470))+((x3467*x3468))+((r22*x3469)))))+(IKabs(((((-1.0)*x3468*x3469))+((x3469*x3470))+((r22*x3467))))));
j5eval[2]=IKsign(x3471);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x3472=cj6*cj6;
IkReal x3473=(r11*r21);
IkReal x3474=(cj6*sj6);
IkReal x3475=((((-1.0)*r12*r22))+((r10*r21*x3474))+((r11*r20*x3474))+(((-1.0)*x3473))+(((-1.0)*r10*r20*x3472))+((x3472*x3473)));
j5eval[0]=x3475;
j5eval[1]=IKsign(x3475);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x3476=(cj1*sj3);
IkReal x3477=(cj3*sj1);
IkReal x3478=(r21*sj6);
IkReal x3479=((1.0)*r22);
IkReal x3480=((1.0)*cj6*r20);
IkReal x3481=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x3481;
j5eval[1]=IKsign(x3481);
j5eval[2]=((IKabs((((x3477*x3478))+((x3476*x3478))+(((-1.0)*x3477*x3480))+(((-1.0)*x3476*x3480)))))+(IKabs(((((-1.0)*x3477*x3479))+(((-1.0)*x3476*x3479))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x3482=(sj1*sj3);
IkReal x3483=(cj6*r20);
IkReal x3484=((1.0)*sj6);
IkReal x3485=((1.0)*cj1*cj3);
IkReal x3486=((((-1.0)*r10*x3484))+(((-1.0)*cj6*r11)));
j5eval[0]=x3486;
j5eval[1]=((IKabs(((((-1.0)*r22*x3485))+((r22*x3482)))))+(IKabs(((((-1.0)*x3483*x3485))+((cj1*cj3*r21*sj6))+(((-1.0)*r21*x3482*x3484))+((x3482*x3483))))));
j5eval[2]=IKsign(x3486);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x3487=cj6*cj6;
IkReal x3488=(cj6*r20);
IkReal x3489=(cj1*sj3);
IkReal x3490=(r11*r21);
IkReal x3491=(cj3*sj1);
IkReal x3492=(r21*sj6);
IkReal x3493=((((-1.0)*r12*r22))+((r11*sj6*x3488))+(((-1.0)*r10*r20*x3487))+(((-1.0)*x3490))+((x3487*x3490))+((cj6*r10*x3492)));
j5eval[0]=x3493;
j5eval[1]=((IKabs((((x3491*x3492))+(((-1.0)*x3488*x3491))+(((-1.0)*x3488*x3489))+((x3489*x3492)))))+(IKabs((((r22*x3491))+((r22*x3489))))));
j5eval[2]=IKsign(x3493);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3494=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x3494;
j5eval[1]=IKsign(x3494);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3495=((1.0)*cj6);
IkReal x3496=((((-1.0)*r10*sj6))+(((-1.0)*r11*x3495)));
j5eval[0]=x3496;
j5eval[1]=IKsign(x3496);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x3495)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3497=cj6*cj6;
IkReal x3498=(r11*r21);
IkReal x3499=(r21*sj6);
IkReal x3500=(cj6*r20);
IkReal x3501=((((-1.0)*r12*r22))+((r11*sj6*x3500))+((x3497*x3498))+(((-1.0)*r10*r20*x3497))+(((-1.0)*x3498))+((cj6*r10*x3499)));
j5eval[0]=x3501;
j5eval[1]=IKsign(x3501);
j5eval[2]=((IKabs((x3499+(((-1.0)*x3500)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3502=cj6*cj6;
IkReal x3503=(r21*sj6);
IkReal x3504=(cj6*r20);
IkReal x3505=(r11*r21);
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(IKsign((((cj6*r10*x3503))+(((-1.0)*r12*r22))+((r11*sj6*x3504))+((x3502*x3505))+(((-1.0)*x3505))+(((-1.0)*r10*r20*x3502)))),-1);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507 = IKatan2WithCheck(IkReal((x3503+(((-1.0)*x3504)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3507.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3506.value)))+(x3507.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3508=IKcos(j5);
IkReal x3509=IKsin(j5);
IkReal x3510=(cj6*r10);
IkReal x3511=(cj6*r00);
IkReal x3512=(cj6*r20);
IkReal x3513=(sj6*x3508);
IkReal x3514=(sj6*x3509);
IkReal x3515=((1.0)*x3508);
IkReal x3516=((1.0)*x3509);
evalcond[0]=((((-1.0)*x3512*x3515))+((r21*x3513))+((r22*x3509)));
evalcond[1]=((((-1.0)*x3510*x3515))+((r12*x3509))+((r11*x3513)));
evalcond[2]=((((-1.0)*x3512*x3516))+((r21*x3514))+(((-1.0)*r22*x3515)));
evalcond[3]=((((-1.0)*r02*x3515))+(((-1.0)*x3511*x3516))+((r01*x3514)));
evalcond[4]=((1.0)+(((-1.0)*x3511*x3515))+((r01*x3513))+((r02*x3509)));
evalcond[5]=((1.0)+(((-1.0)*x3510*x3516))+((r11*x3514))+(((-1.0)*r12*x3515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3517=((1.0)*cj6);
CheckValue<IkReal> x3518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x3517)))),-1);
if(!x3518.valid){
continue;
}
CheckValue<IkReal> x3519 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x3517)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3519.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3518.value)))+(x3519.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3520=IKcos(j5);
IkReal x3521=IKsin(j5);
IkReal x3522=(cj6*r10);
IkReal x3523=(cj6*r00);
IkReal x3524=(cj6*r20);
IkReal x3525=(sj6*x3520);
IkReal x3526=(sj6*x3521);
IkReal x3527=((1.0)*x3520);
IkReal x3528=((1.0)*x3521);
evalcond[0]=((((-1.0)*x3524*x3527))+((r21*x3525))+((r22*x3521)));
evalcond[1]=((((-1.0)*x3522*x3527))+((r11*x3525))+((r12*x3521)));
evalcond[2]=((((-1.0)*x3524*x3528))+((r21*x3526))+(((-1.0)*r22*x3527)));
evalcond[3]=((((-1.0)*r02*x3527))+((r01*x3526))+(((-1.0)*x3523*x3528)));
evalcond[4]=((1.0)+((r01*x3525))+((r02*x3521))+(((-1.0)*x3523*x3527)));
evalcond[5]=((1.0)+(((-1.0)*x3522*x3528))+((r11*x3526))+(((-1.0)*r12*x3527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x3529.valid){
continue;
}
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3529.value)))+(x3530.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3531=IKcos(j5);
IkReal x3532=IKsin(j5);
IkReal x3533=(cj6*r10);
IkReal x3534=(cj6*r00);
IkReal x3535=(cj6*r20);
IkReal x3536=(sj6*x3531);
IkReal x3537=(sj6*x3532);
IkReal x3538=((1.0)*x3531);
IkReal x3539=((1.0)*x3532);
evalcond[0]=((((-1.0)*x3535*x3538))+((r22*x3532))+((r21*x3536)));
evalcond[1]=(((r11*x3536))+((r12*x3532))+(((-1.0)*x3533*x3538)));
evalcond[2]=((((-1.0)*x3535*x3539))+((r21*x3537))+(((-1.0)*r22*x3538)));
evalcond[3]=((((-1.0)*r02*x3538))+((r01*x3537))+(((-1.0)*x3534*x3539)));
evalcond[4]=((1.0)+((r02*x3532))+((r01*x3536))+(((-1.0)*x3534*x3538)));
evalcond[5]=((1.0)+((r11*x3537))+(((-1.0)*r12*x3538))+(((-1.0)*x3533*x3539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x3540=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x3540;
j5eval[1]=IKsign(x3540);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x3541=((1.0)*cj6);
IkReal x3542=((((-1.0)*r21*x3541))+(((-1.0)*r20*sj6)));
j5eval[0]=x3542;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3541))+((r11*sj6))))));
j5eval[2]=IKsign(x3542);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x3543=cj6*cj6;
IkReal x3544=r11*r11;
IkReal x3545=(r11*sj6);
IkReal x3546=(cj6*r10);
IkReal x3547=((r12*r12)+((x3543*(r10*r10)))+(((-1.0)*x3543*x3544))+x3544+(((-2.0)*x3545*x3546)));
j5eval[0]=x3547;
j5eval[1]=IKsign(x3547);
j5eval[2]=((IKabs(r12))+(IKabs((x3545+(((-1.0)*x3546))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3548=cj6*cj6;
IkReal x3549=r11*r11;
IkReal x3550=(r11*sj6);
IkReal x3551=(cj6*r10);
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3549+((x3548*(r10*r10)))+(((-1.0)*x3548*x3549))+(((-2.0)*x3550*x3551)))),-1);
if(!x3552.valid){
continue;
}
CheckValue<IkReal> x3553 = IKatan2WithCheck(IkReal((x3550+(((-1.0)*x3551)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3553.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3552.value)))+(x3553.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3554=IKcos(j5);
IkReal x3555=IKsin(j5);
IkReal x3556=(cj6*r10);
IkReal x3557=(cj6*r00);
IkReal x3558=(cj6*r20);
IkReal x3559=(sj6*x3554);
IkReal x3560=(sj6*x3555);
IkReal x3561=((1.0)*x3554);
IkReal x3562=((1.0)*x3555);
evalcond[0]=(((r21*x3559))+((r22*x3555))+(((-1.0)*x3558*x3561)));
evalcond[1]=(((r12*x3555))+((r11*x3559))+(((-1.0)*x3556*x3561)));
evalcond[2]=(((r21*x3560))+(((-1.0)*r22*x3561))+(((-1.0)*x3558*x3562)));
evalcond[3]=((((-1.0)*r02*x3561))+((r01*x3560))+(((-1.0)*x3557*x3562)));
evalcond[4]=((-1.0)+((r01*x3559))+(((-1.0)*x3557*x3561))+((r02*x3555)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x3561))+((r11*x3560))+(((-1.0)*x3556*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3563=((1.0)*cj6);
CheckValue<IkReal> x3564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3563))+(((-1.0)*r20*sj6)))),-1);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3563))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3564.value)))+(x3565.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3566=IKcos(j5);
IkReal x3567=IKsin(j5);
IkReal x3568=(cj6*r10);
IkReal x3569=(cj6*r00);
IkReal x3570=(cj6*r20);
IkReal x3571=(sj6*x3566);
IkReal x3572=(sj6*x3567);
IkReal x3573=((1.0)*x3566);
IkReal x3574=((1.0)*x3567);
evalcond[0]=(((r21*x3571))+((r22*x3567))+(((-1.0)*x3570*x3573)));
evalcond[1]=((((-1.0)*x3568*x3573))+((r11*x3571))+((r12*x3567)));
evalcond[2]=(((r21*x3572))+(((-1.0)*r22*x3573))+(((-1.0)*x3570*x3574)));
evalcond[3]=(((r01*x3572))+(((-1.0)*x3569*x3574))+(((-1.0)*r02*x3573)));
evalcond[4]=((-1.0)+((r01*x3571))+(((-1.0)*x3569*x3573))+((r02*x3567)));
evalcond[5]=((-1.0)+(((-1.0)*x3568*x3574))+((r11*x3572))+(((-1.0)*r12*x3573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3575 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3575.valid){
continue;
}
CheckValue<IkReal> x3576=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x3576.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3575.value)+(((1.5707963267949)*(x3576.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3577=IKcos(j5);
IkReal x3578=IKsin(j5);
IkReal x3579=(cj6*r10);
IkReal x3580=(cj6*r00);
IkReal x3581=(cj6*r20);
IkReal x3582=(sj6*x3577);
IkReal x3583=(sj6*x3578);
IkReal x3584=((1.0)*x3577);
IkReal x3585=((1.0)*x3578);
evalcond[0]=((((-1.0)*x3581*x3584))+((r22*x3578))+((r21*x3582)));
evalcond[1]=(((r11*x3582))+((r12*x3578))+(((-1.0)*x3579*x3584)));
evalcond[2]=((((-1.0)*r22*x3584))+(((-1.0)*x3581*x3585))+((r21*x3583)));
evalcond[3]=((((-1.0)*r02*x3584))+((r01*x3583))+(((-1.0)*x3580*x3585)));
evalcond[4]=((-1.0)+((r01*x3582))+(((-1.0)*x3580*x3584))+((r02*x3578)));
evalcond[5]=((-1.0)+((r11*x3583))+(((-1.0)*x3579*x3585))+(((-1.0)*r12*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x3586=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x3586;
j5eval[1]=IKsign(x3586);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x3587=((1.0)*cj6);
IkReal x3588=((((-1.0)*r21*x3587))+(((-1.0)*r20*sj6)));
j5eval[0]=x3588;
j5eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x3587)))))+(IKabs(r12)));
j5eval[2]=IKsign(x3588);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x3589=cj6*cj6;
IkReal x3590=r11*r11;
IkReal x3591=(r11*sj6);
IkReal x3592=(cj6*r10);
IkReal x3593=((r12*r12)+(((-1.0)*x3589*x3590))+x3590+(((-2.0)*x3591*x3592))+((x3589*(r10*r10))));
j5eval[0]=x3593;
j5eval[1]=IKsign(x3593);
j5eval[2]=((IKabs(r12))+(IKabs((x3591+(((-1.0)*x3592))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3594=cj6*cj6;
IkReal x3595=r11*r11;
IkReal x3596=(r11*sj6);
IkReal x3597=(cj6*r10);
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(IKsign((((x3594*(r10*r10)))+(r12*r12)+x3595+(((-2.0)*x3596*x3597))+(((-1.0)*x3594*x3595)))),-1);
if(!x3598.valid){
continue;
}
CheckValue<IkReal> x3599 = IKatan2WithCheck(IkReal((x3596+(((-1.0)*x3597)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3599.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3598.value)))+(x3599.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3600=IKcos(j5);
IkReal x3601=IKsin(j5);
IkReal x3602=(cj6*r10);
IkReal x3603=(cj6*r00);
IkReal x3604=(cj6*r20);
IkReal x3605=(sj6*x3600);
IkReal x3606=(sj6*x3601);
IkReal x3607=((1.0)*x3600);
IkReal x3608=((1.0)*x3601);
evalcond[0]=(((r22*x3601))+((r21*x3605))+(((-1.0)*x3604*x3607)));
evalcond[1]=(((r11*x3605))+(((-1.0)*x3602*x3607))+((r12*x3601)));
evalcond[2]=(((r21*x3606))+(((-1.0)*r22*x3607))+(((-1.0)*x3604*x3608)));
evalcond[3]=((((-1.0)*r02*x3607))+(((-1.0)*x3603*x3608))+((r01*x3606)));
evalcond[4]=((-1.0)+((r02*x3601))+(((-1.0)*x3603*x3607))+((r01*x3605)));
evalcond[5]=((-1.0)+((r11*x3606))+(((-1.0)*r12*x3607))+(((-1.0)*x3602*x3608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3609=((1.0)*cj6);
CheckValue<IkReal> x3610 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3609))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3610.valid){
continue;
}
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3609))+(((-1.0)*r20*sj6)))),-1);
if(!x3611.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3610.value)+(((1.5707963267949)*(x3611.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3612=IKcos(j5);
IkReal x3613=IKsin(j5);
IkReal x3614=(cj6*r10);
IkReal x3615=(cj6*r00);
IkReal x3616=(cj6*r20);
IkReal x3617=(sj6*x3612);
IkReal x3618=(sj6*x3613);
IkReal x3619=((1.0)*x3612);
IkReal x3620=((1.0)*x3613);
evalcond[0]=((((-1.0)*x3616*x3619))+((r22*x3613))+((r21*x3617)));
evalcond[1]=(((r11*x3617))+(((-1.0)*x3614*x3619))+((r12*x3613)));
evalcond[2]=(((r21*x3618))+(((-1.0)*r22*x3619))+(((-1.0)*x3616*x3620)));
evalcond[3]=((((-1.0)*r02*x3619))+((r01*x3618))+(((-1.0)*x3615*x3620)));
evalcond[4]=((-1.0)+((r02*x3613))+(((-1.0)*x3615*x3619))+((r01*x3617)));
evalcond[5]=((-1.0)+(((-1.0)*x3614*x3620))+((r11*x3618))+(((-1.0)*r12*x3619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3621 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3621.valid){
continue;
}
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x3622.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3621.value)+(((1.5707963267949)*(x3622.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3623=IKcos(j5);
IkReal x3624=IKsin(j5);
IkReal x3625=(cj6*r10);
IkReal x3626=(cj6*r00);
IkReal x3627=(cj6*r20);
IkReal x3628=(sj6*x3623);
IkReal x3629=(sj6*x3624);
IkReal x3630=((1.0)*x3623);
IkReal x3631=((1.0)*x3624);
evalcond[0]=((((-1.0)*x3627*x3630))+((r21*x3628))+((r22*x3624)));
evalcond[1]=(((r11*x3628))+((r12*x3624))+(((-1.0)*x3625*x3630)));
evalcond[2]=((((-1.0)*x3627*x3631))+((r21*x3629))+(((-1.0)*r22*x3630)));
evalcond[3]=(((r01*x3629))+(((-1.0)*r02*x3630))+(((-1.0)*x3626*x3631)));
evalcond[4]=((-1.0)+((r01*x3628))+((r02*x3624))+(((-1.0)*x3626*x3630)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x3630))+((r11*x3629))+(((-1.0)*x3625*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x3632=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x3632;
j5eval[1]=IKsign(x3632);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x3633=((1.0)*cj6);
IkReal x3634=((((-1.0)*r11*x3633))+(((-1.0)*r10*sj6)));
j5eval[0]=x3634;
j5eval[1]=IKsign(x3634);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x3633))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x3635=cj6*cj6;
IkReal x3636=(r11*r21);
IkReal x3637=(r21*sj6);
IkReal x3638=(cj6*r20);
IkReal x3639=(((cj6*r10*x3637))+((r11*sj6*x3638))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3635))+((x3635*x3636))+(((-1.0)*x3636)));
j5eval[0]=x3639;
j5eval[1]=IKsign(x3639);
j5eval[2]=((IKabs(r22))+(IKabs((x3637+(((-1.0)*x3638))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3640=cj6*cj6;
IkReal x3641=(r21*sj6);
IkReal x3642=(cj6*r20);
IkReal x3643=(r11*r21);
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal((x3641+(((-1.0)*x3642)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(IKsign((((cj6*r10*x3641))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3640))+(((-1.0)*x3643))+((r11*sj6*x3642))+((x3640*x3643)))),-1);
if(!x3645.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3644.value)+(((1.5707963267949)*(x3645.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3646=IKcos(j5);
IkReal x3647=IKsin(j5);
IkReal x3648=(cj6*r10);
IkReal x3649=(cj6*r00);
IkReal x3650=(cj6*r20);
IkReal x3651=(sj6*x3646);
IkReal x3652=(sj6*x3647);
IkReal x3653=((1.0)*x3646);
IkReal x3654=((1.0)*x3647);
evalcond[0]=(((r21*x3651))+(((-1.0)*x3650*x3653))+((r22*x3647)));
evalcond[1]=(((r12*x3647))+((r11*x3651))+(((-1.0)*x3648*x3653)));
evalcond[2]=(((r21*x3652))+(((-1.0)*x3650*x3654))+(((-1.0)*r22*x3653)));
evalcond[3]=((((-1.0)*r02*x3653))+(((-1.0)*x3649*x3654))+((r01*x3652)));
evalcond[4]=((1.0)+((r02*x3647))+(((-1.0)*x3649*x3653))+((r01*x3651)));
evalcond[5]=((1.0)+((r11*x3652))+(((-1.0)*x3648*x3654))+(((-1.0)*r12*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3655=((1.0)*cj6);
CheckValue<IkReal> x3656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x3655)))),-1);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x3655)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3656.value)))+(x3657.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3658=IKcos(j5);
IkReal x3659=IKsin(j5);
IkReal x3660=(cj6*r10);
IkReal x3661=(cj6*r00);
IkReal x3662=(cj6*r20);
IkReal x3663=(sj6*x3658);
IkReal x3664=(sj6*x3659);
IkReal x3665=((1.0)*x3658);
IkReal x3666=((1.0)*x3659);
evalcond[0]=((((-1.0)*x3662*x3665))+((r21*x3663))+((r22*x3659)));
evalcond[1]=((((-1.0)*x3660*x3665))+((r12*x3659))+((r11*x3663)));
evalcond[2]=((((-1.0)*x3662*x3666))+(((-1.0)*r22*x3665))+((r21*x3664)));
evalcond[3]=((((-1.0)*x3661*x3666))+(((-1.0)*r02*x3665))+((r01*x3664)));
evalcond[4]=((1.0)+(((-1.0)*x3661*x3665))+((r01*x3663))+((r02*x3659)));
evalcond[5]=((1.0)+(((-1.0)*x3660*x3666))+((r11*x3664))+(((-1.0)*r12*x3665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x3667.valid){
continue;
}
CheckValue<IkReal> x3668 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3668.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3667.value)))+(x3668.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3669=IKcos(j5);
IkReal x3670=IKsin(j5);
IkReal x3671=(cj6*r10);
IkReal x3672=(cj6*r00);
IkReal x3673=(cj6*r20);
IkReal x3674=(sj6*x3669);
IkReal x3675=(sj6*x3670);
IkReal x3676=((1.0)*x3669);
IkReal x3677=((1.0)*x3670);
evalcond[0]=((((-1.0)*x3673*x3676))+((r21*x3674))+((r22*x3670)));
evalcond[1]=((((-1.0)*x3671*x3676))+((r11*x3674))+((r12*x3670)));
evalcond[2]=((((-1.0)*x3673*x3677))+((r21*x3675))+(((-1.0)*r22*x3676)));
evalcond[3]=(((r01*x3675))+(((-1.0)*x3672*x3677))+(((-1.0)*r02*x3676)));
evalcond[4]=((1.0)+((r01*x3674))+(((-1.0)*x3672*x3676))+((r02*x3670)));
evalcond[5]=((1.0)+(((-1.0)*x3671*x3677))+((r11*x3675))+(((-1.0)*r12*x3676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3678=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x3678;
j5eval[1]=IKsign(x3678);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3679=((1.0)*cj6);
IkReal x3680=((((-1.0)*r21*x3679))+(((-1.0)*r20*sj6)));
j5eval[0]=x3680;
j5eval[1]=((IKabs(r12))+(IKabs((((r11*sj6))+(((-1.0)*r10*x3679))))));
j5eval[2]=IKsign(x3680);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3681=cj6*cj6;
IkReal x3682=r11*r11;
IkReal x3683=(r11*sj6);
IkReal x3684=(cj6*r10);
IkReal x3685=((r12*r12)+(((-1.0)*x3681*x3682))+(((-2.0)*x3683*x3684))+x3682+((x3681*(r10*r10))));
j5eval[0]=x3685;
j5eval[1]=IKsign(x3685);
j5eval[2]=((IKabs((x3683+(((-1.0)*x3684)))))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3686=cj6*cj6;
IkReal x3687=r11*r11;
IkReal x3688=(r11*sj6);
IkReal x3689=(cj6*r10);
CheckValue<IkReal> x3690=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3686*(r10*r10)))+(((-2.0)*x3688*x3689))+x3687+(((-1.0)*x3686*x3687)))),-1);
if(!x3690.valid){
continue;
}
CheckValue<IkReal> x3691 = IKatan2WithCheck(IkReal((x3688+(((-1.0)*x3689)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3691.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3690.value)))+(x3691.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3692=IKcos(j5);
IkReal x3693=IKsin(j5);
IkReal x3694=(cj6*r10);
IkReal x3695=(cj6*r00);
IkReal x3696=(cj6*r20);
IkReal x3697=(sj6*x3692);
IkReal x3698=(sj6*x3693);
IkReal x3699=((1.0)*x3692);
IkReal x3700=((1.0)*x3693);
evalcond[0]=(((r21*x3697))+((r22*x3693))+(((-1.0)*x3696*x3699)));
evalcond[1]=(((r11*x3697))+(((-1.0)*x3694*x3699))+((r12*x3693)));
evalcond[2]=((((-1.0)*r22*x3699))+((r21*x3698))+(((-1.0)*x3696*x3700)));
evalcond[3]=(((r01*x3698))+(((-1.0)*r02*x3699))+(((-1.0)*x3695*x3700)));
evalcond[4]=((-1.0)+((r01*x3697))+((r02*x3693))+(((-1.0)*x3695*x3699)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x3699))+(((-1.0)*x3694*x3700))+((r11*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3701=((1.0)*cj6);
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3701))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
CheckValue<IkReal> x3703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3701))+(((-1.0)*r20*sj6)))),-1);
if(!x3703.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3702.value)+(((1.5707963267949)*(x3703.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3704=IKcos(j5);
IkReal x3705=IKsin(j5);
IkReal x3706=(cj6*r10);
IkReal x3707=(cj6*r00);
IkReal x3708=(cj6*r20);
IkReal x3709=(sj6*x3704);
IkReal x3710=(sj6*x3705);
IkReal x3711=((1.0)*x3704);
IkReal x3712=((1.0)*x3705);
evalcond[0]=(((r21*x3709))+(((-1.0)*x3708*x3711))+((r22*x3705)));
evalcond[1]=(((r12*x3705))+((r11*x3709))+(((-1.0)*x3706*x3711)));
evalcond[2]=(((r21*x3710))+(((-1.0)*x3708*x3712))+(((-1.0)*r22*x3711)));
evalcond[3]=((((-1.0)*x3707*x3712))+(((-1.0)*r02*x3711))+((r01*x3710)));
evalcond[4]=((-1.0)+((r01*x3709))+(((-1.0)*x3707*x3711))+((r02*x3705)));
evalcond[5]=((-1.0)+((r11*x3710))+(((-1.0)*r12*x3711))+(((-1.0)*x3706*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3713 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3713.valid){
continue;
}
CheckValue<IkReal> x3714=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x3714.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3713.value)+(((1.5707963267949)*(x3714.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3715=IKcos(j5);
IkReal x3716=IKsin(j5);
IkReal x3717=(cj6*r10);
IkReal x3718=(cj6*r00);
IkReal x3719=(cj6*r20);
IkReal x3720=(sj6*x3715);
IkReal x3721=(sj6*x3716);
IkReal x3722=((1.0)*x3715);
IkReal x3723=((1.0)*x3716);
evalcond[0]=((((-1.0)*x3719*x3722))+((r22*x3716))+((r21*x3720)));
evalcond[1]=(((r12*x3716))+((r11*x3720))+(((-1.0)*x3717*x3722)));
evalcond[2]=((((-1.0)*r22*x3722))+(((-1.0)*x3719*x3723))+((r21*x3721)));
evalcond[3]=(((r01*x3721))+(((-1.0)*x3718*x3723))+(((-1.0)*r02*x3722)));
evalcond[4]=((-1.0)+((r01*x3720))+(((-1.0)*x3718*x3722))+((r02*x3716)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x3722))+((r11*x3721))+(((-1.0)*x3717*x3723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x3724=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x3724;
j5eval[1]=IKsign(x3724);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x3725=((1.0)*cj6);
IkReal x3726=((((-1.0)*r10*sj6))+(((-1.0)*r11*x3725)));
j5eval[0]=x3726;
j5eval[1]=IKsign(x3726);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x3725)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x3727=cj6*cj6;
IkReal x3728=(r11*r21);
IkReal x3729=(r21*sj6);
IkReal x3730=(cj6*r20);
IkReal x3731=(((x3727*x3728))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3727))+((r11*sj6*x3730))+(((-1.0)*x3728))+((cj6*r10*x3729)));
j5eval[0]=x3731;
j5eval[1]=IKsign(x3731);
j5eval[2]=((IKabs(r22))+(IKabs((x3729+(((-1.0)*x3730))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3732=cj6*cj6;
IkReal x3733=(r21*sj6);
IkReal x3734=(cj6*r20);
IkReal x3735=(r11*r21);
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal((x3733+(((-1.0)*x3734)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3732))+((x3732*x3735))+((r11*sj6*x3734))+((cj6*r10*x3733))+(((-1.0)*x3735)))),-1);
if(!x3737.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3736.value)+(((1.5707963267949)*(x3737.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3738=IKcos(j5);
IkReal x3739=IKsin(j5);
IkReal x3740=(cj6*r10);
IkReal x3741=(cj6*r00);
IkReal x3742=(cj6*r20);
IkReal x3743=(sj6*x3738);
IkReal x3744=(sj6*x3739);
IkReal x3745=((1.0)*x3738);
IkReal x3746=((1.0)*x3739);
evalcond[0]=(((r22*x3739))+(((-1.0)*x3742*x3745))+((r21*x3743)));
evalcond[1]=((((-1.0)*x3740*x3745))+((r12*x3739))+((r11*x3743)));
evalcond[2]=((((-1.0)*r22*x3745))+(((-1.0)*x3742*x3746))+((r21*x3744)));
evalcond[3]=(((r01*x3744))+(((-1.0)*x3741*x3746))+(((-1.0)*r02*x3745)));
evalcond[4]=((1.0)+((r01*x3743))+((r02*x3739))+(((-1.0)*x3741*x3745)));
evalcond[5]=((1.0)+(((-1.0)*x3740*x3746))+(((-1.0)*r12*x3745))+((r11*x3744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3747=((1.0)*cj6);
CheckValue<IkReal> x3748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x3747)))),-1);
if(!x3748.valid){
continue;
}
CheckValue<IkReal> x3749 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3747))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3749.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3748.value)))+(x3749.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3750=IKcos(j5);
IkReal x3751=IKsin(j5);
IkReal x3752=(cj6*r10);
IkReal x3753=(cj6*r00);
IkReal x3754=(cj6*r20);
IkReal x3755=(sj6*x3750);
IkReal x3756=(sj6*x3751);
IkReal x3757=((1.0)*x3750);
IkReal x3758=((1.0)*x3751);
evalcond[0]=(((r22*x3751))+(((-1.0)*x3754*x3757))+((r21*x3755)));
evalcond[1]=((((-1.0)*x3752*x3757))+((r12*x3751))+((r11*x3755)));
evalcond[2]=((((-1.0)*r22*x3757))+(((-1.0)*x3754*x3758))+((r21*x3756)));
evalcond[3]=(((r01*x3756))+(((-1.0)*x3753*x3758))+(((-1.0)*r02*x3757)));
evalcond[4]=((1.0)+((r01*x3755))+(((-1.0)*x3753*x3757))+((r02*x3751)));
evalcond[5]=((1.0)+(((-1.0)*x3752*x3758))+(((-1.0)*r12*x3757))+((r11*x3756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x3759.valid){
continue;
}
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3759.value)))+(x3760.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3761=IKcos(j5);
IkReal x3762=IKsin(j5);
IkReal x3763=(cj6*r10);
IkReal x3764=(cj6*r00);
IkReal x3765=(cj6*r20);
IkReal x3766=(sj6*x3761);
IkReal x3767=(sj6*x3762);
IkReal x3768=((1.0)*x3761);
IkReal x3769=((1.0)*x3762);
evalcond[0]=(((r22*x3762))+((r21*x3766))+(((-1.0)*x3765*x3768)));
evalcond[1]=((((-1.0)*x3763*x3768))+((r11*x3766))+((r12*x3762)));
evalcond[2]=(((r21*x3767))+(((-1.0)*r22*x3768))+(((-1.0)*x3765*x3769)));
evalcond[3]=((((-1.0)*x3764*x3769))+(((-1.0)*r02*x3768))+((r01*x3767)));
evalcond[4]=((1.0)+((r02*x3762))+(((-1.0)*x3764*x3768))+((r01*x3766)));
evalcond[5]=((1.0)+(((-1.0)*x3763*x3769))+((r11*x3767))+(((-1.0)*r12*x3768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x3770=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x3770;
j5eval[1]=IKsign(x3770);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x3771=((1.0)*cj6);
IkReal x3772=((((-1.0)*r10*sj6))+(((-1.0)*r11*x3771)));
j5eval[0]=x3772;
j5eval[1]=IKsign(x3772);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3771))+((r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x3773=cj6*cj6;
IkReal x3774=(r11*r21);
IkReal x3775=(r21*sj6);
IkReal x3776=(cj6*r20);
IkReal x3777=((((-1.0)*r10*r20*x3773))+((r11*sj6*x3776))+(((-1.0)*r12*r22))+((x3773*x3774))+(((-1.0)*x3774))+((cj6*r10*x3775)));
j5eval[0]=x3777;
j5eval[1]=IKsign(x3777);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x3776))+x3775))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3778=cj6*cj6;
IkReal x3779=(r21*sj6);
IkReal x3780=(cj6*r20);
IkReal x3781=(r11*r21);
CheckValue<IkReal> x3782=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x3778))+(((-1.0)*r12*r22))+(((-1.0)*x3781))+((x3778*x3781))+((cj6*r10*x3779))+((r11*sj6*x3780)))),-1);
if(!x3782.valid){
continue;
}
CheckValue<IkReal> x3783 = IKatan2WithCheck(IkReal(((((-1.0)*x3780))+x3779)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3783.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3782.value)))+(x3783.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3784=IKcos(j5);
IkReal x3785=IKsin(j5);
IkReal x3786=(cj6*r10);
IkReal x3787=(cj6*r00);
IkReal x3788=(cj6*r20);
IkReal x3789=(sj6*x3784);
IkReal x3790=(sj6*x3785);
IkReal x3791=((1.0)*x3784);
IkReal x3792=((1.0)*x3785);
evalcond[0]=(((r22*x3785))+((r21*x3789))+(((-1.0)*x3788*x3791)));
evalcond[1]=(((r12*x3785))+(((-1.0)*x3786*x3791))+((r11*x3789)));
evalcond[2]=(((r21*x3790))+(((-1.0)*r22*x3791))+(((-1.0)*x3788*x3792)));
evalcond[3]=((((-1.0)*r02*x3791))+((r01*x3790))+(((-1.0)*x3787*x3792)));
evalcond[4]=((1.0)+((r02*x3785))+((r01*x3789))+(((-1.0)*x3787*x3791)));
evalcond[5]=((1.0)+(((-1.0)*r12*x3791))+(((-1.0)*x3786*x3792))+((r11*x3790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3793=((1.0)*cj6);
CheckValue<IkReal> x3794 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x3793)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3793))+(((-1.0)*r10*sj6)))),-1);
if(!x3795.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3794.value)+(((1.5707963267949)*(x3795.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3796=IKcos(j5);
IkReal x3797=IKsin(j5);
IkReal x3798=(cj6*r10);
IkReal x3799=(cj6*r00);
IkReal x3800=(cj6*r20);
IkReal x3801=(sj6*x3796);
IkReal x3802=(sj6*x3797);
IkReal x3803=((1.0)*x3796);
IkReal x3804=((1.0)*x3797);
evalcond[0]=(((r22*x3797))+((r21*x3801))+(((-1.0)*x3800*x3803)));
evalcond[1]=(((r11*x3801))+((r12*x3797))+(((-1.0)*x3798*x3803)));
evalcond[2]=(((r21*x3802))+(((-1.0)*x3800*x3804))+(((-1.0)*r22*x3803)));
evalcond[3]=(((r01*x3802))+(((-1.0)*r02*x3803))+(((-1.0)*x3799*x3804)));
evalcond[4]=((1.0)+((r01*x3801))+((r02*x3797))+(((-1.0)*x3799*x3803)));
evalcond[5]=((1.0)+((r11*x3802))+(((-1.0)*r12*x3803))+(((-1.0)*x3798*x3804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x3805.valid){
continue;
}
CheckValue<IkReal> x3806 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3806.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3805.value)))+(x3806.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3807=IKcos(j5);
IkReal x3808=IKsin(j5);
IkReal x3809=(cj6*r10);
IkReal x3810=(cj6*r00);
IkReal x3811=(cj6*r20);
IkReal x3812=(sj6*x3807);
IkReal x3813=(sj6*x3808);
IkReal x3814=((1.0)*x3807);
IkReal x3815=((1.0)*x3808);
evalcond[0]=(((r21*x3812))+((r22*x3808))+(((-1.0)*x3811*x3814)));
evalcond[1]=(((r11*x3812))+((r12*x3808))+(((-1.0)*x3809*x3814)));
evalcond[2]=((((-1.0)*r22*x3814))+((r21*x3813))+(((-1.0)*x3811*x3815)));
evalcond[3]=((((-1.0)*r02*x3814))+(((-1.0)*x3810*x3815))+((r01*x3813)));
evalcond[4]=((1.0)+(((-1.0)*x3810*x3814))+((r02*x3808))+((r01*x3812)));
evalcond[5]=((1.0)+(((-1.0)*r12*x3814))+((r11*x3813))+(((-1.0)*x3809*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x3816=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x3816;
j5eval[1]=IKsign(x3816);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x3817=((1.0)*cj6);
IkReal x3818=((((-1.0)*r21*x3817))+(((-1.0)*r20*sj6)));
j5eval[0]=x3818;
j5eval[1]=((IKabs(r12))+(IKabs((((r11*sj6))+(((-1.0)*r10*x3817))))));
j5eval[2]=IKsign(x3818);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x3819=cj6*cj6;
IkReal x3820=r11*r11;
IkReal x3821=(r11*sj6);
IkReal x3822=(cj6*r10);
IkReal x3823=((r12*r12)+(((-1.0)*x3819*x3820))+((x3819*(r10*r10)))+x3820+(((-2.0)*x3821*x3822)));
j5eval[0]=x3823;
j5eval[1]=IKsign(x3823);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3822))+x3821))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3824=cj6*cj6;
IkReal x3825=r11*r11;
IkReal x3826=(r11*sj6);
IkReal x3827=(cj6*r10);
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3824*(r10*r10)))+(((-1.0)*x3824*x3825))+x3825+(((-2.0)*x3826*x3827)))),-1);
if(!x3828.valid){
continue;
}
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal(((((-1.0)*x3827))+x3826)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3828.value)))+(x3829.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3830=IKcos(j5);
IkReal x3831=IKsin(j5);
IkReal x3832=(cj6*r10);
IkReal x3833=(cj6*r00);
IkReal x3834=(cj6*r20);
IkReal x3835=(sj6*x3830);
IkReal x3836=(sj6*x3831);
IkReal x3837=((1.0)*x3830);
IkReal x3838=((1.0)*x3831);
evalcond[0]=(((r21*x3835))+(((-1.0)*x3834*x3837))+((r22*x3831)));
evalcond[1]=((((-1.0)*x3832*x3837))+((r12*x3831))+((r11*x3835)));
evalcond[2]=(((r21*x3836))+(((-1.0)*r22*x3837))+(((-1.0)*x3834*x3838)));
evalcond[3]=((((-1.0)*x3833*x3838))+((r01*x3836))+(((-1.0)*r02*x3837)));
evalcond[4]=((-1.0)+((r02*x3831))+(((-1.0)*x3833*x3837))+((r01*x3835)));
evalcond[5]=((-1.0)+(((-1.0)*x3832*x3838))+(((-1.0)*r12*x3837))+((r11*x3836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3839=((1.0)*cj6);
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3839))+(((-1.0)*r20*sj6)))),-1);
if(!x3840.valid){
continue;
}
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3839))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3840.value)))+(x3841.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3842=IKcos(j5);
IkReal x3843=IKsin(j5);
IkReal x3844=(cj6*r10);
IkReal x3845=(cj6*r00);
IkReal x3846=(cj6*r20);
IkReal x3847=(sj6*x3842);
IkReal x3848=(sj6*x3843);
IkReal x3849=((1.0)*x3842);
IkReal x3850=((1.0)*x3843);
evalcond[0]=(((r21*x3847))+((r22*x3843))+(((-1.0)*x3846*x3849)));
evalcond[1]=(((r12*x3843))+(((-1.0)*x3844*x3849))+((r11*x3847)));
evalcond[2]=(((r21*x3848))+(((-1.0)*r22*x3849))+(((-1.0)*x3846*x3850)));
evalcond[3]=((((-1.0)*r02*x3849))+((r01*x3848))+(((-1.0)*x3845*x3850)));
evalcond[4]=((-1.0)+(((-1.0)*x3845*x3849))+((r01*x3847))+((r02*x3843)));
evalcond[5]=((-1.0)+(((-1.0)*x3844*x3850))+(((-1.0)*r12*x3849))+((r11*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3851 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3851.valid){
continue;
}
CheckValue<IkReal> x3852=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x3852.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3851.value)+(((1.5707963267949)*(x3852.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3853=IKcos(j5);
IkReal x3854=IKsin(j5);
IkReal x3855=(cj6*r10);
IkReal x3856=(cj6*r00);
IkReal x3857=(cj6*r20);
IkReal x3858=(sj6*x3853);
IkReal x3859=(sj6*x3854);
IkReal x3860=((1.0)*x3853);
IkReal x3861=((1.0)*x3854);
evalcond[0]=(((r21*x3858))+(((-1.0)*x3857*x3860))+((r22*x3854)));
evalcond[1]=(((r11*x3858))+(((-1.0)*x3855*x3860))+((r12*x3854)));
evalcond[2]=(((r21*x3859))+(((-1.0)*x3857*x3861))+(((-1.0)*r22*x3860)));
evalcond[3]=((((-1.0)*r02*x3860))+((r01*x3859))+(((-1.0)*x3856*x3861)));
evalcond[4]=((-1.0)+((r02*x3854))+((r01*x3858))+(((-1.0)*x3856*x3860)));
evalcond[5]=((-1.0)+((r11*x3859))+(((-1.0)*x3855*x3861))+(((-1.0)*r12*x3860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x3862=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3862);
rxp1_1=(px*r21);
rxp1_2=(r11*x3862);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x3863=((1.0)*cj1);
j5eval[0]=r02;
j5eval[1]=IKsign(r02);
j5eval[2]=((IKabs(((((-1.0)*cj3*x3863))+((sj1*sj3)))))+(IKabs(((((-1.0)*sj3*x3863))+(((-1.0)*cj3*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x3864=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3864);
rxp1_1=(px*r21);
rxp1_2=(r11*x3864);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x3865=((1.0)*cj1);
IkReal x3866=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[0]=x3866;
j5eval[1]=IKsign(x3866);
j5eval[2]=((IKabs(((((-1.0)*cj3*x3865))+((sj1*sj3)))))+(IKabs(((((-1.0)*sj3*x3865))+(((-1.0)*cj3*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x3867=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3867);
rxp1_1=(px*r21);
rxp1_2=(r11*x3867);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3868=((1.0)*cj1);
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(r02,-1);
if(!x3869.valid){
continue;
}
CheckValue<IkReal> x3870=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x3870.valid){
continue;
}
if( IKabs(((x3869.value)*(((((-1.0)*cj3*x3868))+((sj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3870.value)*(((((-1.0)*sj3*x3868))+(((-1.0)*cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3869.value)*(((((-1.0)*cj3*x3868))+((sj1*sj3))))))+IKsqr(((x3870.value)*(((((-1.0)*sj3*x3868))+(((-1.0)*cj3*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x3869.value)*(((((-1.0)*cj3*x3868))+((sj1*sj3))))), ((x3870.value)*(((((-1.0)*sj3*x3868))+(((-1.0)*cj3*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3871=IKsin(j5);
IkReal x3872=IKcos(j5);
IkReal x3873=(cj1*cj3);
IkReal x3874=(cj1*sj3);
IkReal x3875=(r11*sj6);
IkReal x3876=(r21*sj6);
IkReal x3877=(cj3*sj1);
IkReal x3878=(cj6*r10);
IkReal x3879=(cj6*r20);
IkReal x3880=((1.0)*sj1*sj3);
IkReal x3881=((1.0)*x3872);
IkReal x3882=((1.0)*x3871);
evalcond[0]=((((-1.0)*x3880))+x3873+((r02*x3871)));
evalcond[1]=((((-1.0)*x3879*x3882))+((x3871*x3876)));
evalcond[2]=((((-1.0)*x3879*x3881))+((x3872*x3876)));
evalcond[3]=((((-1.0)*r02*x3881))+(((-1.0)*x3877))+(((-1.0)*x3874)));
evalcond[4]=(((x3872*x3875))+(((-1.0)*x3878*x3881))+x3874+x3877);
evalcond[5]=((((-1.0)*x3880))+((x3871*x3875))+(((-1.0)*x3878*x3882))+x3873);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3883=((1.0)*cj1);
CheckValue<IkReal> x3884=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10))+((r11*sj6)))),-1);
if(!x3884.valid){
continue;
}
CheckValue<IkReal> x3885 = IKatan2WithCheck(IkReal((((sj1*sj3))+(((-1.0)*cj3*x3883)))),IkReal(((((-1.0)*sj3*x3883))+(((-1.0)*cj3*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3885.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3884.value)))+(x3885.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3886=IKsin(j5);
IkReal x3887=IKcos(j5);
IkReal x3888=(cj1*cj3);
IkReal x3889=(cj1*sj3);
IkReal x3890=(r11*sj6);
IkReal x3891=(r21*sj6);
IkReal x3892=(cj3*sj1);
IkReal x3893=(cj6*r10);
IkReal x3894=(cj6*r20);
IkReal x3895=((1.0)*sj1*sj3);
IkReal x3896=((1.0)*x3887);
IkReal x3897=((1.0)*x3886);
evalcond[0]=(((r02*x3886))+x3888+(((-1.0)*x3895)));
evalcond[1]=(((x3886*x3891))+(((-1.0)*x3894*x3897)));
evalcond[2]=(((x3887*x3891))+(((-1.0)*x3894*x3896)));
evalcond[3]=((((-1.0)*x3892))+(((-1.0)*x3889))+(((-1.0)*r02*x3896)));
evalcond[4]=((((-1.0)*x3893*x3896))+((x3887*x3890))+x3892+x3889);
evalcond[5]=((((-1.0)*x3893*x3897))+((x3886*x3890))+x3888+(((-1.0)*x3895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3898=((1.0)*cj1);
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x3899.valid){
continue;
}
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal((((sj1*sj3))+(((-1.0)*cj3*x3898)))),IkReal(((((-1.0)*cj3*sj1))+(((-1.0)*sj3*x3898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3899.value)))+(x3900.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3901=IKsin(j5);
IkReal x3902=IKcos(j5);
IkReal x3903=(cj1*cj3);
IkReal x3904=(cj1*sj3);
IkReal x3905=(r11*sj6);
IkReal x3906=(r21*sj6);
IkReal x3907=(cj3*sj1);
IkReal x3908=(cj6*r10);
IkReal x3909=(cj6*r20);
IkReal x3910=((1.0)*sj1*sj3);
IkReal x3911=((1.0)*x3902);
IkReal x3912=((1.0)*x3901);
evalcond[0]=((((-1.0)*x3910))+x3903+((r02*x3901)));
evalcond[1]=(((x3901*x3906))+(((-1.0)*x3909*x3912)));
evalcond[2]=(((x3902*x3906))+(((-1.0)*x3909*x3911)));
evalcond[3]=((((-1.0)*r02*x3911))+(((-1.0)*x3904))+(((-1.0)*x3907)));
evalcond[4]=(((x3902*x3905))+(((-1.0)*x3908*x3911))+x3904+x3907);
evalcond[5]=((((-1.0)*x3910))+((x3901*x3905))+(((-1.0)*x3908*x3912))+x3903);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3913=cj6*cj6;
IkReal x3914=(cj3*sj1);
IkReal x3915=(cj6*r20);
IkReal x3916=(cj1*sj3);
IkReal x3917=(r21*sj6);
IkReal x3918=(r11*r21);
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3913))+((cj6*r10*x3917))+((x3913*x3918))+(((-1.0)*x3918))+((r11*sj6*x3915)))),-1);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal((((r22*x3916))+((r22*x3914)))),IkReal((((x3914*x3917))+(((-1.0)*x3914*x3915))+((x3916*x3917))+(((-1.0)*x3915*x3916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3919.value)))+(x3920.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3921=IKcos(j5);
IkReal x3922=IKsin(j5);
IkReal x3923=(cj1*cj3);
IkReal x3924=(cj3*sj1);
IkReal x3925=((1.0)*sj3);
IkReal x3926=(sj1*x3925);
IkReal x3927=(sj6*x3922);
IkReal x3928=((1.0)*x3921);
IkReal x3929=(sj6*x3921);
IkReal x3930=((1.0)*cj6*x3922);
evalcond[0]=((((-1.0)*cj6*r20*x3928))+((r21*x3929))+((r22*x3922)));
evalcond[1]=(((r21*x3927))+(((-1.0)*r20*x3930))+(((-1.0)*r22*x3928)));
evalcond[2]=(((r11*x3929))+((r12*x3922))+((cj1*sj3))+x3924+(((-1.0)*cj6*r10*x3928)));
evalcond[3]=((((-1.0)*x3926))+(((-1.0)*cj6*r00*x3928))+((r02*x3922))+x3923+((r01*x3929)));
evalcond[4]=(((r11*x3927))+(((-1.0)*x3926))+(((-1.0)*r12*x3928))+x3923+(((-1.0)*r10*x3930)));
evalcond[5]=((((-1.0)*x3924))+(((-1.0)*cj1*x3925))+(((-1.0)*r00*x3930))+(((-1.0)*r02*x3928))+((r01*x3927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3931=(sj1*sj3);
IkReal x3932=(cj6*r20);
IkReal x3933=((1.0)*sj6);
IkReal x3934=((1.0)*cj1*cj3);
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal((((cj1*cj3*r21*sj6))+(((-1.0)*x3932*x3934))+((x3931*x3932))+(((-1.0)*r21*x3931*x3933)))),IkReal((((r22*x3931))+(((-1.0)*r22*x3934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x3933)))),-1);
if(!x3936.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3935.value)+(((1.5707963267949)*(x3936.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3937=IKcos(j5);
IkReal x3938=IKsin(j5);
IkReal x3939=(cj1*cj3);
IkReal x3940=(cj3*sj1);
IkReal x3941=((1.0)*sj3);
IkReal x3942=(sj1*x3941);
IkReal x3943=(sj6*x3938);
IkReal x3944=((1.0)*x3937);
IkReal x3945=(sj6*x3937);
IkReal x3946=((1.0)*cj6*x3938);
evalcond[0]=(((r22*x3938))+(((-1.0)*cj6*r20*x3944))+((r21*x3945)));
evalcond[1]=((((-1.0)*r22*x3944))+(((-1.0)*r20*x3946))+((r21*x3943)));
evalcond[2]=(((cj1*sj3))+(((-1.0)*cj6*r10*x3944))+x3940+((r12*x3938))+((r11*x3945)));
evalcond[3]=(((r01*x3945))+(((-1.0)*cj6*r00*x3944))+x3939+(((-1.0)*x3942))+((r02*x3938)));
evalcond[4]=(x3939+(((-1.0)*x3942))+(((-1.0)*r10*x3946))+(((-1.0)*r12*x3944))+((r11*x3943)));
evalcond[5]=(((r01*x3943))+(((-1.0)*x3940))+(((-1.0)*cj1*x3941))+(((-1.0)*r00*x3946))+(((-1.0)*r02*x3944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3947=(cj1*sj3);
IkReal x3948=(cj3*sj1);
IkReal x3949=(r21*sj6);
IkReal x3950=((1.0)*r22);
IkReal x3951=((1.0)*cj6*r20);
CheckValue<IkReal> x3952=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(((((-1.0)*x3948*x3951))+((x3947*x3949))+((x3948*x3949))+(((-1.0)*x3947*x3951)))),IkReal(((((-1.0)*x3948*x3950))+(((-1.0)*x3947*x3950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3952.value)))+(x3953.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3954=IKcos(j5);
IkReal x3955=IKsin(j5);
IkReal x3956=(cj1*cj3);
IkReal x3957=(cj3*sj1);
IkReal x3958=((1.0)*sj3);
IkReal x3959=(sj1*x3958);
IkReal x3960=(sj6*x3955);
IkReal x3961=((1.0)*x3954);
IkReal x3962=(sj6*x3954);
IkReal x3963=((1.0)*cj6*x3955);
evalcond[0]=((((-1.0)*cj6*r20*x3961))+((r21*x3962))+((r22*x3955)));
evalcond[1]=((((-1.0)*r20*x3963))+((r21*x3960))+(((-1.0)*r22*x3961)));
evalcond[2]=((((-1.0)*cj6*r10*x3961))+((r11*x3962))+((cj1*sj3))+x3957+((r12*x3955)));
evalcond[3]=(x3956+(((-1.0)*x3959))+((r02*x3955))+((r01*x3962))+(((-1.0)*cj6*r00*x3961)));
evalcond[4]=(((r11*x3960))+(((-1.0)*r10*x3963))+x3956+(((-1.0)*x3959))+(((-1.0)*r12*x3961)));
evalcond[5]=((((-1.0)*r02*x3961))+(((-1.0)*x3957))+(((-1.0)*cj1*x3958))+((r01*x3960))+(((-1.0)*r00*x3963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x3964=(cj3*sj1);
IkReal x3965=(cj1*sj3);
IkReal x3966=(cj6*r20);
IkReal x3967=(r21*sj6);
IkReal x3968=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x3968;
j5eval[1]=((IKabs(((((-1.0)*r22*x3965))+((r22*x3964)))))+(IKabs((((x3965*x3967))+((x3964*x3966))+(((-1.0)*x3965*x3966))+(((-1.0)*x3964*x3967))))));
j5eval[2]=IKsign(x3968);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x3969=(cj1*cj3);
IkReal x3970=(sj1*sj3);
IkReal x3971=(cj6*r20);
IkReal x3972=((1.0)*r21*sj6);
IkReal x3973=((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)));
j5eval[0]=x3973;
j5eval[1]=IKsign(x3973);
j5eval[2]=((IKabs((((r22*x3969))+((r22*x3970)))))+(IKabs(((((-1.0)*x3969*x3972))+((x3970*x3971))+(((-1.0)*x3970*x3972))+((x3969*x3971))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x3974=cj6*cj6;
IkReal x3975=((1.0)*r22);
IkReal x3976=(cj3*sj1);
IkReal x3977=(cj6*r20);
IkReal x3978=((1.0)*r21);
IkReal x3979=(cj1*sj3);
IkReal x3980=(r21*sj6);
IkReal x3981=((((-1.0)*r02*x3975))+((r01*r21*x3974))+((r01*sj6*x3977))+((cj6*r00*x3980))+(((-1.0)*r00*r20*x3974))+(((-1.0)*r01*x3978)));
j5eval[0]=x3981;
j5eval[1]=IKsign(x3981);
j5eval[2]=((IKabs((((r22*x3976))+(((-1.0)*x3975*x3979)))))+(IKabs((((x3976*x3977))+(((-1.0)*sj6*x3976*x3978))+(((-1.0)*x3977*x3979))+((x3979*x3980))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3982=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x3982;
j5eval[1]=IKsign(x3982);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3983=((1.0)*cj6);
IkReal x3984=((((-1.0)*r21*x3983))+(((-1.0)*r20*sj6)));
j5eval[0]=x3984;
j5eval[1]=((IKabs(((((-1.0)*r10*x3983))+((r11*sj6)))))+(IKabs(r12)));
j5eval[2]=IKsign(x3984);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x3985=cj6*cj6;
IkReal x3986=(r11*r21);
IkReal x3987=(r21*sj6);
IkReal x3988=(cj6*r20);
IkReal x3989=(((x3985*x3986))+(((-1.0)*r12*r22))+((cj6*r10*x3987))+(((-1.0)*r10*r20*x3985))+(((-1.0)*x3986))+((r11*sj6*x3988)));
j5eval[0]=x3989;
j5eval[1]=IKsign(x3989);
j5eval[2]=((IKabs((x3987+(((-1.0)*x3988)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3990=cj6*cj6;
IkReal x3991=(r21*sj6);
IkReal x3992=(cj6*r20);
IkReal x3993=(r11*r21);
CheckValue<IkReal> x3994=IKPowWithIntegerCheck(IKsign((((r11*sj6*x3992))+(((-1.0)*r12*r22))+((cj6*r10*x3991))+((x3990*x3993))+(((-1.0)*r10*r20*x3990))+(((-1.0)*x3993)))),-1);
if(!x3994.valid){
continue;
}
CheckValue<IkReal> x3995 = IKatan2WithCheck(IkReal((x3991+(((-1.0)*x3992)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3994.value)))+(x3995.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3996=IKcos(j5);
IkReal x3997=IKsin(j5);
IkReal x3998=(cj6*r10);
IkReal x3999=(cj6*r00);
IkReal x4000=(cj6*r20);
IkReal x4001=(sj6*x3996);
IkReal x4002=(sj6*x3997);
IkReal x4003=((1.0)*x3996);
IkReal x4004=((1.0)*x3997);
evalcond[0]=((((-1.0)*x4000*x4003))+((r22*x3997))+((r21*x4001)));
evalcond[1]=((((-1.0)*x3998*x4003))+((r12*x3997))+((r11*x4001)));
evalcond[2]=((((-1.0)*r22*x4003))+(((-1.0)*x4000*x4004))+((r21*x4002)));
evalcond[3]=((((-1.0)*x3999*x4004))+(((-1.0)*r02*x4003))+((r01*x4002)));
evalcond[4]=((-1.0)+(((-1.0)*x3999*x4003))+((r01*x4001))+((r02*x3997)));
evalcond[5]=((1.0)+(((-1.0)*x3998*x4004))+(((-1.0)*r12*x4003))+((r11*x4002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4005=((1.0)*cj6);
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4005))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
CheckValue<IkReal> x4007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4005))+(((-1.0)*r20*sj6)))),-1);
if(!x4007.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4006.value)+(((1.5707963267949)*(x4007.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4008=IKcos(j5);
IkReal x4009=IKsin(j5);
IkReal x4010=(cj6*r10);
IkReal x4011=(cj6*r00);
IkReal x4012=(cj6*r20);
IkReal x4013=(sj6*x4008);
IkReal x4014=(sj6*x4009);
IkReal x4015=((1.0)*x4008);
IkReal x4016=((1.0)*x4009);
evalcond[0]=((((-1.0)*x4012*x4015))+((r22*x4009))+((r21*x4013)));
evalcond[1]=(((r12*x4009))+((r11*x4013))+(((-1.0)*x4010*x4015)));
evalcond[2]=((((-1.0)*x4012*x4016))+(((-1.0)*r22*x4015))+((r21*x4014)));
evalcond[3]=((((-1.0)*x4011*x4016))+(((-1.0)*r02*x4015))+((r01*x4014)));
evalcond[4]=((-1.0)+(((-1.0)*x4011*x4015))+((r01*x4013))+((r02*x4009)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4015))+((r11*x4014))+(((-1.0)*x4010*x4016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4017 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4017.valid){
continue;
}
CheckValue<IkReal> x4018=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x4018.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4017.value)+(((1.5707963267949)*(x4018.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4019=IKcos(j5);
IkReal x4020=IKsin(j5);
IkReal x4021=(cj6*r10);
IkReal x4022=(cj6*r00);
IkReal x4023=(cj6*r20);
IkReal x4024=(sj6*x4019);
IkReal x4025=(sj6*x4020);
IkReal x4026=((1.0)*x4019);
IkReal x4027=((1.0)*x4020);
evalcond[0]=((((-1.0)*x4023*x4026))+((r21*x4024))+((r22*x4020)));
evalcond[1]=(((r12*x4020))+(((-1.0)*x4021*x4026))+((r11*x4024)));
evalcond[2]=((((-1.0)*r22*x4026))+(((-1.0)*x4023*x4027))+((r21*x4025)));
evalcond[3]=((((-1.0)*x4022*x4027))+(((-1.0)*r02*x4026))+((r01*x4025)));
evalcond[4]=((-1.0)+(((-1.0)*x4022*x4026))+((r01*x4024))+((r02*x4020)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4026))+(((-1.0)*x4021*x4027))+((r11*x4025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4028=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x4028;
j5eval[1]=IKsign(x4028);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4029=((1.0)*cj6);
IkReal x4030=((((-1.0)*r11*x4029))+(((-1.0)*r10*sj6)));
j5eval[0]=x4030;
j5eval[1]=IKsign(x4030);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x4029)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4031=cj6*cj6;
IkReal x4032=r11*r11;
IkReal x4033=(r11*sj6);
IkReal x4034=(cj6*r10);
IkReal x4035=((r12*r12)+(((-2.0)*x4033*x4034))+(((-1.0)*x4031*x4032))+x4032+((x4031*(r10*r10))));
j5eval[0]=x4035;
j5eval[1]=IKsign(x4035);
j5eval[2]=((IKabs(r12))+(IKabs((x4033+(((-1.0)*x4034))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4036=cj6*cj6;
IkReal x4037=r11*r11;
IkReal x4038=(r11*sj6);
IkReal x4039=(cj6*r10);
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal((x4038+(((-1.0)*x4039)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
CheckValue<IkReal> x4041=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4036*x4037))+x4037+((x4036*(r10*r10)))+(((-2.0)*x4038*x4039)))),-1);
if(!x4041.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4040.value)+(((1.5707963267949)*(x4041.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4042=IKcos(j5);
IkReal x4043=IKsin(j5);
IkReal x4044=(cj6*r10);
IkReal x4045=(cj6*r00);
IkReal x4046=(cj6*r20);
IkReal x4047=(sj6*x4042);
IkReal x4048=(sj6*x4043);
IkReal x4049=((1.0)*x4042);
IkReal x4050=((1.0)*x4043);
evalcond[0]=(((r22*x4043))+((r21*x4047))+(((-1.0)*x4046*x4049)));
evalcond[1]=((((-1.0)*x4044*x4049))+((r12*x4043))+((r11*x4047)));
evalcond[2]=(((r21*x4048))+(((-1.0)*x4046*x4050))+(((-1.0)*r22*x4049)));
evalcond[3]=((((-1.0)*x4045*x4050))+(((-1.0)*r02*x4049))+((r01*x4048)));
evalcond[4]=((1.0)+((r02*x4043))+(((-1.0)*x4045*x4049))+((r01*x4047)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4049))+(((-1.0)*x4044*x4050))+((r11*x4048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4051=((1.0)*cj6);
CheckValue<IkReal> x4052 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4051))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x4051)))),-1);
if(!x4053.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4052.value)+(((1.5707963267949)*(x4053.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4054=IKcos(j5);
IkReal x4055=IKsin(j5);
IkReal x4056=(cj6*r10);
IkReal x4057=(cj6*r00);
IkReal x4058=(cj6*r20);
IkReal x4059=(sj6*x4054);
IkReal x4060=(sj6*x4055);
IkReal x4061=((1.0)*x4054);
IkReal x4062=((1.0)*x4055);
evalcond[0]=(((r21*x4059))+(((-1.0)*x4058*x4061))+((r22*x4055)));
evalcond[1]=(((r11*x4059))+((r12*x4055))+(((-1.0)*x4056*x4061)));
evalcond[2]=(((r21*x4060))+(((-1.0)*x4058*x4062))+(((-1.0)*r22*x4061)));
evalcond[3]=((((-1.0)*x4057*x4062))+(((-1.0)*r02*x4061))+((r01*x4060)));
evalcond[4]=((1.0)+((r02*x4055))+(((-1.0)*x4057*x4061))+((r01*x4059)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4061))+((r11*x4060))+(((-1.0)*x4056*x4062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4063=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x4063.valid){
continue;
}
CheckValue<IkReal> x4064 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4064.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4063.value)))+(x4064.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4065=IKcos(j5);
IkReal x4066=IKsin(j5);
IkReal x4067=(cj6*r10);
IkReal x4068=(cj6*r00);
IkReal x4069=(cj6*r20);
IkReal x4070=(sj6*x4065);
IkReal x4071=(sj6*x4066);
IkReal x4072=((1.0)*x4065);
IkReal x4073=((1.0)*x4066);
evalcond[0]=((((-1.0)*x4069*x4072))+((r22*x4066))+((r21*x4070)));
evalcond[1]=((((-1.0)*x4067*x4072))+((r12*x4066))+((r11*x4070)));
evalcond[2]=((((-1.0)*x4069*x4073))+(((-1.0)*r22*x4072))+((r21*x4071)));
evalcond[3]=((((-1.0)*x4068*x4073))+(((-1.0)*r02*x4072))+((r01*x4071)));
evalcond[4]=((1.0)+(((-1.0)*x4068*x4072))+((r02*x4066))+((r01*x4070)));
evalcond[5]=((-1.0)+(((-1.0)*x4067*x4073))+(((-1.0)*r12*x4072))+((r11*x4071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x4074=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x4074;
j5eval[1]=IKsign(x4074);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x4075=((1.0)*cj6);
IkReal x4076=((((-1.0)*r21*x4075))+(((-1.0)*r20*sj6)));
j5eval[0]=x4076;
j5eval[1]=((IKabs(((((-1.0)*r10*x4075))+((r11*sj6)))))+(IKabs(r12)));
j5eval[2]=IKsign(x4076);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x4077=cj6*cj6;
IkReal x4078=(r11*r21);
IkReal x4079=(r21*sj6);
IkReal x4080=(cj6*r20);
IkReal x4081=((((-1.0)*x4078))+((x4077*x4078))+(((-1.0)*r12*r22))+((r11*sj6*x4080))+((cj6*r10*x4079))+(((-1.0)*r10*r20*x4077)));
j5eval[0]=x4081;
j5eval[1]=IKsign(x4081);
j5eval[2]=((IKabs(r22))+(IKabs((x4079+(((-1.0)*x4080))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4082=cj6*cj6;
IkReal x4083=(r21*sj6);
IkReal x4084=(cj6*r20);
IkReal x4085=(r11*r21);
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal((x4083+(((-1.0)*x4084)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign((((x4082*x4085))+(((-1.0)*r12*r22))+((cj6*r10*x4083))+((r11*sj6*x4084))+(((-1.0)*r10*r20*x4082))+(((-1.0)*x4085)))),-1);
if(!x4087.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4086.value)+(((1.5707963267949)*(x4087.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4088=IKcos(j5);
IkReal x4089=IKsin(j5);
IkReal x4090=(cj6*r10);
IkReal x4091=(cj6*r00);
IkReal x4092=(cj6*r20);
IkReal x4093=(sj6*x4088);
IkReal x4094=(sj6*x4089);
IkReal x4095=((1.0)*x4088);
IkReal x4096=((1.0)*x4089);
evalcond[0]=((((-1.0)*x4092*x4095))+((r21*x4093))+((r22*x4089)));
evalcond[1]=((((-1.0)*x4090*x4095))+((r11*x4093))+((r12*x4089)));
evalcond[2]=((((-1.0)*r22*x4095))+(((-1.0)*x4092*x4096))+((r21*x4094)));
evalcond[3]=(((r01*x4094))+(((-1.0)*r02*x4095))+(((-1.0)*x4091*x4096)));
evalcond[4]=((-1.0)+((r01*x4093))+((r02*x4089))+(((-1.0)*x4091*x4095)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4095))+(((-1.0)*x4090*x4096))+((r11*x4094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4097=((1.0)*cj6);
CheckValue<IkReal> x4098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4097))+(((-1.0)*r20*sj6)))),-1);
if(!x4098.valid){
continue;
}
CheckValue<IkReal> x4099 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4097))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4099.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4098.value)))+(x4099.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4100=IKcos(j5);
IkReal x4101=IKsin(j5);
IkReal x4102=(cj6*r10);
IkReal x4103=(cj6*r00);
IkReal x4104=(cj6*r20);
IkReal x4105=(sj6*x4100);
IkReal x4106=(sj6*x4101);
IkReal x4107=((1.0)*x4100);
IkReal x4108=((1.0)*x4101);
evalcond[0]=(((r22*x4101))+(((-1.0)*x4104*x4107))+((r21*x4105)));
evalcond[1]=(((r12*x4101))+(((-1.0)*x4102*x4107))+((r11*x4105)));
evalcond[2]=((((-1.0)*r22*x4107))+(((-1.0)*x4104*x4108))+((r21*x4106)));
evalcond[3]=((((-1.0)*x4103*x4108))+((r01*x4106))+(((-1.0)*r02*x4107)));
evalcond[4]=((-1.0)+((r02*x4101))+(((-1.0)*x4103*x4107))+((r01*x4105)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4107))+(((-1.0)*x4102*x4108))+((r11*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4109 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4109.valid){
continue;
}
CheckValue<IkReal> x4110=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x4110.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4109.value)+(((1.5707963267949)*(x4110.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4111=IKcos(j5);
IkReal x4112=IKsin(j5);
IkReal x4113=(cj6*r10);
IkReal x4114=(cj6*r00);
IkReal x4115=(cj6*r20);
IkReal x4116=(sj6*x4111);
IkReal x4117=(sj6*x4112);
IkReal x4118=((1.0)*x4111);
IkReal x4119=((1.0)*x4112);
evalcond[0]=(((r21*x4116))+((r22*x4112))+(((-1.0)*x4115*x4118)));
evalcond[1]=(((r12*x4112))+(((-1.0)*x4113*x4118))+((r11*x4116)));
evalcond[2]=(((r21*x4117))+(((-1.0)*r22*x4118))+(((-1.0)*x4115*x4119)));
evalcond[3]=((((-1.0)*x4114*x4119))+(((-1.0)*r02*x4118))+((r01*x4117)));
evalcond[4]=((-1.0)+((r02*x4112))+(((-1.0)*x4114*x4118))+((r01*x4116)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4118))+(((-1.0)*x4113*x4119))+((r11*x4117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x4120=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x4120;
j5eval[1]=IKsign(x4120);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x4121=((1.0)*cj6);
IkReal x4122=((((-1.0)*r11*x4121))+(((-1.0)*r10*sj6)));
j5eval[0]=x4122;
j5eval[1]=IKsign(x4122);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x4121)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x4123=cj6*cj6;
IkReal x4124=r11*r11;
IkReal x4125=(r11*sj6);
IkReal x4126=(cj6*r10);
IkReal x4127=((r12*r12)+((x4123*(r10*r10)))+(((-1.0)*x4123*x4124))+x4124+(((-2.0)*x4125*x4126)));
j5eval[0]=x4127;
j5eval[1]=IKsign(x4127);
j5eval[2]=((IKabs((x4125+(((-1.0)*x4126)))))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4128=cj6*cj6;
IkReal x4129=r11*r11;
IkReal x4130=(r11*sj6);
IkReal x4131=(cj6*r10);
CheckValue<IkReal> x4132 = IKatan2WithCheck(IkReal(((((-1.0)*x4131))+x4130)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4132.valid){
continue;
}
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4128*x4129))+x4129+((x4128*(r10*r10)))+(((-2.0)*x4130*x4131)))),-1);
if(!x4133.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4132.value)+(((1.5707963267949)*(x4133.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4134=IKcos(j5);
IkReal x4135=IKsin(j5);
IkReal x4136=(cj6*r10);
IkReal x4137=(cj6*r00);
IkReal x4138=(cj6*r20);
IkReal x4139=(sj6*x4134);
IkReal x4140=(sj6*x4135);
IkReal x4141=((1.0)*x4134);
IkReal x4142=((1.0)*x4135);
evalcond[0]=(((r22*x4135))+((r21*x4139))+(((-1.0)*x4138*x4141)));
evalcond[1]=(((r11*x4139))+((r12*x4135))+(((-1.0)*x4136*x4141)));
evalcond[2]=(((r21*x4140))+(((-1.0)*x4138*x4142))+(((-1.0)*r22*x4141)));
evalcond[3]=(((r01*x4140))+(((-1.0)*r02*x4141))+(((-1.0)*x4137*x4142)));
evalcond[4]=((1.0)+((r01*x4139))+(((-1.0)*x4137*x4141))+((r02*x4135)));
evalcond[5]=((-1.0)+((r11*x4140))+(((-1.0)*x4136*x4142))+(((-1.0)*r12*x4141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4143=((1.0)*cj6);
CheckValue<IkReal> x4144 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x4143)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4144.valid){
continue;
}
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x4143)))),-1);
if(!x4145.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4144.value)+(((1.5707963267949)*(x4145.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4146=IKcos(j5);
IkReal x4147=IKsin(j5);
IkReal x4148=(cj6*r10);
IkReal x4149=(cj6*r00);
IkReal x4150=(cj6*r20);
IkReal x4151=(sj6*x4146);
IkReal x4152=(sj6*x4147);
IkReal x4153=((1.0)*x4146);
IkReal x4154=((1.0)*x4147);
evalcond[0]=(((r21*x4151))+((r22*x4147))+(((-1.0)*x4150*x4153)));
evalcond[1]=(((r12*x4147))+(((-1.0)*x4148*x4153))+((r11*x4151)));
evalcond[2]=(((r21*x4152))+(((-1.0)*x4150*x4154))+(((-1.0)*r22*x4153)));
evalcond[3]=(((r01*x4152))+(((-1.0)*r02*x4153))+(((-1.0)*x4149*x4154)));
evalcond[4]=((1.0)+((r02*x4147))+((r01*x4151))+(((-1.0)*x4149*x4153)));
evalcond[5]=((-1.0)+(((-1.0)*x4148*x4154))+((r11*x4152))+(((-1.0)*r12*x4153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4155=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x4155.valid){
continue;
}
CheckValue<IkReal> x4156 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4156.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4155.value)))+(x4156.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4157=IKcos(j5);
IkReal x4158=IKsin(j5);
IkReal x4159=(cj6*r10);
IkReal x4160=(cj6*r00);
IkReal x4161=(cj6*r20);
IkReal x4162=(sj6*x4157);
IkReal x4163=(sj6*x4158);
IkReal x4164=((1.0)*x4157);
IkReal x4165=((1.0)*x4158);
evalcond[0]=(((r22*x4158))+(((-1.0)*x4161*x4164))+((r21*x4162)));
evalcond[1]=((((-1.0)*x4159*x4164))+((r12*x4158))+((r11*x4162)));
evalcond[2]=((((-1.0)*x4161*x4165))+((r21*x4163))+(((-1.0)*r22*x4164)));
evalcond[3]=(((r01*x4163))+(((-1.0)*r02*x4164))+(((-1.0)*x4160*x4165)));
evalcond[4]=((1.0)+((r01*x4162))+((r02*x4158))+(((-1.0)*x4160*x4164)));
evalcond[5]=((-1.0)+(((-1.0)*x4159*x4165))+(((-1.0)*r12*x4164))+((r11*x4163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x4166=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x4166;
j5eval[1]=IKsign(x4166);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x4167=((1.0)*cj6);
IkReal x4168=((((-1.0)*r10*sj6))+(((-1.0)*r11*x4167)));
j5eval[0]=x4168;
j5eval[1]=IKsign(x4168);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x4167))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x4169=cj6*cj6;
IkReal x4170=r11*r11;
IkReal x4171=(r11*sj6);
IkReal x4172=(cj6*r10);
IkReal x4173=((r12*r12)+(((-1.0)*x4169*x4170))+x4170+(((-2.0)*x4171*x4172))+((x4169*(r10*r10))));
j5eval[0]=x4173;
j5eval[1]=IKsign(x4173);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4172))+x4171))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4174=cj6*cj6;
IkReal x4175=r11*r11;
IkReal x4176=(r11*sj6);
IkReal x4177=(cj6*r10);
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4176*x4177))+x4175+(((-1.0)*x4174*x4175))+((x4174*(r10*r10))))),-1);
if(!x4178.valid){
continue;
}
CheckValue<IkReal> x4179 = IKatan2WithCheck(IkReal(((((-1.0)*x4177))+x4176)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4179.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4178.value)))+(x4179.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4180=IKcos(j5);
IkReal x4181=IKsin(j5);
IkReal x4182=(cj6*r10);
IkReal x4183=(cj6*r00);
IkReal x4184=(cj6*r20);
IkReal x4185=(sj6*x4180);
IkReal x4186=(sj6*x4181);
IkReal x4187=((1.0)*x4180);
IkReal x4188=((1.0)*x4181);
evalcond[0]=(((r21*x4185))+((r22*x4181))+(((-1.0)*x4184*x4187)));
evalcond[1]=(((r12*x4181))+((r11*x4185))+(((-1.0)*x4182*x4187)));
evalcond[2]=(((r21*x4186))+(((-1.0)*x4184*x4188))+(((-1.0)*r22*x4187)));
evalcond[3]=((((-1.0)*x4183*x4188))+(((-1.0)*r02*x4187))+((r01*x4186)));
evalcond[4]=((1.0)+(((-1.0)*x4183*x4187))+((r02*x4181))+((r01*x4185)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4187))+((r11*x4186))+(((-1.0)*x4182*x4188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4189=((1.0)*cj6);
CheckValue<IkReal> x4190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4189))+(((-1.0)*r10*sj6)))),-1);
if(!x4190.valid){
continue;
}
CheckValue<IkReal> x4191 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x4189)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4191.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4190.value)))+(x4191.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4192=IKcos(j5);
IkReal x4193=IKsin(j5);
IkReal x4194=(cj6*r10);
IkReal x4195=(cj6*r00);
IkReal x4196=(cj6*r20);
IkReal x4197=(sj6*x4192);
IkReal x4198=(sj6*x4193);
IkReal x4199=((1.0)*x4192);
IkReal x4200=((1.0)*x4193);
evalcond[0]=(((r21*x4197))+((r22*x4193))+(((-1.0)*x4196*x4199)));
evalcond[1]=((((-1.0)*x4194*x4199))+((r12*x4193))+((r11*x4197)));
evalcond[2]=(((r21*x4198))+(((-1.0)*x4196*x4200))+(((-1.0)*r22*x4199)));
evalcond[3]=((((-1.0)*x4195*x4200))+(((-1.0)*r02*x4199))+((r01*x4198)));
evalcond[4]=((1.0)+((r02*x4193))+(((-1.0)*x4195*x4199))+((r01*x4197)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4199))+((r11*x4198))+(((-1.0)*x4194*x4200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4201=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x4201.valid){
continue;
}
CheckValue<IkReal> x4202 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4202.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4201.value)))+(x4202.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4203=IKcos(j5);
IkReal x4204=IKsin(j5);
IkReal x4205=(cj6*r10);
IkReal x4206=(cj6*r00);
IkReal x4207=(cj6*r20);
IkReal x4208=(sj6*x4203);
IkReal x4209=(sj6*x4204);
IkReal x4210=((1.0)*x4203);
IkReal x4211=((1.0)*x4204);
evalcond[0]=(((r22*x4204))+(((-1.0)*x4207*x4210))+((r21*x4208)));
evalcond[1]=(((r11*x4208))+(((-1.0)*x4205*x4210))+((r12*x4204)));
evalcond[2]=((((-1.0)*x4207*x4211))+(((-1.0)*r22*x4210))+((r21*x4209)));
evalcond[3]=((((-1.0)*r02*x4210))+((r01*x4209))+(((-1.0)*x4206*x4211)));
evalcond[4]=((1.0)+((r02*x4204))+((r01*x4208))+(((-1.0)*x4206*x4210)));
evalcond[5]=((-1.0)+((r11*x4209))+(((-1.0)*r12*x4210))+(((-1.0)*x4205*x4211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4212=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x4212;
j5eval[1]=IKsign(x4212);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4213=((1.0)*cj6);
IkReal x4214=((((-1.0)*r21*x4213))+(((-1.0)*r20*sj6)));
j5eval[0]=x4214;
j5eval[1]=((IKabs(r12))+(IKabs((((r11*sj6))+(((-1.0)*r10*x4213))))));
j5eval[2]=IKsign(x4214);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x4215=cj6*cj6;
IkReal x4216=(r11*r21);
IkReal x4217=(r21*sj6);
IkReal x4218=(cj6*r20);
IkReal x4219=(((r11*sj6*x4218))+((cj6*r10*x4217))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4215))+((x4215*x4216))+(((-1.0)*x4216)));
j5eval[0]=x4219;
j5eval[1]=IKsign(x4219);
j5eval[2]=((IKabs(r22))+(IKabs((x4217+(((-1.0)*x4218))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4220=cj6*cj6;
IkReal x4221=(r21*sj6);
IkReal x4222=(cj6*r20);
IkReal x4223=(r11*r21);
CheckValue<IkReal> x4224=IKPowWithIntegerCheck(IKsign((((cj6*r10*x4221))+(((-1.0)*r12*r22))+(((-1.0)*x4223))+((x4220*x4223))+(((-1.0)*r10*r20*x4220))+((r11*sj6*x4222)))),-1);
if(!x4224.valid){
continue;
}
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal(((((-1.0)*x4222))+x4221)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4224.value)))+(x4225.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4226=IKcos(j5);
IkReal x4227=IKsin(j5);
IkReal x4228=(cj6*r10);
IkReal x4229=(cj6*r00);
IkReal x4230=(cj6*r20);
IkReal x4231=(sj6*x4226);
IkReal x4232=(sj6*x4227);
IkReal x4233=((1.0)*x4226);
IkReal x4234=((1.0)*x4227);
evalcond[0]=(((r22*x4227))+((r21*x4231))+(((-1.0)*x4230*x4233)));
evalcond[1]=((((-1.0)*x4228*x4233))+((r11*x4231))+((r12*x4227)));
evalcond[2]=((((-1.0)*r22*x4233))+((r21*x4232))+(((-1.0)*x4230*x4234)));
evalcond[3]=(((r01*x4232))+(((-1.0)*x4229*x4234))+(((-1.0)*r02*x4233)));
evalcond[4]=((-1.0)+((r01*x4231))+((r02*x4227))+(((-1.0)*x4229*x4233)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4233))+(((-1.0)*x4228*x4234))+((r11*x4232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4235=((1.0)*cj6);
CheckValue<IkReal> x4236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4235))+(((-1.0)*r20*sj6)))),-1);
if(!x4236.valid){
continue;
}
CheckValue<IkReal> x4237 = IKatan2WithCheck(IkReal((((r11*sj6))+(((-1.0)*r10*x4235)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4237.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4236.value)))+(x4237.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4238=IKcos(j5);
IkReal x4239=IKsin(j5);
IkReal x4240=(cj6*r10);
IkReal x4241=(cj6*r00);
IkReal x4242=(cj6*r20);
IkReal x4243=(sj6*x4238);
IkReal x4244=(sj6*x4239);
IkReal x4245=((1.0)*x4238);
IkReal x4246=((1.0)*x4239);
evalcond[0]=(((r22*x4239))+((r21*x4243))+(((-1.0)*x4242*x4245)));
evalcond[1]=(((r12*x4239))+(((-1.0)*x4240*x4245))+((r11*x4243)));
evalcond[2]=((((-1.0)*r22*x4245))+((r21*x4244))+(((-1.0)*x4242*x4246)));
evalcond[3]=((((-1.0)*x4241*x4246))+((r01*x4244))+(((-1.0)*r02*x4245)));
evalcond[4]=((-1.0)+(((-1.0)*x4241*x4245))+((r01*x4243))+((r02*x4239)));
evalcond[5]=((1.0)+(((-1.0)*x4240*x4246))+(((-1.0)*r12*x4245))+((r11*x4244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x4248.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4247.value)+(((1.5707963267949)*(x4248.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4249=IKcos(j5);
IkReal x4250=IKsin(j5);
IkReal x4251=(cj6*r10);
IkReal x4252=(cj6*r00);
IkReal x4253=(cj6*r20);
IkReal x4254=(sj6*x4249);
IkReal x4255=(sj6*x4250);
IkReal x4256=((1.0)*x4249);
IkReal x4257=((1.0)*x4250);
evalcond[0]=(((r22*x4250))+(((-1.0)*x4253*x4256))+((r21*x4254)));
evalcond[1]=((((-1.0)*x4251*x4256))+((r12*x4250))+((r11*x4254)));
evalcond[2]=((((-1.0)*x4253*x4257))+(((-1.0)*r22*x4256))+((r21*x4255)));
evalcond[3]=((((-1.0)*x4252*x4257))+((r01*x4255))+(((-1.0)*r02*x4256)));
evalcond[4]=((-1.0)+(((-1.0)*x4252*x4256))+((r02*x4250))+((r01*x4254)));
evalcond[5]=((1.0)+(((-1.0)*x4251*x4257))+((r11*x4255))+(((-1.0)*r12*x4256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x4258=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x4258;
j5eval[1]=IKsign(x4258);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x4259=((1.0)*cj6);
IkReal x4260=((((-1.0)*r10*sj6))+(((-1.0)*r11*x4259)));
j5eval[0]=x4260;
j5eval[1]=IKsign(x4260);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x4259))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x4261=cj6*cj6;
IkReal x4262=r11*r11;
IkReal x4263=(r11*sj6);
IkReal x4264=(cj6*r10);
IkReal x4265=((r12*r12)+(((-2.0)*x4263*x4264))+((x4261*(r10*r10)))+x4262+(((-1.0)*x4261*x4262)));
j5eval[0]=x4265;
j5eval[1]=IKsign(x4265);
j5eval[2]=((IKabs(r12))+(IKabs((x4263+(((-1.0)*x4264))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4266=cj6*cj6;
IkReal x4267=r11*r11;
IkReal x4268=(r11*sj6);
IkReal x4269=(cj6*r10);
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4268*x4269))+(r12*r12)+((x4266*(r10*r10)))+(((-1.0)*x4266*x4267))+x4267)),-1);
if(!x4270.valid){
continue;
}
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal((x4268+(((-1.0)*x4269)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4270.value)))+(x4271.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4272=IKcos(j5);
IkReal x4273=IKsin(j5);
IkReal x4274=(cj6*r10);
IkReal x4275=(cj6*r00);
IkReal x4276=(cj6*r20);
IkReal x4277=(sj6*x4272);
IkReal x4278=(sj6*x4273);
IkReal x4279=((1.0)*x4272);
IkReal x4280=((1.0)*x4273);
evalcond[0]=(((r21*x4277))+(((-1.0)*x4276*x4279))+((r22*x4273)));
evalcond[1]=(((r11*x4277))+((r12*x4273))+(((-1.0)*x4274*x4279)));
evalcond[2]=(((r21*x4278))+(((-1.0)*r22*x4279))+(((-1.0)*x4276*x4280)));
evalcond[3]=((((-1.0)*x4275*x4280))+(((-1.0)*r02*x4279))+((r01*x4278)));
evalcond[4]=((1.0)+((r02*x4273))+(((-1.0)*x4275*x4279))+((r01*x4277)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4279))+((r11*x4278))+(((-1.0)*x4274*x4280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4281=((1.0)*cj6);
CheckValue<IkReal> x4282 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4281))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4282.valid){
continue;
}
CheckValue<IkReal> x4283=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x4281)))),-1);
if(!x4283.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4282.value)+(((1.5707963267949)*(x4283.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4284=IKcos(j5);
IkReal x4285=IKsin(j5);
IkReal x4286=(cj6*r10);
IkReal x4287=(cj6*r00);
IkReal x4288=(cj6*r20);
IkReal x4289=(sj6*x4284);
IkReal x4290=(sj6*x4285);
IkReal x4291=((1.0)*x4284);
IkReal x4292=((1.0)*x4285);
evalcond[0]=((((-1.0)*x4288*x4291))+((r22*x4285))+((r21*x4289)));
evalcond[1]=(((r12*x4285))+((r11*x4289))+(((-1.0)*x4286*x4291)));
evalcond[2]=((((-1.0)*r22*x4291))+(((-1.0)*x4288*x4292))+((r21*x4290)));
evalcond[3]=(((r01*x4290))+(((-1.0)*x4287*x4292))+(((-1.0)*r02*x4291)));
evalcond[4]=((1.0)+((r02*x4285))+(((-1.0)*x4287*x4291))+((r01*x4289)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4291))+(((-1.0)*x4286*x4292))+((r11*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x4293.valid){
continue;
}
CheckValue<IkReal> x4294 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4294.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4293.value)))+(x4294.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4295=IKcos(j5);
IkReal x4296=IKsin(j5);
IkReal x4297=(cj6*r10);
IkReal x4298=(cj6*r00);
IkReal x4299=(cj6*r20);
IkReal x4300=(sj6*x4295);
IkReal x4301=(sj6*x4296);
IkReal x4302=((1.0)*x4295);
IkReal x4303=((1.0)*x4296);
evalcond[0]=(((r22*x4296))+(((-1.0)*x4299*x4302))+((r21*x4300)));
evalcond[1]=(((r11*x4300))+(((-1.0)*x4297*x4302))+((r12*x4296)));
evalcond[2]=((((-1.0)*r22*x4302))+(((-1.0)*x4299*x4303))+((r21*x4301)));
evalcond[3]=(((r01*x4301))+(((-1.0)*r02*x4302))+(((-1.0)*x4298*x4303)));
evalcond[4]=((1.0)+((r01*x4300))+(((-1.0)*x4298*x4302))+((r02*x4296)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x4302))+((r11*x4301))+(((-1.0)*x4297*x4303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x4304=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x4304;
j5eval[1]=IKsign(x4304);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x4305=((1.0)*cj6);
IkReal x4306=((((-1.0)*r21*x4305))+(((-1.0)*r20*sj6)));
j5eval[0]=x4306;
j5eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x4305)))))+(IKabs(r12)));
j5eval[2]=IKsign(x4306);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x4307=cj6*cj6;
IkReal x4308=(r11*r21);
IkReal x4309=(r21*sj6);
IkReal x4310=(cj6*r20);
IkReal x4311=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4307))+((r11*sj6*x4310))+((cj6*r10*x4309))+(((-1.0)*x4308))+((x4307*x4308)));
j5eval[0]=x4311;
j5eval[1]=IKsign(x4311);
j5eval[2]=((IKabs(r22))+(IKabs((x4309+(((-1.0)*x4310))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4312=cj6*cj6;
IkReal x4313=(r21*sj6);
IkReal x4314=(cj6*r20);
IkReal x4315=(r11*r21);
CheckValue<IkReal> x4316 = IKatan2WithCheck(IkReal((x4313+(((-1.0)*x4314)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4316.valid){
continue;
}
CheckValue<IkReal> x4317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x4312))+(((-1.0)*r12*r22))+((cj6*r10*x4313))+((r11*sj6*x4314))+(((-1.0)*x4315))+((x4312*x4315)))),-1);
if(!x4317.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4316.value)+(((1.5707963267949)*(x4317.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4318=IKcos(j5);
IkReal x4319=IKsin(j5);
IkReal x4320=(cj6*r10);
IkReal x4321=(cj6*r00);
IkReal x4322=(cj6*r20);
IkReal x4323=(sj6*x4318);
IkReal x4324=(sj6*x4319);
IkReal x4325=((1.0)*x4318);
IkReal x4326=((1.0)*x4319);
evalcond[0]=(((r21*x4323))+(((-1.0)*x4322*x4325))+((r22*x4319)));
evalcond[1]=(((r12*x4319))+(((-1.0)*x4320*x4325))+((r11*x4323)));
evalcond[2]=(((r21*x4324))+(((-1.0)*r22*x4325))+(((-1.0)*x4322*x4326)));
evalcond[3]=((((-1.0)*r02*x4325))+(((-1.0)*x4321*x4326))+((r01*x4324)));
evalcond[4]=((-1.0)+(((-1.0)*x4321*x4325))+((r02*x4319))+((r01*x4323)));
evalcond[5]=((1.0)+(((-1.0)*r12*x4325))+(((-1.0)*x4320*x4326))+((r11*x4324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4327=((1.0)*cj6);
CheckValue<IkReal> x4328 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4327))+((r11*sj6)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4328.valid){
continue;
}
CheckValue<IkReal> x4329=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4327))+(((-1.0)*r20*sj6)))),-1);
if(!x4329.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4328.value)+(((1.5707963267949)*(x4329.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4330=IKcos(j5);
IkReal x4331=IKsin(j5);
IkReal x4332=(cj6*r10);
IkReal x4333=(cj6*r00);
IkReal x4334=(cj6*r20);
IkReal x4335=(sj6*x4330);
IkReal x4336=(sj6*x4331);
IkReal x4337=((1.0)*x4330);
IkReal x4338=((1.0)*x4331);
evalcond[0]=((((-1.0)*x4334*x4337))+((r21*x4335))+((r22*x4331)));
evalcond[1]=((((-1.0)*x4332*x4337))+((r12*x4331))+((r11*x4335)));
evalcond[2]=((((-1.0)*x4334*x4338))+((r21*x4336))+(((-1.0)*r22*x4337)));
evalcond[3]=(((r01*x4336))+(((-1.0)*x4333*x4338))+(((-1.0)*r02*x4337)));
evalcond[4]=((-1.0)+((r01*x4335))+(((-1.0)*x4333*x4337))+((r02*x4331)));
evalcond[5]=((1.0)+(((-1.0)*x4332*x4338))+(((-1.0)*r12*x4337))+((r11*x4336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x4340.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4339.value)+(((1.5707963267949)*(x4340.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4341=IKcos(j5);
IkReal x4342=IKsin(j5);
IkReal x4343=(cj6*r10);
IkReal x4344=(cj6*r00);
IkReal x4345=(cj6*r20);
IkReal x4346=(sj6*x4341);
IkReal x4347=(sj6*x4342);
IkReal x4348=((1.0)*x4341);
IkReal x4349=((1.0)*x4342);
evalcond[0]=(((r22*x4342))+(((-1.0)*x4345*x4348))+((r21*x4346)));
evalcond[1]=((((-1.0)*x4343*x4348))+((r12*x4342))+((r11*x4346)));
evalcond[2]=((((-1.0)*x4345*x4349))+((r21*x4347))+(((-1.0)*r22*x4348)));
evalcond[3]=((((-1.0)*r02*x4348))+(((-1.0)*x4344*x4349))+((r01*x4347)));
evalcond[4]=((-1.0)+(((-1.0)*x4344*x4348))+((r02*x4342))+((r01*x4346)));
evalcond[5]=((1.0)+(((-1.0)*x4343*x4349))+(((-1.0)*r12*x4348))+((r11*x4347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x4350=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4350);
rxp1_1=(px*r21);
rxp1_2=(r11*x4350);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((IKabs((((cj1*sj3))+(((-1.0)*cj3*sj1)))))+(IKabs((((sj1*sj3))+((cj1*cj3))))));
j5eval[2]=IKsign(r02);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x4351=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4351);
rxp1_1=(px*r21);
rxp1_2=(r11*x4351);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x4352=((1.0)*cj1);
IkReal x4353=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[0]=x4353;
j5eval[1]=IKsign(x4353);
j5eval[2]=((IKabs(((((-1.0)*sj1*sj3))+(((-1.0)*cj3*x4352)))))+(IKabs(((((-1.0)*sj3*x4352))+((cj3*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x4354=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4354);
rxp1_1=(px*r21);
rxp1_2=(r11*x4354);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(r02,-1);
if(!x4355.valid){
continue;
}
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x4356.valid){
continue;
}
if( IKabs(((x4355.value)*((((sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4356.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4355.value)*((((sj1*sj3))+((cj1*cj3))))))+IKsqr(((x4356.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x4355.value)*((((sj1*sj3))+((cj1*cj3))))), ((x4356.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4357=IKsin(j5);
IkReal x4358=IKcos(j5);
IkReal x4359=(cj1*sj3);
IkReal x4360=(r11*sj6);
IkReal x4361=(r21*sj6);
IkReal x4362=((1.0)*cj3);
IkReal x4363=(cj6*r10);
IkReal x4364=(cj6*r20);
IkReal x4365=(sj1*sj3);
IkReal x4366=(sj1*x4362);
IkReal x4367=((1.0)*x4358);
IkReal x4368=((1.0)*x4357);
evalcond[0]=(((x4357*x4361))+(((-1.0)*x4364*x4368)));
evalcond[1]=((((-1.0)*x4366))+x4359+(((-1.0)*r02*x4367)));
evalcond[2]=((((-1.0)*x4364*x4367))+((x4358*x4361)));
evalcond[3]=((((-1.0)*cj1*x4362))+((r02*x4357))+(((-1.0)*x4365)));
evalcond[4]=(((x4357*x4360))+x4365+((cj1*cj3))+(((-1.0)*x4363*x4368)));
evalcond[5]=((((-1.0)*x4366))+x4359+((x4358*x4360))+(((-1.0)*x4363*x4367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4369=((1.0)*sj3);
CheckValue<IkReal> x4370 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x4369))+(((-1.0)*cj1*cj3)))),IkReal(((((-1.0)*cj1*x4369))+((cj3*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4370.valid){
continue;
}
CheckValue<IkReal> x4371=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10))+((r11*sj6)))),-1);
if(!x4371.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4370.value)+(((1.5707963267949)*(x4371.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4372=IKsin(j5);
IkReal x4373=IKcos(j5);
IkReal x4374=(cj1*sj3);
IkReal x4375=(r11*sj6);
IkReal x4376=(r21*sj6);
IkReal x4377=((1.0)*cj3);
IkReal x4378=(cj6*r10);
IkReal x4379=(cj6*r20);
IkReal x4380=(sj1*sj3);
IkReal x4381=(sj1*x4377);
IkReal x4382=((1.0)*x4373);
IkReal x4383=((1.0)*x4372);
evalcond[0]=((((-1.0)*x4379*x4383))+((x4372*x4376)));
evalcond[1]=((((-1.0)*r02*x4382))+x4374+(((-1.0)*x4381)));
evalcond[2]=((((-1.0)*x4379*x4382))+((x4373*x4376)));
evalcond[3]=(((r02*x4372))+(((-1.0)*x4380))+(((-1.0)*cj1*x4377)));
evalcond[4]=(((x4372*x4375))+(((-1.0)*x4378*x4383))+x4380+((cj1*cj3)));
evalcond[5]=((((-1.0)*x4378*x4382))+x4374+(((-1.0)*x4381))+((x4373*x4375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x4384.valid){
continue;
}
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal((((sj1*sj3))+((cj1*cj3)))),IkReal((((cj1*sj3))+(((-1.0)*cj3*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4384.value)))+(x4385.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4386=IKsin(j5);
IkReal x4387=IKcos(j5);
IkReal x4388=(cj1*sj3);
IkReal x4389=(r11*sj6);
IkReal x4390=(r21*sj6);
IkReal x4391=((1.0)*cj3);
IkReal x4392=(cj6*r10);
IkReal x4393=(cj6*r20);
IkReal x4394=(sj1*sj3);
IkReal x4395=(sj1*x4391);
IkReal x4396=((1.0)*x4387);
IkReal x4397=((1.0)*x4386);
evalcond[0]=((((-1.0)*x4393*x4397))+((x4386*x4390)));
evalcond[1]=((((-1.0)*x4395))+(((-1.0)*r02*x4396))+x4388);
evalcond[2]=(((x4387*x4390))+(((-1.0)*x4393*x4396)));
evalcond[3]=((((-1.0)*x4394))+((r02*x4386))+(((-1.0)*cj1*x4391)));
evalcond[4]=(x4394+((cj1*cj3))+(((-1.0)*x4392*x4397))+((x4386*x4389)));
evalcond[5]=((((-1.0)*x4395))+((x4387*x4389))+x4388+(((-1.0)*x4392*x4396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4398=cj6*cj6;
IkReal x4399=((1.0)*r22);
IkReal x4400=(cj3*sj1);
IkReal x4401=(cj6*r20);
IkReal x4402=((1.0)*r21);
IkReal x4403=(cj1*sj3);
IkReal x4404=(r21*sj6);
CheckValue<IkReal> x4405 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x4400*x4402))+((x4403*x4404))+((x4400*x4401))+(((-1.0)*x4401*x4403)))),IkReal((((r22*x4400))+(((-1.0)*x4399*x4403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4405.valid){
continue;
}
CheckValue<IkReal> x4406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x4399))+(((-1.0)*r00*r20*x4398))+(((-1.0)*r01*x4402))+((r01*sj6*x4401))+((r01*r21*x4398))+((cj6*r00*x4404)))),-1);
if(!x4406.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4405.value)+(((1.5707963267949)*(x4406.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4407=IKcos(j5);
IkReal x4408=IKsin(j5);
IkReal x4409=(cj1*sj3);
IkReal x4410=((1.0)*cj3);
IkReal x4411=(sj1*sj3);
IkReal x4412=(sj1*x4410);
IkReal x4413=(sj6*x4408);
IkReal x4414=((1.0)*x4407);
IkReal x4415=(sj6*x4407);
IkReal x4416=((1.0)*cj6*x4408);
evalcond[0]=(((r21*x4415))+((r22*x4408))+(((-1.0)*cj6*r20*x4414)));
evalcond[1]=(((r21*x4413))+(((-1.0)*r20*x4416))+(((-1.0)*r22*x4414)));
evalcond[2]=(((r11*x4413))+x4411+(((-1.0)*r10*x4416))+(((-1.0)*r12*x4414))+((cj1*cj3)));
evalcond[3]=(((r11*x4415))+x4409+((r12*x4408))+(((-1.0)*x4412))+(((-1.0)*cj6*r10*x4414)));
evalcond[4]=(x4409+((r01*x4413))+(((-1.0)*r02*x4414))+(((-1.0)*r00*x4416))+(((-1.0)*x4412)));
evalcond[5]=((((-1.0)*cj6*r00*x4414))+((r01*x4415))+(((-1.0)*x4411))+(((-1.0)*cj1*x4410))+((r02*x4408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4417=(cj1*cj3);
IkReal x4418=(sj1*sj3);
IkReal x4419=(cj6*r20);
IkReal x4420=((1.0)*r21*sj6);
CheckValue<IkReal> x4421 = IKatan2WithCheck(IkReal((((x4418*x4419))+(((-1.0)*x4417*x4420))+((x4417*x4419))+(((-1.0)*x4418*x4420)))),IkReal((((r22*x4417))+((r22*x4418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4421.valid){
continue;
}
CheckValue<IkReal> x4422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))),-1);
if(!x4422.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4421.value)+(((1.5707963267949)*(x4422.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4423=IKcos(j5);
IkReal x4424=IKsin(j5);
IkReal x4425=(cj1*sj3);
IkReal x4426=((1.0)*cj3);
IkReal x4427=(sj1*sj3);
IkReal x4428=(sj1*x4426);
IkReal x4429=(sj6*x4424);
IkReal x4430=((1.0)*x4423);
IkReal x4431=(sj6*x4423);
IkReal x4432=((1.0)*cj6*x4424);
evalcond[0]=((((-1.0)*cj6*r20*x4430))+((r22*x4424))+((r21*x4431)));
evalcond[1]=((((-1.0)*r22*x4430))+((r21*x4429))+(((-1.0)*r20*x4432)));
evalcond[2]=(x4427+(((-1.0)*r10*x4432))+(((-1.0)*r12*x4430))+((cj1*cj3))+((r11*x4429)));
evalcond[3]=((((-1.0)*x4428))+x4425+(((-1.0)*cj6*r10*x4430))+((r11*x4431))+((r12*x4424)));
evalcond[4]=((((-1.0)*x4428))+(((-1.0)*r02*x4430))+x4425+(((-1.0)*r00*x4432))+((r01*x4429)));
evalcond[5]=((((-1.0)*cj6*r00*x4430))+((r02*x4424))+(((-1.0)*x4427))+(((-1.0)*cj1*x4426))+((r01*x4431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4433=(cj3*sj1);
IkReal x4434=(cj1*sj3);
IkReal x4435=(cj6*r20);
IkReal x4436=(r21*sj6);
CheckValue<IkReal> x4437=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x4437.valid){
continue;
}
CheckValue<IkReal> x4438 = IKatan2WithCheck(IkReal(((((-1.0)*x4433*x4436))+(((-1.0)*x4434*x4435))+((x4434*x4436))+((x4433*x4435)))),IkReal((((r22*x4433))+(((-1.0)*r22*x4434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4438.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4437.value)))+(x4438.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4439=IKcos(j5);
IkReal x4440=IKsin(j5);
IkReal x4441=(cj1*sj3);
IkReal x4442=((1.0)*cj3);
IkReal x4443=(sj1*sj3);
IkReal x4444=(sj1*x4442);
IkReal x4445=(sj6*x4440);
IkReal x4446=((1.0)*x4439);
IkReal x4447=(sj6*x4439);
IkReal x4448=((1.0)*cj6*x4440);
evalcond[0]=(((r21*x4447))+(((-1.0)*cj6*r20*x4446))+((r22*x4440)));
evalcond[1]=(((r21*x4445))+(((-1.0)*r22*x4446))+(((-1.0)*r20*x4448)));
evalcond[2]=(x4443+(((-1.0)*r12*x4446))+((r11*x4445))+(((-1.0)*r10*x4448))+((cj1*cj3)));
evalcond[3]=((((-1.0)*cj6*r10*x4446))+x4441+(((-1.0)*x4444))+((r11*x4447))+((r12*x4440)));
evalcond[4]=(x4441+(((-1.0)*x4444))+((r01*x4445))+(((-1.0)*r02*x4446))+(((-1.0)*r00*x4448)));
evalcond[5]=((((-1.0)*cj6*r00*x4446))+((r01*x4447))+(((-1.0)*x4443))+(((-1.0)*cj1*x4442))+((r02*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4449=((-1.0)*r00);
IkReal x4451 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4451)==0){
continue;
}
IkReal x4450=pow(x4451,-0.5);
CheckValue<IkReal> x4452 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4449),IKFAST_ATAN2_MAGTHRESH);
if(!x4452.valid){
continue;
}
IkReal gconst36=((-1.0)*(x4452.value));
IkReal gconst37=(r01*x4450);
IkReal gconst38=(x4449*x4450);
CheckValue<IkReal> x4453 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4453.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4453.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4454=(r22*sj2);
IkReal x4455=(gconst38*r20);
IkReal x4456=(gconst37*r21*sj2);
CheckValue<IkReal> x4457=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x4455*x4455)+(((gconst37*gconst37)*(r21*r21)))+(((-2.0)*gconst37*r21*x4455)))),-1);
if(!x4457.valid){
continue;
}
CheckValue<IkReal> x4458 = IKatan2WithCheck(IkReal((((cj3*x4454))+(((-1.0)*sj3*x4456))+((sj2*sj3*x4455)))),IkReal((((cj3*x4456))+((sj3*x4454))+(((-1.0)*cj3*sj2*x4455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4458.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4457.value)))+(x4458.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4459=IKsin(j5);
IkReal x4460=IKcos(j5);
IkReal x4461=((1.0)*gconst38);
IkReal x4462=(cj1*cj2);
IkReal x4463=((1.0)*sj3);
IkReal x4464=(cj3*sj1);
IkReal x4465=(gconst37*x4459);
IkReal x4466=(gconst37*x4460);
IkReal x4467=((1.0)*x4460);
evalcond[0]=((((-1.0)*r20*x4459*x4461))+((sj2*sj3))+(((-1.0)*r22*x4467))+((r21*x4465)));
evalcond[1]=((((-1.0)*cj3*sj2))+(((-1.0)*r20*x4460*x4461))+((r21*x4466))+((r22*x4459)));
evalcond[2]=(((cj2*x4464))+((cj1*sj3))+((r11*x4466))+((r12*x4459))+(((-1.0)*r10*x4460*x4461)));
evalcond[3]=((((-1.0)*r00*x4460*x4461))+((cj3*x4462))+((r01*x4466))+((r02*x4459))+(((-1.0)*sj1*x4463)));
evalcond[4]=(((r11*x4465))+(((-1.0)*cj2*sj1*x4463))+(((-1.0)*r12*x4467))+((cj1*cj3))+(((-1.0)*r10*x4459*x4461)));
evalcond[5]=((((-1.0)*x4462*x4463))+(((-1.0)*x4464))+((r01*x4465))+(((-1.0)*r02*x4467))+(((-1.0)*r00*x4459*x4461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4468=((-1.0)*r01);
IkReal x4470 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4470)==0){
continue;
}
IkReal x4469=pow(x4470,-0.5);
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal(x4468),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x4471.value))));
IkReal gconst40=(x4468*x4469);
IkReal gconst41=((1.0)*r00*x4469);
CheckValue<IkReal> x4472 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4472.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4472.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4473=(r22*sj2);
IkReal x4474=(cj3*sj2);
IkReal x4475=(gconst40*r21);
IkReal x4476=(gconst41*r20);
IkReal x4477=(sj2*sj3);
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal(((((-1.0)*x4475*x4477))+((x4476*x4477))+((cj3*x4473)))),IkReal(((((-1.0)*x4474*x4476))+((x4474*x4475))+((sj3*x4473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x4475*x4476))+(x4475*x4475)+(x4476*x4476))),-1);
if(!x4479.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4478.value)+(((1.5707963267949)*(x4479.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4480=IKsin(j5);
IkReal x4481=IKcos(j5);
IkReal x4482=(cj1*cj2);
IkReal x4483=((1.0)*sj3);
IkReal x4484=((1.0)*gconst41);
IkReal x4485=(cj3*sj1);
IkReal x4486=(gconst40*x4481);
IkReal x4487=((1.0)*x4481);
IkReal x4488=(gconst40*x4480);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x4480*x4484))+((r21*x4488))+(((-1.0)*r22*x4487)));
evalcond[1]=((((-1.0)*r20*x4481*x4484))+((r21*x4486))+(((-1.0)*cj3*sj2))+((r22*x4480)));
evalcond[2]=(((r11*x4486))+(((-1.0)*r10*x4481*x4484))+((cj1*sj3))+((cj2*x4485))+((r12*x4480)));
evalcond[3]=((((-1.0)*sj1*x4483))+(((-1.0)*r00*x4481*x4484))+((cj3*x4482))+((r02*x4480))+((r01*x4486)));
evalcond[4]=(((r11*x4488))+(((-1.0)*r12*x4487))+(((-1.0)*r10*x4480*x4484))+(((-1.0)*cj2*sj1*x4483))+((cj1*cj3)));
evalcond[5]=((((-1.0)*x4485))+(((-1.0)*r00*x4480*x4484))+((r01*x4488))+(((-1.0)*r02*x4487))+(((-1.0)*x4482*x4483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x4489=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4489);
rxp1_1=(px*r21);
rxp1_2=(r11*x4489);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((IKabs((cj3*sj1)))+(IKabs((sj1*sj3))));
j5eval[2]=IKsign(r02);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x4490=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4490);
rxp1_1=(px*r21);
rxp1_2=(r11*x4490);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x4491=(cj2*sj1);
IkReal x4492=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[0]=x4492;
j5eval[1]=IKsign(x4492);
j5eval[2]=((IKabs((sj3*x4491)))+(IKabs((cj3*x4491))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x4493=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4493);
rxp1_1=(px*r21);
rxp1_2=(r11*x4493);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
j5eval[1]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4494=IKPowWithIntegerCheck(r02,-1);
if(!x4494.valid){
continue;
}
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x4495.valid){
continue;
}
if( IKabs((sj1*sj3*(x4494.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj2*cj3*sj1*(x4495.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj3*(x4494.value)))+IKsqr(((-1.0)*cj2*cj3*sj1*(x4495.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj3*(x4494.value)), ((-1.0)*cj2*cj3*sj1*(x4495.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4496=IKsin(j5);
IkReal x4497=IKcos(j5);
IkReal x4498=(cj3*sj1);
IkReal x4499=(r11*sj6);
IkReal x4500=(r21*sj6);
IkReal x4501=(cj6*r10);
IkReal x4502=(cj6*r20);
IkReal x4503=((1.0)*x4497);
IkReal x4504=((1.0)*sj1*sj3);
IkReal x4505=((1.0)*x4496);
evalcond[0]=((((-1.0)*x4504))+((r02*x4496)));
evalcond[1]=((((-1.0)*x4498))+(((-1.0)*r02*x4503)));
evalcond[2]=(((x4496*x4500))+(((-1.0)*x4502*x4505)));
evalcond[3]=(((x4497*x4500))+(((-1.0)*x4502*x4503)));
evalcond[4]=(((cj2*x4498))+(((-1.0)*x4501*x4503))+((x4497*x4499)));
evalcond[5]=((((-1.0)*cj2*x4504))+(((-1.0)*x4501*x4505))+((x4496*x4499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4506=(cj2*sj1);
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal((sj3*x4506)),IkReal(((-1.0)*cj3*x4506)),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10))+((r11*sj6)))),-1);
if(!x4508.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4507.value)+(((1.5707963267949)*(x4508.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4509=IKsin(j5);
IkReal x4510=IKcos(j5);
IkReal x4511=(cj3*sj1);
IkReal x4512=(r11*sj6);
IkReal x4513=(r21*sj6);
IkReal x4514=(cj6*r10);
IkReal x4515=(cj6*r20);
IkReal x4516=((1.0)*x4510);
IkReal x4517=((1.0)*sj1*sj3);
IkReal x4518=((1.0)*x4509);
evalcond[0]=(((r02*x4509))+(((-1.0)*x4517)));
evalcond[1]=((((-1.0)*r02*x4516))+(((-1.0)*x4511)));
evalcond[2]=((((-1.0)*x4515*x4518))+((x4509*x4513)));
evalcond[3]=(((x4510*x4513))+(((-1.0)*x4515*x4516)));
evalcond[4]=(((cj2*x4511))+((x4510*x4512))+(((-1.0)*x4514*x4516)));
evalcond[5]=((((-1.0)*cj2*x4517))+(((-1.0)*x4514*x4518))+((x4509*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x4519=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x4519.valid){
continue;
}
CheckValue<IkReal> x4520 = IKatan2WithCheck(IkReal((sj1*sj3)),IkReal(((-1.0)*cj3*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x4520.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4519.value)))+(x4520.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4521=IKsin(j5);
IkReal x4522=IKcos(j5);
IkReal x4523=(cj3*sj1);
IkReal x4524=(r11*sj6);
IkReal x4525=(r21*sj6);
IkReal x4526=(cj6*r10);
IkReal x4527=(cj6*r20);
IkReal x4528=((1.0)*x4522);
IkReal x4529=((1.0)*sj1*sj3);
IkReal x4530=((1.0)*x4521);
evalcond[0]=((((-1.0)*x4529))+((r02*x4521)));
evalcond[1]=((((-1.0)*x4523))+(((-1.0)*r02*x4528)));
evalcond[2]=(((x4521*x4525))+(((-1.0)*x4527*x4530)));
evalcond[3]=((((-1.0)*x4527*x4528))+((x4522*x4525)));
evalcond[4]=(((cj2*x4523))+(((-1.0)*x4526*x4528))+((x4522*x4524)));
evalcond[5]=((((-1.0)*cj2*x4529))+((x4521*x4524))+(((-1.0)*x4526*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4531=cj6*cj6;
IkReal x4532=(cj6*r20);
IkReal x4533=((1.0)*r12);
IkReal x4534=(r11*sj6);
IkReal x4535=((1.0)*sj3);
IkReal x4536=(cj6*r10);
IkReal x4537=(r21*sj6);
IkReal x4538=(cj1*sj3);
IkReal x4539=(sj2*sj3);
IkReal x4540=(r11*r21);
IkReal x4541=(cj2*cj3*sj1);
CheckValue<IkReal> x4542=IKPowWithIntegerCheck(IKsign((((x4536*x4537))+(((-1.0)*x4540))+((x4532*x4534))+(((-1.0)*r22*x4533))+((x4531*x4540))+(((-1.0)*r10*r20*x4531)))),-1);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543 = IKatan2WithCheck(IkReal((((r22*x4541))+((r22*x4538))+((x4534*x4539))+(((-1.0)*sj2*x4535*x4536)))),IkReal((((x4537*x4541))+(((-1.0)*cj1*x4532*x4535))+(((-1.0)*x4532*x4541))+(((-1.0)*x4533*x4539))+((x4537*x4538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4543.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4542.value)))+(x4543.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4544=IKsin(j5);
IkReal x4545=IKcos(j5);
IkReal x4546=(cj1*cj2);
IkReal x4547=((1.0)*sj3);
IkReal x4548=(cj3*sj1);
IkReal x4549=(sj6*x4544);
IkReal x4550=((1.0)*x4545);
IkReal x4551=(sj6*x4545);
IkReal x4552=((1.0)*cj6*x4544);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x4552))+((r21*x4549))+(((-1.0)*r22*x4550)));
evalcond[1]=(((r22*x4544))+(((-1.0)*cj6*r20*x4550))+(((-1.0)*cj3*sj2))+((r21*x4551)));
evalcond[2]=(((cj2*x4548))+((cj1*sj3))+((r11*x4551))+((r12*x4544))+(((-1.0)*cj6*r10*x4550)));
evalcond[3]=((((-1.0)*cj6*r00*x4550))+((cj3*x4546))+((r01*x4551))+((r02*x4544))+(((-1.0)*sj1*x4547)));
evalcond[4]=((((-1.0)*r12*x4550))+(((-1.0)*cj2*sj1*x4547))+(((-1.0)*r10*x4552))+((r11*x4549))+((cj1*cj3)));
evalcond[5]=((((-1.0)*x4546*x4547))+(((-1.0)*r00*x4552))+(((-1.0)*x4548))+((r01*x4549))+(((-1.0)*r02*x4550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4553=cj6*cj6;
IkReal x4554=r21*r21;
IkReal x4555=(sj2*sj3);
IkReal x4556=(cj6*r20);
IkReal x4557=(cj3*sj2);
IkReal x4558=(r21*sj6);
CheckValue<IkReal> x4559=IKPowWithIntegerCheck(IKsign(((r22*r22)+x4554+(((-2.0)*x4556*x4558))+((x4553*(r20*r20)))+(((-1.0)*x4553*x4554)))),-1);
if(!x4559.valid){
continue;
}
CheckValue<IkReal> x4560 = IKatan2WithCheck(IkReal((((x4555*x4556))+((r22*x4557))+(((-1.0)*x4555*x4558)))),IkReal((((r22*x4555))+(((-1.0)*x4556*x4557))+((x4557*x4558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4560.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4559.value)))+(x4560.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4561=IKsin(j5);
IkReal x4562=IKcos(j5);
IkReal x4563=(cj1*cj2);
IkReal x4564=((1.0)*sj3);
IkReal x4565=(cj3*sj1);
IkReal x4566=(sj6*x4561);
IkReal x4567=((1.0)*x4562);
IkReal x4568=(sj6*x4562);
IkReal x4569=((1.0)*cj6*x4561);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x4569))+((r21*x4566))+(((-1.0)*r22*x4567)));
evalcond[1]=(((r22*x4561))+((r21*x4568))+(((-1.0)*cj6*r20*x4567))+(((-1.0)*cj3*sj2)));
evalcond[2]=(((cj1*sj3))+((r11*x4568))+((r12*x4561))+(((-1.0)*cj6*r10*x4567))+((cj2*x4565)));
evalcond[3]=((((-1.0)*sj1*x4564))+((r02*x4561))+(((-1.0)*cj6*r00*x4567))+((cj3*x4563))+((r01*x4568)));
evalcond[4]=((((-1.0)*r10*x4569))+(((-1.0)*cj2*sj1*x4564))+((r11*x4566))+(((-1.0)*r12*x4567))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r00*x4569))+(((-1.0)*r02*x4567))+(((-1.0)*x4563*x4564))+((r01*x4566))+(((-1.0)*x4565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4570=(cj1*sj3);
IkReal x4571=(cj3*sj2);
IkReal x4572=((1.0)*sj6);
IkReal x4573=(cj6*r20);
IkReal x4574=(cj2*cj3*sj1);
IkReal x4575=(r21*x4572);
CheckValue<IkReal> x4576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4572))+(((-1.0)*cj6*r01)))),-1);
if(!x4576.valid){
continue;
}
CheckValue<IkReal> x4577 = IKatan2WithCheck(IkReal((((cj6*r10*x4571))+(((-1.0)*x4570*x4575))+(((-1.0)*r11*x4571*x4572))+((x4570*x4573))+((x4573*x4574))+(((-1.0)*x4574*x4575)))),IkReal((((r12*x4571))+((r22*x4570))+((r22*x4574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4577.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4576.value)))+(x4577.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4578=IKsin(j5);
IkReal x4579=IKcos(j5);
IkReal x4580=(cj1*cj2);
IkReal x4581=((1.0)*sj3);
IkReal x4582=(cj3*sj1);
IkReal x4583=(sj6*x4578);
IkReal x4584=((1.0)*x4579);
IkReal x4585=(sj6*x4579);
IkReal x4586=((1.0)*cj6*x4578);
evalcond[0]=(((r21*x4583))+((sj2*sj3))+(((-1.0)*r22*x4584))+(((-1.0)*r20*x4586)));
evalcond[1]=(((r21*x4585))+((r22*x4578))+(((-1.0)*cj3*sj2))+(((-1.0)*cj6*r20*x4584)));
evalcond[2]=(((r12*x4578))+((cj1*sj3))+((r11*x4585))+((cj2*x4582))+(((-1.0)*cj6*r10*x4584)));
evalcond[3]=((((-1.0)*cj6*r00*x4584))+((r02*x4578))+(((-1.0)*sj1*x4581))+((cj3*x4580))+((r01*x4585)));
evalcond[4]=((((-1.0)*cj2*sj1*x4581))+(((-1.0)*r10*x4586))+((r11*x4583))+((cj1*cj3))+(((-1.0)*r12*x4584)));
evalcond[5]=((((-1.0)*x4580*x4581))+(((-1.0)*x4582))+(((-1.0)*r00*x4586))+(((-1.0)*r02*x4584))+((r01*x4583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x4587=cj6*cj6;
IkReal x4588=r21*r21;
IkReal x4589=(r22*sj2);
IkReal x4590=((1.0)*cj3);
IkReal x4591=(cj6*r20);
IkReal x4592=(r21*sj2*sj6);
IkReal x4593=((((-2.0)*r21*sj6*x4591))+(r22*r22)+x4588+((x4587*(r20*r20)))+(((-1.0)*x4587*x4588)));
j5eval[0]=x4593;
j5eval[1]=IKsign(x4593);
j5eval[2]=((IKabs(((((-1.0)*x4589*x4590))+(((-1.0)*sj3*x4592))+((sj2*sj3*x4591)))))+(IKabs((((sj3*x4589))+(((-1.0)*x4590*x4592))+((cj3*sj2*x4591))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=((((1.33846545362005)*sj2))+((cj3*sj2)));
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x4594=((196475000.0)*sj3);
IkReal x4595=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*px*x4595))+(((-1.0)*py*x4594))+(((-262975000.0)*px)))))+(IKabs(((((-1.0)*px*x4594))+(((262975000.0)*py))+((py*x4595))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j5eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j5eval[0]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x4597 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4597.valid){
continue;
}
IkReal x4596=x4597.value;
j5array[0]=((-1.0)*x4596);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x4596)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x4598=IKsin(j5);
evalcond[0]=((((-1.0)*cj6*r20*x4598))+(((-1.0)*r22*(IKcos(j5))))+((r21*sj6*x4598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x4599=((196475000.0)*sj3);
IkReal x4600=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*px*x4599))+((py*x4600))+(((262975000.0)*py)))))+(IKabs(((((-1.0)*py*x4599))+(((-1.0)*px*x4600))+(((-262975000.0)*px))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((-1.0)+(((-1.33846545362005)*cj3)));
j1eval[1]=IKsign(((-7859.0)+(((-10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4601=(r12*sj5);
IkReal x4602=((7859.0)*cj3);
IkReal x4603=(cj5*cj6*r10);
IkReal x4604=(cj5*r11*sj6);
CheckValue<IkReal> x4605=IKPowWithIntegerCheck(sj3,-1);
if(!x4605.valid){
continue;
}
if( IKabs(((((-0.747124251354692)*x4604))+(((-0.747124251354692)*x4601))+(((2.37665177298222)*px))+(((0.747124251354692)*x4603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x4605.value)*(((((-10519.0)*x4604))+(((-10519.0)*x4601))+(((10519.0)*x4603))+(((-1.0)*x4601*x4602))+(((-1.0)*x4602*x4604))+(((25000.0)*cj3*px))+((x4602*x4603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.747124251354692)*x4604))+(((-0.747124251354692)*x4601))+(((2.37665177298222)*px))+(((0.747124251354692)*x4603))))+IKsqr(((-9.50660709192889e-5)*(x4605.value)*(((((-10519.0)*x4604))+(((-10519.0)*x4601))+(((10519.0)*x4603))+(((-1.0)*x4601*x4602))+(((-1.0)*x4602*x4604))+(((25000.0)*cj3*px))+((x4602*x4603))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.747124251354692)*x4604))+(((-0.747124251354692)*x4601))+(((2.37665177298222)*px))+(((0.747124251354692)*x4603))), ((-9.50660709192889e-5)*(x4605.value)*(((((-10519.0)*x4604))+(((-10519.0)*x4601))+(((10519.0)*x4603))+(((-1.0)*x4601*x4602))+(((-1.0)*x4602*x4604))+(((25000.0)*cj3*px))+((x4602*x4603))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4606=IKsin(j1);
IkReal x4607=IKcos(j1);
IkReal x4608=((1.0)*sj3);
IkReal x4609=(sj5*sj6);
IkReal x4610=(cj5*cj6);
IkReal x4611=((1.0)*cj5);
IkReal x4612=((1.0)*sj5);
IkReal x4613=(cj3*x4607);
IkReal x4614=(cj3*x4606);
IkReal x4615=(cj6*x4612);
IkReal x4616=(sj3*x4607);
IkReal x4617=(x4606*x4608);
evalcond[0]=((((-1.0)*px))+(((0.31436)*x4614))+(((0.31436)*x4616))+(((0.42076)*x4606)));
evalcond[1]=((((-0.42076)*x4607))+(((-0.31436)*x4613))+(((0.31436)*sj3*x4606))+(((-1.0)*py)));
evalcond[2]=(((r10*x4610))+x4614+x4616+(((-1.0)*r12*x4612))+(((-1.0)*r11*sj6*x4611)));
evalcond[3]=(((r11*x4609))+(((-1.0)*r10*x4615))+x4613+(((-1.0)*r12*x4611))+(((-1.0)*x4617)));
evalcond[4]=((((-1.0)*r02*x4612))+x4613+((r00*x4610))+(((-1.0)*x4617))+(((-1.0)*r01*sj6*x4611)));
evalcond[5]=((((-1.0)*r02*x4611))+(((-1.0)*x4614))+((r01*x4609))+(((-1.0)*r00*x4615))+(((-1.0)*x4607*x4608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4618=((7859.0)*cj3);
IkReal x4619=(r12*sj5);
IkReal x4620=((7859.0)*sj3);
IkReal x4621=((25000.0)*py);
IkReal x4622=(cj5*cj6*r10);
IkReal x4623=(cj5*r11*sj6);
CheckValue<IkReal> x4624=IKPowWithIntegerCheck(IKsign(((-7859.0)+(((-10519.0)*cj3)))),-1);
if(!x4624.valid){
continue;
}
CheckValue<IkReal> x4625 = IKatan2WithCheck(IkReal(((((-10519.0)*x4623))+(((-1.0)*x4618*x4623))+(((-1.0)*sj3*x4621))+((x4618*x4622))+(((-10519.0)*x4619))+(((10519.0)*x4622))+(((-1.0)*x4618*x4619)))),IkReal((((cj3*x4621))+((x4620*x4622))+(((-1.0)*x4619*x4620))+(((-1.0)*x4620*x4623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4625.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4624.value)))+(x4625.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4626=IKsin(j1);
IkReal x4627=IKcos(j1);
IkReal x4628=((1.0)*sj3);
IkReal x4629=(sj5*sj6);
IkReal x4630=(cj5*cj6);
IkReal x4631=((1.0)*cj5);
IkReal x4632=((1.0)*sj5);
IkReal x4633=(cj3*x4627);
IkReal x4634=(cj3*x4626);
IkReal x4635=(cj6*x4632);
IkReal x4636=(sj3*x4627);
IkReal x4637=(x4626*x4628);
evalcond[0]=((((-1.0)*px))+(((0.31436)*x4636))+(((0.31436)*x4634))+(((0.42076)*x4626)));
evalcond[1]=((((-0.42076)*x4627))+(((-0.31436)*x4633))+(((0.31436)*sj3*x4626))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*r11*sj6*x4631))+((r10*x4630))+x4636+x4634+(((-1.0)*r12*x4632)));
evalcond[3]=((((-1.0)*x4637))+((r11*x4629))+x4633+(((-1.0)*r10*x4635))+(((-1.0)*r12*x4631)));
evalcond[4]=(((r00*x4630))+(((-1.0)*x4637))+(((-1.0)*r02*x4632))+x4633+(((-1.0)*r01*sj6*x4631)));
evalcond[5]=((((-1.0)*x4634))+(((-1.0)*r02*x4631))+(((-1.0)*x4627*x4628))+(((-1.0)*r00*x4635))+((r01*x4629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4638=((196475000.0)*sj3);
IkReal x4639=((196475000.0)*cj3);
CheckValue<IkReal> x4640=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x4640.valid){
continue;
}
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal(((((-1.0)*px*x4639))+(((-262975000.0)*px))+(((-1.0)*py*x4638)))),IkReal((((py*x4639))+(((262975000.0)*py))+(((-1.0)*px*x4638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4640.value)))+(x4641.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4642=IKsin(j1);
IkReal x4643=IKcos(j1);
IkReal x4644=((1.0)*sj3);
IkReal x4645=(sj5*sj6);
IkReal x4646=(cj5*cj6);
IkReal x4647=((1.0)*cj5);
IkReal x4648=((1.0)*sj5);
IkReal x4649=(cj3*x4643);
IkReal x4650=(cj3*x4642);
IkReal x4651=(cj6*x4648);
IkReal x4652=(sj3*x4643);
IkReal x4653=(x4642*x4644);
evalcond[0]=((((0.42076)*x4642))+(((-1.0)*px))+(((0.31436)*x4650))+(((0.31436)*x4652)));
evalcond[1]=((((-0.42076)*x4643))+(((-1.0)*py))+(((-0.31436)*x4649))+(((0.31436)*sj3*x4642)));
evalcond[2]=(x4650+x4652+((r10*x4646))+(((-1.0)*r12*x4648))+(((-1.0)*r11*sj6*x4647)));
evalcond[3]=((((-1.0)*x4653))+x4649+((r11*x4645))+(((-1.0)*r12*x4647))+(((-1.0)*r10*x4651)));
evalcond[4]=((((-1.0)*x4653))+(((-1.0)*r01*sj6*x4647))+(((-1.0)*r02*x4648))+x4649+((r00*x4646)));
evalcond[5]=((((-1.0)*r02*x4647))+(((-1.0)*r00*x4651))+(((-1.0)*x4650))+((r01*x4645))+(((-1.0)*x4643*x4644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(((-1.0)*r22)),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
IkReal x4654=x4655.value;
j5array[0]=((-1.0)*x4654);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x4654)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x4656=IKcos(j5);
evalcond[0]=(((cj6*r20*x4656))+(((-1.0)*r21*sj6*x4656))+(((-1.0)*r22*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x4657=((196475000.0)*sj3);
IkReal x4658=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*py*x4657))+(((-1.0)*px*x4658))+(((-262975000.0)*px)))))+(IKabs((((py*x4658))+(((-1.0)*px*x4657))+(((262975000.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((-1.0)+(((-1.33846545362005)*cj3)));
j1eval[1]=IKsign(((-7859.0)+(((-10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4659=(r12*sj5);
IkReal x4660=((7859.0)*cj3);
IkReal x4661=(cj5*cj6*r10);
IkReal x4662=(cj5*r11*sj6);
CheckValue<IkReal> x4663=IKPowWithIntegerCheck(sj3,-1);
if(!x4663.valid){
continue;
}
if( IKabs(((((0.747124251354692)*x4661))+(((-0.747124251354692)*x4662))+(((2.37665177298222)*px))+(((-0.747124251354692)*x4659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x4663.value)*(((((-1.0)*x4659*x4660))+(((-1.0)*x4660*x4662))+(((25000.0)*cj3*px))+(((-10519.0)*x4662))+((x4660*x4661))+(((10519.0)*x4661))+(((-10519.0)*x4659)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.747124251354692)*x4661))+(((-0.747124251354692)*x4662))+(((2.37665177298222)*px))+(((-0.747124251354692)*x4659))))+IKsqr(((-9.50660709192889e-5)*(x4663.value)*(((((-1.0)*x4659*x4660))+(((-1.0)*x4660*x4662))+(((25000.0)*cj3*px))+(((-10519.0)*x4662))+((x4660*x4661))+(((10519.0)*x4661))+(((-10519.0)*x4659))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.747124251354692)*x4661))+(((-0.747124251354692)*x4662))+(((2.37665177298222)*px))+(((-0.747124251354692)*x4659))), ((-9.50660709192889e-5)*(x4663.value)*(((((-1.0)*x4659*x4660))+(((-1.0)*x4660*x4662))+(((25000.0)*cj3*px))+(((-10519.0)*x4662))+((x4660*x4661))+(((10519.0)*x4661))+(((-10519.0)*x4659))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4664=IKsin(j1);
IkReal x4665=IKcos(j1);
IkReal x4666=((1.0)*sj3);
IkReal x4667=(sj5*sj6);
IkReal x4668=(cj5*cj6);
IkReal x4669=((1.0)*cj5);
IkReal x4670=((1.0)*sj5);
IkReal x4671=(cj3*x4665);
IkReal x4672=(cj3*x4664);
IkReal x4673=(cj6*x4670);
IkReal x4674=(sj3*x4665);
IkReal x4675=(x4664*x4666);
evalcond[0]=((((0.42076)*x4664))+(((0.31436)*x4674))+(((0.31436)*x4672))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.31436)*x4671))+(((-0.42076)*x4665))+(((0.31436)*sj3*x4664)));
evalcond[2]=(((r10*x4668))+x4674+x4672+(((-1.0)*r12*x4670))+(((-1.0)*r11*sj6*x4669)));
evalcond[3]=(x4671+(((-1.0)*r10*x4673))+(((-1.0)*x4675))+((r11*x4667))+(((-1.0)*r12*x4669)));
evalcond[4]=((((-1.0)*r02*x4670))+x4671+(((-1.0)*x4675))+((r00*x4668))+(((-1.0)*r01*sj6*x4669)));
evalcond[5]=((((-1.0)*x4672))+((r01*x4667))+(((-1.0)*x4665*x4666))+(((-1.0)*r00*x4673))+(((-1.0)*r02*x4669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4676=((7859.0)*cj3);
IkReal x4677=(r12*sj5);
IkReal x4678=((7859.0)*sj3);
IkReal x4679=((25000.0)*py);
IkReal x4680=(cj5*cj6*r10);
IkReal x4681=(cj5*r11*sj6);
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x4679))+(((-1.0)*x4676*x4677))+(((-1.0)*x4676*x4681))+(((-10519.0)*x4677))+(((-10519.0)*x4681))+(((10519.0)*x4680))+((x4676*x4680)))),IkReal((((cj3*x4679))+((x4678*x4680))+(((-1.0)*x4677*x4678))+(((-1.0)*x4678*x4681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
CheckValue<IkReal> x4683=IKPowWithIntegerCheck(IKsign(((-7859.0)+(((-10519.0)*cj3)))),-1);
if(!x4683.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4682.value)+(((1.5707963267949)*(x4683.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4684=IKsin(j1);
IkReal x4685=IKcos(j1);
IkReal x4686=((1.0)*sj3);
IkReal x4687=(sj5*sj6);
IkReal x4688=(cj5*cj6);
IkReal x4689=((1.0)*cj5);
IkReal x4690=((1.0)*sj5);
IkReal x4691=(cj3*x4685);
IkReal x4692=(cj3*x4684);
IkReal x4693=(cj6*x4690);
IkReal x4694=(sj3*x4685);
IkReal x4695=(x4684*x4686);
evalcond[0]=((((0.31436)*x4694))+(((0.31436)*x4692))+(((0.42076)*x4684))+(((-1.0)*px)));
evalcond[1]=((((0.31436)*sj3*x4684))+(((-1.0)*py))+(((-0.42076)*x4685))+(((-0.31436)*x4691)));
evalcond[2]=((((-1.0)*r12*x4690))+x4692+x4694+((r10*x4688))+(((-1.0)*r11*sj6*x4689)));
evalcond[3]=(x4691+((r11*x4687))+(((-1.0)*x4695))+(((-1.0)*r10*x4693))+(((-1.0)*r12*x4689)));
evalcond[4]=(x4691+(((-1.0)*r02*x4690))+((r00*x4688))+(((-1.0)*x4695))+(((-1.0)*r01*sj6*x4689)));
evalcond[5]=((((-1.0)*r00*x4693))+(((-1.0)*r02*x4689))+(((-1.0)*x4685*x4686))+((r01*x4687))+(((-1.0)*x4692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4696=((196475000.0)*sj3);
IkReal x4697=((196475000.0)*cj3);
CheckValue<IkReal> x4698 = IKatan2WithCheck(IkReal(((((-1.0)*px*x4697))+(((-262975000.0)*px))+(((-1.0)*py*x4696)))),IkReal(((((-1.0)*px*x4696))+(((262975000.0)*py))+((py*x4697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4698.valid){
continue;
}
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x4699.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4698.value)+(((1.5707963267949)*(x4699.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4700=IKsin(j1);
IkReal x4701=IKcos(j1);
IkReal x4702=((1.0)*sj3);
IkReal x4703=(sj5*sj6);
IkReal x4704=(cj5*cj6);
IkReal x4705=((1.0)*cj5);
IkReal x4706=((1.0)*sj5);
IkReal x4707=(cj3*x4701);
IkReal x4708=(cj3*x4700);
IkReal x4709=(cj6*x4706);
IkReal x4710=(sj3*x4701);
IkReal x4711=(x4700*x4702);
evalcond[0]=((((0.42076)*x4700))+(((0.31436)*x4708))+(((0.31436)*x4710))+(((-1.0)*px)));
evalcond[1]=((((0.31436)*sj3*x4700))+(((-1.0)*py))+(((-0.31436)*x4707))+(((-0.42076)*x4701)));
evalcond[2]=((((-1.0)*r11*sj6*x4705))+((r10*x4704))+(((-1.0)*r12*x4706))+x4710+x4708);
evalcond[3]=((((-1.0)*r12*x4705))+x4707+(((-1.0)*r10*x4709))+((r11*x4703))+(((-1.0)*x4711)));
evalcond[4]=((((-1.0)*r02*x4706))+x4707+((r00*x4704))+(((-1.0)*r01*sj6*x4705))+(((-1.0)*x4711)));
evalcond[5]=((((-1.0)*r00*x4709))+(((-1.0)*x4708))+(((-1.0)*r02*x4705))+((r01*x4703))+(((-1.0)*x4701*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4712=((196475000.0)*sj3);
IkReal x4713=((196475000.0)*cj3);
CheckValue<IkReal> x4714 = IKatan2WithCheck(IkReal(((((-1.0)*px*x4713))+(((-262975000.0)*px))+(((-1.0)*py*x4712)))),IkReal(((((-1.0)*px*x4712))+(((262975000.0)*py))+((py*x4713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x4715.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4714.value)+(((1.5707963267949)*(x4715.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x4716=IKsin(j1);
IkReal x4717=IKcos(j1);
IkReal x4718=((0.31436)*cj3);
IkReal x4719=((0.31436)*sj3);
evalcond[0]=(((x4717*x4719))+(((0.42076)*x4716))+((x4716*x4718))+(((-1.0)*px)));
evalcond[1]=(((x4716*x4719))+(((-1.0)*py))+(((-1.0)*x4717*x4718))+(((-0.42076)*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x4720=(cj3*sj1);
IkReal x4721=(cj1*sj3);
IkReal x4722=(cj6*r20);
IkReal x4723=((1.0)*r21*sj6);
IkReal x4724=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x4724;
j5eval[1]=((IKabs((((r22*x4721))+((r22*x4720)))))+(IKabs((((x4721*x4722))+((x4720*x4722))+(((-1.0)*x4721*x4723))+(((-1.0)*x4720*x4723))))));
j5eval[2]=IKsign(x4724);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x4725=(cj6*r20);
IkReal x4726=(cj1*cj3);
IkReal x4727=(sj1*sj3);
IkReal x4728=((1.0)*sj6);
IkReal x4729=((((-1.0)*r00*x4728))+(((-1.0)*cj6*r01)));
j5eval[0]=x4729;
j5eval[1]=((IKabs(((((-1.0)*r22*x4727))+((r22*x4726)))))+(IKabs((((x4725*x4727))+((r21*sj6*x4726))+(((-1.0)*x4725*x4726))+(((-1.0)*r21*x4727*x4728))))));
j5eval[2]=IKsign(x4729);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x4730=cj6*cj6;
IkReal x4731=((1.0)*r11);
IkReal x4732=(cj3*sj1);
IkReal x4733=(cj1*sj3);
IkReal x4734=(cj6*r20);
IkReal x4735=(r21*sj6);
IkReal x4736=(((r11*r21))+(((-1.0)*sj6*x4731*x4734))+((r12*r22))+((r10*r20*x4730))+(((-1.0)*cj6*r10*x4735))+(((-1.0)*r21*x4730*x4731)));
j5eval[0]=x4736;
j5eval[1]=((IKabs((((r22*x4732))+((r22*x4733)))))+(IKabs(((((-1.0)*x4733*x4734))+(((-1.0)*x4732*x4734))+((x4732*x4735))+((x4733*x4735))))));
j5eval[2]=IKsign(x4736);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4737=cj6*cj6;
IkReal x4738=((1.0)*r11);
IkReal x4739=(cj3*sj1);
IkReal x4740=(cj1*sj3);
IkReal x4741=(cj6*r20);
IkReal x4742=(r21*sj6);
CheckValue<IkReal> x4743=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+((r10*r20*x4737))+(((-1.0)*sj6*x4738*x4741))+(((-1.0)*r21*x4737*x4738))+(((-1.0)*cj6*r10*x4742)))),-1);
if(!x4743.valid){
continue;
}
CheckValue<IkReal> x4744 = IKatan2WithCheck(IkReal((((r22*x4740))+((r22*x4739)))),IkReal(((((-1.0)*x4739*x4741))+((x4740*x4742))+(((-1.0)*x4740*x4741))+((x4739*x4742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4744.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4743.value)))+(x4744.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4745=IKsin(j5);
IkReal x4746=IKcos(j5);
IkReal x4747=(cj1*cj3);
IkReal x4748=(cj3*sj1);
IkReal x4749=((1.0)*sj3);
IkReal x4750=(sj1*x4749);
IkReal x4751=(sj6*x4745);
IkReal x4752=((1.0)*x4745);
IkReal x4753=((1.0)*x4746);
IkReal x4754=(cj6*x4746);
IkReal x4755=(sj6*x4753);
IkReal x4756=(cj6*x4752);
evalcond[0]=((((-1.0)*r20*x4756))+(((-1.0)*r22*x4753))+((r21*x4751)));
evalcond[1]=((((-1.0)*r21*x4755))+((r20*x4754))+(((-1.0)*r22*x4752)));
evalcond[2]=((((-1.0)*r11*x4755))+((cj1*sj3))+(((-1.0)*r12*x4752))+x4748+((r10*x4754)));
evalcond[3]=(((r11*x4751))+(((-1.0)*r12*x4753))+x4747+(((-1.0)*x4750))+(((-1.0)*r10*x4756)));
evalcond[4]=(((r00*x4754))+(((-1.0)*r01*x4755))+x4747+(((-1.0)*x4750))+(((-1.0)*r02*x4752)));
evalcond[5]=(((r01*x4751))+(((-1.0)*cj1*x4749))+(((-1.0)*r00*x4756))+(((-1.0)*r02*x4753))+(((-1.0)*x4748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4757=((1.0)*sj6);
IkReal x4758=(sj1*sj3);
IkReal x4759=(cj6*r20);
IkReal x4760=(cj1*cj3);
CheckValue<IkReal> x4761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4757))+(((-1.0)*cj6*r01)))),-1);
if(!x4761.valid){
continue;
}
CheckValue<IkReal> x4762 = IKatan2WithCheck(IkReal((((r22*x4760))+(((-1.0)*r22*x4758)))),IkReal((((x4758*x4759))+(((-1.0)*x4759*x4760))+(((-1.0)*r21*x4757*x4758))+((r21*sj6*x4760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4762.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4761.value)))+(x4762.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4763=IKsin(j5);
IkReal x4764=IKcos(j5);
IkReal x4765=(cj1*cj3);
IkReal x4766=(cj3*sj1);
IkReal x4767=((1.0)*sj3);
IkReal x4768=(sj1*x4767);
IkReal x4769=(sj6*x4763);
IkReal x4770=((1.0)*x4763);
IkReal x4771=((1.0)*x4764);
IkReal x4772=(cj6*x4764);
IkReal x4773=(sj6*x4771);
IkReal x4774=(cj6*x4770);
evalcond[0]=((((-1.0)*r20*x4774))+((r21*x4769))+(((-1.0)*r22*x4771)));
evalcond[1]=(((r20*x4772))+(((-1.0)*r21*x4773))+(((-1.0)*r22*x4770)));
evalcond[2]=((((-1.0)*r11*x4773))+(((-1.0)*r12*x4770))+((cj1*sj3))+x4766+((r10*x4772)));
evalcond[3]=((((-1.0)*x4768))+(((-1.0)*r12*x4771))+x4765+((r11*x4769))+(((-1.0)*r10*x4774)));
evalcond[4]=((((-1.0)*x4768))+((r00*x4772))+(((-1.0)*r01*x4773))+x4765+(((-1.0)*r02*x4770)));
evalcond[5]=((((-1.0)*x4766))+(((-1.0)*cj1*x4767))+(((-1.0)*r00*x4774))+((r01*x4769))+(((-1.0)*r02*x4771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4775=(cj3*sj1);
IkReal x4776=(cj1*sj3);
IkReal x4777=(cj6*r20);
IkReal x4778=((1.0)*r21*sj6);
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780 = IKatan2WithCheck(IkReal(((((-1.0)*x4776*x4778))+((x4775*x4777))+((x4776*x4777))+(((-1.0)*x4775*x4778)))),IkReal((((r22*x4776))+((r22*x4775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4780.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4779.value)))+(x4780.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4781=IKsin(j5);
IkReal x4782=IKcos(j5);
IkReal x4783=(cj1*cj3);
IkReal x4784=(cj3*sj1);
IkReal x4785=((1.0)*sj3);
IkReal x4786=(sj1*x4785);
IkReal x4787=(sj6*x4781);
IkReal x4788=((1.0)*x4781);
IkReal x4789=((1.0)*x4782);
IkReal x4790=(cj6*x4782);
IkReal x4791=(sj6*x4789);
IkReal x4792=(cj6*x4788);
evalcond[0]=((((-1.0)*r22*x4789))+((r21*x4787))+(((-1.0)*r20*x4792)));
evalcond[1]=(((r20*x4790))+(((-1.0)*r22*x4788))+(((-1.0)*r21*x4791)));
evalcond[2]=(((r10*x4790))+((cj1*sj3))+x4784+(((-1.0)*r11*x4791))+(((-1.0)*r12*x4788)));
evalcond[3]=(((r11*x4787))+x4783+(((-1.0)*x4786))+(((-1.0)*r12*x4789))+(((-1.0)*r10*x4792)));
evalcond[4]=(((r00*x4790))+x4783+(((-1.0)*r02*x4788))+(((-1.0)*r01*x4791))+(((-1.0)*x4786)));
evalcond[5]=(((r01*x4787))+(((-1.0)*r02*x4789))+(((-1.0)*cj1*x4785))+(((-1.0)*x4784))+(((-1.0)*r00*x4792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4793=((196475000.0)*sj3);
IkReal x4794=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*px*x4794))+((py*x4793))+(((-262975000.0)*px)))))+(IKabs((((py*x4794))+(((262975000.0)*py))+((px*x4793))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j5eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j5eval[0]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
IkReal x4795=x4796.value;
j5array[0]=((-1.0)*x4795);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x4795)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x4797=IKsin(j5);
evalcond[0]=(((r21*sj6*x4797))+(((-1.0)*r22*(IKcos(j5))))+(((-1.0)*cj6*r20*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4798=((196475000.0)*sj3);
IkReal x4799=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs((((py*x4799))+(((262975000.0)*py))+((px*x4798)))))+(IKabs(((((-1.0)*px*x4799))+((py*x4798))+(((-262975000.0)*px))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((1.33846545362005)*cj3)));
j1eval[1]=IKsign(((7859.0)+(((10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4800=(cj5*r12);
IkReal x4801=(r11*sj6);
IkReal x4802=(cj6*r10);
IkReal x4803=((10519.0)*sj5);
IkReal x4804=((0.747124251354692)*sj5);
IkReal x4805=((7859.0)*cj3*sj5);
CheckValue<IkReal> x4806=IKPowWithIntegerCheck(sj3,-1);
if(!x4806.valid){
continue;
}
if( IKabs(((-9.50660709192889e-5)*(x4806.value)*(((((-25000.0)*cj3*py))+((x4801*x4803))+((x4801*x4805))+(((-7859.0)*cj3*x4800))+(((-1.0)*x4802*x4805))+(((-1.0)*x4802*x4803))+(((-10519.0)*x4800)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37665177298222)*py))+((x4801*x4804))+(((-1.0)*x4802*x4804))+(((-0.747124251354692)*x4800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.50660709192889e-5)*(x4806.value)*(((((-25000.0)*cj3*py))+((x4801*x4803))+((x4801*x4805))+(((-7859.0)*cj3*x4800))+(((-1.0)*x4802*x4805))+(((-1.0)*x4802*x4803))+(((-10519.0)*x4800))))))+IKsqr(((((-2.37665177298222)*py))+((x4801*x4804))+(((-1.0)*x4802*x4804))+(((-0.747124251354692)*x4800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-9.50660709192889e-5)*(x4806.value)*(((((-25000.0)*cj3*py))+((x4801*x4803))+((x4801*x4805))+(((-7859.0)*cj3*x4800))+(((-1.0)*x4802*x4805))+(((-1.0)*x4802*x4803))+(((-10519.0)*x4800))))), ((((-2.37665177298222)*py))+((x4801*x4804))+(((-1.0)*x4802*x4804))+(((-0.747124251354692)*x4800))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4807=IKsin(j1);
IkReal x4808=IKcos(j1);
IkReal x4809=(sj5*sj6);
IkReal x4810=(cj5*cj6);
IkReal x4811=((1.0)*cj5);
IkReal x4812=((1.0)*sj5);
IkReal x4813=(sj3*x4808);
IkReal x4814=(cj3*x4807);
IkReal x4815=(cj6*x4812);
IkReal x4816=(sj3*x4807);
IkReal x4817=(cj3*x4808);
IkReal x4818=((1.0)*x4814);
evalcond[0]=((((0.42076)*x4807))+(((-1.0)*px))+(((-0.31436)*x4813))+(((0.31436)*x4814)));
evalcond[1]=((((-1.0)*py))+(((-0.31436)*x4816))+(((-0.31436)*x4817))+(((-0.42076)*x4808)));
evalcond[2]=((((-1.0)*r10*x4815))+((r11*x4809))+(((-1.0)*r12*x4811))+x4817+x4816);
evalcond[3]=((((-1.0)*r00*x4815))+((r01*x4809))+(((-1.0)*x4818))+(((-1.0)*r02*x4811))+x4813);
evalcond[4]=((((-1.0)*x4818))+((r10*x4810))+(((-1.0)*r11*sj6*x4811))+(((-1.0)*r12*x4812))+x4813);
evalcond[5]=((((-1.0)*x4817))+(((-1.0)*x4816))+(((-1.0)*r02*x4812))+(((-1.0)*r01*sj6*x4811))+((r00*x4810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4819=(r11*sj6);
IkReal x4820=(cj6*r10);
IkReal x4821=((10519.0)*sj5);
IkReal x4822=((25000.0)*px);
IkReal x4823=((7859.0)*cj3*sj5);
IkReal x4824=((7859.0)*cj5*r12);
IkReal x4825=((7859.0)*sj3*sj5);
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal((((x4820*x4825))+((sj3*x4824))+(((-1.0)*x4819*x4825))+((cj3*x4822)))),IkReal((((x4820*x4823))+((x4820*x4821))+(((10519.0)*cj5*r12))+(((-1.0)*x4819*x4823))+(((-1.0)*x4819*x4821))+((cj3*x4824))+(((-1.0)*sj3*x4822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827=IKPowWithIntegerCheck(IKsign(((7859.0)+(((10519.0)*cj3)))),-1);
if(!x4827.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4826.value)+(((1.5707963267949)*(x4827.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4828=IKsin(j1);
IkReal x4829=IKcos(j1);
IkReal x4830=(sj5*sj6);
IkReal x4831=(cj5*cj6);
IkReal x4832=((1.0)*cj5);
IkReal x4833=((1.0)*sj5);
IkReal x4834=(sj3*x4829);
IkReal x4835=(cj3*x4828);
IkReal x4836=(cj6*x4833);
IkReal x4837=(sj3*x4828);
IkReal x4838=(cj3*x4829);
IkReal x4839=((1.0)*x4835);
evalcond[0]=((((0.31436)*x4835))+(((0.42076)*x4828))+(((-1.0)*px))+(((-0.31436)*x4834)));
evalcond[1]=((((-0.42076)*x4829))+(((-1.0)*py))+(((-0.31436)*x4838))+(((-0.31436)*x4837)));
evalcond[2]=((((-1.0)*r10*x4836))+((r11*x4830))+(((-1.0)*r12*x4832))+x4838+x4837);
evalcond[3]=(((r01*x4830))+(((-1.0)*r02*x4832))+(((-1.0)*x4839))+(((-1.0)*r00*x4836))+x4834);
evalcond[4]=(((r10*x4831))+(((-1.0)*r12*x4833))+(((-1.0)*x4839))+(((-1.0)*r11*sj6*x4832))+x4834);
evalcond[5]=((((-1.0)*r01*sj6*x4832))+(((-1.0)*x4837))+(((-1.0)*x4838))+(((-1.0)*r02*x4833))+((r00*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4840=((196475000.0)*sj3);
IkReal x4841=((196475000.0)*cj3);
CheckValue<IkReal> x4842 = IKatan2WithCheck(IkReal(((((-262975000.0)*px))+(((-1.0)*px*x4841))+((py*x4840)))),IkReal(((((262975000.0)*py))+((py*x4841))+((px*x4840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4842.valid){
continue;
}
CheckValue<IkReal> x4843=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x4843.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4842.value)+(((1.5707963267949)*(x4843.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4844=IKsin(j1);
IkReal x4845=IKcos(j1);
IkReal x4846=(sj5*sj6);
IkReal x4847=(cj5*cj6);
IkReal x4848=((1.0)*cj5);
IkReal x4849=((1.0)*sj5);
IkReal x4850=(sj3*x4845);
IkReal x4851=(cj3*x4844);
IkReal x4852=(cj6*x4849);
IkReal x4853=(sj3*x4844);
IkReal x4854=(cj3*x4845);
IkReal x4855=((1.0)*x4851);
evalcond[0]=((((0.31436)*x4851))+(((-1.0)*px))+(((-0.31436)*x4850))+(((0.42076)*x4844)));
evalcond[1]=((((-0.42076)*x4845))+(((-1.0)*py))+(((-0.31436)*x4853))+(((-0.31436)*x4854)));
evalcond[2]=((((-1.0)*r10*x4852))+((r11*x4846))+(((-1.0)*r12*x4848))+x4854+x4853);
evalcond[3]=((((-1.0)*r02*x4848))+(((-1.0)*x4855))+((r01*x4846))+(((-1.0)*r00*x4852))+x4850);
evalcond[4]=(((r10*x4847))+(((-1.0)*x4855))+(((-1.0)*r12*x4849))+(((-1.0)*r11*sj6*x4848))+x4850);
evalcond[5]=((((-1.0)*r01*sj6*x4848))+(((-1.0)*r02*x4849))+(((-1.0)*x4854))+(((-1.0)*x4853))+((r00*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x4857 = IKatan2WithCheck(IkReal(((-1.0)*r22)),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4857.valid){
continue;
}
IkReal x4856=x4857.value;
j5array[0]=((-1.0)*x4856);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x4856)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x4858=IKcos(j5);
evalcond[0]=((((-1.0)*r21*sj6*x4858))+((cj6*r20*x4858))+(((-1.0)*r22*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4859=((196475000.0)*sj3);
IkReal x4860=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs((((py*x4859))+(((-262975000.0)*px))+(((-1.0)*px*x4860)))))+(IKabs((((px*x4859))+((py*x4860))+(((262975000.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((1.33846545362005)*cj3)));
j1eval[1]=IKsign(((7859.0)+(((10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4861=(cj5*r12);
IkReal x4862=(r11*sj6);
IkReal x4863=(cj6*r10);
IkReal x4864=((10519.0)*sj5);
IkReal x4865=((0.747124251354692)*sj5);
IkReal x4866=((7859.0)*cj3*sj5);
CheckValue<IkReal> x4867=IKPowWithIntegerCheck(sj3,-1);
if(!x4867.valid){
continue;
}
if( IKabs(((-9.50660709192889e-5)*(x4867.value)*(((((-1.0)*x4863*x4864))+(((-1.0)*x4863*x4866))+(((-10519.0)*x4861))+(((-25000.0)*cj3*py))+((x4862*x4866))+((x4862*x4864))+(((-7859.0)*cj3*x4861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4863*x4865))+(((-2.37665177298222)*py))+((x4862*x4865))+(((-0.747124251354692)*x4861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.50660709192889e-5)*(x4867.value)*(((((-1.0)*x4863*x4864))+(((-1.0)*x4863*x4866))+(((-10519.0)*x4861))+(((-25000.0)*cj3*py))+((x4862*x4866))+((x4862*x4864))+(((-7859.0)*cj3*x4861))))))+IKsqr(((((-1.0)*x4863*x4865))+(((-2.37665177298222)*py))+((x4862*x4865))+(((-0.747124251354692)*x4861))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-9.50660709192889e-5)*(x4867.value)*(((((-1.0)*x4863*x4864))+(((-1.0)*x4863*x4866))+(((-10519.0)*x4861))+(((-25000.0)*cj3*py))+((x4862*x4866))+((x4862*x4864))+(((-7859.0)*cj3*x4861))))), ((((-1.0)*x4863*x4865))+(((-2.37665177298222)*py))+((x4862*x4865))+(((-0.747124251354692)*x4861))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4868=IKsin(j1);
IkReal x4869=IKcos(j1);
IkReal x4870=(sj5*sj6);
IkReal x4871=(cj5*cj6);
IkReal x4872=((1.0)*cj5);
IkReal x4873=((1.0)*sj5);
IkReal x4874=(sj3*x4869);
IkReal x4875=(cj3*x4868);
IkReal x4876=(cj6*x4873);
IkReal x4877=(sj3*x4868);
IkReal x4878=(cj3*x4869);
IkReal x4879=((1.0)*x4875);
evalcond[0]=((((0.42076)*x4868))+(((0.31436)*x4875))+(((-1.0)*px))+(((-0.31436)*x4874)));
evalcond[1]=((((-1.0)*py))+(((-0.42076)*x4869))+(((-0.31436)*x4878))+(((-0.31436)*x4877)));
evalcond[2]=((((-1.0)*r12*x4872))+(((-1.0)*r10*x4876))+((r11*x4870))+x4877+x4878);
evalcond[3]=(((r01*x4870))+(((-1.0)*r00*x4876))+(((-1.0)*r02*x4872))+(((-1.0)*x4879))+x4874);
evalcond[4]=(((r10*x4871))+(((-1.0)*r12*x4873))+(((-1.0)*x4879))+(((-1.0)*r11*sj6*x4872))+x4874);
evalcond[5]=(((r00*x4871))+(((-1.0)*x4878))+(((-1.0)*x4877))+(((-1.0)*r02*x4873))+(((-1.0)*r01*sj6*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4880=(r11*sj6);
IkReal x4881=(cj6*r10);
IkReal x4882=((10519.0)*sj5);
IkReal x4883=((25000.0)*px);
IkReal x4884=((7859.0)*cj3*sj5);
IkReal x4885=((7859.0)*cj5*r12);
IkReal x4886=((7859.0)*sj3*sj5);
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal((((sj3*x4885))+((cj3*x4883))+(((-1.0)*x4880*x4886))+((x4881*x4886)))),IkReal((((cj3*x4885))+(((10519.0)*cj5*r12))+(((-1.0)*sj3*x4883))+(((-1.0)*x4880*x4882))+(((-1.0)*x4880*x4884))+((x4881*x4882))+((x4881*x4884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
CheckValue<IkReal> x4888=IKPowWithIntegerCheck(IKsign(((7859.0)+(((10519.0)*cj3)))),-1);
if(!x4888.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4887.value)+(((1.5707963267949)*(x4888.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4889=IKsin(j1);
IkReal x4890=IKcos(j1);
IkReal x4891=(sj5*sj6);
IkReal x4892=(cj5*cj6);
IkReal x4893=((1.0)*cj5);
IkReal x4894=((1.0)*sj5);
IkReal x4895=(sj3*x4890);
IkReal x4896=(cj3*x4889);
IkReal x4897=(cj6*x4894);
IkReal x4898=(sj3*x4889);
IkReal x4899=(cj3*x4890);
IkReal x4900=((1.0)*x4896);
evalcond[0]=((((0.31436)*x4896))+(((-1.0)*px))+(((-0.31436)*x4895))+(((0.42076)*x4889)));
evalcond[1]=((((-1.0)*py))+(((-0.31436)*x4898))+(((-0.31436)*x4899))+(((-0.42076)*x4890)));
evalcond[2]=(((r11*x4891))+(((-1.0)*r12*x4893))+(((-1.0)*r10*x4897))+x4899+x4898);
evalcond[3]=((((-1.0)*r00*x4897))+(((-1.0)*x4900))+(((-1.0)*r02*x4893))+((r01*x4891))+x4895);
evalcond[4]=((((-1.0)*r12*x4894))+(((-1.0)*r11*sj6*x4893))+(((-1.0)*x4900))+((r10*x4892))+x4895);
evalcond[5]=((((-1.0)*r01*sj6*x4893))+(((-1.0)*x4899))+(((-1.0)*x4898))+(((-1.0)*r02*x4894))+((r00*x4892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4901=((196475000.0)*sj3);
IkReal x4902=((196475000.0)*cj3);
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal((((py*x4901))+(((-1.0)*px*x4902))+(((-262975000.0)*px)))),IkReal((((py*x4902))+(((262975000.0)*py))+((px*x4901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
CheckValue<IkReal> x4904=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x4904.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4903.value)+(((1.5707963267949)*(x4904.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x4905=IKsin(j1);
IkReal x4906=IKcos(j1);
IkReal x4907=(sj5*sj6);
IkReal x4908=(cj5*cj6);
IkReal x4909=((1.0)*cj5);
IkReal x4910=((1.0)*sj5);
IkReal x4911=(sj3*x4906);
IkReal x4912=(cj3*x4905);
IkReal x4913=(cj6*x4910);
IkReal x4914=(sj3*x4905);
IkReal x4915=(cj3*x4906);
IkReal x4916=((1.0)*x4912);
evalcond[0]=((((-0.31436)*x4911))+(((0.42076)*x4905))+(((0.31436)*x4912))+(((-1.0)*px)));
evalcond[1]=((((-0.31436)*x4914))+(((-0.31436)*x4915))+(((-1.0)*py))+(((-0.42076)*x4906)));
evalcond[2]=((((-1.0)*r12*x4909))+x4914+x4915+(((-1.0)*r10*x4913))+((r11*x4907)));
evalcond[3]=(x4911+(((-1.0)*x4916))+(((-1.0)*r02*x4909))+((r01*x4907))+(((-1.0)*r00*x4913)));
evalcond[4]=((((-1.0)*r11*sj6*x4909))+x4911+(((-1.0)*r12*x4910))+(((-1.0)*x4916))+((r10*x4908)));
evalcond[5]=((((-1.0)*r02*x4910))+(((-1.0)*r01*sj6*x4909))+(((-1.0)*x4914))+(((-1.0)*x4915))+((r00*x4908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4917=((196475000.0)*sj3);
IkReal x4918=((196475000.0)*cj3);
CheckValue<IkReal> x4919 = IKatan2WithCheck(IkReal((((py*x4917))+(((-1.0)*px*x4918))+(((-262975000.0)*px)))),IkReal((((py*x4918))+(((262975000.0)*py))+((px*x4917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4919.valid){
continue;
}
CheckValue<IkReal> x4920=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x4920.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x4919.value)+(((1.5707963267949)*(x4920.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x4921=IKsin(j1);
IkReal x4922=IKcos(j1);
IkReal x4923=((0.31436)*cj3);
IkReal x4924=((0.31436)*sj3);
evalcond[0]=(((x4921*x4923))+(((-1.0)*px))+(((0.42076)*x4921))+(((-1.0)*x4922*x4924)));
evalcond[1]=((((-0.42076)*x4922))+(((-1.0)*py))+(((-1.0)*x4922*x4923))+(((-1.0)*x4921*x4924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4925=(r21*sj6);
IkReal x4926=(cj3*sj1);
IkReal x4927=(cj1*sj3);
IkReal x4928=(cj6*r20);
IkReal x4929=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x4929;
j5eval[1]=((IKabs((((r22*x4927))+(((-1.0)*r22*x4926)))))+(IKabs((((x4926*x4928))+(((-1.0)*x4925*x4926))+((x4925*x4927))+(((-1.0)*x4927*x4928))))));
j5eval[2]=IKsign(x4929);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4930=(sj1*sj3);
IkReal x4931=(r21*sj6);
IkReal x4932=((1.0)*cj6);
IkReal x4933=(cj1*cj3);
IkReal x4934=((((-1.0)*r01*x4932))+(((-1.0)*r00*sj6)));
j5eval[0]=x4934;
j5eval[1]=((IKabs((((r22*x4930))+((r22*x4933)))))+(IKabs(((((-1.0)*r20*x4932*x4933))+(((-1.0)*r20*x4930*x4932))+((x4931*x4933))+((x4930*x4931))))));
j5eval[2]=IKsign(x4934);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x4935=cj6*cj6;
IkReal x4936=((1.0)*r21);
IkReal x4937=(cj1*cj3);
IkReal x4938=(sj1*sj3);
IkReal x4939=(cj6*r20);
IkReal x4940=((((-1.0)*r11*x4935*x4936))+(((-1.0)*r11*sj6*x4939))+((r11*r21))+((r12*r22))+(((-1.0)*cj6*r10*sj6*x4936))+((r10*r20*x4935)));
j5eval[0]=x4940;
j5eval[1]=IKsign(x4940);
j5eval[2]=((IKabs((((r22*x4937))+((r22*x4938)))))+(IKabs((((x4937*x4939))+((x4938*x4939))+(((-1.0)*sj6*x4936*x4938))+(((-1.0)*sj6*x4936*x4937))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4941=cj6*cj6;
IkReal x4942=((1.0)*r21);
IkReal x4943=(cj1*cj3);
IkReal x4944=(sj1*sj3);
IkReal x4945=(cj6*r20);
CheckValue<IkReal> x4946 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x4942*x4944))+(((-1.0)*sj6*x4942*x4943))+((x4943*x4945))+((x4944*x4945)))),IkReal((((r22*x4944))+((r22*x4943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4946.valid){
continue;
}
CheckValue<IkReal> x4947=IKPowWithIntegerCheck(IKsign((((r10*r20*x4941))+((r11*r21))+((r12*r22))+(((-1.0)*r11*sj6*x4945))+(((-1.0)*r11*x4941*x4942))+(((-1.0)*cj6*r10*sj6*x4942)))),-1);
if(!x4947.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4946.value)+(((1.5707963267949)*(x4947.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4948=IKsin(j5);
IkReal x4949=IKcos(j5);
IkReal x4950=(cj1*sj3);
IkReal x4951=((1.0)*cj3);
IkReal x4952=(sj1*sj3);
IkReal x4953=(sj1*x4951);
IkReal x4954=(sj6*x4948);
IkReal x4955=((1.0)*x4948);
IkReal x4956=((1.0)*x4949);
IkReal x4957=(cj6*x4949);
IkReal x4958=(sj6*x4956);
IkReal x4959=(cj6*x4955);
evalcond[0]=((((-1.0)*r20*x4959))+(((-1.0)*r22*x4956))+((r21*x4954)));
evalcond[1]=((((-1.0)*r21*x4958))+(((-1.0)*r22*x4955))+((r20*x4957)));
evalcond[2]=(x4952+((r11*x4954))+(((-1.0)*r12*x4956))+((cj1*cj3))+(((-1.0)*r10*x4959)));
evalcond[3]=(x4950+(((-1.0)*x4953))+(((-1.0)*r02*x4956))+(((-1.0)*r00*x4959))+((r01*x4954)));
evalcond[4]=(x4950+((r10*x4957))+(((-1.0)*x4953))+(((-1.0)*r11*x4958))+(((-1.0)*r12*x4955)));
evalcond[5]=((((-1.0)*r02*x4955))+(((-1.0)*x4952))+(((-1.0)*r01*x4958))+((r00*x4957))+(((-1.0)*cj1*x4951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4960=(sj1*sj3);
IkReal x4961=(r21*sj6);
IkReal x4962=((1.0)*cj6);
IkReal x4963=(cj1*cj3);
CheckValue<IkReal> x4964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x4962)))),-1);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965 = IKatan2WithCheck(IkReal((((r22*x4963))+((r22*x4960)))),IkReal(((((-1.0)*r20*x4960*x4962))+(((-1.0)*r20*x4962*x4963))+((x4961*x4963))+((x4960*x4961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4965.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4964.value)))+(x4965.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4966=IKsin(j5);
IkReal x4967=IKcos(j5);
IkReal x4968=(cj1*sj3);
IkReal x4969=((1.0)*cj3);
IkReal x4970=(sj1*sj3);
IkReal x4971=(sj1*x4969);
IkReal x4972=(sj6*x4966);
IkReal x4973=((1.0)*x4966);
IkReal x4974=((1.0)*x4967);
IkReal x4975=(cj6*x4967);
IkReal x4976=(sj6*x4974);
IkReal x4977=(cj6*x4973);
evalcond[0]=((((-1.0)*r22*x4974))+((r21*x4972))+(((-1.0)*r20*x4977)));
evalcond[1]=((((-1.0)*r21*x4976))+(((-1.0)*r22*x4973))+((r20*x4975)));
evalcond[2]=(x4970+(((-1.0)*r10*x4977))+((r11*x4972))+(((-1.0)*r12*x4974))+((cj1*cj3)));
evalcond[3]=(x4968+(((-1.0)*x4971))+(((-1.0)*r02*x4974))+(((-1.0)*r00*x4977))+((r01*x4972)));
evalcond[4]=(x4968+((r10*x4975))+(((-1.0)*r12*x4973))+(((-1.0)*x4971))+(((-1.0)*r11*x4976)));
evalcond[5]=((((-1.0)*x4970))+(((-1.0)*r02*x4973))+(((-1.0)*r01*x4976))+((r00*x4975))+(((-1.0)*cj1*x4969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x4978=(cj1*sj3);
IkReal x4979=(cj6*r20);
IkReal x4980=(r21*sj6);
IkReal x4981=(cj3*sj1);
CheckValue<IkReal> x4982 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4981))+((r22*x4978)))),IkReal((((x4978*x4980))+((x4979*x4981))+(((-1.0)*x4978*x4979))+(((-1.0)*x4980*x4981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4982.valid){
continue;
}
CheckValue<IkReal> x4983=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x4983.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x4982.value)+(((1.5707963267949)*(x4983.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x4984=IKsin(j5);
IkReal x4985=IKcos(j5);
IkReal x4986=(cj1*sj3);
IkReal x4987=((1.0)*cj3);
IkReal x4988=(sj1*sj3);
IkReal x4989=(sj1*x4987);
IkReal x4990=(sj6*x4984);
IkReal x4991=((1.0)*x4984);
IkReal x4992=((1.0)*x4985);
IkReal x4993=(cj6*x4985);
IkReal x4994=(sj6*x4992);
IkReal x4995=(cj6*x4991);
evalcond[0]=((((-1.0)*r20*x4995))+(((-1.0)*r22*x4992))+((r21*x4990)));
evalcond[1]=((((-1.0)*r21*x4994))+(((-1.0)*r22*x4991))+((r20*x4993)));
evalcond[2]=(x4988+(((-1.0)*r12*x4992))+((r11*x4990))+((cj1*cj3))+(((-1.0)*r10*x4995)));
evalcond[3]=(x4986+(((-1.0)*r00*x4995))+(((-1.0)*r02*x4992))+(((-1.0)*x4989))+((r01*x4990)));
evalcond[4]=(x4986+(((-1.0)*r11*x4994))+(((-1.0)*r12*x4991))+((r10*x4993))+(((-1.0)*x4989)));
evalcond[5]=((((-1.0)*cj1*x4987))+(((-1.0)*r01*x4994))+(((-1.0)*r02*x4991))+(((-1.0)*x4988))+((r00*x4993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x4996=(r00*sj6);
IkReal x4997=((0.0123999)*sj2);
IkReal x4998=(cj6*r01);
IkReal x4999=((0.31436)*cj2*sj3);
CheckValue<IkReal> x5000=IKPowWithIntegerCheck(((((0.31436)*cj3*sj2))+(((0.42076)*sj2))),-1);
if(!x5000.valid){
continue;
}
CheckValue<IkReal> x5001=IKPowWithIntegerCheck(sj2,-1);
if(!x5001.valid){
continue;
}
if( IKabs(((x5000.value)*((((x4996*x4997))+((x4997*x4998))+((px*sj2))+(((-1.0)*x4998*x4999))+(((-1.0)*x4996*x4999)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5001.value)*((x4996+x4998)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5000.value)*((((x4996*x4997))+((x4997*x4998))+((px*sj2))+(((-1.0)*x4998*x4999))+(((-1.0)*x4996*x4999))))))+IKsqr(((x5001.value)*((x4996+x4998))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5000.value)*((((x4996*x4997))+((x4997*x4998))+((px*sj2))+(((-1.0)*x4998*x4999))+(((-1.0)*x4996*x4999))))), ((x5001.value)*((x4996+x4998))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x5002=IKcos(j1);
IkReal x5003=IKsin(j1);
IkReal x5004=(cj6*r01);
IkReal x5005=(r00*sj6);
IkReal x5006=(cj6*r11);
IkReal x5007=((0.31436)*cj3);
IkReal x5008=(r10*sj6);
IkReal x5009=((0.31436)*cj2*sj3);
IkReal x5010=(sj2*x5003);
IkReal x5011=(sj2*x5002);
evalcond[0]=(x5005+x5004+(((-1.0)*x5011)));
evalcond[1]=(x5006+x5008+(((-1.0)*x5010)));
evalcond[2]=(((x5003*x5007))+((x5002*x5009))+(((0.42076)*x5003))+(((0.0003501)*x5004))+(((0.0003501)*x5005))+(((-1.0)*px))+(((-0.01275)*x5011)));
evalcond[3]=(((x5003*x5009))+(((-1.0)*x5002*x5007))+(((0.0003501)*x5008))+(((0.0003501)*x5006))+(((-1.0)*py))+(((-0.42076)*x5002))+(((-0.01275)*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5012=cj6*cj6;
IkReal x5013=r21*r21;
IkReal x5014=(r22*sj2);
IkReal x5015=((1.0)*cj3);
IkReal x5016=(cj6*r20);
IkReal x5017=(r21*sj2*sj6);
IkReal x5018=((r22*r22)+(((-2.0)*r21*sj6*x5016))+x5013+((x5012*(r20*r20)))+(((-1.0)*x5012*x5013)));
j5eval[0]=x5018;
j5eval[1]=IKsign(x5018);
j5eval[2]=((IKabs((((sj3*x5014))+(((-1.0)*x5015*x5017))+((cj3*sj2*x5016)))))+(IKabs(((((-1.0)*sj3*x5017))+(((-1.0)*x5014*x5015))+((sj2*sj3*x5016))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5019=((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)));
j5eval[0]=x5019;
j5eval[1]=IKsign(x5019);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5020=cj6*cj6;
IkReal x5021=(sj2*sj3);
IkReal x5022=((1.0)*r11);
IkReal x5023=(r21*sj6);
IkReal x5024=(cj6*r10);
IkReal x5025=(cj6*r20);
IkReal x5026=(cj1*sj3);
IkReal x5027=(cj2*cj3*sj1);
IkReal x5028=(((r10*r20*x5020))+((r11*r21))+(((-1.0)*sj6*x5022*x5025))+((r12*r22))+(((-1.0)*r21*x5020*x5022))+(((-1.0)*x5023*x5024)));
j5eval[0]=x5028;
j5eval[1]=IKsign(x5028);
j5eval[2]=((IKabs((((x5021*x5024))+((r22*x5027))+((r22*x5026))+(((-1.0)*sj6*x5021*x5022)))))+(IKabs((((x5023*x5027))+((x5023*x5026))+(((-1.0)*x5025*x5027))+(((-1.0)*x5025*x5026))+((r12*x5021))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5029=((-1.0)*r00);
IkReal x5031 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5031)==0){
continue;
}
IkReal x5030=pow(x5031,-0.5);
CheckValue<IkReal> x5032 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5029),IKFAST_ATAN2_MAGTHRESH);
if(!x5032.valid){
continue;
}
IkReal gconst42=((-1.0)*(x5032.value));
IkReal gconst43=(r01*x5030);
IkReal gconst44=(x5029*x5030);
CheckValue<IkReal> x5033 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5033.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5033.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5034=(r22*sj2);
IkReal x5035=((1.0)*cj3);
IkReal x5036=(gconst43*r21);
IkReal x5037=(gconst44*r20*sj2);
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*sj3*x5036))+(((-1.0)*x5034*x5035))+((sj3*x5037)))),IkReal((((cj3*x5037))+((sj3*x5034))+(((-1.0)*sj2*x5035*x5036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039=IKPowWithIntegerCheck(IKsign(((((gconst44*gconst44)*(r20*r20)))+(((-2.0)*gconst44*r20*x5036))+(r22*r22)+(x5036*x5036))),-1);
if(!x5039.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5038.value)+(((1.5707963267949)*(x5039.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5040=IKsin(j5);
IkReal x5041=IKcos(j5);
IkReal x5042=(cj1*cj2);
IkReal x5043=((1.0)*sj3);
IkReal x5044=(gconst43*r11);
IkReal x5045=(cj2*sj1);
IkReal x5046=(gconst43*r21);
IkReal x5047=((1.0)*cj3);
IkReal x5048=(gconst43*r01);
IkReal x5049=((1.0)*x5041);
IkReal x5050=(gconst44*x5041);
IkReal x5051=((1.0)*x5040);
IkReal x5052=(gconst44*x5051);
evalcond[0]=(((sj2*sj3))+((x5040*x5046))+(((-1.0)*r22*x5049))+(((-1.0)*r20*x5052)));
evalcond[1]=(((r20*x5050))+(((-1.0)*r22*x5051))+(((-1.0)*x5046*x5049))+(((-1.0)*sj2*x5047)));
evalcond[2]=(((r10*x5050))+((cj1*sj3))+(((-1.0)*r12*x5051))+((cj3*x5045))+(((-1.0)*x5044*x5049)));
evalcond[3]=((((-1.0)*x5043*x5045))+(((-1.0)*r10*x5052))+((x5040*x5044))+(((-1.0)*r12*x5049))+((cj1*cj3)));
evalcond[4]=(((r00*x5050))+((cj3*x5042))+(((-1.0)*x5048*x5049))+(((-1.0)*r02*x5051))+(((-1.0)*sj1*x5043)));
evalcond[5]=((((-1.0)*r02*x5049))+(((-1.0)*x5042*x5043))+((x5040*x5048))+(((-1.0)*sj1*x5047))+(((-1.0)*r00*x5052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5053=((-1.0)*r01);
IkReal x5055 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5055)==0){
continue;
}
IkReal x5054=pow(x5055,-0.5);
CheckValue<IkReal> x5056 = IKatan2WithCheck(IkReal(x5053),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5056.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x5056.value))));
IkReal gconst46=(x5053*x5054);
IkReal gconst47=((1.0)*r00*x5054);
CheckValue<IkReal> x5057 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5057.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5057.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5058=(sj2*sj3);
IkReal x5059=(cj3*sj2);
IkReal x5060=(gconst47*r20);
IkReal x5061=((1.0)*gconst46*r21);
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst46*r21*x5060))+(x5060*x5060)+(((gconst46*gconst46)*(r21*r21))))),-1);
if(!x5062.valid){
continue;
}
CheckValue<IkReal> x5063 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5059))+(((-1.0)*x5058*x5061))+((x5058*x5060)))),IkReal(((((-1.0)*x5059*x5061))+((r22*x5058))+((x5059*x5060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5063.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5062.value)))+(x5063.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5064=IKsin(j5);
IkReal x5065=IKcos(j5);
IkReal x5066=(gconst46*r11);
IkReal x5067=(gconst47*r00);
IkReal x5068=(cj1*cj2);
IkReal x5069=((1.0)*sj3);
IkReal x5070=(cj2*sj1);
IkReal x5071=(gconst47*r20);
IkReal x5072=((1.0)*cj3);
IkReal x5073=(gconst47*r10);
IkReal x5074=((1.0)*x5065);
IkReal x5075=((1.0)*x5064);
IkReal x5076=(gconst46*x5064);
evalcond[0]=(((sj2*sj3))+((r21*x5076))+(((-1.0)*r22*x5074))+(((-1.0)*x5071*x5075)));
evalcond[1]=((((-1.0)*r22*x5075))+(((-1.0)*sj2*x5072))+((x5065*x5071))+(((-1.0)*gconst46*r21*x5074)));
evalcond[2]=((((-1.0)*x5066*x5074))+((cj1*sj3))+((cj3*x5070))+(((-1.0)*r12*x5075))+((x5065*x5073)));
evalcond[3]=((((-1.0)*x5069*x5070))+((x5064*x5066))+(((-1.0)*x5073*x5075))+((cj1*cj3))+(((-1.0)*r12*x5074)));
evalcond[4]=((((-1.0)*r02*x5075))+(((-1.0)*gconst46*r01*x5074))+((cj3*x5068))+(((-1.0)*sj1*x5069))+((x5065*x5067)));
evalcond[5]=((((-1.0)*x5067*x5075))+(((-1.0)*r02*x5074))+((r01*x5076))+(((-1.0)*sj1*x5072))+(((-1.0)*x5068*x5069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5077=(cj3*sj1);
IkReal x5078=(cj1*sj3);
IkReal x5079=(cj6*r20);
IkReal x5080=((1.0)*r21*sj6);
IkReal x5081=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x5081;
j5eval[1]=((IKabs((((r22*x5078))+((r22*x5077)))))+(IKabs(((((-1.0)*x5077*x5080))+(((-1.0)*x5078*x5080))+((x5077*x5079))+((x5078*x5079))))));
j5eval[2]=IKsign(x5081);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5082=(cj6*r20);
IkReal x5083=(cj1*cj3);
IkReal x5084=(sj1*sj3);
IkReal x5085=((1.0)*sj6);
IkReal x5086=((((-1.0)*r00*x5085))+(((-1.0)*cj6*r01)));
j5eval[0]=x5086;
j5eval[1]=((IKabs((((r22*x5083))+(((-1.0)*r22*x5084)))))+(IKabs((((r21*sj6*x5083))+(((-1.0)*x5082*x5083))+(((-1.0)*r21*x5084*x5085))+((x5082*x5084))))));
j5eval[2]=IKsign(x5086);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5087=cj6*cj6;
IkReal x5088=((1.0)*r11);
IkReal x5089=(cj3*sj1);
IkReal x5090=(cj1*sj3);
IkReal x5091=(cj6*r20);
IkReal x5092=(r21*sj6);
IkReal x5093=((((-1.0)*cj6*r10*x5092))+((r11*r21))+((r10*r20*x5087))+((r12*r22))+(((-1.0)*sj6*x5088*x5091))+(((-1.0)*r21*x5087*x5088)));
j5eval[0]=x5093;
j5eval[1]=((IKabs((((r22*x5090))+((r22*x5089)))))+(IKabs(((((-1.0)*x5089*x5091))+((x5089*x5092))+((x5090*x5092))+(((-1.0)*x5090*x5091))))));
j5eval[2]=IKsign(x5093);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5094=cj6*cj6;
IkReal x5095=((1.0)*r11);
IkReal x5096=(cj3*sj1);
IkReal x5097=(cj1*sj3);
IkReal x5098=(cj6*r20);
IkReal x5099=(r21*sj6);
CheckValue<IkReal> x5100=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10*x5099))+(((-1.0)*sj6*x5095*x5098))+((r11*r21))+((r10*r20*x5094))+(((-1.0)*r21*x5094*x5095))+((r12*r22)))),-1);
if(!x5100.valid){
continue;
}
CheckValue<IkReal> x5101 = IKatan2WithCheck(IkReal((((r22*x5096))+((r22*x5097)))),IkReal(((((-1.0)*x5096*x5098))+(((-1.0)*x5097*x5098))+((x5096*x5099))+((x5097*x5099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5101.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5100.value)))+(x5101.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5102=IKsin(j5);
IkReal x5103=IKcos(j5);
IkReal x5104=(cj1*cj3);
IkReal x5105=(cj3*sj1);
IkReal x5106=((1.0)*sj3);
IkReal x5107=(sj1*x5106);
IkReal x5108=(sj6*x5102);
IkReal x5109=((1.0)*x5102);
IkReal x5110=((1.0)*x5103);
IkReal x5111=(cj6*x5103);
IkReal x5112=(sj6*x5110);
IkReal x5113=(cj6*x5109);
evalcond[0]=((((-1.0)*r20*x5113))+(((-1.0)*r22*x5110))+((r21*x5108)));
evalcond[1]=(((r20*x5111))+(((-1.0)*r22*x5109))+(((-1.0)*r21*x5112)));
evalcond[2]=(((r10*x5111))+((cj1*sj3))+x5105+(((-1.0)*r12*x5109))+(((-1.0)*r11*x5112)));
evalcond[3]=((((-1.0)*x5107))+x5104+((r11*x5108))+(((-1.0)*r12*x5110))+(((-1.0)*r10*x5113)));
evalcond[4]=((((-1.0)*x5107))+((r00*x5111))+(((-1.0)*r02*x5109))+x5104+(((-1.0)*r01*x5112)));
evalcond[5]=(((r01*x5108))+(((-1.0)*r02*x5110))+(((-1.0)*x5105))+(((-1.0)*cj1*x5106))+(((-1.0)*r00*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5114=((1.0)*sj6);
IkReal x5115=(sj1*sj3);
IkReal x5116=(cj6*r20);
IkReal x5117=(cj1*cj3);
CheckValue<IkReal> x5118 = IKatan2WithCheck(IkReal((((r22*x5117))+(((-1.0)*r22*x5115)))),IkReal((((x5115*x5116))+(((-1.0)*x5116*x5117))+(((-1.0)*r21*x5114*x5115))+((r21*sj6*x5117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5118.valid){
continue;
}
CheckValue<IkReal> x5119=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01))+(((-1.0)*r00*x5114)))),-1);
if(!x5119.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5118.value)+(((1.5707963267949)*(x5119.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5120=IKsin(j5);
IkReal x5121=IKcos(j5);
IkReal x5122=(cj1*cj3);
IkReal x5123=(cj3*sj1);
IkReal x5124=((1.0)*sj3);
IkReal x5125=(sj1*x5124);
IkReal x5126=(sj6*x5120);
IkReal x5127=((1.0)*x5120);
IkReal x5128=((1.0)*x5121);
IkReal x5129=(cj6*x5121);
IkReal x5130=(sj6*x5128);
IkReal x5131=(cj6*x5127);
evalcond[0]=((((-1.0)*r20*x5131))+((r21*x5126))+(((-1.0)*r22*x5128)));
evalcond[1]=((((-1.0)*r21*x5130))+((r20*x5129))+(((-1.0)*r22*x5127)));
evalcond[2]=(((r10*x5129))+((cj1*sj3))+x5123+(((-1.0)*r12*x5127))+(((-1.0)*r11*x5130)));
evalcond[3]=((((-1.0)*r10*x5131))+((r11*x5126))+x5122+(((-1.0)*r12*x5128))+(((-1.0)*x5125)));
evalcond[4]=((((-1.0)*r01*x5130))+((r00*x5129))+x5122+(((-1.0)*x5125))+(((-1.0)*r02*x5127)));
evalcond[5]=((((-1.0)*r00*x5131))+((r01*x5126))+(((-1.0)*r02*x5128))+(((-1.0)*x5123))+(((-1.0)*cj1*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5132=(cj3*sj1);
IkReal x5133=(cj1*sj3);
IkReal x5134=(cj6*r20);
IkReal x5135=((1.0)*r21*sj6);
CheckValue<IkReal> x5136=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x5136.valid){
continue;
}
CheckValue<IkReal> x5137 = IKatan2WithCheck(IkReal((((x5132*x5134))+(((-1.0)*x5132*x5135))+((x5133*x5134))+(((-1.0)*x5133*x5135)))),IkReal((((r22*x5133))+((r22*x5132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5137.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5136.value)))+(x5137.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5138=IKsin(j5);
IkReal x5139=IKcos(j5);
IkReal x5140=(cj1*cj3);
IkReal x5141=(cj3*sj1);
IkReal x5142=((1.0)*sj3);
IkReal x5143=(sj1*x5142);
IkReal x5144=(sj6*x5138);
IkReal x5145=((1.0)*x5138);
IkReal x5146=((1.0)*x5139);
IkReal x5147=(cj6*x5139);
IkReal x5148=(sj6*x5146);
IkReal x5149=(cj6*x5145);
evalcond[0]=(((r21*x5144))+(((-1.0)*r20*x5149))+(((-1.0)*r22*x5146)));
evalcond[1]=((((-1.0)*r21*x5148))+((r20*x5147))+(((-1.0)*r22*x5145)));
evalcond[2]=(((r10*x5147))+(((-1.0)*r11*x5148))+((cj1*sj3))+(((-1.0)*r12*x5145))+x5141);
evalcond[3]=((((-1.0)*r12*x5146))+x5140+(((-1.0)*x5143))+(((-1.0)*r10*x5149))+((r11*x5144)));
evalcond[4]=(((r00*x5147))+(((-1.0)*r02*x5145))+(((-1.0)*r01*x5148))+x5140+(((-1.0)*x5143)));
evalcond[5]=(((r01*x5144))+(((-1.0)*r02*x5146))+(((-1.0)*r00*x5149))+(((-1.0)*x5141))+(((-1.0)*cj1*x5142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5150=(r21*sj6);
IkReal x5151=(cj3*sj1);
IkReal x5152=(cj1*sj3);
IkReal x5153=(cj6*r20);
IkReal x5154=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x5154;
j5eval[1]=((IKabs(((((-1.0)*r22*x5151))+((r22*x5152)))))+(IKabs(((((-1.0)*x5152*x5153))+((x5151*x5153))+(((-1.0)*x5150*x5151))+((x5150*x5152))))));
j5eval[2]=IKsign(x5154);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5155=(sj1*sj3);
IkReal x5156=(r21*sj6);
IkReal x5157=((1.0)*cj6);
IkReal x5158=(cj1*cj3);
IkReal x5159=((((-1.0)*r00*sj6))+(((-1.0)*r01*x5157)));
j5eval[0]=x5159;
j5eval[1]=((IKabs((((r22*x5158))+((r22*x5155)))))+(IKabs((((x5155*x5156))+(((-1.0)*r20*x5157*x5158))+(((-1.0)*r20*x5155*x5157))+((x5156*x5158))))));
j5eval[2]=IKsign(x5159);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5160=cj6*cj6;
IkReal x5161=((1.0)*r21);
IkReal x5162=(cj1*cj3);
IkReal x5163=(sj1*sj3);
IkReal x5164=(cj6*r20);
IkReal x5165=((((-1.0)*cj6*r10*sj6*x5161))+(((-1.0)*r11*sj6*x5164))+((r11*r21))+((r12*r22))+(((-1.0)*r11*x5160*x5161))+((r10*r20*x5160)));
j5eval[0]=x5165;
j5eval[1]=IKsign(x5165);
j5eval[2]=((IKabs((((r22*x5162))+((r22*x5163)))))+(IKabs((((x5162*x5164))+(((-1.0)*sj6*x5161*x5162))+(((-1.0)*sj6*x5161*x5163))+((x5163*x5164))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5166=cj6*cj6;
IkReal x5167=((1.0)*r21);
IkReal x5168=(cj1*cj3);
IkReal x5169=(sj1*sj3);
IkReal x5170=(cj6*r20);
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x5167*x5169))+(((-1.0)*sj6*x5167*x5168))+((x5169*x5170))+((x5168*x5170)))),IkReal((((r22*x5168))+((r22*x5169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj6*x5170))+(((-1.0)*cj6*r10*sj6*x5167))+((r11*r21))+(((-1.0)*r11*x5166*x5167))+((r12*r22))+((r10*r20*x5166)))),-1);
if(!x5172.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5171.value)+(((1.5707963267949)*(x5172.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5173=IKsin(j5);
IkReal x5174=IKcos(j5);
IkReal x5175=(cj1*sj3);
IkReal x5176=((1.0)*cj3);
IkReal x5177=(sj1*sj3);
IkReal x5178=(sj1*x5176);
IkReal x5179=(sj6*x5173);
IkReal x5180=((1.0)*x5173);
IkReal x5181=((1.0)*x5174);
IkReal x5182=(cj6*x5174);
IkReal x5183=(sj6*x5181);
IkReal x5184=(cj6*x5180);
evalcond[0]=((((-1.0)*r22*x5181))+(((-1.0)*r20*x5184))+((r21*x5179)));
evalcond[1]=((((-1.0)*r21*x5183))+(((-1.0)*r22*x5180))+((r20*x5182)));
evalcond[2]=(x5177+(((-1.0)*r10*x5184))+(((-1.0)*r12*x5181))+((r11*x5179))+((cj1*cj3)));
evalcond[3]=(((r01*x5179))+(((-1.0)*r02*x5181))+(((-1.0)*x5178))+x5175+(((-1.0)*r00*x5184)));
evalcond[4]=((((-1.0)*x5178))+x5175+(((-1.0)*r12*x5180))+((r10*x5182))+(((-1.0)*r11*x5183)));
evalcond[5]=(((r00*x5182))+(((-1.0)*r02*x5180))+(((-1.0)*x5177))+(((-1.0)*cj1*x5176))+(((-1.0)*r01*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5185=(sj1*sj3);
IkReal x5186=(r21*sj6);
IkReal x5187=((1.0)*cj6);
IkReal x5188=(cj1*cj3);
CheckValue<IkReal> x5189 = IKatan2WithCheck(IkReal((((r22*x5185))+((r22*x5188)))),IkReal((((x5186*x5188))+(((-1.0)*r20*x5187*x5188))+(((-1.0)*r20*x5185*x5187))+((x5185*x5186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5189.valid){
continue;
}
CheckValue<IkReal> x5190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x5187)))),-1);
if(!x5190.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5189.value)+(((1.5707963267949)*(x5190.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5191=IKsin(j5);
IkReal x5192=IKcos(j5);
IkReal x5193=(cj1*sj3);
IkReal x5194=((1.0)*cj3);
IkReal x5195=(sj1*sj3);
IkReal x5196=(sj1*x5194);
IkReal x5197=(sj6*x5191);
IkReal x5198=((1.0)*x5191);
IkReal x5199=((1.0)*x5192);
IkReal x5200=(cj6*x5192);
IkReal x5201=(sj6*x5199);
IkReal x5202=(cj6*x5198);
evalcond[0]=(((r21*x5197))+(((-1.0)*r22*x5199))+(((-1.0)*r20*x5202)));
evalcond[1]=(((r20*x5200))+(((-1.0)*r22*x5198))+(((-1.0)*r21*x5201)));
evalcond[2]=((((-1.0)*r12*x5199))+((r11*x5197))+(((-1.0)*r10*x5202))+x5195+((cj1*cj3)));
evalcond[3]=((((-1.0)*x5196))+x5193+(((-1.0)*r00*x5202))+(((-1.0)*r02*x5199))+((r01*x5197)));
evalcond[4]=((((-1.0)*r12*x5198))+(((-1.0)*x5196))+x5193+((r10*x5200))+(((-1.0)*r11*x5201)));
evalcond[5]=(((r00*x5200))+(((-1.0)*x5195))+(((-1.0)*r01*x5201))+(((-1.0)*r02*x5198))+(((-1.0)*cj1*x5194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5203=(cj1*sj3);
IkReal x5204=(cj6*r20);
IkReal x5205=(r21*sj6);
IkReal x5206=(cj3*sj1);
CheckValue<IkReal> x5207=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x5207.valid){
continue;
}
CheckValue<IkReal> x5208 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5206))+((r22*x5203)))),IkReal((((x5204*x5206))+((x5203*x5205))+(((-1.0)*x5203*x5204))+(((-1.0)*x5205*x5206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5208.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5207.value)))+(x5208.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5209=IKsin(j5);
IkReal x5210=IKcos(j5);
IkReal x5211=(cj1*sj3);
IkReal x5212=((1.0)*cj3);
IkReal x5213=(sj1*sj3);
IkReal x5214=(sj1*x5212);
IkReal x5215=(sj6*x5209);
IkReal x5216=((1.0)*x5209);
IkReal x5217=((1.0)*x5210);
IkReal x5218=(cj6*x5210);
IkReal x5219=(sj6*x5217);
IkReal x5220=(cj6*x5216);
evalcond[0]=((((-1.0)*r22*x5217))+(((-1.0)*r20*x5220))+((r21*x5215)));
evalcond[1]=(((r20*x5218))+(((-1.0)*r22*x5216))+(((-1.0)*r21*x5219)));
evalcond[2]=(x5213+((r11*x5215))+(((-1.0)*r10*x5220))+((cj1*cj3))+(((-1.0)*r12*x5217)));
evalcond[3]=(((r01*x5215))+(((-1.0)*x5214))+x5211+(((-1.0)*r00*x5220))+(((-1.0)*r02*x5217)));
evalcond[4]=((((-1.0)*r11*x5219))+(((-1.0)*x5214))+x5211+((r10*x5218))+(((-1.0)*r12*x5216)));
evalcond[5]=((((-1.0)*r01*x5219))+(((-1.0)*cj1*x5212))+(((-1.0)*x5213))+(((-1.0)*r02*x5216))+((r00*x5218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5221=cj6*cj6;
IkReal x5222=(sj2*sj3);
IkReal x5223=((1.0)*r11);
IkReal x5224=(r21*sj6);
IkReal x5225=(cj6*r20);
IkReal x5226=(cj1*sj3);
IkReal x5227=(cj6*r10);
IkReal x5228=(cj2*cj3*sj1);
CheckValue<IkReal> x5229 = IKatan2WithCheck(IkReal((((r22*x5228))+((r22*x5226))+((x5222*x5227))+(((-1.0)*sj6*x5222*x5223)))),IkReal((((r12*x5222))+(((-1.0)*x5225*x5228))+(((-1.0)*x5225*x5226))+((x5224*x5228))+((x5224*x5226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5229.valid){
continue;
}
CheckValue<IkReal> x5230=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r21*x5221*x5223))+((r12*r22))+((r10*r20*x5221))+(((-1.0)*sj6*x5223*x5225))+(((-1.0)*x5224*x5227)))),-1);
if(!x5230.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5229.value)+(((1.5707963267949)*(x5230.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5231=IKsin(j5);
IkReal x5232=IKcos(j5);
IkReal x5233=(cj1*cj2);
IkReal x5234=((1.0)*sj3);
IkReal x5235=(cj2*sj1);
IkReal x5236=((1.0)*cj3);
IkReal x5237=(sj6*x5231);
IkReal x5238=((1.0)*x5231);
IkReal x5239=((1.0)*x5232);
IkReal x5240=(cj6*x5232);
IkReal x5241=(sj6*x5239);
IkReal x5242=(cj6*x5238);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x5242))+(((-1.0)*r22*x5239))+((r21*x5237)));
evalcond[1]=((((-1.0)*sj2*x5236))+(((-1.0)*r21*x5241))+((r20*x5240))+(((-1.0)*r22*x5238)));
evalcond[2]=(((r10*x5240))+(((-1.0)*r12*x5238))+(((-1.0)*r11*x5241))+((cj3*x5235))+((cj1*sj3)));
evalcond[3]=((((-1.0)*r10*x5242))+(((-1.0)*x5234*x5235))+((r11*x5237))+(((-1.0)*r12*x5239))+((cj1*cj3)));
evalcond[4]=((((-1.0)*sj1*x5234))+((cj3*x5233))+((r00*x5240))+(((-1.0)*r02*x5238))+(((-1.0)*r01*x5241)));
evalcond[5]=((((-1.0)*sj1*x5236))+(((-1.0)*r02*x5239))+((r01*x5237))+(((-1.0)*r00*x5242))+(((-1.0)*x5233*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5243=((1.0)*sj6);
IkReal x5244=(sj2*sj3);
IkReal x5245=((1.0)*cj6);
IkReal x5246=(cj1*cj3);
IkReal x5247=(cj2*sj1*sj3);
CheckValue<IkReal> x5248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5243))+(((-1.0)*r01*x5245)))),-1);
if(!x5248.valid){
continue;
}
CheckValue<IkReal> x5249 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5247))+((r22*x5246))+(((-1.0)*r12*x5244)))),IkReal((((cj6*r10*x5244))+(((-1.0)*r20*x5245*x5246))+((r21*sj6*x5246))+(((-1.0)*r21*x5243*x5247))+(((-1.0)*r11*x5243*x5244))+((cj6*r20*x5247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5249.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5248.value)))+(x5249.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5250=IKsin(j5);
IkReal x5251=IKcos(j5);
IkReal x5252=(cj1*cj2);
IkReal x5253=((1.0)*sj3);
IkReal x5254=(cj2*sj1);
IkReal x5255=((1.0)*cj3);
IkReal x5256=(sj6*x5250);
IkReal x5257=((1.0)*x5250);
IkReal x5258=((1.0)*x5251);
IkReal x5259=(cj6*x5251);
IkReal x5260=(sj6*x5258);
IkReal x5261=(cj6*x5257);
evalcond[0]=(((sj2*sj3))+((r21*x5256))+(((-1.0)*r22*x5258))+(((-1.0)*r20*x5261)));
evalcond[1]=((((-1.0)*r21*x5260))+(((-1.0)*sj2*x5255))+((r20*x5259))+(((-1.0)*r22*x5257)));
evalcond[2]=(((r10*x5259))+((cj1*sj3))+(((-1.0)*r12*x5257))+(((-1.0)*r11*x5260))+((cj3*x5254)));
evalcond[3]=((((-1.0)*r12*x5258))+((r11*x5256))+((cj1*cj3))+(((-1.0)*r10*x5261))+(((-1.0)*x5253*x5254)));
evalcond[4]=((((-1.0)*r02*x5257))+((r00*x5259))+(((-1.0)*sj1*x5253))+((cj3*x5252))+(((-1.0)*r01*x5260)));
evalcond[5]=((((-1.0)*r02*x5258))+((r01*x5256))+(((-1.0)*sj1*x5255))+(((-1.0)*r00*x5261))+(((-1.0)*x5252*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5262=cj6*cj6;
IkReal x5263=r21*r21;
IkReal x5264=(r22*sj2);
IkReal x5265=((1.0)*cj3);
IkReal x5266=(cj6*r20);
IkReal x5267=(r21*sj2*sj6);
CheckValue<IkReal> x5268 = IKatan2WithCheck(IkReal(((((-1.0)*x5264*x5265))+((sj2*sj3*x5266))+(((-1.0)*sj3*x5267)))),IkReal((((sj3*x5264))+((cj3*sj2*x5266))+(((-1.0)*x5265*x5267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5268.valid){
continue;
}
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign(((((-2.0)*r21*sj6*x5266))+(r22*r22)+(((-1.0)*x5262*x5263))+x5263+((x5262*(r20*r20))))),-1);
if(!x5269.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5268.value)+(((1.5707963267949)*(x5269.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5270=IKsin(j5);
IkReal x5271=IKcos(j5);
IkReal x5272=(cj1*cj2);
IkReal x5273=((1.0)*sj3);
IkReal x5274=(cj2*sj1);
IkReal x5275=((1.0)*cj3);
IkReal x5276=(sj6*x5270);
IkReal x5277=((1.0)*x5270);
IkReal x5278=((1.0)*x5271);
IkReal x5279=(cj6*x5271);
IkReal x5280=(sj6*x5278);
IkReal x5281=(cj6*x5277);
evalcond[0]=(((sj2*sj3))+((r21*x5276))+(((-1.0)*r20*x5281))+(((-1.0)*r22*x5278)));
evalcond[1]=((((-1.0)*r21*x5280))+((r20*x5279))+(((-1.0)*sj2*x5275))+(((-1.0)*r22*x5277)));
evalcond[2]=(((cj3*x5274))+((cj1*sj3))+((r10*x5279))+(((-1.0)*r11*x5280))+(((-1.0)*r12*x5277)));
evalcond[3]=((((-1.0)*r12*x5278))+(((-1.0)*r10*x5281))+((cj1*cj3))+((r11*x5276))+(((-1.0)*x5273*x5274)));
evalcond[4]=(((cj3*x5272))+(((-1.0)*r01*x5280))+(((-1.0)*sj1*x5273))+(((-1.0)*r02*x5277))+((r00*x5279)));
evalcond[5]=((((-1.0)*x5272*x5273))+(((-1.0)*r00*x5281))+(((-1.0)*sj1*x5275))+((r01*x5276))+(((-1.0)*r02*x5278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5282=cj6*cj6;
IkReal x5283=r21*r21;
IkReal x5284=(r22*sj2);
IkReal x5285=((1.0)*cj3);
IkReal x5286=(cj6*r20);
IkReal x5287=(r21*sj2*sj6);
CheckValue<IkReal> x5288=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x5282*(r20*r20)))+x5283+(((-2.0)*r21*sj6*x5286))+(((-1.0)*x5282*x5283)))),-1);
if(!x5288.valid){
continue;
}
CheckValue<IkReal> x5289 = IKatan2WithCheck(IkReal(((((-1.0)*x5284*x5285))+((sj2*sj3*x5286))+(((-1.0)*sj3*x5287)))),IkReal((((cj3*sj2*x5286))+((sj3*x5284))+(((-1.0)*x5285*x5287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5289.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5288.value)))+(x5289.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x5290=IKsin(j5);
IkReal x5291=IKcos(j5);
IkReal x5292=((1.0)*r22);
IkReal x5293=(r21*sj6);
IkReal x5294=(cj6*r20);
evalcond[0]=(((sj2*sj3))+((x5290*x5293))+(((-1.0)*x5290*x5294))+(((-1.0)*x5291*x5292)));
evalcond[1]=(((x5291*x5294))+(((-1.0)*cj3*sj2))+(((-1.0)*x5291*x5293))+(((-1.0)*x5290*x5292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j1eval[0]=cj2;
j1eval[1]=sj2;
j1eval[2]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs((((r10*sj6))+((cj6*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj6))+((cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj6))+((cj6*r11))))+IKsqr((((r00*sj6))+((cj6*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj6))+((cj6*r11))), (((r00*sj6))+((cj6*r01))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5295=IKcos(j1);
IkReal x5296=IKsin(j1);
IkReal x5297=(cj6*r11);
IkReal x5298=(r00*sj6);
IkReal x5299=(r10*sj6);
IkReal x5300=(sj5*sj6);
IkReal x5301=(cj6*r01);
IkReal x5302=(cj5*cj6);
IkReal x5303=((1.0)*cj5);
IkReal x5304=((1.0)*sj5);
IkReal x5305=(cj3*x5296);
IkReal x5306=(cj6*x5304);
IkReal x5307=((1.0)*x5296);
IkReal x5308=(cj3*x5295);
evalcond[0]=(x5301+x5298+(((-1.0)*x5295)));
evalcond[1]=((((-1.0)*x5307))+x5299+x5297);
evalcond[2]=(x5308+(((-1.0)*r12*x5303))+(((-1.0)*r10*x5306))+((r11*x5300)));
evalcond[3]=((((-1.0)*r11*sj6*x5303))+((sj3*x5295))+(((-1.0)*r12*x5304))+((r10*x5302)));
evalcond[4]=((((-1.0)*r00*x5306))+(((-1.0)*x5305))+(((-1.0)*r02*x5303))+((r01*x5300)));
evalcond[5]=((((-1.0)*r02*x5304))+(((-1.0)*sj3*x5307))+(((-1.0)*r01*sj6*x5303))+((r00*x5302)));
evalcond[6]=((((0.0003501)*x5298))+(((0.31436)*x5305))+(((-1.0)*px))+(((0.42076)*x5296))+(((0.0003501)*x5301))+(((-0.01275)*x5295)));
evalcond[7]=((((0.0003501)*x5297))+(((0.0003501)*x5299))+(((-0.42076)*x5295))+(((-1.0)*py))+(((-0.31436)*x5308))+(((-0.01275)*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5309=((1.0)*sj6);
IkReal x5310=((1.0)*cj6);
if( IKabs(((((-1.0)*r11*x5310))+(((-1.0)*r10*x5309)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5309))+(((-1.0)*r01*x5310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5310))+(((-1.0)*r10*x5309))))+IKsqr(((((-1.0)*r00*x5309))+(((-1.0)*r01*x5310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x5310))+(((-1.0)*r10*x5309))), ((((-1.0)*r00*x5309))+(((-1.0)*r01*x5310))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5311=IKcos(j1);
IkReal x5312=IKsin(j1);
IkReal x5313=(cj6*r11);
IkReal x5314=(r00*sj6);
IkReal x5315=(r10*sj6);
IkReal x5316=(sj5*sj6);
IkReal x5317=(cj6*r01);
IkReal x5318=(cj5*cj6);
IkReal x5319=((1.0)*cj5);
IkReal x5320=((1.0)*sj5);
IkReal x5321=(cj3*x5312);
IkReal x5322=(cj6*x5320);
IkReal x5323=(cj3*x5311);
evalcond[0]=(x5311+x5317+x5314);
evalcond[1]=(x5313+x5312+x5315);
evalcond[2]=((((-1.0)*r12*x5319))+x5323+(((-1.0)*r10*x5322))+((r11*x5316)));
evalcond[3]=(((sj3*x5311))+(((-1.0)*r11*sj6*x5319))+(((-1.0)*r12*x5320))+((r10*x5318)));
evalcond[4]=((((-1.0)*x5321))+((r01*x5316))+(((-1.0)*r02*x5319))+(((-1.0)*r00*x5322)));
evalcond[5]=((((-1.0)*r01*sj6*x5319))+((r00*x5318))+(((-1.0)*r02*x5320))+(((-1.0)*sj3*x5312)));
evalcond[6]=((((0.42076)*x5312))+(((0.01275)*x5311))+(((-1.0)*px))+(((0.0003501)*x5314))+(((0.0003501)*x5317))+(((0.31436)*x5321)));
evalcond[7]=((((-0.31436)*x5323))+(((-0.42076)*x5311))+(((0.01275)*x5312))+(((-1.0)*py))+(((0.0003501)*x5315))+(((0.0003501)*x5313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5324=((196475000.0)*sj3);
IkReal x5325=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*py*x5324))+(((-262975000.0)*px))+(((-1.0)*px*x5325)))))+(IKabs(((((262975000.0)*py))+(((-1.0)*px*x5324))+((py*x5325))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((-1.0)+(((-1.33846545362005)*cj3)));
j1eval[1]=IKsign(((-7859.0)+(((-10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5326=(r12*sj5);
IkReal x5327=((7859.0)*cj3);
IkReal x5328=(cj5*cj6*r10);
IkReal x5329=(cj5*r11*sj6);
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(sj3,-1);
if(!x5330.valid){
continue;
}
if( IKabs(((((0.747124251354692)*x5328))+(((2.37665177298222)*px))+(((-0.747124251354692)*x5326))+(((-0.747124251354692)*x5329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.50660709192889e-5)*(x5330.value)*(((((-10519.0)*x5326))+(((-10519.0)*x5329))+((x5327*x5328))+(((10519.0)*x5328))+(((-1.0)*x5326*x5327))+(((25000.0)*cj3*px))+(((-1.0)*x5327*x5329)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.747124251354692)*x5328))+(((2.37665177298222)*px))+(((-0.747124251354692)*x5326))+(((-0.747124251354692)*x5329))))+IKsqr(((-9.50660709192889e-5)*(x5330.value)*(((((-10519.0)*x5326))+(((-10519.0)*x5329))+((x5327*x5328))+(((10519.0)*x5328))+(((-1.0)*x5326*x5327))+(((25000.0)*cj3*px))+(((-1.0)*x5327*x5329))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.747124251354692)*x5328))+(((2.37665177298222)*px))+(((-0.747124251354692)*x5326))+(((-0.747124251354692)*x5329))), ((-9.50660709192889e-5)*(x5330.value)*(((((-10519.0)*x5326))+(((-10519.0)*x5329))+((x5327*x5328))+(((10519.0)*x5328))+(((-1.0)*x5326*x5327))+(((25000.0)*cj3*px))+(((-1.0)*x5327*x5329))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5331=IKsin(j1);
IkReal x5332=IKcos(j1);
IkReal x5333=((1.0)*sj3);
IkReal x5334=(sj5*sj6);
IkReal x5335=(cj5*cj6);
IkReal x5336=((1.0)*cj5);
IkReal x5337=((1.0)*sj5);
IkReal x5338=(cj3*x5332);
IkReal x5339=(cj3*x5331);
IkReal x5340=(cj6*x5337);
IkReal x5341=(sj3*x5332);
IkReal x5342=(x5331*x5333);
evalcond[0]=((((-1.0)*px))+(((0.42076)*x5331))+(((0.31436)*x5341))+(((0.31436)*x5339)));
evalcond[1]=((((-0.31436)*x5338))+(((0.31436)*sj3*x5331))+(((-1.0)*py))+(((-0.42076)*x5332)));
evalcond[2]=(x5339+x5341+((r10*x5335))+(((-1.0)*r12*x5337))+(((-1.0)*r11*sj6*x5336)));
evalcond[3]=(x5338+((r11*x5334))+(((-1.0)*r10*x5340))+(((-1.0)*x5342))+(((-1.0)*r12*x5336)));
evalcond[4]=((((-1.0)*r02*x5337))+x5338+(((-1.0)*x5342))+(((-1.0)*r01*sj6*x5336))+((r00*x5335)));
evalcond[5]=((((-1.0)*x5339))+(((-1.0)*r00*x5340))+(((-1.0)*r02*x5336))+(((-1.0)*x5332*x5333))+((r01*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5343=((7859.0)*cj3);
IkReal x5344=(r12*sj5);
IkReal x5345=((7859.0)*sj3);
IkReal x5346=((25000.0)*py);
IkReal x5347=(cj5*cj6*r10);
IkReal x5348=(cj5*r11*sj6);
CheckValue<IkReal> x5349 = IKatan2WithCheck(IkReal((((x5343*x5347))+(((-1.0)*sj3*x5346))+(((-10519.0)*x5344))+(((-10519.0)*x5348))+(((10519.0)*x5347))+(((-1.0)*x5343*x5348))+(((-1.0)*x5343*x5344)))),IkReal(((((-1.0)*x5344*x5345))+((cj3*x5346))+(((-1.0)*x5345*x5348))+((x5345*x5347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350=IKPowWithIntegerCheck(IKsign(((-7859.0)+(((-10519.0)*cj3)))),-1);
if(!x5350.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x5349.value)+(((1.5707963267949)*(x5350.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5351=IKsin(j1);
IkReal x5352=IKcos(j1);
IkReal x5353=((1.0)*sj3);
IkReal x5354=(sj5*sj6);
IkReal x5355=(cj5*cj6);
IkReal x5356=((1.0)*cj5);
IkReal x5357=((1.0)*sj5);
IkReal x5358=(cj3*x5352);
IkReal x5359=(cj3*x5351);
IkReal x5360=(cj6*x5357);
IkReal x5361=(sj3*x5352);
IkReal x5362=(x5351*x5353);
evalcond[0]=((((0.31436)*x5359))+(((-1.0)*px))+(((0.42076)*x5351))+(((0.31436)*x5361)));
evalcond[1]=((((-1.0)*py))+(((0.31436)*sj3*x5351))+(((-0.31436)*x5358))+(((-0.42076)*x5352)));
evalcond[2]=(((r10*x5355))+x5361+x5359+(((-1.0)*r12*x5357))+(((-1.0)*r11*sj6*x5356)));
evalcond[3]=((((-1.0)*r10*x5360))+x5358+((r11*x5354))+(((-1.0)*r12*x5356))+(((-1.0)*x5362)));
evalcond[4]=((((-1.0)*r02*x5357))+x5358+((r00*x5355))+(((-1.0)*r01*sj6*x5356))+(((-1.0)*x5362)));
evalcond[5]=((((-1.0)*r02*x5356))+(((-1.0)*x5352*x5353))+((r01*x5354))+(((-1.0)*r00*x5360))+(((-1.0)*x5359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5363=((196475000.0)*sj3);
IkReal x5364=((196475000.0)*cj3);
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal(((((-1.0)*px*x5364))+(((-262975000.0)*px))+(((-1.0)*py*x5363)))),IkReal((((py*x5364))+(((262975000.0)*py))+(((-1.0)*px*x5363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
CheckValue<IkReal> x5366=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x5366.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x5365.value)+(((1.5707963267949)*(x5366.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5367=IKsin(j1);
IkReal x5368=IKcos(j1);
IkReal x5369=((1.0)*sj3);
IkReal x5370=(sj5*sj6);
IkReal x5371=(cj5*cj6);
IkReal x5372=((1.0)*cj5);
IkReal x5373=((1.0)*sj5);
IkReal x5374=(cj3*x5368);
IkReal x5375=(cj3*x5367);
IkReal x5376=(cj6*x5373);
IkReal x5377=(sj3*x5368);
IkReal x5378=(x5367*x5369);
evalcond[0]=((((0.42076)*x5367))+(((0.31436)*x5375))+(((0.31436)*x5377))+(((-1.0)*px)));
evalcond[1]=((((-0.42076)*x5368))+(((-1.0)*py))+(((-0.31436)*x5374))+(((0.31436)*sj3*x5367)));
evalcond[2]=((((-1.0)*r11*sj6*x5372))+(((-1.0)*r12*x5373))+x5375+x5377+((r10*x5371)));
evalcond[3]=((((-1.0)*r12*x5372))+x5374+(((-1.0)*x5378))+((r11*x5370))+(((-1.0)*r10*x5376)));
evalcond[4]=(x5374+(((-1.0)*x5378))+(((-1.0)*r02*x5373))+(((-1.0)*r01*sj6*x5372))+((r00*x5371)));
evalcond[5]=((((-1.0)*x5368*x5369))+(((-1.0)*r00*x5376))+(((-1.0)*x5375))+(((-1.0)*r02*x5372))+((r01*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5379=((196475000.0)*sj3);
IkReal x5380=((196475000.0)*cj3);
j1eval[0]=((-1.04279485248737)+(((-1.0)*cj3)));
j1eval[1]=IKsign(((-172413242.0)+(((-165337642.0)*cj3))));
j1eval[2]=((IKabs(((((-1.0)*px*x5380))+((py*x5379))+(((-262975000.0)*px)))))+(IKabs((((px*x5379))+((py*x5380))+(((262975000.0)*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((1.33846545362005)*cj3)));
j1eval[1]=IKsign(((7859.0)+(((10519.0)*cj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5381=(cj5*r12);
IkReal x5382=(r11*sj6);
IkReal x5383=(cj6*r10);
IkReal x5384=((10519.0)*sj5);
IkReal x5385=((0.747124251354692)*sj5);
IkReal x5386=((7859.0)*cj3*sj5);
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(sj3,-1);
if(!x5387.valid){
continue;
}
if( IKabs(((-9.50660709192889e-5)*(x5387.value)*(((((-25000.0)*cj3*py))+((x5382*x5384))+((x5382*x5386))+(((-7859.0)*cj3*x5381))+(((-10519.0)*x5381))+(((-1.0)*x5383*x5384))+(((-1.0)*x5383*x5386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37665177298222)*py))+((x5382*x5385))+(((-0.747124251354692)*x5381))+(((-1.0)*x5383*x5385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.50660709192889e-5)*(x5387.value)*(((((-25000.0)*cj3*py))+((x5382*x5384))+((x5382*x5386))+(((-7859.0)*cj3*x5381))+(((-10519.0)*x5381))+(((-1.0)*x5383*x5384))+(((-1.0)*x5383*x5386))))))+IKsqr(((((-2.37665177298222)*py))+((x5382*x5385))+(((-0.747124251354692)*x5381))+(((-1.0)*x5383*x5385))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-9.50660709192889e-5)*(x5387.value)*(((((-25000.0)*cj3*py))+((x5382*x5384))+((x5382*x5386))+(((-7859.0)*cj3*x5381))+(((-10519.0)*x5381))+(((-1.0)*x5383*x5384))+(((-1.0)*x5383*x5386))))), ((((-2.37665177298222)*py))+((x5382*x5385))+(((-0.747124251354692)*x5381))+(((-1.0)*x5383*x5385))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5388=IKsin(j1);
IkReal x5389=IKcos(j1);
IkReal x5390=(sj5*sj6);
IkReal x5391=(cj5*cj6);
IkReal x5392=((1.0)*cj5);
IkReal x5393=((1.0)*sj5);
IkReal x5394=(sj3*x5389);
IkReal x5395=(cj3*x5388);
IkReal x5396=(cj6*x5393);
IkReal x5397=(sj3*x5388);
IkReal x5398=(cj3*x5389);
IkReal x5399=((1.0)*x5395);
evalcond[0]=((((-0.31436)*x5394))+(((0.42076)*x5388))+(((0.31436)*x5395))+(((-1.0)*px)));
evalcond[1]=((((-0.42076)*x5389))+(((-0.31436)*x5398))+(((-0.31436)*x5397))+(((-1.0)*py)));
evalcond[2]=(x5397+x5398+((r11*x5390))+(((-1.0)*r12*x5392))+(((-1.0)*r10*x5396)));
evalcond[3]=(x5394+(((-1.0)*r02*x5392))+(((-1.0)*x5399))+((r01*x5390))+(((-1.0)*r00*x5396)));
evalcond[4]=(((r10*x5391))+x5394+(((-1.0)*r11*sj6*x5392))+(((-1.0)*x5399))+(((-1.0)*r12*x5393)));
evalcond[5]=((((-1.0)*r02*x5393))+((r00*x5391))+(((-1.0)*r01*sj6*x5392))+(((-1.0)*x5398))+(((-1.0)*x5397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5400=(r11*sj6);
IkReal x5401=(cj6*r10);
IkReal x5402=((10519.0)*sj5);
IkReal x5403=((25000.0)*px);
IkReal x5404=((7859.0)*cj3*sj5);
IkReal x5405=((7859.0)*cj5*r12);
IkReal x5406=((7859.0)*sj3*sj5);
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal(((((-1.0)*x5400*x5406))+((x5401*x5406))+((cj3*x5403))+((sj3*x5405)))),IkReal(((((-1.0)*x5400*x5404))+(((-1.0)*x5400*x5402))+(((10519.0)*cj5*r12))+((x5401*x5404))+((x5401*x5402))+(((-1.0)*sj3*x5403))+((cj3*x5405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
CheckValue<IkReal> x5408=IKPowWithIntegerCheck(IKsign(((7859.0)+(((10519.0)*cj3)))),-1);
if(!x5408.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x5407.value)+(((1.5707963267949)*(x5408.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5409=IKsin(j1);
IkReal x5410=IKcos(j1);
IkReal x5411=(sj5*sj6);
IkReal x5412=(cj5*cj6);
IkReal x5413=((1.0)*cj5);
IkReal x5414=((1.0)*sj5);
IkReal x5415=(sj3*x5410);
IkReal x5416=(cj3*x5409);
IkReal x5417=(cj6*x5414);
IkReal x5418=(sj3*x5409);
IkReal x5419=(cj3*x5410);
IkReal x5420=((1.0)*x5416);
evalcond[0]=((((0.31436)*x5416))+(((-1.0)*px))+(((0.42076)*x5409))+(((-0.31436)*x5415)));
evalcond[1]=((((-0.42076)*x5410))+(((-1.0)*py))+(((-0.31436)*x5419))+(((-0.31436)*x5418)));
evalcond[2]=(((r11*x5411))+x5418+x5419+(((-1.0)*r10*x5417))+(((-1.0)*r12*x5413)));
evalcond[3]=((((-1.0)*x5420))+(((-1.0)*r00*x5417))+(((-1.0)*r02*x5413))+x5415+((r01*x5411)));
evalcond[4]=((((-1.0)*x5420))+x5415+((r10*x5412))+(((-1.0)*r12*x5414))+(((-1.0)*r11*sj6*x5413)));
evalcond[5]=((((-1.0)*r02*x5414))+(((-1.0)*x5418))+(((-1.0)*x5419))+(((-1.0)*r01*sj6*x5413))+((r00*x5412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x5421=((196475000.0)*sj3);
IkReal x5422=((196475000.0)*cj3);
CheckValue<IkReal> x5423 = IKatan2WithCheck(IkReal(((((-262975000.0)*px))+((py*x5421))+(((-1.0)*px*x5422)))),IkReal(((((262975000.0)*py))+((px*x5421))+((py*x5422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5423.valid){
continue;
}
CheckValue<IkReal> x5424=IKPowWithIntegerCheck(IKsign(((-172413242.0)+(((-165337642.0)*cj3)))),-1);
if(!x5424.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x5423.value)+(((1.5707963267949)*(x5424.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x5425=IKsin(j1);
IkReal x5426=IKcos(j1);
IkReal x5427=(sj5*sj6);
IkReal x5428=(cj5*cj6);
IkReal x5429=((1.0)*cj5);
IkReal x5430=((1.0)*sj5);
IkReal x5431=(sj3*x5426);
IkReal x5432=(cj3*x5425);
IkReal x5433=(cj6*x5430);
IkReal x5434=(sj3*x5425);
IkReal x5435=(cj3*x5426);
IkReal x5436=((1.0)*x5432);
evalcond[0]=((((-0.31436)*x5431))+(((0.31436)*x5432))+(((-1.0)*px))+(((0.42076)*x5425)));
evalcond[1]=((((-0.31436)*x5435))+(((-0.31436)*x5434))+(((-0.42076)*x5426))+(((-1.0)*py)));
evalcond[2]=(x5434+x5435+(((-1.0)*r10*x5433))+((r11*x5427))+(((-1.0)*r12*x5429)));
evalcond[3]=(x5431+(((-1.0)*r00*x5433))+((r01*x5427))+(((-1.0)*x5436))+(((-1.0)*r02*x5429)));
evalcond[4]=(((r10*x5428))+x5431+(((-1.0)*r12*x5430))+(((-1.0)*x5436))+(((-1.0)*r11*sj6*x5429)));
evalcond[5]=(((r00*x5428))+(((-1.0)*x5435))+(((-1.0)*x5434))+(((-1.0)*r02*x5430))+(((-1.0)*r01*sj6*x5429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5437=IKPowWithIntegerCheck(cj2,-1);
if(!x5437.valid){
continue;
}
CheckValue<IkReal> x5438=IKPowWithIntegerCheck(sj2,-1);
if(!x5438.valid){
continue;
}
if( IKabs(((x5437.value)*((((cj5*r11*sj6))+(((-1.0)*cj5*cj6*r10))+((r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5438.value)*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5437.value)*((((cj5*r11*sj6))+(((-1.0)*cj5*cj6*r10))+((r12*sj5))))))+IKsqr(((x5438.value)*((((r00*sj6))+((cj6*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5437.value)*((((cj5*r11*sj6))+(((-1.0)*cj5*cj6*r10))+((r12*sj5))))), ((x5438.value)*((((r00*sj6))+((cj6*r01))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5439=IKcos(j1);
IkReal x5440=IKsin(j1);
IkReal x5441=(cj6*r11);
IkReal x5442=(r00*sj6);
IkReal x5443=(r10*sj6);
IkReal x5444=(sj5*sj6);
IkReal x5445=(cj6*r01);
IkReal x5446=(cj5*cj6);
IkReal x5447=((1.0)*cj5);
IkReal x5448=((1.0)*sj5);
IkReal x5449=(cj6*x5448);
IkReal x5450=(sj2*x5439);
IkReal x5451=(sj2*x5440);
evalcond[0]=(x5442+x5445+(((-1.0)*x5450)));
evalcond[1]=(x5443+x5441+(((-1.0)*x5451)));
evalcond[2]=(x5439+(((-1.0)*r10*x5449))+(((-1.0)*r12*x5447))+((r11*x5444)));
evalcond[3]=((((-1.0)*x5440))+((r01*x5444))+(((-1.0)*r00*x5449))+(((-1.0)*r02*x5447)));
evalcond[4]=(((r10*x5446))+(((-1.0)*r12*x5448))+((cj2*x5440))+(((-1.0)*r11*sj6*x5447)));
evalcond[5]=(((r00*x5446))+(((-1.0)*r01*sj6*x5447))+(((-1.0)*r02*x5448))+((cj2*x5439)));
evalcond[6]=((((-0.01275)*x5450))+(((-1.0)*px))+(((0.0003501)*x5445))+(((0.0003501)*x5442))+(((0.73512)*x5440)));
evalcond[7]=((((-0.73512)*x5439))+(((-0.01275)*x5451))+(((-1.0)*py))+(((0.0003501)*x5441))+(((0.0003501)*x5443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5452=IKPowWithIntegerCheck(sj2,-1);
if(!x5452.valid){
continue;
}
if( IKabs(((x5452.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5452.value)*((((r10*sj6))+((cj6*r11))))))+IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5452.value)*((((r10*sj6))+((cj6*r11))))), (((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5453=IKcos(j1);
IkReal x5454=IKsin(j1);
IkReal x5455=(cj6*r11);
IkReal x5456=(r00*sj6);
IkReal x5457=(r10*sj6);
IkReal x5458=(sj5*sj6);
IkReal x5459=(cj6*r01);
IkReal x5460=(cj5*cj6);
IkReal x5461=((1.0)*cj5);
IkReal x5462=((1.0)*sj5);
IkReal x5463=(cj6*x5462);
IkReal x5464=(sj2*x5453);
IkReal x5465=(sj2*x5454);
evalcond[0]=(x5459+x5456+(((-1.0)*x5464)));
evalcond[1]=(x5455+x5457+(((-1.0)*x5465)));
evalcond[2]=((((-1.0)*r10*x5463))+x5453+(((-1.0)*r12*x5461))+((r11*x5458)));
evalcond[3]=(((r01*x5458))+(((-1.0)*r02*x5461))+(((-1.0)*x5454))+(((-1.0)*r00*x5463)));
evalcond[4]=((((-1.0)*r11*sj6*x5461))+(((-1.0)*r12*x5462))+((cj2*x5454))+((r10*x5460)));
evalcond[5]=((((-1.0)*r02*x5462))+((cj2*x5453))+(((-1.0)*r01*sj6*x5461))+((r00*x5460)));
evalcond[6]=((((-0.01275)*x5464))+(((-1.0)*px))+(((0.0003501)*x5459))+(((0.0003501)*x5456))+(((0.73512)*x5454)));
evalcond[7]=((((-0.01275)*x5465))+(((-0.73512)*x5453))+(((-1.0)*py))+(((0.0003501)*x5457))+(((0.0003501)*x5455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5466=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5466.valid){
continue;
}
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5466.value)))+(x5467.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5468=IKcos(j1);
IkReal x5469=IKsin(j1);
IkReal x5470=(cj6*r11);
IkReal x5471=(r00*sj6);
IkReal x5472=(r10*sj6);
IkReal x5473=(sj5*sj6);
IkReal x5474=(cj6*r01);
IkReal x5475=(cj5*cj6);
IkReal x5476=((1.0)*cj5);
IkReal x5477=((1.0)*sj5);
IkReal x5478=(cj6*x5477);
IkReal x5479=(sj2*x5468);
IkReal x5480=(sj2*x5469);
evalcond[0]=((((-1.0)*x5479))+x5474+x5471);
evalcond[1]=(x5472+x5470+(((-1.0)*x5480)));
evalcond[2]=(x5468+(((-1.0)*r10*x5478))+(((-1.0)*r12*x5476))+((r11*x5473)));
evalcond[3]=(((r01*x5473))+(((-1.0)*r00*x5478))+(((-1.0)*x5469))+(((-1.0)*r02*x5476)));
evalcond[4]=(((cj2*x5469))+((r10*x5475))+(((-1.0)*r12*x5477))+(((-1.0)*r11*sj6*x5476)));
evalcond[5]=(((cj2*x5468))+(((-1.0)*r01*sj6*x5476))+((r00*x5475))+(((-1.0)*r02*x5477)));
evalcond[6]=((((0.73512)*x5469))+(((-1.0)*px))+(((0.0003501)*x5471))+(((0.0003501)*x5474))+(((-0.01275)*x5479)));
evalcond[7]=((((-0.73512)*x5468))+(((-1.0)*py))+(((0.0003501)*x5470))+(((0.0003501)*x5472))+(((-0.01275)*x5480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=sj2;
j1eval[1]=IKsign(sj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(cj2,-1);
if(!x5481.valid){
continue;
}
CheckValue<IkReal> x5482=IKPowWithIntegerCheck(sj2,-1);
if(!x5482.valid){
continue;
}
if( IKabs(((x5481.value)*((((cj5*cj6*r10))+(((-1.0)*cj5*r11*sj6))+(((-1.0)*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5482.value)*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5481.value)*((((cj5*cj6*r10))+(((-1.0)*cj5*r11*sj6))+(((-1.0)*r12*sj5))))))+IKsqr(((x5482.value)*((((r00*sj6))+((cj6*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x5481.value)*((((cj5*cj6*r10))+(((-1.0)*cj5*r11*sj6))+(((-1.0)*r12*sj5))))), ((x5482.value)*((((r00*sj6))+((cj6*r01))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5483=IKsin(j1);
IkReal x5484=IKcos(j1);
IkReal x5485=(cj6*r11);
IkReal x5486=(r00*sj6);
IkReal x5487=(r10*sj6);
IkReal x5488=(sj5*sj6);
IkReal x5489=(cj6*r01);
IkReal x5490=((0.01275)*sj2);
IkReal x5491=(cj5*cj6);
IkReal x5492=((1.0)*cj5);
IkReal x5493=((1.0)*sj5);
IkReal x5494=((1.0)*x5484);
IkReal x5495=(cj6*x5493);
IkReal x5496=((1.0)*x5483);
evalcond[0]=(x5489+x5486+(((-1.0)*sj2*x5494)));
evalcond[1]=(x5487+x5485+(((-1.0)*sj2*x5496)));
evalcond[2]=(x5483+((r01*x5488))+(((-1.0)*r00*x5495))+(((-1.0)*r02*x5492)));
evalcond[3]=((((-1.0)*x5494))+((r11*x5488))+(((-1.0)*r12*x5492))+(((-1.0)*r10*x5495)));
evalcond[4]=((((-1.0)*r12*x5493))+(((-1.0)*r11*sj6*x5492))+(((-1.0)*cj2*x5496))+((r10*x5491)));
evalcond[5]=(((r00*x5491))+(((-1.0)*cj2*x5494))+(((-1.0)*r02*x5493))+(((-1.0)*r01*sj6*x5492)));
evalcond[6]=((((-1.0)*x5484*x5490))+(((-1.0)*px))+(((0.1064)*x5483))+(((0.0003501)*x5486))+(((0.0003501)*x5489)));
evalcond[7]=((((-1.0)*py))+(((-0.1064)*x5484))+(((0.0003501)*x5485))+(((0.0003501)*x5487))+(((-1.0)*x5483*x5490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5497=IKPowWithIntegerCheck(sj2,-1);
if(!x5497.valid){
continue;
}
if( IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5497.value)*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))+IKsqr(((x5497.value)*((((r00*sj6))+((cj6*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))), ((x5497.value)*((((r00*sj6))+((cj6*r01))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5498=IKsin(j1);
IkReal x5499=IKcos(j1);
IkReal x5500=(cj6*r11);
IkReal x5501=(r00*sj6);
IkReal x5502=(r10*sj6);
IkReal x5503=(sj5*sj6);
IkReal x5504=(cj6*r01);
IkReal x5505=((0.01275)*sj2);
IkReal x5506=(cj5*cj6);
IkReal x5507=((1.0)*cj5);
IkReal x5508=((1.0)*sj5);
IkReal x5509=((1.0)*x5499);
IkReal x5510=(cj6*x5508);
IkReal x5511=((1.0)*x5498);
evalcond[0]=(x5504+x5501+(((-1.0)*sj2*x5509)));
evalcond[1]=((((-1.0)*sj2*x5511))+x5502+x5500);
evalcond[2]=(x5498+(((-1.0)*r00*x5510))+(((-1.0)*r02*x5507))+((r01*x5503)));
evalcond[3]=((((-1.0)*r10*x5510))+(((-1.0)*r12*x5507))+((r11*x5503))+(((-1.0)*x5509)));
evalcond[4]=(((r10*x5506))+(((-1.0)*r12*x5508))+(((-1.0)*cj2*x5511))+(((-1.0)*r11*sj6*x5507)));
evalcond[5]=((((-1.0)*r01*sj6*x5507))+(((-1.0)*r02*x5508))+(((-1.0)*cj2*x5509))+((r00*x5506)));
evalcond[6]=((((-1.0)*px))+(((0.0003501)*x5501))+(((0.0003501)*x5504))+(((0.1064)*x5498))+(((-1.0)*x5499*x5505)));
evalcond[7]=((((-1.0)*x5498*x5505))+(((-1.0)*py))+(((0.0003501)*x5500))+(((0.0003501)*x5502))+(((-0.1064)*x5499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5512=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5512.valid){
continue;
}
CheckValue<IkReal> x5513 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5513.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5512.value)))+(x5513.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5514=IKsin(j1);
IkReal x5515=IKcos(j1);
IkReal x5516=(cj6*r11);
IkReal x5517=(r00*sj6);
IkReal x5518=(r10*sj6);
IkReal x5519=(sj5*sj6);
IkReal x5520=(cj6*r01);
IkReal x5521=((0.01275)*sj2);
IkReal x5522=(cj5*cj6);
IkReal x5523=((1.0)*cj5);
IkReal x5524=((1.0)*sj5);
IkReal x5525=((1.0)*x5515);
IkReal x5526=(cj6*x5524);
IkReal x5527=((1.0)*x5514);
evalcond[0]=(x5520+x5517+(((-1.0)*sj2*x5525)));
evalcond[1]=(x5518+x5516+(((-1.0)*sj2*x5527)));
evalcond[2]=(x5514+(((-1.0)*r02*x5523))+((r01*x5519))+(((-1.0)*r00*x5526)));
evalcond[3]=((((-1.0)*x5525))+(((-1.0)*r10*x5526))+((r11*x5519))+(((-1.0)*r12*x5523)));
evalcond[4]=((((-1.0)*r11*sj6*x5523))+(((-1.0)*cj2*x5527))+((r10*x5522))+(((-1.0)*r12*x5524)));
evalcond[5]=((((-1.0)*r02*x5524))+(((-1.0)*r01*sj6*x5523))+((r00*x5522))+(((-1.0)*cj2*x5525)));
evalcond[6]=((((0.1064)*x5514))+(((-1.0)*x5515*x5521))+(((0.0003501)*x5517))+(((-1.0)*px))+(((0.0003501)*x5520)));
evalcond[7]=((((-1.0)*x5514*x5521))+(((0.0003501)*x5516))+(((0.0003501)*x5518))+(((-1.0)*py))+(((-0.1064)*x5515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5532=IKPowWithIntegerCheck(sj2,-1);
if(!x5532.valid){
continue;
}
IkReal x5528=x5532.value;
IkReal x5529=(sj2*sj5);
IkReal x5530=(r00*sj6);
IkReal x5531=(cj6*r01);
CheckValue<IkReal> x5533=IKPowWithIntegerCheck(cj2,-1);
if(!x5533.valid){
continue;
}
CheckValue<IkReal> x5534=IKPowWithIntegerCheck(sj3,-1);
if(!x5534.valid){
continue;
}
if( IKabs((x5528*(x5533.value)*(x5534.value)*((((cj3*x5531))+((cj3*x5530))+(((-1.0)*cj6*r10*x5529))+(((-1.0)*cj5*r12*sj2))+((r11*sj6*x5529)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5528*((x5531+x5530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5528*(x5533.value)*(x5534.value)*((((cj3*x5531))+((cj3*x5530))+(((-1.0)*cj6*r10*x5529))+(((-1.0)*cj5*r12*sj2))+((r11*sj6*x5529))))))+IKsqr((x5528*((x5531+x5530))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5528*(x5533.value)*(x5534.value)*((((cj3*x5531))+((cj3*x5530))+(((-1.0)*cj6*r10*x5529))+(((-1.0)*cj5*r12*sj2))+((r11*sj6*x5529))))), (x5528*((x5531+x5530))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5535=IKsin(j1);
IkReal x5536=IKcos(j1);
IkReal x5537=((0.31436)*sj3);
IkReal x5538=(cj6*r11);
IkReal x5539=((1.0)*sj3);
IkReal x5540=(r00*sj6);
IkReal x5541=(r10*sj6);
IkReal x5542=(sj5*sj6);
IkReal x5543=(cj6*r01);
IkReal x5544=((0.01275)*sj2);
IkReal x5545=(cj5*cj6);
IkReal x5546=((1.0)*cj5);
IkReal x5547=((1.0)*sj2);
IkReal x5548=((1.0)*sj5);
IkReal x5549=(cj2*x5536);
IkReal x5550=(cj3*x5535);
IkReal x5551=(cj6*x5548);
IkReal x5552=(cj2*x5535);
IkReal x5553=(cj3*x5536);
evalcond[0]=(x5543+x5540+(((-1.0)*x5536*x5547)));
evalcond[1]=(x5538+x5541+(((-1.0)*x5535*x5547)));
evalcond[2]=((((-1.0)*r11*sj6*x5546))+((cj2*x5550))+((r10*x5545))+(((-1.0)*r12*x5548))+((sj3*x5536)));
evalcond[3]=(x5553+(((-1.0)*x5539*x5552))+((r11*x5542))+(((-1.0)*r12*x5546))+(((-1.0)*r10*x5551)));
evalcond[4]=(((r00*x5545))+((cj3*x5549))+(((-1.0)*x5535*x5539))+(((-1.0)*r02*x5548))+(((-1.0)*r01*sj6*x5546)));
evalcond[5]=((((-1.0)*x5550))+(((-1.0)*x5539*x5549))+(((-1.0)*r00*x5551))+(((-1.0)*r02*x5546))+((r01*x5542)));
evalcond[6]=((((0.0003501)*x5543))+(((0.0003501)*x5540))+(((-1.0)*px))+(((0.42076)*x5535))+(((-1.0)*x5536*x5544))+((x5537*x5549))+(((0.31436)*x5550)));
evalcond[7]=((((0.0003501)*x5541))+(((0.0003501)*x5538))+((x5537*x5552))+(((-1.0)*py))+(((-1.0)*x5535*x5544))+(((-0.42076)*x5536))+(((-0.31436)*x5553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5559=IKPowWithIntegerCheck(sj2,-1);
if(!x5559.valid){
continue;
}
IkReal x5554=x5559.value;
IkReal x5555=(cj6*r11);
IkReal x5556=(cj5*sj2);
IkReal x5557=(r10*sj6);
IkReal x5558=((1.0)*cj2*cj3);
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(sj3,-1);
if(!x5560.valid){
continue;
}
if( IKabs((x5554*((x5555+x5557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5554*(x5560.value)*(((((-1.0)*x5555*x5558))+(((-1.0)*cj6*r10*x5556))+((r12*sj2*sj5))+((r11*sj6*x5556))+(((-1.0)*x5557*x5558)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5554*((x5555+x5557))))+IKsqr((x5554*(x5560.value)*(((((-1.0)*x5555*x5558))+(((-1.0)*cj6*r10*x5556))+((r12*sj2*sj5))+((r11*sj6*x5556))+(((-1.0)*x5557*x5558))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x5554*((x5555+x5557))), (x5554*(x5560.value)*(((((-1.0)*x5555*x5558))+(((-1.0)*cj6*r10*x5556))+((r12*sj2*sj5))+((r11*sj6*x5556))+(((-1.0)*x5557*x5558))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5561=IKsin(j1);
IkReal x5562=IKcos(j1);
IkReal x5563=((0.31436)*sj3);
IkReal x5564=(cj6*r11);
IkReal x5565=((1.0)*sj3);
IkReal x5566=(r00*sj6);
IkReal x5567=(r10*sj6);
IkReal x5568=(sj5*sj6);
IkReal x5569=(cj6*r01);
IkReal x5570=((0.01275)*sj2);
IkReal x5571=(cj5*cj6);
IkReal x5572=((1.0)*cj5);
IkReal x5573=((1.0)*sj2);
IkReal x5574=((1.0)*sj5);
IkReal x5575=(cj2*x5562);
IkReal x5576=(cj3*x5561);
IkReal x5577=(cj6*x5574);
IkReal x5578=(cj2*x5561);
IkReal x5579=(cj3*x5562);
evalcond[0]=(x5569+x5566+(((-1.0)*x5562*x5573)));
evalcond[1]=(x5564+x5567+(((-1.0)*x5561*x5573)));
evalcond[2]=(((sj3*x5562))+((cj2*x5576))+((r10*x5571))+(((-1.0)*r12*x5574))+(((-1.0)*r11*sj6*x5572)));
evalcond[3]=(x5579+(((-1.0)*r10*x5577))+(((-1.0)*r12*x5572))+((r11*x5568))+(((-1.0)*x5565*x5578)));
evalcond[4]=((((-1.0)*r01*sj6*x5572))+((cj3*x5575))+(((-1.0)*r02*x5574))+(((-1.0)*x5561*x5565))+((r00*x5571)));
evalcond[5]=((((-1.0)*r02*x5572))+(((-1.0)*r00*x5577))+(((-1.0)*x5576))+(((-1.0)*x5565*x5575))+((r01*x5568)));
evalcond[6]=(((x5563*x5575))+(((0.0003501)*x5569))+(((0.0003501)*x5566))+(((0.31436)*x5576))+(((-1.0)*px))+(((0.42076)*x5561))+(((-1.0)*x5562*x5570)));
evalcond[7]=(((x5563*x5578))+(((0.0003501)*x5567))+(((0.0003501)*x5564))+(((-0.42076)*x5562))+(((-1.0)*py))+(((-1.0)*x5561*x5570))+(((-0.31436)*x5579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5580=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5580.valid){
continue;
}
CheckValue<IkReal> x5581 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5581.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5580.value)))+(x5581.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x5582=IKsin(j1);
IkReal x5583=IKcos(j1);
IkReal x5584=((0.31436)*sj3);
IkReal x5585=(cj6*r11);
IkReal x5586=((1.0)*sj3);
IkReal x5587=(r00*sj6);
IkReal x5588=(r10*sj6);
IkReal x5589=(sj5*sj6);
IkReal x5590=(cj6*r01);
IkReal x5591=((0.01275)*sj2);
IkReal x5592=(cj5*cj6);
IkReal x5593=((1.0)*cj5);
IkReal x5594=((1.0)*sj2);
IkReal x5595=((1.0)*sj5);
IkReal x5596=(cj2*x5583);
IkReal x5597=(cj3*x5582);
IkReal x5598=(cj6*x5595);
IkReal x5599=(cj2*x5582);
IkReal x5600=(cj3*x5583);
evalcond[0]=(x5587+x5590+(((-1.0)*x5583*x5594)));
evalcond[1]=(x5585+x5588+(((-1.0)*x5582*x5594)));
evalcond[2]=((((-1.0)*r11*sj6*x5593))+(((-1.0)*r12*x5595))+((sj3*x5583))+((r10*x5592))+((cj2*x5597)));
evalcond[3]=(x5600+(((-1.0)*x5586*x5599))+(((-1.0)*r12*x5593))+((r11*x5589))+(((-1.0)*r10*x5598)));
evalcond[4]=((((-1.0)*r02*x5595))+(((-1.0)*r01*sj6*x5593))+(((-1.0)*x5582*x5586))+((cj3*x5596))+((r00*x5592)));
evalcond[5]=((((-1.0)*x5586*x5596))+(((-1.0)*x5597))+(((-1.0)*r02*x5593))+(((-1.0)*r00*x5598))+((r01*x5589)));
evalcond[6]=((((0.0003501)*x5590))+(((0.0003501)*x5587))+(((0.42076)*x5582))+((x5584*x5596))+(((-1.0)*px))+(((0.31436)*x5597))+(((-1.0)*x5583*x5591)));
evalcond[7]=((((0.0003501)*x5585))+(((0.0003501)*x5588))+((x5584*x5599))+(((-0.42076)*x5583))+(((-1.0)*py))+(((-1.0)*x5582*x5591))+(((-0.31436)*x5600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x5601=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5601.valid){
continue;
}
CheckValue<IkReal> x5602 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5602.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5601.value)))+(x5602.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x5603=IKcos(j1);
IkReal x5604=IKsin(j1);
IkReal x5605=(cj6*r01);
IkReal x5606=(r00*sj6);
IkReal x5607=(cj6*r11);
IkReal x5608=((0.31436)*cj3);
IkReal x5609=(r10*sj6);
IkReal x5610=((0.31436)*cj2*sj3);
IkReal x5611=(sj2*x5604);
IkReal x5612=(sj2*x5603);
evalcond[0]=((((-1.0)*x5612))+x5605+x5606);
evalcond[1]=((((-1.0)*x5611))+x5607+x5609);
evalcond[2]=(((x5603*x5610))+(((0.42076)*x5604))+((x5604*x5608))+(((-0.01275)*x5612))+(((0.0003501)*x5606))+(((0.0003501)*x5605))+(((-1.0)*px)));
evalcond[3]=(((x5604*x5610))+(((-0.42076)*x5603))+(((-0.01275)*x5611))+(((0.0003501)*x5609))+(((0.0003501)*x5607))+(((-1.0)*x5603*x5608))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5613=cj6*cj6;
IkReal x5614=r21*r21;
IkReal x5615=(r22*sj2);
IkReal x5616=((1.0)*cj3);
IkReal x5617=(cj6*r20);
IkReal x5618=(r21*sj2*sj6);
IkReal x5619=(x5614+(r22*r22)+(((-2.0)*r21*sj6*x5617))+((x5613*(r20*r20)))+(((-1.0)*x5613*x5614)));
j5eval[0]=x5619;
j5eval[1]=IKsign(x5619);
j5eval[2]=((IKabs((((sj3*x5615))+((cj3*sj2*x5617))+(((-1.0)*x5616*x5618)))))+(IKabs(((((-1.0)*x5615*x5616))+(((-1.0)*sj3*x5618))+((sj2*sj3*x5617))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5620=((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)));
j5eval[0]=x5620;
j5eval[1]=IKsign(x5620);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5621=cj6*cj6;
IkReal x5622=(sj2*sj3);
IkReal x5623=((1.0)*r11);
IkReal x5624=(r21*sj6);
IkReal x5625=(cj6*r10);
IkReal x5626=(cj6*r20);
IkReal x5627=(cj1*sj3);
IkReal x5628=(cj2*cj3*sj1);
IkReal x5629=(((r10*r20*x5621))+((r11*r21))+(((-1.0)*r21*x5621*x5623))+((r12*r22))+(((-1.0)*sj6*x5623*x5626))+(((-1.0)*x5624*x5625)));
j5eval[0]=x5629;
j5eval[1]=IKsign(x5629);
j5eval[2]=((IKabs(((((-1.0)*x5626*x5627))+(((-1.0)*x5626*x5628))+((x5624*x5628))+((x5624*x5627))+((r12*x5622)))))+(IKabs(((((-1.0)*sj6*x5622*x5623))+((x5622*x5625))+((r22*x5628))+((r22*x5627))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5630=((-1.0)*r00);
IkReal x5632 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5632)==0){
continue;
}
IkReal x5631=pow(x5632,-0.5);
CheckValue<IkReal> x5633 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5630),IKFAST_ATAN2_MAGTHRESH);
if(!x5633.valid){
continue;
}
IkReal gconst42=((-1.0)*(x5633.value));
IkReal gconst43=(r01*x5631);
IkReal gconst44=(x5630*x5631);
CheckValue<IkReal> x5634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5634.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5635=(r22*sj2);
IkReal x5636=((1.0)*cj3);
IkReal x5637=(gconst43*r21);
IkReal x5638=(gconst44*r20*sj2);
CheckValue<IkReal> x5639=IKPowWithIntegerCheck(IKsign(((((gconst44*gconst44)*(r20*r20)))+(r22*r22)+(((-2.0)*gconst44*r20*x5637))+(x5637*x5637))),-1);
if(!x5639.valid){
continue;
}
CheckValue<IkReal> x5640 = IKatan2WithCheck(IkReal(((((-1.0)*x5635*x5636))+((sj3*x5638))+(((-1.0)*sj2*sj3*x5637)))),IkReal(((((-1.0)*sj2*x5636*x5637))+((sj3*x5635))+((cj3*x5638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5640.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5639.value)))+(x5640.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5641=IKsin(j5);
IkReal x5642=IKcos(j5);
IkReal x5643=(cj1*cj2);
IkReal x5644=((1.0)*sj3);
IkReal x5645=(gconst43*r11);
IkReal x5646=(cj2*sj1);
IkReal x5647=(gconst43*r21);
IkReal x5648=((1.0)*cj3);
IkReal x5649=(gconst43*r01);
IkReal x5650=((1.0)*x5642);
IkReal x5651=(gconst44*x5642);
IkReal x5652=((1.0)*x5641);
IkReal x5653=(gconst44*x5652);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x5650))+(((-1.0)*r20*x5653))+((x5641*x5647)));
evalcond[1]=(((r20*x5651))+(((-1.0)*r22*x5652))+(((-1.0)*x5647*x5650))+(((-1.0)*sj2*x5648)));
evalcond[2]=((((-1.0)*r12*x5652))+(((-1.0)*x5645*x5650))+((cj1*sj3))+((r10*x5651))+((cj3*x5646)));
evalcond[3]=((((-1.0)*r12*x5650))+(((-1.0)*r10*x5653))+((x5641*x5645))+(((-1.0)*x5644*x5646))+((cj1*cj3)));
evalcond[4]=(((r00*x5651))+(((-1.0)*x5649*x5650))+(((-1.0)*r02*x5652))+(((-1.0)*sj1*x5644))+((cj3*x5643)));
evalcond[5]=(((x5641*x5649))+(((-1.0)*r02*x5650))+(((-1.0)*r00*x5653))+(((-1.0)*x5643*x5644))+(((-1.0)*sj1*x5648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5654=((-1.0)*r01);
IkReal x5656 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5656)==0){
continue;
}
IkReal x5655=pow(x5656,-0.5);
CheckValue<IkReal> x5657 = IKatan2WithCheck(IkReal(x5654),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5657.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x5657.value))));
IkReal gconst46=(x5654*x5655);
IkReal gconst47=((1.0)*r00*x5655);
CheckValue<IkReal> x5658 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5658.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5658.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5659=(sj2*sj3);
IkReal x5660=(cj3*sj2);
IkReal x5661=(gconst47*r20);
IkReal x5662=((1.0)*gconst46*r21);
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal((((x5659*x5661))+(((-1.0)*x5659*x5662))+(((-1.0)*r22*x5660)))),IkReal((((x5660*x5661))+((r22*x5659))+(((-1.0)*x5660*x5662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x5661*x5661)+(((-2.0)*gconst46*r21*x5661))+(((gconst46*gconst46)*(r21*r21))))),-1);
if(!x5664.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5663.value)+(((1.5707963267949)*(x5664.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5665=IKsin(j5);
IkReal x5666=IKcos(j5);
IkReal x5667=(gconst46*r11);
IkReal x5668=(gconst47*r00);
IkReal x5669=(cj1*cj2);
IkReal x5670=((1.0)*sj3);
IkReal x5671=(cj2*sj1);
IkReal x5672=(gconst47*r20);
IkReal x5673=((1.0)*cj3);
IkReal x5674=(gconst47*r10);
IkReal x5675=((1.0)*x5666);
IkReal x5676=((1.0)*x5665);
IkReal x5677=(gconst46*x5665);
evalcond[0]=((((-1.0)*x5672*x5676))+((sj2*sj3))+(((-1.0)*r22*x5675))+((r21*x5677)));
evalcond[1]=((((-1.0)*r22*x5676))+(((-1.0)*sj2*x5673))+((x5666*x5672))+(((-1.0)*gconst46*r21*x5675)));
evalcond[2]=((((-1.0)*x5667*x5675))+(((-1.0)*r12*x5676))+((cj3*x5671))+((cj1*sj3))+((x5666*x5674)));
evalcond[3]=((((-1.0)*x5670*x5671))+(((-1.0)*r12*x5675))+((cj1*cj3))+((x5665*x5667))+(((-1.0)*x5674*x5676)));
evalcond[4]=(((cj3*x5669))+(((-1.0)*gconst46*r01*x5675))+(((-1.0)*sj1*x5670))+((x5666*x5668))+(((-1.0)*r02*x5676)));
evalcond[5]=((((-1.0)*x5669*x5670))+(((-1.0)*sj1*x5673))+(((-1.0)*x5668*x5676))+((r01*x5677))+(((-1.0)*r02*x5675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5678=(cj3*sj1);
IkReal x5679=(cj1*sj3);
IkReal x5680=(cj6*r20);
IkReal x5681=((1.0)*r21*sj6);
IkReal x5682=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x5682;
j5eval[1]=((IKabs((((r22*x5678))+((r22*x5679)))))+(IKabs(((((-1.0)*x5678*x5681))+(((-1.0)*x5679*x5681))+((x5679*x5680))+((x5678*x5680))))));
j5eval[2]=IKsign(x5682);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5683=(cj6*r20);
IkReal x5684=(cj1*cj3);
IkReal x5685=(sj1*sj3);
IkReal x5686=((1.0)*sj6);
IkReal x5687=((((-1.0)*cj6*r01))+(((-1.0)*r00*x5686)));
j5eval[0]=x5687;
j5eval[1]=((IKabs((((x5683*x5685))+(((-1.0)*r21*x5685*x5686))+(((-1.0)*x5683*x5684))+((r21*sj6*x5684)))))+(IKabs(((((-1.0)*r22*x5685))+((r22*x5684))))));
j5eval[2]=IKsign(x5687);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5688=cj6*cj6;
IkReal x5689=((1.0)*r11);
IkReal x5690=(cj3*sj1);
IkReal x5691=(cj1*sj3);
IkReal x5692=(cj6*r20);
IkReal x5693=(r21*sj6);
IkReal x5694=((((-1.0)*cj6*r10*x5693))+((r11*r21))+((r10*r20*x5688))+((r12*r22))+(((-1.0)*r21*x5688*x5689))+(((-1.0)*sj6*x5689*x5692)));
j5eval[0]=x5694;
j5eval[1]=((IKabs((((x5690*x5693))+(((-1.0)*x5690*x5692))+((x5691*x5693))+(((-1.0)*x5691*x5692)))))+(IKabs((((r22*x5690))+((r22*x5691))))));
j5eval[2]=IKsign(x5694);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5695=cj6*cj6;
IkReal x5696=((1.0)*r11);
IkReal x5697=(cj3*sj1);
IkReal x5698=(cj1*sj3);
IkReal x5699=(cj6*r20);
IkReal x5700=(r21*sj6);
CheckValue<IkReal> x5701=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r10*x5700))+((r11*r21))+((r10*r20*x5695))+((r12*r22))+(((-1.0)*r21*x5695*x5696))+(((-1.0)*sj6*x5696*x5699)))),-1);
if(!x5701.valid){
continue;
}
CheckValue<IkReal> x5702 = IKatan2WithCheck(IkReal((((r22*x5697))+((r22*x5698)))),IkReal((((x5697*x5700))+(((-1.0)*x5697*x5699))+(((-1.0)*x5698*x5699))+((x5698*x5700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5702.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5701.value)))+(x5702.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5703=IKsin(j5);
IkReal x5704=IKcos(j5);
IkReal x5705=(cj1*cj3);
IkReal x5706=(cj3*sj1);
IkReal x5707=((1.0)*sj3);
IkReal x5708=(sj1*x5707);
IkReal x5709=(sj6*x5703);
IkReal x5710=((1.0)*x5703);
IkReal x5711=((1.0)*x5704);
IkReal x5712=(cj6*x5704);
IkReal x5713=(sj6*x5711);
IkReal x5714=(cj6*x5710);
evalcond[0]=((((-1.0)*r22*x5711))+((r21*x5709))+(((-1.0)*r20*x5714)));
evalcond[1]=((((-1.0)*r22*x5710))+(((-1.0)*r21*x5713))+((r20*x5712)));
evalcond[2]=(((r10*x5712))+((cj1*sj3))+(((-1.0)*r12*x5710))+(((-1.0)*r11*x5713))+x5706);
evalcond[3]=((((-1.0)*r10*x5714))+((r11*x5709))+(((-1.0)*r12*x5711))+x5705+(((-1.0)*x5708)));
evalcond[4]=((((-1.0)*r01*x5713))+((r00*x5712))+x5705+(((-1.0)*x5708))+(((-1.0)*r02*x5710)));
evalcond[5]=((((-1.0)*r00*x5714))+(((-1.0)*x5706))+(((-1.0)*cj1*x5707))+((r01*x5709))+(((-1.0)*r02*x5711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5715=((1.0)*sj6);
IkReal x5716=(sj1*sj3);
IkReal x5717=(cj6*r20);
IkReal x5718=(cj1*cj3);
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal((((r22*x5718))+(((-1.0)*r22*x5716)))),IkReal(((((-1.0)*x5717*x5718))+((x5716*x5717))+(((-1.0)*r21*x5715*x5716))+((r21*sj6*x5718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
CheckValue<IkReal> x5720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5715))+(((-1.0)*cj6*r01)))),-1);
if(!x5720.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5719.value)+(((1.5707963267949)*(x5720.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5721=IKsin(j5);
IkReal x5722=IKcos(j5);
IkReal x5723=(cj1*cj3);
IkReal x5724=(cj3*sj1);
IkReal x5725=((1.0)*sj3);
IkReal x5726=(sj1*x5725);
IkReal x5727=(sj6*x5721);
IkReal x5728=((1.0)*x5721);
IkReal x5729=((1.0)*x5722);
IkReal x5730=(cj6*x5722);
IkReal x5731=(sj6*x5729);
IkReal x5732=(cj6*x5728);
evalcond[0]=((((-1.0)*r20*x5732))+((r21*x5727))+(((-1.0)*r22*x5729)));
evalcond[1]=((((-1.0)*r21*x5731))+((r20*x5730))+(((-1.0)*r22*x5728)));
evalcond[2]=((((-1.0)*r11*x5731))+(((-1.0)*r12*x5728))+((cj1*sj3))+((r10*x5730))+x5724);
evalcond[3]=(((r11*x5727))+(((-1.0)*r12*x5729))+(((-1.0)*x5726))+(((-1.0)*r10*x5732))+x5723);
evalcond[4]=(((r00*x5730))+(((-1.0)*x5726))+(((-1.0)*r02*x5728))+(((-1.0)*r01*x5731))+x5723);
evalcond[5]=(((r01*x5727))+(((-1.0)*r02*x5729))+(((-1.0)*cj1*x5725))+(((-1.0)*x5724))+(((-1.0)*r00*x5732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5733=(cj3*sj1);
IkReal x5734=(cj1*sj3);
IkReal x5735=(cj6*r20);
IkReal x5736=((1.0)*r21*sj6);
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x5737.valid){
continue;
}
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal((((x5734*x5735))+(((-1.0)*x5734*x5736))+((x5733*x5735))+(((-1.0)*x5733*x5736)))),IkReal((((r22*x5734))+((r22*x5733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5737.value)))+(x5738.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5739=IKsin(j5);
IkReal x5740=IKcos(j5);
IkReal x5741=(cj1*cj3);
IkReal x5742=(cj3*sj1);
IkReal x5743=((1.0)*sj3);
IkReal x5744=(sj1*x5743);
IkReal x5745=(sj6*x5739);
IkReal x5746=((1.0)*x5739);
IkReal x5747=((1.0)*x5740);
IkReal x5748=(cj6*x5740);
IkReal x5749=(sj6*x5747);
IkReal x5750=(cj6*x5746);
evalcond[0]=((((-1.0)*r20*x5750))+(((-1.0)*r22*x5747))+((r21*x5745)));
evalcond[1]=((((-1.0)*r21*x5749))+(((-1.0)*r22*x5746))+((r20*x5748)));
evalcond[2]=(((cj1*sj3))+(((-1.0)*r11*x5749))+(((-1.0)*r12*x5746))+((r10*x5748))+x5742);
evalcond[3]=(((r11*x5745))+(((-1.0)*r10*x5750))+(((-1.0)*x5744))+(((-1.0)*r12*x5747))+x5741);
evalcond[4]=((((-1.0)*r01*x5749))+(((-1.0)*r02*x5746))+((r00*x5748))+(((-1.0)*x5744))+x5741);
evalcond[5]=((((-1.0)*cj1*x5743))+(((-1.0)*r00*x5750))+((r01*x5745))+(((-1.0)*r02*x5747))+(((-1.0)*x5742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5751=(r21*sj6);
IkReal x5752=(cj3*sj1);
IkReal x5753=(cj1*sj3);
IkReal x5754=(cj6*r20);
IkReal x5755=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x5755;
j5eval[1]=((IKabs(((((-1.0)*x5753*x5754))+(((-1.0)*x5751*x5752))+((x5752*x5754))+((x5751*x5753)))))+(IKabs(((((-1.0)*r22*x5752))+((r22*x5753))))));
j5eval[2]=IKsign(x5755);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5756=(sj1*sj3);
IkReal x5757=(r21*sj6);
IkReal x5758=((1.0)*cj6);
IkReal x5759=(cj1*cj3);
IkReal x5760=((((-1.0)*r00*sj6))+(((-1.0)*r01*x5758)));
j5eval[0]=x5760;
j5eval[1]=((IKabs(((((-1.0)*r20*x5758*x5759))+((x5756*x5757))+((x5757*x5759))+(((-1.0)*r20*x5756*x5758)))))+(IKabs((((r22*x5756))+((r22*x5759))))));
j5eval[2]=IKsign(x5760);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5761=cj6*cj6;
IkReal x5762=((1.0)*r21);
IkReal x5763=(cj1*cj3);
IkReal x5764=(sj1*sj3);
IkReal x5765=(cj6*r20);
IkReal x5766=(((r11*r21))+((r12*r22))+(((-1.0)*r11*sj6*x5765))+((r10*r20*x5761))+(((-1.0)*cj6*r10*sj6*x5762))+(((-1.0)*r11*x5761*x5762)));
j5eval[0]=x5766;
j5eval[1]=IKsign(x5766);
j5eval[2]=((IKabs(((((-1.0)*sj6*x5762*x5764))+(((-1.0)*sj6*x5762*x5763))+((x5764*x5765))+((x5763*x5765)))))+(IKabs((((r22*x5764))+((r22*x5763))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5767=cj6*cj6;
IkReal x5768=((1.0)*r21);
IkReal x5769=(cj1*cj3);
IkReal x5770=(sj1*sj3);
IkReal x5771=(cj6*r20);
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal((((x5769*x5771))+((x5770*x5771))+(((-1.0)*sj6*x5768*x5770))+(((-1.0)*sj6*x5768*x5769)))),IkReal((((r22*x5769))+((r22*x5770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
CheckValue<IkReal> x5773=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*r11*sj6*x5771))+((r10*r20*x5767))+(((-1.0)*cj6*r10*sj6*x5768))+(((-1.0)*r11*x5767*x5768)))),-1);
if(!x5773.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5772.value)+(((1.5707963267949)*(x5773.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5774=IKsin(j5);
IkReal x5775=IKcos(j5);
IkReal x5776=(cj1*sj3);
IkReal x5777=((1.0)*cj3);
IkReal x5778=(sj1*sj3);
IkReal x5779=(sj1*x5777);
IkReal x5780=(sj6*x5774);
IkReal x5781=((1.0)*x5774);
IkReal x5782=((1.0)*x5775);
IkReal x5783=(cj6*x5775);
IkReal x5784=(sj6*x5782);
IkReal x5785=(cj6*x5781);
evalcond[0]=((((-1.0)*r20*x5785))+((r21*x5780))+(((-1.0)*r22*x5782)));
evalcond[1]=((((-1.0)*r21*x5784))+((r20*x5783))+(((-1.0)*r22*x5781)));
evalcond[2]=((((-1.0)*r10*x5785))+((r11*x5780))+(((-1.0)*r12*x5782))+((cj1*cj3))+x5778);
evalcond[3]=((((-1.0)*r00*x5785))+((r01*x5780))+(((-1.0)*x5779))+(((-1.0)*r02*x5782))+x5776);
evalcond[4]=((((-1.0)*r12*x5781))+(((-1.0)*x5779))+(((-1.0)*r11*x5784))+((r10*x5783))+x5776);
evalcond[5]=((((-1.0)*cj1*x5777))+((r00*x5783))+(((-1.0)*r01*x5784))+(((-1.0)*x5778))+(((-1.0)*r02*x5781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5786=(sj1*sj3);
IkReal x5787=(r21*sj6);
IkReal x5788=((1.0)*cj6);
IkReal x5789=(cj1*cj3);
CheckValue<IkReal> x5790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x5788)))),-1);
if(!x5790.valid){
continue;
}
CheckValue<IkReal> x5791 = IKatan2WithCheck(IkReal((((r22*x5786))+((r22*x5789)))),IkReal(((((-1.0)*r20*x5786*x5788))+(((-1.0)*r20*x5788*x5789))+((x5786*x5787))+((x5787*x5789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5791.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5790.value)))+(x5791.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5792=IKsin(j5);
IkReal x5793=IKcos(j5);
IkReal x5794=(cj1*sj3);
IkReal x5795=((1.0)*cj3);
IkReal x5796=(sj1*sj3);
IkReal x5797=(sj1*x5795);
IkReal x5798=(sj6*x5792);
IkReal x5799=((1.0)*x5792);
IkReal x5800=((1.0)*x5793);
IkReal x5801=(cj6*x5793);
IkReal x5802=(sj6*x5800);
IkReal x5803=(cj6*x5799);
evalcond[0]=((((-1.0)*r20*x5803))+(((-1.0)*r22*x5800))+((r21*x5798)));
evalcond[1]=((((-1.0)*r22*x5799))+(((-1.0)*r21*x5802))+((r20*x5801)));
evalcond[2]=((((-1.0)*r10*x5803))+(((-1.0)*r12*x5800))+((r11*x5798))+((cj1*cj3))+x5796);
evalcond[3]=((((-1.0)*x5797))+((r01*x5798))+(((-1.0)*r00*x5803))+(((-1.0)*r02*x5800))+x5794);
evalcond[4]=((((-1.0)*x5797))+(((-1.0)*r11*x5802))+(((-1.0)*r12*x5799))+((r10*x5801))+x5794);
evalcond[5]=(((r00*x5801))+(((-1.0)*cj1*x5795))+(((-1.0)*r01*x5802))+(((-1.0)*x5796))+(((-1.0)*r02*x5799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5804=(cj1*sj3);
IkReal x5805=(cj6*r20);
IkReal x5806=(r21*sj6);
IkReal x5807=(cj3*sj1);
CheckValue<IkReal> x5808 = IKatan2WithCheck(IkReal((((r22*x5804))+(((-1.0)*r22*x5807)))),IkReal(((((-1.0)*x5806*x5807))+((x5805*x5807))+(((-1.0)*x5804*x5805))+((x5804*x5806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5808.valid){
continue;
}
CheckValue<IkReal> x5809=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x5809.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5808.value)+(((1.5707963267949)*(x5809.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5810=IKsin(j5);
IkReal x5811=IKcos(j5);
IkReal x5812=(cj1*sj3);
IkReal x5813=((1.0)*cj3);
IkReal x5814=(sj1*sj3);
IkReal x5815=(sj1*x5813);
IkReal x5816=(sj6*x5810);
IkReal x5817=((1.0)*x5810);
IkReal x5818=((1.0)*x5811);
IkReal x5819=(cj6*x5811);
IkReal x5820=(sj6*x5818);
IkReal x5821=(cj6*x5817);
evalcond[0]=(((r21*x5816))+(((-1.0)*r20*x5821))+(((-1.0)*r22*x5818)));
evalcond[1]=((((-1.0)*r21*x5820))+((r20*x5819))+(((-1.0)*r22*x5817)));
evalcond[2]=((((-1.0)*r12*x5818))+((r11*x5816))+((cj1*cj3))+(((-1.0)*r10*x5821))+x5814);
evalcond[3]=((((-1.0)*r00*x5821))+(((-1.0)*x5815))+(((-1.0)*r02*x5818))+((r01*x5816))+x5812);
evalcond[4]=((((-1.0)*r12*x5817))+(((-1.0)*x5815))+(((-1.0)*r11*x5820))+x5812+((r10*x5819)));
evalcond[5]=((((-1.0)*cj1*x5813))+(((-1.0)*r01*x5820))+(((-1.0)*x5814))+(((-1.0)*r02*x5817))+((r00*x5819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5822=cj6*cj6;
IkReal x5823=(sj2*sj3);
IkReal x5824=((1.0)*r11);
IkReal x5825=(r21*sj6);
IkReal x5826=(cj6*r20);
IkReal x5827=(cj1*sj3);
IkReal x5828=(cj6*r10);
IkReal x5829=(cj2*cj3*sj1);
CheckValue<IkReal> x5830 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x5823*x5824))+((r22*x5827))+((r22*x5829))+((x5823*x5828)))),IkReal(((((-1.0)*x5826*x5829))+(((-1.0)*x5826*x5827))+((r12*x5823))+((x5825*x5827))+((x5825*x5829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5830.valid){
continue;
}
CheckValue<IkReal> x5831=IKPowWithIntegerCheck(IKsign((((r10*r20*x5822))+(((-1.0)*sj6*x5824*x5826))+((r11*r21))+(((-1.0)*r21*x5822*x5824))+((r12*r22))+(((-1.0)*x5825*x5828)))),-1);
if(!x5831.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5830.value)+(((1.5707963267949)*(x5831.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5832=IKsin(j5);
IkReal x5833=IKcos(j5);
IkReal x5834=(cj1*cj2);
IkReal x5835=((1.0)*sj3);
IkReal x5836=(cj2*sj1);
IkReal x5837=((1.0)*cj3);
IkReal x5838=(sj6*x5832);
IkReal x5839=((1.0)*x5832);
IkReal x5840=((1.0)*x5833);
IkReal x5841=(cj6*x5833);
IkReal x5842=(sj6*x5840);
IkReal x5843=(cj6*x5839);
evalcond[0]=(((r21*x5838))+((sj2*sj3))+(((-1.0)*r20*x5843))+(((-1.0)*r22*x5840)));
evalcond[1]=((((-1.0)*r22*x5839))+((r20*x5841))+(((-1.0)*r21*x5842))+(((-1.0)*sj2*x5837)));
evalcond[2]=(((r10*x5841))+((cj1*sj3))+((cj3*x5836))+(((-1.0)*r11*x5842))+(((-1.0)*r12*x5839)));
evalcond[3]=(((r11*x5838))+((cj1*cj3))+(((-1.0)*r12*x5840))+(((-1.0)*r10*x5843))+(((-1.0)*x5835*x5836)));
evalcond[4]=((((-1.0)*r02*x5839))+(((-1.0)*r01*x5842))+((cj3*x5834))+((r00*x5841))+(((-1.0)*sj1*x5835)));
evalcond[5]=((((-1.0)*r02*x5840))+(((-1.0)*r00*x5843))+((r01*x5838))+(((-1.0)*x5834*x5835))+(((-1.0)*sj1*x5837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5844=((1.0)*sj6);
IkReal x5845=(sj2*sj3);
IkReal x5846=((1.0)*cj6);
IkReal x5847=(cj1*cj3);
IkReal x5848=(cj2*sj1*sj3);
CheckValue<IkReal> x5849 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5845))+(((-1.0)*r22*x5848))+((r22*x5847)))),IkReal((((cj6*r10*x5845))+((r21*sj6*x5847))+(((-1.0)*r21*x5844*x5848))+(((-1.0)*r20*x5846*x5847))+((cj6*r20*x5848))+(((-1.0)*r11*x5844*x5845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5849.valid){
continue;
}
CheckValue<IkReal> x5850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5846))+(((-1.0)*r00*x5844)))),-1);
if(!x5850.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5849.value)+(((1.5707963267949)*(x5850.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5851=IKsin(j5);
IkReal x5852=IKcos(j5);
IkReal x5853=(cj1*cj2);
IkReal x5854=((1.0)*sj3);
IkReal x5855=(cj2*sj1);
IkReal x5856=((1.0)*cj3);
IkReal x5857=(sj6*x5851);
IkReal x5858=((1.0)*x5851);
IkReal x5859=((1.0)*x5852);
IkReal x5860=(cj6*x5852);
IkReal x5861=(sj6*x5859);
IkReal x5862=(cj6*x5858);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x5859))+((r21*x5857))+(((-1.0)*r20*x5862)));
evalcond[1]=((((-1.0)*r22*x5858))+((r20*x5860))+(((-1.0)*r21*x5861))+(((-1.0)*sj2*x5856)));
evalcond[2]=((((-1.0)*r11*x5861))+((cj1*sj3))+(((-1.0)*r12*x5858))+((cj3*x5855))+((r10*x5860)));
evalcond[3]=((((-1.0)*r10*x5862))+((r11*x5857))+(((-1.0)*r12*x5859))+(((-1.0)*x5854*x5855))+((cj1*cj3)));
evalcond[4]=(((cj3*x5853))+(((-1.0)*r02*x5858))+(((-1.0)*r01*x5861))+((r00*x5860))+(((-1.0)*sj1*x5854)));
evalcond[5]=((((-1.0)*x5853*x5854))+((r01*x5857))+(((-1.0)*r02*x5859))+(((-1.0)*r00*x5862))+(((-1.0)*sj1*x5856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5863=cj6*cj6;
IkReal x5864=r21*r21;
IkReal x5865=(r22*sj2);
IkReal x5866=((1.0)*cj3);
IkReal x5867=(cj6*r20);
IkReal x5868=(r21*sj2*sj6);
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x5868))+((sj2*sj3*x5867))+(((-1.0)*x5865*x5866)))),IkReal(((((-1.0)*x5866*x5868))+((cj3*sj2*x5867))+((sj3*x5865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*r21*sj6*x5867))+(((-1.0)*x5863*x5864))+((x5863*(r20*r20)))+x5864)),-1);
if(!x5870.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5871=IKsin(j5);
IkReal x5872=IKcos(j5);
IkReal x5873=(cj1*cj2);
IkReal x5874=((1.0)*sj3);
IkReal x5875=(cj2*sj1);
IkReal x5876=((1.0)*cj3);
IkReal x5877=(sj6*x5871);
IkReal x5878=((1.0)*x5871);
IkReal x5879=((1.0)*x5872);
IkReal x5880=(cj6*x5872);
IkReal x5881=(sj6*x5879);
IkReal x5882=(cj6*x5878);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x5879))+(((-1.0)*r20*x5882))+((r21*x5877)));
evalcond[1]=(((r20*x5880))+(((-1.0)*r22*x5878))+(((-1.0)*sj2*x5876))+(((-1.0)*r21*x5881)));
evalcond[2]=(((r10*x5880))+(((-1.0)*r12*x5878))+((cj1*sj3))+(((-1.0)*r11*x5881))+((cj3*x5875)));
evalcond[3]=((((-1.0)*r12*x5879))+(((-1.0)*x5874*x5875))+((r11*x5877))+(((-1.0)*r10*x5882))+((cj1*cj3)));
evalcond[4]=(((r00*x5880))+(((-1.0)*r02*x5878))+(((-1.0)*r01*x5881))+(((-1.0)*sj1*x5874))+((cj3*x5873)));
evalcond[5]=((((-1.0)*r00*x5882))+(((-1.0)*r02*x5879))+(((-1.0)*x5873*x5874))+(((-1.0)*sj1*x5876))+((r01*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5883=cj6*cj6;
IkReal x5884=r21*r21;
IkReal x5885=(sj2*sj3);
IkReal x5886=(r21*sj6);
IkReal x5887=(cj6*r20);
IkReal x5888=(((x5883*(r20*r20)))+(r22*r22)+(((-1.0)*x5883*x5884))+(((-2.0)*x5886*x5887))+x5884);
j5eval[0]=x5888;
j5eval[1]=IKsign(x5888);
j5eval[2]=((IKabs((((r22*x5885))+((cj2*x5886))+(((-1.0)*cj2*x5887)))))+(IKabs(((((-1.0)*x5885*x5886))+((cj2*r22))+((x5885*x5887))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5889=cj3*cj3;
IkReal x5890=(sj3*sj6);
IkReal x5891=((1.0)*r10);
IkReal x5892=(cj6*sj3);
IkReal x5893=(cj2*cj3*sj6);
IkReal x5894=((1.0)*cj2*cj3*cj6);
IkReal x5895=((1.0)+(((-1.0)*x5889))+((x5889*(cj2*cj2))));
j1eval[0]=x5895;
j1eval[1]=IKsign(x5895);
j1eval[2]=((IKabs(((((-1.0)*r11*x5894))+(((-1.0)*x5891*x5893))+((r00*x5890))+((r01*x5892)))))+(IKabs(((((-1.0)*r00*x5893))+(((-1.0)*x5890*x5891))+(((-1.0)*r01*x5894))+(((-1.0)*r11*x5892))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5896=(cj2*cj3);
IkReal x5897=(sj2*sj3);
j1eval[0]=((((-1.0)*x5897))+(((24.6556862745098)*cj2))+(((33.0007843137255)*x5896)));
j1eval[1]=IKsign(((((0.31436)*cj2))+(((-0.01275)*x5897))+(((0.42076)*x5896))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((1.35991303789004)*px))+(((-0.0235864773548509)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0235864773548509)*px))+(((-1.35991303789004)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35991303789004)*px))+(((-0.0235864773548509)*py))))+IKsqr(((((-0.0235864773548509)*px))+(((-1.35991303789004)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35991303789004)*px))+(((-0.0235864773548509)*py))), ((((-0.0235864773548509)*px))+(((-1.35991303789004)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x5898=IKsin(j1);
IkReal x5899=IKcos(j1);
evalcond[0]=((((-0.01275)*x5899))+(((0.73512)*x5898))+(((-1.0)*px)));
evalcond[1]=((((-0.01275)*x5898))+(((-0.73512)*x5899))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x5900=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x5900;
j5eval[1]=IKsign(x5900);
j5eval[2]=((IKabs((((cj1*r21*sj6))+(((-1.0)*cj1*cj6*r20)))))+(IKabs((cj1*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x5901=((1.0)*cj6);
IkReal x5902=((((-1.0)*r01*x5901))+(((-1.0)*r00*sj6)));
j5eval[0]=x5902;
j5eval[1]=IKsign(x5902);
j5eval[2]=((IKabs(((((-1.0)*cj1*r20*x5901))+((cj1*r21*sj6)))))+(IKabs((cj1*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x5903=((1.0)*cj6);
IkReal x5904=((((-1.0)*r01*x5903))+(((-1.0)*r00*sj6)));
j5eval[0]=x5904;
j5eval[1]=((IKabs(((((-1.0)*r20*sj1*x5903))+((r21*sj1*sj6)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x5904);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5905=((1.0)*cj6);
CheckValue<IkReal> x5906 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj1*x5905))+((r21*sj1*sj6)))),IkReal(((-1.0)*r22*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x5906.valid){
continue;
}
CheckValue<IkReal> x5907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5905))+(((-1.0)*r00*sj6)))),-1);
if(!x5907.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5906.value)+(((1.5707963267949)*(x5907.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5908=IKcos(j5);
IkReal x5909=IKsin(j5);
IkReal x5910=((1.0)*sj1);
IkReal x5911=(cj6*r10);
IkReal x5912=(cj6*r20);
IkReal x5913=(cj6*r00);
IkReal x5914=(sj6*x5908);
IkReal x5915=(sj6*x5909);
IkReal x5916=((1.0)*x5908);
IkReal x5917=((1.0)*x5909);
evalcond[0]=(((r22*x5909))+(((-1.0)*x5912*x5916))+((r21*x5914)));
evalcond[1]=((((-1.0)*x5912*x5917))+(((-1.0)*r22*x5916))+((r21*x5915)));
evalcond[2]=((((-1.0)*r12*x5916))+cj1+(((-1.0)*x5911*x5917))+((r11*x5915)));
evalcond[3]=(((r01*x5914))+(((-1.0)*x5913*x5916))+((r02*x5909))+(((-1.0)*cj1)));
evalcond[4]=(((r12*x5909))+(((-1.0)*x5911*x5916))+(((-1.0)*x5910))+((r11*x5914)));
evalcond[5]=(((r01*x5915))+(((-1.0)*x5913*x5917))+(((-1.0)*r02*x5916))+(((-1.0)*x5910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5918=((1.0)*cj6);
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal(((((-1.0)*cj1*r20*x5918))+((cj1*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
CheckValue<IkReal> x5920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x5918)))),-1);
if(!x5920.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5919.value)+(((1.5707963267949)*(x5920.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5921=IKcos(j5);
IkReal x5922=IKsin(j5);
IkReal x5923=((1.0)*sj1);
IkReal x5924=(cj6*r10);
IkReal x5925=(cj6*r20);
IkReal x5926=(cj6*r00);
IkReal x5927=(sj6*x5921);
IkReal x5928=(sj6*x5922);
IkReal x5929=((1.0)*x5921);
IkReal x5930=((1.0)*x5922);
evalcond[0]=((((-1.0)*x5925*x5929))+((r22*x5922))+((r21*x5927)));
evalcond[1]=((((-1.0)*r22*x5929))+(((-1.0)*x5925*x5930))+((r21*x5928)));
evalcond[2]=(cj1+((r11*x5928))+(((-1.0)*x5924*x5930))+(((-1.0)*r12*x5929)));
evalcond[3]=(((r01*x5927))+(((-1.0)*cj1))+(((-1.0)*x5926*x5929))+((r02*x5922)));
evalcond[4]=(((r11*x5927))+((r12*x5922))+(((-1.0)*x5923))+(((-1.0)*x5924*x5929)));
evalcond[5]=((((-1.0)*x5926*x5930))+(((-1.0)*r02*x5929))+(((-1.0)*x5923))+((r01*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal((((cj1*r21*sj6))+(((-1.0)*cj1*cj6*r20)))),IkReal(((-1.0)*cj1*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
CheckValue<IkReal> x5932=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x5932.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5931.value)+(((1.5707963267949)*(x5932.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5933=IKcos(j5);
IkReal x5934=IKsin(j5);
IkReal x5935=((1.0)*sj1);
IkReal x5936=(cj6*r10);
IkReal x5937=(cj6*r20);
IkReal x5938=(cj6*r00);
IkReal x5939=(sj6*x5933);
IkReal x5940=(sj6*x5934);
IkReal x5941=((1.0)*x5933);
IkReal x5942=((1.0)*x5934);
evalcond[0]=((((-1.0)*x5937*x5941))+((r21*x5939))+((r22*x5934)));
evalcond[1]=((((-1.0)*r22*x5941))+(((-1.0)*x5937*x5942))+((r21*x5940)));
evalcond[2]=(cj1+(((-1.0)*x5936*x5942))+(((-1.0)*r12*x5941))+((r11*x5940)));
evalcond[3]=((((-1.0)*x5938*x5941))+((r01*x5939))+((r02*x5934))+(((-1.0)*cj1)));
evalcond[4]=((((-1.0)*x5936*x5941))+((r11*x5939))+((r12*x5934))+(((-1.0)*x5935)));
evalcond[5]=(((r01*x5940))+(((-1.0)*x5938*x5942))+(((-1.0)*x5935))+(((-1.0)*r02*x5941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-1.11028649963459)*py))+(((9.26544969106822)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.11028649963459)*px))+(((-9.26544969106822)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.11028649963459)*py))+(((9.26544969106822)*px))))+IKsqr(((((-1.11028649963459)*px))+(((-9.26544969106822)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.11028649963459)*py))+(((9.26544969106822)*px))), ((((-1.11028649963459)*px))+(((-9.26544969106822)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x5943=IKsin(j1);
IkReal x5944=IKcos(j1);
evalcond[0]=((((-1.0)*px))+(((0.1064)*x5943))+(((-0.01275)*x5944)));
evalcond[1]=((((-0.1064)*x5944))+(((-1.0)*py))+(((-0.01275)*x5943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x5945=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x5945;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x5945);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x5946=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x5946;
j5eval[1]=IKsign(x5946);
j5eval[2]=((IKabs((((cj1*r21*sj6))+(((-1.0)*cj1*cj6*r20)))))+(IKabs((cj1*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x5947=((1.0)*cj6);
IkReal x5948=((((-1.0)*r00*sj6))+(((-1.0)*r01*x5947)));
j5eval[0]=x5948;
j5eval[1]=((IKabs(((((-1.0)*r20*sj1*x5947))+((r21*sj1*sj6)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x5948);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5949=((1.0)*cj6);
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x5949)))),-1);
if(!x5950.valid){
continue;
}
CheckValue<IkReal> x5951 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj1*x5949))+((r21*sj1*sj6)))),IkReal(((-1.0)*r22*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x5951.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5950.value)))+(x5951.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5952=IKcos(j5);
IkReal x5953=IKsin(j5);
IkReal x5954=((1.0)*cj1);
IkReal x5955=(cj6*r00);
IkReal x5956=(cj6*r10);
IkReal x5957=(cj6*r20);
IkReal x5958=(sj6*x5952);
IkReal x5959=(sj6*x5953);
IkReal x5960=((1.0)*x5952);
IkReal x5961=((1.0)*x5953);
evalcond[0]=(((r21*x5958))+(((-1.0)*x5957*x5960))+((r22*x5953)));
evalcond[1]=(((r21*x5959))+(((-1.0)*x5957*x5961))+(((-1.0)*r22*x5960)));
evalcond[2]=(sj1+(((-1.0)*x5955*x5961))+((r01*x5959))+(((-1.0)*r02*x5960)));
evalcond[3]=(((r02*x5953))+(((-1.0)*x5955*x5960))+(((-1.0)*x5954))+((r01*x5958)));
evalcond[4]=((((-1.0)*sj1))+((r11*x5958))+(((-1.0)*x5956*x5960))+((r12*x5953)));
evalcond[5]=(((r11*x5959))+(((-1.0)*x5956*x5961))+(((-1.0)*r12*x5960))+(((-1.0)*x5954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x5962 = IKatan2WithCheck(IkReal((((cj1*r21*sj6))+(((-1.0)*cj1*cj6*r20)))),IkReal(((-1.0)*cj1*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5962.valid){
continue;
}
CheckValue<IkReal> x5963=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x5963.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5962.value)+(((1.5707963267949)*(x5963.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5964=IKcos(j5);
IkReal x5965=IKsin(j5);
IkReal x5966=((1.0)*cj1);
IkReal x5967=(cj6*r00);
IkReal x5968=(cj6*r10);
IkReal x5969=(cj6*r20);
IkReal x5970=(sj6*x5964);
IkReal x5971=(sj6*x5965);
IkReal x5972=((1.0)*x5964);
IkReal x5973=((1.0)*x5965);
evalcond[0]=(((r22*x5965))+((r21*x5970))+(((-1.0)*x5969*x5972)));
evalcond[1]=((((-1.0)*r22*x5972))+((r21*x5971))+(((-1.0)*x5969*x5973)));
evalcond[2]=((((-1.0)*r02*x5972))+sj1+((r01*x5971))+(((-1.0)*x5967*x5973)));
evalcond[3]=(((r02*x5965))+((r01*x5970))+(((-1.0)*x5966))+(((-1.0)*x5967*x5972)));
evalcond[4]=((((-1.0)*sj1))+((r11*x5970))+((r12*x5965))+(((-1.0)*x5968*x5972)));
evalcond[5]=((((-1.0)*r12*x5972))+(((-1.0)*x5966))+((r11*x5971))+(((-1.0)*x5968*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x5974 = IKatan2WithCheck(IkReal((r22*sj1)),IkReal((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5974.valid){
continue;
}
CheckValue<IkReal> x5975=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x5975.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x5974.value)+(((1.5707963267949)*(x5975.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x5976=IKcos(j5);
IkReal x5977=IKsin(j5);
IkReal x5978=((1.0)*cj1);
IkReal x5979=(cj6*r00);
IkReal x5980=(cj6*r10);
IkReal x5981=(cj6*r20);
IkReal x5982=(sj6*x5976);
IkReal x5983=(sj6*x5977);
IkReal x5984=((1.0)*x5976);
IkReal x5985=((1.0)*x5977);
evalcond[0]=(((r21*x5982))+((r22*x5977))+(((-1.0)*x5981*x5984)));
evalcond[1]=(((r21*x5983))+(((-1.0)*x5981*x5985))+(((-1.0)*r22*x5984)));
evalcond[2]=((((-1.0)*x5979*x5985))+sj1+(((-1.0)*r02*x5984))+((r01*x5983)));
evalcond[3]=((((-1.0)*x5979*x5984))+(((-1.0)*x5978))+((r02*x5977))+((r01*x5982)));
evalcond[4]=((((-1.0)*x5980*x5984))+(((-1.0)*sj1))+((r11*x5982))+((r12*x5977)));
evalcond[5]=((((-1.0)*x5980*x5985))+(((-1.0)*r12*x5984))+(((-1.0)*x5978))+((r11*x5983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((1.35991303789004)*px))+(((0.0235864773548509)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0235864773548509)*px))+(((-1.35991303789004)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35991303789004)*px))+(((0.0235864773548509)*py))))+IKsqr(((((0.0235864773548509)*px))+(((-1.35991303789004)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35991303789004)*px))+(((0.0235864773548509)*py))), ((((0.0235864773548509)*px))+(((-1.35991303789004)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x5986=IKsin(j1);
IkReal x5987=IKcos(j1);
evalcond[0]=((((0.01275)*x5987))+(((-1.0)*px))+(((0.73512)*x5986)));
evalcond[1]=((((0.01275)*x5986))+(((-1.0)*py))+(((-0.73512)*x5987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x5988=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x5988;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x5988);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x5989=((1.0)*cj6);
IkReal x5990=((((-1.0)*r10*sj6))+(((-1.0)*r11*x5989)));
j5eval[0]=x5990;
j5eval[1]=IKsign(x5990);
j5eval[2]=((IKabs((cj1*r22)))+(IKabs((((cj1*r21*sj6))+(((-1.0)*cj1*r20*x5989))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x5991=cj6*cj6;
IkReal x5992=(cj6*r20);
IkReal x5993=(r01*r21);
IkReal x5994=(r21*sj6);
IkReal x5995=((((-1.0)*r02*r22))+(((-1.0)*x5993))+((r01*sj6*x5992))+((x5991*x5993))+(((-1.0)*r00*r20*x5991))+((cj6*r00*x5994)));
j5eval[0]=x5995;
j5eval[1]=IKsign(x5995);
j5eval[2]=((IKabs((cj1*r22)))+(IKabs((((cj1*x5994))+(((-1.0)*cj1*x5992))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x5996=cj6*cj6;
IkReal x5997=(cj6*r20);
IkReal x5998=(r01*r21);
IkReal x5999=(r21*sj6);
CheckValue<IkReal> x6000 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal((((cj1*x5999))+(((-1.0)*cj1*x5997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((x5996*x5998))+(((-1.0)*x5998))+((r01*sj6*x5997))+(((-1.0)*r00*r20*x5996))+((cj6*r00*x5999)))),-1);
if(!x6001.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6000.value)+(((1.5707963267949)*(x6001.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6002=IKcos(j5);
IkReal x6003=IKsin(j5);
IkReal x6004=(cj6*r00);
IkReal x6005=(cj6*r10);
IkReal x6006=(cj6*r20);
IkReal x6007=(sj6*x6002);
IkReal x6008=(sj6*x6003);
IkReal x6009=((1.0)*x6002);
IkReal x6010=((1.0)*x6003);
evalcond[0]=(((r21*x6007))+((r22*x6003))+(((-1.0)*x6006*x6009)));
evalcond[1]=(((r21*x6008))+(((-1.0)*x6006*x6010))+(((-1.0)*r22*x6009)));
evalcond[2]=(cj1+((r02*x6003))+(((-1.0)*x6004*x6009))+((r01*x6007)));
evalcond[3]=(sj1+((r12*x6003))+((r11*x6007))+(((-1.0)*x6005*x6009)));
evalcond[4]=(cj1+((r11*x6008))+(((-1.0)*r12*x6009))+(((-1.0)*x6005*x6010)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*x6004*x6010))+((r01*x6008))+(((-1.0)*r02*x6009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6011=((1.0)*cj6);
CheckValue<IkReal> x6012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6011)))),-1);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal((((cj1*r21*sj6))+(((-1.0)*cj1*r20*x6011)))),IkReal(((-1.0)*cj1*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6012.value)))+(x6013.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6014=IKcos(j5);
IkReal x6015=IKsin(j5);
IkReal x6016=(cj6*r00);
IkReal x6017=(cj6*r10);
IkReal x6018=(cj6*r20);
IkReal x6019=(sj6*x6014);
IkReal x6020=(sj6*x6015);
IkReal x6021=((1.0)*x6014);
IkReal x6022=((1.0)*x6015);
evalcond[0]=(((r21*x6019))+(((-1.0)*x6018*x6021))+((r22*x6015)));
evalcond[1]=((((-1.0)*r22*x6021))+((r21*x6020))+(((-1.0)*x6018*x6022)));
evalcond[2]=(((r01*x6019))+cj1+((r02*x6015))+(((-1.0)*x6016*x6021)));
evalcond[3]=(sj1+((r11*x6019))+((r12*x6015))+(((-1.0)*x6017*x6021)));
evalcond[4]=(cj1+(((-1.0)*x6017*x6022))+((r11*x6020))+(((-1.0)*r12*x6021)));
evalcond[5]=((((-1.0)*sj1))+((r01*x6020))+(((-1.0)*r02*x6021))+(((-1.0)*x6016*x6022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6023=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x6023.valid){
continue;
}
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))),IkReal(((-1.0)*r22*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6023.value)))+(x6024.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6025=IKcos(j5);
IkReal x6026=IKsin(j5);
IkReal x6027=(cj6*r00);
IkReal x6028=(cj6*r10);
IkReal x6029=(cj6*r20);
IkReal x6030=(sj6*x6025);
IkReal x6031=(sj6*x6026);
IkReal x6032=((1.0)*x6025);
IkReal x6033=((1.0)*x6026);
evalcond[0]=((((-1.0)*x6029*x6032))+((r21*x6030))+((r22*x6026)));
evalcond[1]=((((-1.0)*x6029*x6033))+((r21*x6031))+(((-1.0)*r22*x6032)));
evalcond[2]=(((r02*x6026))+cj1+(((-1.0)*x6027*x6032))+((r01*x6030)));
evalcond[3]=(sj1+((r11*x6030))+((r12*x6026))+(((-1.0)*x6028*x6032)));
evalcond[4]=(cj1+((r11*x6031))+(((-1.0)*r12*x6032))+(((-1.0)*x6028*x6033)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*x6027*x6033))+((r01*x6031))+(((-1.0)*r02*x6032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((1.11028649963459)*py))+(((9.26544969106822)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.11028649963459)*px))+(((-9.26544969106822)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.11028649963459)*py))+(((9.26544969106822)*px))))+IKsqr(((((1.11028649963459)*px))+(((-9.26544969106822)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.11028649963459)*py))+(((9.26544969106822)*px))), ((((1.11028649963459)*px))+(((-9.26544969106822)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x6034=IKsin(j1);
IkReal x6035=IKcos(j1);
evalcond[0]=((((-1.0)*px))+(((0.01275)*x6035))+(((0.1064)*x6034)));
evalcond[1]=((((-0.1064)*x6035))+(((-1.0)*py))+(((0.01275)*x6034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x6036=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x6036;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x6036);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x6037=((1.0)*cj6);
IkReal x6038=((((-1.0)*r10*sj6))+(((-1.0)*r11*x6037)));
j5eval[0]=x6038;
j5eval[1]=IKsign(x6038);
j5eval[2]=((IKabs((cj1*r22)))+(IKabs((((cj1*r21*sj6))+(((-1.0)*cj1*r20*x6037))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x6039=cj6*cj6;
IkReal x6040=(cj6*r20);
IkReal x6041=(r01*r21);
IkReal x6042=(r21*sj6);
IkReal x6043=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6039))+(((-1.0)*x6041))+((cj6*r00*x6042))+((r01*sj6*x6040))+((x6039*x6041)));
j5eval[0]=x6043;
j5eval[1]=IKsign(x6043);
j5eval[2]=((IKabs((cj1*r22)))+(IKabs(((((-1.0)*cj1*x6040))+((cj1*x6042))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6044=cj6*cj6;
IkReal x6045=(cj6*r20);
IkReal x6046=(r01*r21);
IkReal x6047=(r21*sj6);
CheckValue<IkReal> x6048 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal(((((-1.0)*cj1*x6045))+((cj1*x6047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6048.valid){
continue;
}
CheckValue<IkReal> x6049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*x6046))+(((-1.0)*r00*r20*x6044))+((cj6*r00*x6047))+((r01*sj6*x6045))+((x6044*x6046)))),-1);
if(!x6049.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6048.value)+(((1.5707963267949)*(x6049.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6050=IKcos(j5);
IkReal x6051=IKsin(j5);
IkReal x6052=(cj6*r00);
IkReal x6053=(cj6*r10);
IkReal x6054=(cj6*r20);
IkReal x6055=(sj6*x6050);
IkReal x6056=(sj6*x6051);
IkReal x6057=((1.0)*x6050);
IkReal x6058=((1.0)*x6051);
evalcond[0]=(((r22*x6051))+(((-1.0)*x6054*x6057))+((r21*x6055)));
evalcond[1]=((((-1.0)*x6054*x6058))+(((-1.0)*r22*x6057))+((r21*x6056)));
evalcond[2]=((((-1.0)*x6052*x6057))+((r01*x6055))+cj1+((r02*x6051)));
evalcond[3]=((((-1.0)*x6053*x6057))+((r12*x6051))+sj1+((r11*x6055)));
evalcond[4]=((((-1.0)*x6052*x6058))+sj1+((r01*x6056))+(((-1.0)*r02*x6057)));
evalcond[5]=((((-1.0)*x6053*x6058))+(((-1.0)*r12*x6057))+((r11*x6056))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6059=((1.0)*cj6);
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6059)))),-1);
if(!x6060.valid){
continue;
}
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal((((cj1*r21*sj6))+(((-1.0)*cj1*r20*x6059)))),IkReal(((-1.0)*cj1*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6060.value)))+(x6061.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6062=IKcos(j5);
IkReal x6063=IKsin(j5);
IkReal x6064=(cj6*r00);
IkReal x6065=(cj6*r10);
IkReal x6066=(cj6*r20);
IkReal x6067=(sj6*x6062);
IkReal x6068=(sj6*x6063);
IkReal x6069=((1.0)*x6062);
IkReal x6070=((1.0)*x6063);
evalcond[0]=(((r22*x6063))+(((-1.0)*x6066*x6069))+((r21*x6067)));
evalcond[1]=((((-1.0)*r22*x6069))+(((-1.0)*x6066*x6070))+((r21*x6068)));
evalcond[2]=((((-1.0)*x6064*x6069))+cj1+((r01*x6067))+((r02*x6063)));
evalcond[3]=(sj1+((r11*x6067))+((r12*x6063))+(((-1.0)*x6065*x6069)));
evalcond[4]=(sj1+(((-1.0)*x6064*x6070))+((r01*x6068))+(((-1.0)*r02*x6069)));
evalcond[5]=((((-1.0)*x6065*x6070))+((r11*x6068))+(((-1.0)*r12*x6069))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6071=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x6071.valid){
continue;
}
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))),IkReal(((-1.0)*r22*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6071.value)))+(x6072.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6073=IKcos(j5);
IkReal x6074=IKsin(j5);
IkReal x6075=(cj6*r00);
IkReal x6076=(cj6*r10);
IkReal x6077=(cj6*r20);
IkReal x6078=(sj6*x6073);
IkReal x6079=(sj6*x6074);
IkReal x6080=((1.0)*x6073);
IkReal x6081=((1.0)*x6074);
evalcond[0]=(((r22*x6074))+(((-1.0)*x6077*x6080))+((r21*x6078)));
evalcond[1]=((((-1.0)*r22*x6080))+(((-1.0)*x6077*x6081))+((r21*x6079)));
evalcond[2]=(((r01*x6078))+cj1+(((-1.0)*x6075*x6080))+((r02*x6074)));
evalcond[3]=(((r11*x6078))+sj1+(((-1.0)*x6076*x6080))+((r12*x6074)));
evalcond[4]=(((r01*x6079))+sj1+(((-1.0)*x6075*x6081))+(((-1.0)*r02*x6080)));
evalcond[5]=(((r11*x6079))+(((-1.0)*r12*x6080))+(((-1.0)*x6076*x6081))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6082=(cj6*r01);
IkReal x6083=(cj2*sj3);
IkReal x6084=((0.01275)*sj2);
IkReal x6085=(r00*sj6);
IkReal x6086=((0.0003501)*sj3);
IkReal x6087=(cj2*cj3);
IkReal x6088=((0.31436)*x6085);
CheckValue<IkReal> x6089=IKPowWithIntegerCheck(IKsign(((((0.31436)*cj2))+(((-1.0)*sj3*x6084))+(((0.42076)*x6087)))),-1);
if(!x6089.valid){
continue;
}
CheckValue<IkReal> x6090 = IKatan2WithCheck(IkReal(((((0.31436)*x6082*x6083))+((px*x6087))+(((-0.0003501)*x6085*x6087))+(((-1.0)*x6082*x6084))+((x6083*x6088))+(((-1.0)*x6084*x6085))+(((-0.0003501)*x6082*x6087)))),IkReal(((((-1.0)*x6085*x6086))+(((-1.0)*cj3*x6088))+(((-0.31436)*cj3*x6082))+(((-1.0)*x6082*x6086))+(((-0.42076)*x6082))+(((-0.42076)*x6085))+((px*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6090.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6089.value)))+(x6090.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x6091=IKcos(j1);
IkReal x6092=IKsin(j1);
IkReal x6093=((0.31436)*sj3);
IkReal x6094=(cj6*r11);
IkReal x6095=((0.31436)*cj3);
IkReal x6096=(r00*sj6);
IkReal x6097=(r10*sj6);
IkReal x6098=(cj6*r01);
IkReal x6099=((0.01275)*sj2);
IkReal x6100=(cj2*x6091);
IkReal x6101=(cj2*x6092);
evalcond[0]=(x6094+x6097+((sj3*x6091))+((cj3*x6101)));
evalcond[1]=(x6098+x6096+(((-1.0)*sj3*x6092))+((cj3*x6100)));
evalcond[2]=(((x6092*x6095))+(((0.0003501)*x6098))+(((0.0003501)*x6096))+(((-1.0)*x6091*x6099))+(((0.42076)*x6092))+(((-1.0)*px))+((x6093*x6100)));
evalcond[3]=((((0.0003501)*x6094))+(((0.0003501)*x6097))+(((-1.0)*x6091*x6095))+(((-1.0)*x6092*x6099))+(((-0.42076)*x6091))+(((-1.0)*py))+((x6093*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6102=((1.0)*cj1*sj2);
IkReal x6103=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x6103;
j5eval[1]=((IKabs(((((-1.0)*r22*x6102))+((cj2*r02)))))+(IKabs((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*sj6))+(((-1.0)*cj6*r20*x6102))))));
j5eval[2]=IKsign(x6103);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6104=((1.0)*cj6);
IkReal x6105=((1.0)*sj6);
IkReal x6106=(sj1*sj2);
IkReal x6107=((((-1.0)*r00*x6105))+(((-1.0)*r01*x6104)));
j5eval[0]=x6107;
j5eval[1]=IKsign(x6107);
j5eval[2]=((IKabs(((((-1.0)*r22*x6106))+((cj2*r12)))))+(IKabs(((((-1.0)*r20*x6104*x6106))+((cj2*cj6*r10))+(((-1.0)*cj2*r11*x6105))+((r21*sj6*x6106))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6108=cj6*cj6;
IkReal x6109=r21*r21;
IkReal x6110=(sj2*sj3);
IkReal x6111=(r21*sj6);
IkReal x6112=(cj6*r20);
IkReal x6113=(((x6108*(r20*r20)))+(r22*r22)+x6109+(((-1.0)*x6108*x6109))+(((-2.0)*x6111*x6112)));
j5eval[0]=x6113;
j5eval[1]=IKsign(x6113);
j5eval[2]=((IKabs(((((-1.0)*x6110*x6111))+((x6110*x6112))+((cj2*r22)))))+(IKabs(((((-1.0)*cj2*x6112))+((r22*x6110))+((cj2*x6111))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6114=((-1.0)*r00);
IkReal x6116 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6116)==0){
continue;
}
IkReal x6115=pow(x6116,-0.5);
CheckValue<IkReal> x6117 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6114),IKFAST_ATAN2_MAGTHRESH);
if(!x6117.valid){
continue;
}
IkReal gconst48=((-1.0)*(x6117.value));
IkReal gconst49=(r01*x6115);
IkReal gconst50=(x6114*x6115);
CheckValue<IkReal> x6118 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6118.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6119=(cj1*sj2);
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal((((cj2*gconst50*r00))+((gconst49*r21*x6119))+(((-1.0)*gconst50*r20*x6119))+(((-1.0)*cj2*gconst49*r01)))),IkReal(((((-1.0)*r22*x6119))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(IKsign((((gconst50*r11))+((gconst49*r10)))),-1);
if(!x6121.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6120.value)+(((1.5707963267949)*(x6121.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6122=IKcos(j5);
IkReal x6123=IKsin(j5);
IkReal x6124=(gconst49*r01);
IkReal x6125=((1.0)*gconst50);
IkReal x6126=((1.0)*sj2);
IkReal x6127=(gconst49*r21);
IkReal x6128=(gconst49*r11);
IkReal x6129=((1.0)*cj2*sj3);
IkReal x6130=((1.0)*x6122);
evalcond[0]=(((x6122*x6127))+(((-1.0)*r20*x6122*x6125))+(((-1.0)*cj2))+((r22*x6123)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6130))+((x6123*x6127))+(((-1.0)*r20*x6123*x6125)));
evalcond[2]=(((x6122*x6124))+((r02*x6123))+(((-1.0)*cj1*x6126))+(((-1.0)*r00*x6122*x6125)));
evalcond[3]=((((-1.0)*r10*x6122*x6125))+((r12*x6123))+(((-1.0)*sj1*x6126))+((x6122*x6128)));
evalcond[4]=((((-1.0)*sj1*x6129))+(((-1.0)*r10*x6123*x6125))+((x6123*x6128))+(((-1.0)*r12*x6130))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r00*x6123*x6125))+((x6123*x6124))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x6130))+(((-1.0)*cj1*x6129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6131=((-1.0)*r01);
IkReal x6133 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6133)==0){
continue;
}
IkReal x6132=pow(x6133,-0.5);
CheckValue<IkReal> x6134 = IKatan2WithCheck(IkReal(x6131),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6134.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x6134.value))));
IkReal gconst52=(x6131*x6132);
IkReal gconst53=((1.0)*r00*x6132);
CheckValue<IkReal> x6135 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6135.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6135.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6136=(cj1*sj2);
CheckValue<IkReal> x6137 = IKatan2WithCheck(IkReal((((cj2*gconst53*r00))+(((-1.0)*cj2*gconst52*r01))+(((-1.0)*gconst53*r20*x6136))+((gconst52*r21*x6136)))),IkReal(((((-1.0)*r22*x6136))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6137.valid){
continue;
}
CheckValue<IkReal> x6138=IKPowWithIntegerCheck(IKsign((((gconst53*r11))+((gconst52*r10)))),-1);
if(!x6138.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6137.value)+(((1.5707963267949)*(x6138.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6139=IKcos(j5);
IkReal x6140=IKsin(j5);
IkReal x6141=((1.0)*sj1);
IkReal x6142=(cj2*sj3);
IkReal x6143=((1.0)*cj1);
IkReal x6144=(gconst52*x6139);
IkReal x6145=(gconst52*x6140);
IkReal x6146=((1.0)*x6139);
IkReal x6147=((1.0)*gconst53*x6140);
IkReal x6148=(gconst53*x6146);
evalcond[0]=((((-1.0)*r20*x6148))+((r22*x6140))+((r21*x6144))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r20*x6147))+((r21*x6145))+(((-1.0)*r22*x6146)));
evalcond[2]=((((-1.0)*r00*x6148))+((r01*x6144))+(((-1.0)*sj2*x6143))+((r02*x6140)));
evalcond[3]=((((-1.0)*r10*x6148))+((r11*x6144))+((r12*x6140))+(((-1.0)*sj2*x6141)));
evalcond[4]=((((-1.0)*r10*x6147))+((r11*x6145))+((cj1*cj3))+(((-1.0)*x6141*x6142))+(((-1.0)*r12*x6146)));
evalcond[5]=((((-1.0)*r00*x6147))+(((-1.0)*r02*x6146))+(((-1.0)*x6142*x6143))+((r01*x6145))+(((-1.0)*cj3*x6141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6150 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6150)==0){
continue;
}
IkReal x6149=pow(x6150,-0.5);
CheckValue<IkReal> x6151 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6151.valid){
continue;
}
IkReal gconst54=((-1.0)*(x6151.value));
IkReal gconst55=((-1.0)*r11*x6149);
IkReal gconst56=(r10*x6149);
CheckValue<IkReal> x6152 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6152.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6152.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6153=((1.0)*gconst55);
IkReal x6154=((1.0)*gconst56);
IkReal x6155=(sj1*sj2);
CheckValue<IkReal> x6156 = IKatan2WithCheck(IkReal((((gconst55*r21*x6155))+((cj2*gconst56*r10))+(((-1.0)*r20*x6154*x6155))+(((-1.0)*cj2*r11*x6153)))),IkReal(((((-1.0)*r22*x6155))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6156.valid){
continue;
}
CheckValue<IkReal> x6157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6154))+(((-1.0)*r00*x6153)))),-1);
if(!x6157.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6156.value)+(((1.5707963267949)*(x6157.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6158=IKcos(j5);
IkReal x6159=IKsin(j5);
IkReal x6160=((1.0)*gconst56);
IkReal x6161=((1.0)*sj1);
IkReal x6162=(cj2*sj3);
IkReal x6163=((1.0)*cj1);
IkReal x6164=(gconst55*x6158);
IkReal x6165=((1.0)*x6158);
IkReal x6166=(gconst55*x6159);
evalcond[0]=(((r22*x6159))+((r21*x6164))+(((-1.0)*r20*x6158*x6160))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x6166))+(((-1.0)*r22*x6165))+(((-1.0)*r20*x6159*x6160)));
evalcond[2]=((((-1.0)*sj2*x6163))+((r02*x6159))+((r01*x6164))+(((-1.0)*r00*x6158*x6160)));
evalcond[3]=(((r12*x6159))+(((-1.0)*sj2*x6161))+(((-1.0)*r10*x6158*x6160))+((r11*x6164)));
evalcond[4]=((((-1.0)*r10*x6159*x6160))+(((-1.0)*r12*x6165))+((r11*x6166))+((cj1*cj3))+(((-1.0)*x6161*x6162)));
evalcond[5]=((((-1.0)*r00*x6159*x6160))+((r01*x6166))+(((-1.0)*r02*x6165))+(((-1.0)*cj3*x6161))+(((-1.0)*x6162*x6163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6168 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6168)==0){
continue;
}
IkReal x6167=pow(x6168,-0.5);
CheckValue<IkReal> x6169 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6169.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x6169.value))));
IkReal gconst58=((1.0)*r11*x6167);
IkReal gconst59=((-1.0)*r10*x6167);
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6170.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x6173 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6173.valid){
continue;
}
IkReal x6171=((1.0)*(x6173.value));
IkReal x6172=x6167;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj6=gconst58;
cj6=gconst59;
j6=((3.14159265)+(((-1.0)*x6171)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x6171)));
IkReal gconst58=((1.0)*r11*x6172);
IkReal gconst59=((-1.0)*r10*x6172);
IkReal x6174=r12*r12;
IkReal x6175=(cj2*r02);
IkReal x6176=(cj1*r22*sj2);
CheckValue<IkReal> x6180=IKPowWithIntegerCheck(((-1.0)+x6174),-1);
if(!x6180.valid){
continue;
}
IkReal x6177=x6180.value;
if((((1.0)+(((-1.0)*x6174)))) < -0.00001)
continue;
IkReal x6178=IKsqrt(((1.0)+(((-1.0)*x6174))));
IkReal x6179=(r12*x6177*x6178);
j5eval[0]=0;
j5eval[1]=0;
j5eval[2]=((IKabs((x6175+(((-1.0)*x6176)))))+(IKabs(((((-1.0)*x6175*x6179))+((x6176*x6179))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6181=((1.0)*gconst58);
IkReal x6182=((1.0)*sj1*sj2);
CheckValue<IkReal> x6183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6181))+(((-1.0)*gconst59*r01)))),-1);
if(!x6183.valid){
continue;
}
CheckValue<IkReal> x6184 = IKatan2WithCheck(IkReal((((cj2*gconst59*r10))+(((-1.0)*gconst59*r20*x6182))+(((-1.0)*cj2*r11*x6181))+((gconst58*r21*sj1*sj2)))),IkReal(((((-1.0)*r22*x6182))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6184.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6183.value)))+(x6184.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6185=IKcos(j5);
IkReal x6186=IKsin(j5);
IkReal x6187=((1.0)*cj2);
IkReal x6188=((1.0)*gconst59);
IkReal x6189=((1.0)*sj2);
IkReal x6190=(gconst58*x6186);
IkReal x6191=(gconst58*x6185);
IkReal x6192=((1.0)*x6185);
evalcond[0]=(((r22*x6186))+((r21*x6191))+(((-1.0)*r20*x6185*x6188))+(((-1.0)*x6187)));
evalcond[1]=(((sj2*sj3))+((r21*x6190))+(((-1.0)*r22*x6192))+(((-1.0)*r20*x6186*x6188)));
evalcond[2]=((((-1.0)*cj1*x6189))+((r02*x6186))+((r01*x6191))+(((-1.0)*r00*x6185*x6188)));
evalcond[3]=(((r11*x6191))+(((-1.0)*sj1*x6189))+(((-1.0)*r10*x6185*x6188))+((r12*x6186)));
evalcond[4]=((((-1.0)*sj1*sj3*x6187))+((r11*x6190))+(((-1.0)*r12*x6192))+(((-1.0)*r10*x6186*x6188))+((cj1*cj3)));
evalcond[5]=((((-1.0)*cj1*sj3*x6187))+(((-1.0)*r00*x6186*x6188))+(((-1.0)*cj3*sj1))+((r01*x6190))+(((-1.0)*r02*x6192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6193=((1.0)*cj1*sj2);
CheckValue<IkReal> x6194 = IKatan2WithCheck(IkReal((((cj1*gconst58*r21*sj2))+((cj2*gconst59*r00))+(((-1.0)*cj2*gconst58*r01))+(((-1.0)*gconst59*r20*x6193)))),IkReal((((cj2*r02))+(((-1.0)*r22*x6193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6194.valid){
continue;
}
CheckValue<IkReal> x6195=IKPowWithIntegerCheck(IKsign((((gconst58*r10))+((gconst59*r11)))),-1);
if(!x6195.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6194.value)+(((1.5707963267949)*(x6195.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6196=IKcos(j5);
IkReal x6197=IKsin(j5);
IkReal x6198=((1.0)*cj2);
IkReal x6199=((1.0)*gconst59);
IkReal x6200=((1.0)*sj2);
IkReal x6201=(gconst58*x6197);
IkReal x6202=(gconst58*x6196);
IkReal x6203=((1.0)*x6196);
evalcond[0]=((((-1.0)*x6198))+(((-1.0)*r20*x6196*x6199))+((r21*x6202))+((r22*x6197)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r20*x6197*x6199))+((r21*x6201))+(((-1.0)*r22*x6203)));
evalcond[2]=((((-1.0)*cj1*x6200))+((r01*x6202))+((r02*x6197))+(((-1.0)*r00*x6196*x6199)));
evalcond[3]=((((-1.0)*sj1*x6200))+((r12*x6197))+((r11*x6202))+(((-1.0)*r10*x6196*x6199)));
evalcond[4]=((((-1.0)*r10*x6197*x6199))+(((-1.0)*sj1*sj3*x6198))+((cj1*cj3))+(((-1.0)*r12*x6203))+((r11*x6201)));
evalcond[5]=((((-1.0)*cj1*sj3*x6198))+((r01*x6201))+(((-1.0)*r02*x6203))+(((-1.0)*r00*x6197*x6199))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x6204=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6204);
rxp0_2=(py*r00);
rxp1_0=(r21*x6204);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x6205=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6205);
rxp0_2=(py*r00);
rxp1_0=(r21*x6205);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=((((-1.0)*cj6*r20))+((r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x6206=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6206);
rxp0_2=(py*r00);
rxp1_0=(r21*x6206);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=(((r01*sj6))+(((-1.0)*cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6207=IKPowWithIntegerCheck(r12,-1);
if(!x6207.valid){
continue;
}
CheckValue<IkReal> x6208=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x6208.valid){
continue;
}
if( IKabs((sj1*sj2*(x6207.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x6208.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x6207.value)))+IKsqr((cj1*sj2*(x6208.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x6207.value)), (cj1*sj2*(x6208.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6209=IKsin(j5);
IkReal x6210=IKcos(j5);
IkReal x6211=((1.0)*sj2);
IkReal x6212=(cj6*r20);
IkReal x6213=((1.0)*cj2*sj3);
IkReal x6214=(sj6*x6209);
IkReal x6215=(sj6*x6210);
IkReal x6216=((1.0)*cj6*r00);
IkReal x6217=((1.0)*x6210);
evalcond[0]=((((-1.0)*sj1*x6211))+((r12*x6209)));
evalcond[1]=((((-1.0)*r12*x6217))+(((-1.0)*sj1*x6213))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+((r21*x6214))+(((-1.0)*x6209*x6212)));
evalcond[3]=(((r21*x6215))+(((-1.0)*x6212*x6217))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*x6210*x6216))+((r01*x6215))+(((-1.0)*cj1*x6211)));
evalcond[5]=((((-1.0)*x6209*x6216))+((r01*x6214))+(((-1.0)*cj1*x6213))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6218=IKPowWithIntegerCheck(r12,-1);
if(!x6218.valid){
continue;
}
CheckValue<IkReal> x6219=IKPowWithIntegerCheck(((((-1.0)*cj6*r20))+((r21*sj6))),-1);
if(!x6219.valid){
continue;
}
if( IKabs((sj1*sj2*(x6218.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x6219.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x6218.value)))+IKsqr((cj2*(x6219.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x6218.value)), (cj2*(x6219.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6220=IKsin(j5);
IkReal x6221=IKcos(j5);
IkReal x6222=((1.0)*sj2);
IkReal x6223=(cj6*r20);
IkReal x6224=((1.0)*cj2*sj3);
IkReal x6225=(sj6*x6220);
IkReal x6226=(sj6*x6221);
IkReal x6227=((1.0)*cj6*r00);
IkReal x6228=((1.0)*x6221);
evalcond[0]=((((-1.0)*sj1*x6222))+((r12*x6220)));
evalcond[1]=((((-1.0)*sj1*x6224))+(((-1.0)*r12*x6228))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+((r21*x6225))+(((-1.0)*x6220*x6223)));
evalcond[3]=(((r21*x6226))+(((-1.0)*x6223*x6228))+(((-1.0)*cj2)));
evalcond[4]=(((r01*x6226))+(((-1.0)*cj1*x6222))+(((-1.0)*x6221*x6227)));
evalcond[5]=(((r01*x6225))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x6224))+(((-1.0)*x6220*x6227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6229 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6229.valid){
continue;
}
CheckValue<IkReal> x6230=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x6230.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6229.value)+(((1.5707963267949)*(x6230.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6231=IKsin(j5);
IkReal x6232=IKcos(j5);
IkReal x6233=((1.0)*sj2);
IkReal x6234=(cj6*r20);
IkReal x6235=((1.0)*cj2*sj3);
IkReal x6236=(sj6*x6231);
IkReal x6237=(sj6*x6232);
IkReal x6238=((1.0)*cj6*r00);
IkReal x6239=((1.0)*x6232);
evalcond[0]=((((-1.0)*sj1*x6233))+((r12*x6231)));
evalcond[1]=((((-1.0)*r12*x6239))+(((-1.0)*sj1*x6235))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*x6231*x6234))+((r21*x6236)));
evalcond[3]=(((r21*x6237))+(((-1.0)*x6234*x6239))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*x6232*x6238))+((r01*x6237))+(((-1.0)*cj1*x6233)));
evalcond[5]=((((-1.0)*x6231*x6238))+(((-1.0)*cj3*sj1))+((r01*x6236))+(((-1.0)*cj1*x6235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6240=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x6240;
j5eval[1]=IKsign(x6240);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6241=((1.0)*cj6);
IkReal x6242=((((-1.0)*r01*x6241))+(((-1.0)*r00*sj6)));
j5eval[0]=x6242;
j5eval[1]=IKsign(x6242);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x6241)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6243=r21*r21;
IkReal x6244=cj6*cj6;
IkReal x6245=(cj6*r20);
IkReal x6246=(r21*sj6);
IkReal x6247=((((-1.0)*x6243))+((x6243*x6244))+(((2.0)*x6245*x6246))+(((-1.0)*(r22*r22)))+(((-1.0)*x6244*(r20*r20))));
j5eval[0]=x6247;
j5eval[1]=IKsign(x6247);
j5eval[2]=((IKabs((((sj3*x6246))+(((-1.0)*sj3*x6245)))))+(IKabs((r22*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6248=r21*r21;
IkReal x6249=cj6*cj6;
IkReal x6250=(cj6*r20);
IkReal x6251=(r21*sj6);
CheckValue<IkReal> x6252=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6248))+(((2.0)*x6250*x6251))+((x6248*x6249))+(((-1.0)*(r22*r22)))+(((-1.0)*x6249*(r20*r20))))),-1);
if(!x6252.valid){
continue;
}
CheckValue<IkReal> x6253 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x6250))+((sj3*x6251)))),IkReal(((-1.0)*r22*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x6253.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6252.value)))+(x6253.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6254=IKcos(j5);
IkReal x6255=IKsin(j5);
IkReal x6256=(cj6*r10);
IkReal x6257=(cj6*r00);
IkReal x6258=(cj6*r20);
IkReal x6259=((1.0)*x6254);
IkReal x6260=(sj6*x6254);
IkReal x6261=(sj6*x6255);
IkReal x6262=((1.0)*x6255);
evalcond[0]=(((r22*x6255))+((r21*x6260))+(((-1.0)*x6258*x6259)));
evalcond[1]=(((r01*x6260))+((r02*x6255))+(((-1.0)*x6257*x6259)));
evalcond[2]=((((-1.0)*r12*x6259))+(((-1.0)*x6256*x6262))+((r11*x6261)));
evalcond[3]=((-1.0)+(((-1.0)*x6256*x6259))+((r12*x6255))+((r11*x6260)));
evalcond[4]=(sj3+((r21*x6261))+(((-1.0)*x6258*x6262))+(((-1.0)*r22*x6259)));
evalcond[5]=(((r01*x6261))+(((-1.0)*r02*x6259))+(((-1.0)*x6257*x6262))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6263=((1.0)*cj6);
CheckValue<IkReal> x6264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x6263)))),-1);
if(!x6264.valid){
continue;
}
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x6263)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6264.value)))+(x6265.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6266=IKcos(j5);
IkReal x6267=IKsin(j5);
IkReal x6268=(cj6*r10);
IkReal x6269=(cj6*r00);
IkReal x6270=(cj6*r20);
IkReal x6271=((1.0)*x6266);
IkReal x6272=(sj6*x6266);
IkReal x6273=(sj6*x6267);
IkReal x6274=((1.0)*x6267);
evalcond[0]=((((-1.0)*x6270*x6271))+((r22*x6267))+((r21*x6272)));
evalcond[1]=(((r01*x6272))+(((-1.0)*x6269*x6271))+((r02*x6267)));
evalcond[2]=((((-1.0)*x6268*x6274))+(((-1.0)*r12*x6271))+((r11*x6273)));
evalcond[3]=((-1.0)+(((-1.0)*x6268*x6271))+((r12*x6267))+((r11*x6272)));
evalcond[4]=(sj3+(((-1.0)*x6270*x6274))+((r21*x6273))+(((-1.0)*r22*x6271)));
evalcond[5]=(((r01*x6273))+(((-1.0)*r02*x6271))+(((-1.0)*x6269*x6274))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6275=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x6275.valid){
continue;
}
CheckValue<IkReal> x6276 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6276.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6275.value)))+(x6276.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6277=IKcos(j5);
IkReal x6278=IKsin(j5);
IkReal x6279=(cj6*r10);
IkReal x6280=(cj6*r00);
IkReal x6281=(cj6*r20);
IkReal x6282=((1.0)*x6277);
IkReal x6283=(sj6*x6277);
IkReal x6284=(sj6*x6278);
IkReal x6285=((1.0)*x6278);
evalcond[0]=(((r22*x6278))+((r21*x6283))+(((-1.0)*x6281*x6282)));
evalcond[1]=(((r02*x6278))+(((-1.0)*x6280*x6282))+((r01*x6283)));
evalcond[2]=((((-1.0)*x6279*x6285))+((r11*x6284))+(((-1.0)*r12*x6282)));
evalcond[3]=((-1.0)+((r12*x6278))+(((-1.0)*x6279*x6282))+((r11*x6283)));
evalcond[4]=(sj3+(((-1.0)*r22*x6282))+((r21*x6284))+(((-1.0)*x6281*x6285)));
evalcond[5]=((((-1.0)*r02*x6282))+(((-1.0)*x6280*x6285))+(((-1.0)*cj3))+((r01*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6286=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x6286;
j5eval[1]=IKsign(x6286);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6287=((1.0)*cj6);
IkReal x6288=((((-1.0)*r21*x6287))+(((-1.0)*r20*sj6)));
j5eval[0]=x6288;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x6287))))));
j5eval[2]=IKsign(x6288);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6289=r21*r21;
IkReal x6290=cj6*cj6;
IkReal x6291=(cj6*r20);
IkReal x6292=(r21*sj6);
IkReal x6293=((((2.0)*x6291*x6292))+(((-1.0)*x6290*(r20*r20)))+(((-1.0)*(r22*r22)))+((x6289*x6290))+(((-1.0)*x6289)));
j5eval[0]=x6293;
j5eval[1]=IKsign(x6293);
j5eval[2]=((IKabs((((sj3*x6292))+(((-1.0)*sj3*x6291)))))+(IKabs((r22*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6294=r21*r21;
IkReal x6295=cj6*cj6;
IkReal x6296=(cj6*r20);
IkReal x6297=(r21*sj6);
CheckValue<IkReal> x6298 = IKatan2WithCheck(IkReal((((sj3*x6297))+(((-1.0)*sj3*x6296)))),IkReal(((-1.0)*r22*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x6298.valid){
continue;
}
CheckValue<IkReal> x6299=IKPowWithIntegerCheck(IKsign(((((2.0)*x6296*x6297))+(((-1.0)*x6294))+(((-1.0)*x6295*(r20*r20)))+((x6294*x6295))+(((-1.0)*(r22*r22))))),-1);
if(!x6299.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6298.value)+(((1.5707963267949)*(x6299.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6300=IKcos(j5);
IkReal x6301=IKsin(j5);
IkReal x6302=((1.0)*cj6);
IkReal x6303=(sj6*x6300);
IkReal x6304=(sj6*x6301);
IkReal x6305=((1.0)*x6300);
evalcond[0]=((((-1.0)*r20*x6300*x6302))+((r22*x6301))+((r21*x6303)));
evalcond[1]=(((r01*x6303))+((r02*x6301))+(((-1.0)*r00*x6300*x6302)));
evalcond[2]=((((-1.0)*r10*x6301*x6302))+(((-1.0)*r12*x6305))+((r11*x6304)));
evalcond[3]=((1.0)+(((-1.0)*r10*x6300*x6302))+((r11*x6303))+((r12*x6301)));
evalcond[4]=(sj3+((r21*x6304))+(((-1.0)*r20*x6301*x6302))+(((-1.0)*r22*x6305)));
evalcond[5]=((((-1.0)*r02*x6305))+((r01*x6304))+cj3+(((-1.0)*r00*x6301*x6302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6306=((1.0)*cj6);
CheckValue<IkReal> x6307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6306))+(((-1.0)*r20*sj6)))),-1);
if(!x6307.valid){
continue;
}
CheckValue<IkReal> x6308 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x6306)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6308.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6307.value)))+(x6308.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6309=IKcos(j5);
IkReal x6310=IKsin(j5);
IkReal x6311=((1.0)*cj6);
IkReal x6312=(sj6*x6309);
IkReal x6313=(sj6*x6310);
IkReal x6314=((1.0)*x6309);
evalcond[0]=(((r22*x6310))+((r21*x6312))+(((-1.0)*r20*x6309*x6311)));
evalcond[1]=(((r01*x6312))+((r02*x6310))+(((-1.0)*r00*x6309*x6311)));
evalcond[2]=((((-1.0)*r12*x6314))+(((-1.0)*r10*x6310*x6311))+((r11*x6313)));
evalcond[3]=((1.0)+(((-1.0)*r10*x6309*x6311))+((r11*x6312))+((r12*x6310)));
evalcond[4]=((((-1.0)*r22*x6314))+(((-1.0)*r20*x6310*x6311))+sj3+((r21*x6313)));
evalcond[5]=(cj3+(((-1.0)*r02*x6314))+((r01*x6313))+(((-1.0)*r00*x6310*x6311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6315=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x6315.valid){
continue;
}
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6315.value)))+(x6316.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6317=IKcos(j5);
IkReal x6318=IKsin(j5);
IkReal x6319=((1.0)*cj6);
IkReal x6320=(sj6*x6317);
IkReal x6321=(sj6*x6318);
IkReal x6322=((1.0)*x6317);
evalcond[0]=(((r22*x6318))+(((-1.0)*r20*x6317*x6319))+((r21*x6320)));
evalcond[1]=(((r02*x6318))+(((-1.0)*r00*x6317*x6319))+((r01*x6320)));
evalcond[2]=(((r11*x6321))+(((-1.0)*r10*x6318*x6319))+(((-1.0)*r12*x6322)));
evalcond[3]=((1.0)+((r11*x6320))+(((-1.0)*r10*x6317*x6319))+((r12*x6318)));
evalcond[4]=(sj3+(((-1.0)*r22*x6322))+(((-1.0)*r20*x6318*x6319))+((r21*x6321)));
evalcond[5]=(cj3+((r01*x6321))+(((-1.0)*r00*x6318*x6319))+(((-1.0)*r02*x6322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6323=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x6323;
j5eval[1]=IKsign(x6323);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6324=((1.0)*cj6);
IkReal x6325=((((-1.0)*r21*x6324))+(((-1.0)*r20*sj6)));
j5eval[0]=x6325;
j5eval[1]=((IKabs(((((-1.0)*r00*x6324))+((r01*sj6)))))+(IKabs(r02)));
j5eval[2]=IKsign(x6325);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6326=cj6*cj6;
IkReal x6327=r11*r11;
IkReal x6328=(r11*sj6);
IkReal x6329=(cj6*r10);
IkReal x6330=((((-1.0)*x6327))+(((-1.0)*x6326*(r10*r10)))+(((2.0)*x6328*x6329))+((x6326*x6327))+(((-1.0)*(r12*r12))));
j5eval[0]=x6330;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6329))+x6328))));
j5eval[2]=IKsign(x6330);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6331=cj6*cj6;
IkReal x6332=r11*r11;
IkReal x6333=(r11*sj6);
IkReal x6334=(cj6*r10);
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal(r12),IkReal((x6333+(((-1.0)*x6334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
CheckValue<IkReal> x6336=IKPowWithIntegerCheck(IKsign((((x6331*x6332))+(((2.0)*x6333*x6334))+(((-1.0)*x6331*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6332)))),-1);
if(!x6336.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6335.value)+(((1.5707963267949)*(x6336.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6337=IKcos(j5);
IkReal x6338=IKsin(j5);
IkReal x6339=(cj6*r10);
IkReal x6340=(cj6*r00);
IkReal x6341=(cj6*r20);
IkReal x6342=((1.0)*x6337);
IkReal x6343=(sj6*x6337);
IkReal x6344=((1.0)*x6338);
IkReal x6345=(sj6*x6338);
evalcond[0]=((((-1.0)*x6341*x6342))+((r22*x6338))+((r21*x6343)));
evalcond[1]=((((-1.0)*x6340*x6342))+((r02*x6338))+((r01*x6343)));
evalcond[2]=((((-1.0)*x6339*x6344))+((r11*x6345))+(((-1.0)*r12*x6342)));
evalcond[3]=((1.0)+((r12*x6338))+(((-1.0)*x6339*x6342))+((r11*x6343)));
evalcond[4]=((((-1.0)*x6341*x6344))+(((-1.0)*sj3))+(((-1.0)*r22*x6342))+((r21*x6345)));
evalcond[5]=((((-1.0)*x6340*x6344))+((r01*x6345))+(((-1.0)*r02*x6342))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6346=((1.0)*cj6);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x6346)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6346))+(((-1.0)*r20*sj6)))),-1);
if(!x6348.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6347.value)+(((1.5707963267949)*(x6348.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6349=IKcos(j5);
IkReal x6350=IKsin(j5);
IkReal x6351=(cj6*r10);
IkReal x6352=(cj6*r00);
IkReal x6353=(cj6*r20);
IkReal x6354=((1.0)*x6349);
IkReal x6355=(sj6*x6349);
IkReal x6356=((1.0)*x6350);
IkReal x6357=(sj6*x6350);
evalcond[0]=(((r21*x6355))+(((-1.0)*x6353*x6354))+((r22*x6350)));
evalcond[1]=(((r01*x6355))+((r02*x6350))+(((-1.0)*x6352*x6354)));
evalcond[2]=((((-1.0)*x6351*x6356))+((r11*x6357))+(((-1.0)*r12*x6354)));
evalcond[3]=((1.0)+(((-1.0)*x6351*x6354))+((r11*x6355))+((r12*x6350)));
evalcond[4]=((((-1.0)*sj3))+((r21*x6357))+(((-1.0)*x6353*x6356))+(((-1.0)*r22*x6354)));
evalcond[5]=((((-1.0)*r02*x6354))+((r01*x6357))+(((-1.0)*cj3))+(((-1.0)*x6352*x6356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x6358.valid){
continue;
}
CheckValue<IkReal> x6359 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6359.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6358.value)))+(x6359.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6360=IKcos(j5);
IkReal x6361=IKsin(j5);
IkReal x6362=(cj6*r10);
IkReal x6363=(cj6*r00);
IkReal x6364=(cj6*r20);
IkReal x6365=((1.0)*x6360);
IkReal x6366=(sj6*x6360);
IkReal x6367=((1.0)*x6361);
IkReal x6368=(sj6*x6361);
evalcond[0]=((((-1.0)*x6364*x6365))+((r22*x6361))+((r21*x6366)));
evalcond[1]=(((r01*x6366))+(((-1.0)*x6363*x6365))+((r02*x6361)));
evalcond[2]=((((-1.0)*x6362*x6367))+((r11*x6368))+(((-1.0)*r12*x6365)));
evalcond[3]=((1.0)+(((-1.0)*x6362*x6365))+((r12*x6361))+((r11*x6366)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*r22*x6365))+(((-1.0)*x6364*x6367))+((r21*x6368)));
evalcond[5]=((((-1.0)*r02*x6365))+((r01*x6368))+(((-1.0)*x6363*x6367))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6369=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x6369;
j5eval[1]=IKsign(x6369);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6370=((1.0)*cj6);
IkReal x6371=((((-1.0)*r01*x6370))+(((-1.0)*r00*sj6)));
j5eval[0]=x6371;
j5eval[1]=IKsign(x6371);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x6370))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6372=cj6*cj6;
IkReal x6373=(cj6*r20);
IkReal x6374=(r01*r21);
IkReal x6375=(r21*sj6);
IkReal x6376=((((-1.0)*r02*r22))+((x6372*x6374))+((r01*sj6*x6373))+(((-1.0)*x6374))+(((-1.0)*r00*r20*x6372))+((cj6*r00*x6375)));
j5eval[0]=x6376;
j5eval[1]=IKsign(x6376);
j5eval[2]=((IKabs((((cj3*x6375))+(((-1.0)*cj3*x6373)))))+(IKabs((cj3*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6377=cj6*cj6;
IkReal x6378=(cj6*r20);
IkReal x6379=(r01*r21);
IkReal x6380=(r21*sj6);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x6378))+((cj3*x6380)))),IkReal(((-1.0)*cj3*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(IKsign((((x6377*x6379))+(((-1.0)*r02*r22))+((cj6*r00*x6380))+((r01*sj6*x6378))+(((-1.0)*x6379))+(((-1.0)*r00*r20*x6377)))),-1);
if(!x6382.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6381.value)+(((1.5707963267949)*(x6382.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6383=IKcos(j5);
IkReal x6384=IKsin(j5);
IkReal x6385=((1.0)*cj6);
IkReal x6386=(sj6*x6383);
IkReal x6387=(sj6*x6384);
IkReal x6388=((1.0)*x6383);
evalcond[0]=(((r22*x6384))+((r21*x6386))+(((-1.0)*r20*x6383*x6385)));
evalcond[1]=((((-1.0)*r00*x6383*x6385))+((r02*x6384))+((r01*x6386)));
evalcond[2]=((((-1.0)*r10*x6384*x6385))+(((-1.0)*r12*x6388))+((r11*x6387)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x6383*x6385))+((r12*x6384))+((r11*x6386)));
evalcond[4]=((((-1.0)*r00*x6384*x6385))+cj3+((r01*x6387))+(((-1.0)*r02*x6388)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r20*x6384*x6385))+(((-1.0)*r22*x6388))+((r21*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6389=((1.0)*cj6);
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x6389)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
CheckValue<IkReal> x6391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x6389)))),-1);
if(!x6391.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6390.value)+(((1.5707963267949)*(x6391.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6392=IKcos(j5);
IkReal x6393=IKsin(j5);
IkReal x6394=((1.0)*cj6);
IkReal x6395=(sj6*x6392);
IkReal x6396=(sj6*x6393);
IkReal x6397=((1.0)*x6392);
evalcond[0]=((((-1.0)*r20*x6392*x6394))+((r21*x6395))+((r22*x6393)));
evalcond[1]=((((-1.0)*r00*x6392*x6394))+((r01*x6395))+((r02*x6393)));
evalcond[2]=(((r11*x6396))+(((-1.0)*r10*x6393*x6394))+(((-1.0)*r12*x6397)));
evalcond[3]=((-1.0)+((r11*x6395))+((r12*x6393))+(((-1.0)*r10*x6392*x6394)));
evalcond[4]=((((-1.0)*r00*x6393*x6394))+cj3+((r01*x6396))+(((-1.0)*r02*x6397)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r22*x6397))+(((-1.0)*r20*x6393*x6394))+((r21*x6396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6398=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x6398.valid){
continue;
}
CheckValue<IkReal> x6399 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6399.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6398.value)))+(x6399.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6400=IKcos(j5);
IkReal x6401=IKsin(j5);
IkReal x6402=((1.0)*cj6);
IkReal x6403=(sj6*x6400);
IkReal x6404=(sj6*x6401);
IkReal x6405=((1.0)*x6400);
evalcond[0]=(((r21*x6403))+(((-1.0)*r20*x6400*x6402))+((r22*x6401)));
evalcond[1]=(((r02*x6401))+((r01*x6403))+(((-1.0)*r00*x6400*x6402)));
evalcond[2]=((((-1.0)*r10*x6401*x6402))+(((-1.0)*r12*x6405))+((r11*x6404)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x6400*x6402))+((r12*x6401))+((r11*x6403)));
evalcond[4]=(cj3+((r01*x6404))+(((-1.0)*r02*x6405))+(((-1.0)*r00*x6401*x6402)));
evalcond[5]=((((-1.0)*sj3))+((r21*x6404))+(((-1.0)*r20*x6401*x6402))+(((-1.0)*r22*x6405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6406=cj6*cj6;
IkReal x6407=r21*r21;
IkReal x6408=(sj2*sj3);
IkReal x6409=(r21*sj6);
IkReal x6410=(cj6*r20);
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x6406*(r20*r20)))+x6407+(((-2.0)*x6409*x6410))+(((-1.0)*x6406*x6407)))),-1);
if(!x6411.valid){
continue;
}
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal(((((-1.0)*x6408*x6409))+((x6408*x6410))+((cj2*r22)))),IkReal(((((-1.0)*cj2*x6410))+((r22*x6408))+((cj2*x6409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6411.value)))+(x6412.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6413=IKcos(j5);
IkReal x6414=IKsin(j5);
IkReal x6415=((1.0)*sj2);
IkReal x6416=(sj6*x6414);
IkReal x6417=((1.0)*cj2*sj3);
IkReal x6418=((1.0)*x6413);
IkReal x6419=(sj6*x6413);
IkReal x6420=((1.0)*cj6*x6414);
evalcond[0]=(((r21*x6419))+(((-1.0)*cj6*r20*x6418))+((r22*x6414))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x6416))+(((-1.0)*r22*x6418))+(((-1.0)*r20*x6420)));
evalcond[2]=(((r02*x6414))+((r01*x6419))+(((-1.0)*cj1*x6415))+(((-1.0)*cj6*r00*x6418)));
evalcond[3]=((((-1.0)*sj1*x6415))+((r12*x6414))+(((-1.0)*cj6*r10*x6418))+((r11*x6419)));
evalcond[4]=((((-1.0)*r10*x6420))+(((-1.0)*sj1*x6417))+((cj1*cj3))+(((-1.0)*r12*x6418))+((r11*x6416)));
evalcond[5]=(((r01*x6416))+(((-1.0)*cj1*x6417))+(((-1.0)*r02*x6418))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6421=((1.0)*sj6);
IkReal x6422=((1.0)*sj1*sj2);
CheckValue<IkReal> x6423 = IKatan2WithCheck(IkReal((((r21*sj1*sj2*sj6))+(((-1.0)*cj6*r20*x6422))+((cj2*cj6*r10))+(((-1.0)*cj2*r11*x6421)))),IkReal(((((-1.0)*r22*x6422))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6423.valid){
continue;
}
CheckValue<IkReal> x6424=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01))+(((-1.0)*r00*x6421)))),-1);
if(!x6424.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6423.value)+(((1.5707963267949)*(x6424.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6425=IKcos(j5);
IkReal x6426=IKsin(j5);
IkReal x6427=((1.0)*sj2);
IkReal x6428=(sj6*x6426);
IkReal x6429=((1.0)*cj2*sj3);
IkReal x6430=((1.0)*x6425);
IkReal x6431=(sj6*x6425);
IkReal x6432=((1.0)*cj6*x6426);
evalcond[0]=((((-1.0)*cj6*r20*x6430))+((r21*x6431))+((r22*x6426))+(((-1.0)*cj2)));
evalcond[1]=(((r21*x6428))+((sj2*sj3))+(((-1.0)*r22*x6430))+(((-1.0)*r20*x6432)));
evalcond[2]=(((r01*x6431))+(((-1.0)*cj6*r00*x6430))+((r02*x6426))+(((-1.0)*cj1*x6427)));
evalcond[3]=(((r11*x6431))+((r12*x6426))+(((-1.0)*cj6*r10*x6430))+(((-1.0)*sj1*x6427)));
evalcond[4]=((((-1.0)*r10*x6432))+(((-1.0)*r12*x6430))+((r11*x6428))+((cj1*cj3))+(((-1.0)*sj1*x6429)));
evalcond[5]=((((-1.0)*r00*x6432))+(((-1.0)*r02*x6430))+(((-1.0)*cj3*sj1))+((r01*x6428))+(((-1.0)*cj1*x6429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6433=((1.0)*cj1*sj2);
CheckValue<IkReal> x6434 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20*x6433))+((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*sj6)))),IkReal(((((-1.0)*r22*x6433))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6434.valid){
continue;
}
CheckValue<IkReal> x6435=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x6435.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6434.value)+(((1.5707963267949)*(x6435.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6436=IKcos(j5);
IkReal x6437=IKsin(j5);
IkReal x6438=((1.0)*sj2);
IkReal x6439=(sj6*x6437);
IkReal x6440=((1.0)*cj2*sj3);
IkReal x6441=((1.0)*x6436);
IkReal x6442=(sj6*x6436);
IkReal x6443=((1.0)*cj6*x6437);
evalcond[0]=(((r22*x6437))+((r21*x6442))+(((-1.0)*cj6*r20*x6441))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6441))+((r21*x6439))+(((-1.0)*r20*x6443)));
evalcond[2]=((((-1.0)*cj1*x6438))+((r01*x6442))+((r02*x6437))+(((-1.0)*cj6*r00*x6441)));
evalcond[3]=(((r11*x6442))+(((-1.0)*sj1*x6438))+(((-1.0)*cj6*r10*x6441))+((r12*x6437)));
evalcond[4]=(((r11*x6439))+(((-1.0)*r12*x6441))+(((-1.0)*sj1*x6440))+(((-1.0)*r10*x6443))+((cj1*cj3)));
evalcond[5]=(((r01*x6439))+(((-1.0)*cj1*x6440))+(((-1.0)*r02*x6441))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x6443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6444=cj3*cj3;
IkReal x6445=(sj3*sj6);
IkReal x6446=((1.0)*r10);
IkReal x6447=(cj6*sj3);
IkReal x6448=(cj2*cj3*sj6);
IkReal x6449=((1.0)*cj2*cj3*cj6);
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal((((r00*x6445))+((r01*x6447))+(((-1.0)*x6446*x6448))+(((-1.0)*r11*x6449)))),IkReal(((((-1.0)*r01*x6449))+(((-1.0)*x6445*x6446))+(((-1.0)*r11*x6447))+(((-1.0)*r00*x6448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x6444))+((x6444*(cj2*cj2))))),-1);
if(!x6451.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x6450.value)+(((1.5707963267949)*(x6451.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x6452=IKcos(j1);
IkReal x6453=IKsin(j1);
IkReal x6454=((0.31436)*sj3);
IkReal x6455=(cj6*r11);
IkReal x6456=((0.31436)*cj3);
IkReal x6457=(r00*sj6);
IkReal x6458=(r10*sj6);
IkReal x6459=(cj6*r01);
IkReal x6460=((0.01275)*sj2);
IkReal x6461=(cj2*x6452);
IkReal x6462=(cj2*x6453);
evalcond[0]=(x6455+x6458+((cj3*x6462))+((sj3*x6452)));
evalcond[1]=(x6457+x6459+((cj3*x6461))+(((-1.0)*sj3*x6453)));
evalcond[2]=(((x6454*x6461))+(((0.0003501)*x6459))+(((0.0003501)*x6457))+((x6453*x6456))+(((-1.0)*px))+(((0.42076)*x6453))+(((-1.0)*x6452*x6460)));
evalcond[3]=(((x6454*x6462))+(((0.0003501)*x6458))+(((0.0003501)*x6455))+(((-1.0)*x6452*x6456))+(((-1.0)*py))+(((-1.0)*x6453*x6460))+(((-0.42076)*x6452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6463=((1.0)*cj1*sj2);
IkReal x6464=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x6464;
j5eval[1]=((IKabs((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*sj6))+(((-1.0)*cj6*r20*x6463)))))+(IKabs((((cj2*r02))+(((-1.0)*r22*x6463))))));
j5eval[2]=IKsign(x6464);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6465=((1.0)*cj6);
IkReal x6466=((1.0)*sj6);
IkReal x6467=(sj1*sj2);
IkReal x6468=((((-1.0)*r01*x6465))+(((-1.0)*r00*x6466)));
j5eval[0]=x6468;
j5eval[1]=IKsign(x6468);
j5eval[2]=((IKabs(((((-1.0)*r22*x6467))+((cj2*r12)))))+(IKabs(((((-1.0)*cj2*r11*x6466))+((cj2*cj6*r10))+((r21*sj6*x6467))+(((-1.0)*r20*x6465*x6467))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6469=cj6*cj6;
IkReal x6470=r21*r21;
IkReal x6471=(sj2*sj3);
IkReal x6472=(r21*sj6);
IkReal x6473=(cj6*r20);
IkReal x6474=((r22*r22)+((x6469*(r20*r20)))+(((-2.0)*x6472*x6473))+x6470+(((-1.0)*x6469*x6470)));
j5eval[0]=x6474;
j5eval[1]=IKsign(x6474);
j5eval[2]=((IKabs((((r22*x6471))+((cj2*x6472))+(((-1.0)*cj2*x6473)))))+(IKabs(((((-1.0)*x6471*x6472))+((x6471*x6473))+((cj2*r22))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6475=((-1.0)*r00);
IkReal x6477 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6477)==0){
continue;
}
IkReal x6476=pow(x6477,-0.5);
CheckValue<IkReal> x6478 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6475),IKFAST_ATAN2_MAGTHRESH);
if(!x6478.valid){
continue;
}
IkReal gconst48=((-1.0)*(x6478.value));
IkReal gconst49=(r01*x6476);
IkReal gconst50=(x6475*x6476);
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6479.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6480=(cj1*sj2);
CheckValue<IkReal> x6481=IKPowWithIntegerCheck(IKsign((((gconst50*r11))+((gconst49*r10)))),-1);
if(!x6481.valid){
continue;
}
CheckValue<IkReal> x6482 = IKatan2WithCheck(IkReal((((cj2*gconst50*r00))+((gconst49*r21*x6480))+(((-1.0)*gconst50*r20*x6480))+(((-1.0)*cj2*gconst49*r01)))),IkReal((((cj2*r02))+(((-1.0)*r22*x6480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6482.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6481.value)))+(x6482.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6483=IKcos(j5);
IkReal x6484=IKsin(j5);
IkReal x6485=(gconst49*r01);
IkReal x6486=((1.0)*gconst50);
IkReal x6487=((1.0)*sj2);
IkReal x6488=(gconst49*r21);
IkReal x6489=(gconst49*r11);
IkReal x6490=((1.0)*cj2*sj3);
IkReal x6491=((1.0)*x6483);
evalcond[0]=((((-1.0)*r20*x6483*x6486))+((x6483*x6488))+((r22*x6484))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6491))+(((-1.0)*r20*x6484*x6486))+((x6484*x6488)));
evalcond[2]=((((-1.0)*cj1*x6487))+(((-1.0)*r00*x6483*x6486))+((r02*x6484))+((x6483*x6485)));
evalcond[3]=(((r12*x6484))+((x6483*x6489))+(((-1.0)*r10*x6483*x6486))+(((-1.0)*sj1*x6487)));
evalcond[4]=((((-1.0)*r10*x6484*x6486))+(((-1.0)*r12*x6491))+((x6484*x6489))+((cj1*cj3))+(((-1.0)*sj1*x6490)));
evalcond[5]=((((-1.0)*r00*x6484*x6486))+(((-1.0)*r02*x6491))+(((-1.0)*cj1*x6490))+(((-1.0)*cj3*sj1))+((x6484*x6485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6492=((-1.0)*r01);
IkReal x6494 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6494)==0){
continue;
}
IkReal x6493=pow(x6494,-0.5);
CheckValue<IkReal> x6495 = IKatan2WithCheck(IkReal(x6492),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6495.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x6495.value))));
IkReal gconst52=(x6492*x6493);
IkReal gconst53=((1.0)*r00*x6493);
CheckValue<IkReal> x6496 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6496.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6496.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6497=(cj1*sj2);
CheckValue<IkReal> x6498 = IKatan2WithCheck(IkReal(((((-1.0)*gconst53*r20*x6497))+((cj2*gconst53*r00))+(((-1.0)*cj2*gconst52*r01))+((gconst52*r21*x6497)))),IkReal((((cj2*r02))+(((-1.0)*r22*x6497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6498.valid){
continue;
}
CheckValue<IkReal> x6499=IKPowWithIntegerCheck(IKsign((((gconst53*r11))+((gconst52*r10)))),-1);
if(!x6499.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6498.value)+(((1.5707963267949)*(x6499.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6500=IKcos(j5);
IkReal x6501=IKsin(j5);
IkReal x6502=((1.0)*sj1);
IkReal x6503=(cj2*sj3);
IkReal x6504=((1.0)*cj1);
IkReal x6505=(gconst52*x6500);
IkReal x6506=(gconst52*x6501);
IkReal x6507=((1.0)*x6500);
IkReal x6508=((1.0)*gconst53*x6501);
IkReal x6509=(gconst53*x6507);
evalcond[0]=(((r21*x6505))+((r22*x6501))+(((-1.0)*r20*x6509))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x6506))+(((-1.0)*r20*x6508))+(((-1.0)*r22*x6507)));
evalcond[2]=(((r02*x6501))+(((-1.0)*r00*x6509))+((r01*x6505))+(((-1.0)*sj2*x6504)));
evalcond[3]=(((r12*x6501))+(((-1.0)*r10*x6509))+((r11*x6505))+(((-1.0)*sj2*x6502)));
evalcond[4]=((((-1.0)*r12*x6507))+(((-1.0)*r10*x6508))+(((-1.0)*x6502*x6503))+((cj1*cj3))+((r11*x6506)));
evalcond[5]=((((-1.0)*r00*x6508))+(((-1.0)*x6503*x6504))+(((-1.0)*r02*x6507))+(((-1.0)*cj3*x6502))+((r01*x6506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6511 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6511)==0){
continue;
}
IkReal x6510=pow(x6511,-0.5);
CheckValue<IkReal> x6512 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6512.valid){
continue;
}
IkReal gconst54=((-1.0)*(x6512.value));
IkReal gconst55=((-1.0)*r11*x6510);
IkReal gconst56=(r10*x6510);
CheckValue<IkReal> x6513 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6513.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6513.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6514=((1.0)*gconst55);
IkReal x6515=((1.0)*gconst56);
IkReal x6516=(sj1*sj2);
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r11*x6514))+((cj2*gconst56*r10))+(((-1.0)*r20*x6515*x6516))+((gconst55*r21*x6516)))),IkReal((((cj2*r12))+(((-1.0)*r22*x6516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
CheckValue<IkReal> x6518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6514))+(((-1.0)*r01*x6515)))),-1);
if(!x6518.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6517.value)+(((1.5707963267949)*(x6518.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6519=IKcos(j5);
IkReal x6520=IKsin(j5);
IkReal x6521=((1.0)*gconst56);
IkReal x6522=((1.0)*sj1);
IkReal x6523=(cj2*sj3);
IkReal x6524=((1.0)*cj1);
IkReal x6525=(gconst55*x6519);
IkReal x6526=((1.0)*x6519);
IkReal x6527=(gconst55*x6520);
evalcond[0]=((((-1.0)*r20*x6519*x6521))+((r21*x6525))+((r22*x6520))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6526))+(((-1.0)*r20*x6520*x6521))+((r21*x6527)));
evalcond[2]=((((-1.0)*r00*x6519*x6521))+(((-1.0)*sj2*x6524))+((r02*x6520))+((r01*x6525)));
evalcond[3]=((((-1.0)*r10*x6519*x6521))+(((-1.0)*sj2*x6522))+((r12*x6520))+((r11*x6525)));
evalcond[4]=((((-1.0)*x6522*x6523))+(((-1.0)*r10*x6520*x6521))+(((-1.0)*r12*x6526))+((cj1*cj3))+((r11*x6527)));
evalcond[5]=((((-1.0)*cj3*x6522))+(((-1.0)*r02*x6526))+((r01*x6527))+(((-1.0)*x6523*x6524))+(((-1.0)*r00*x6520*x6521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6529 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6529)==0){
continue;
}
IkReal x6528=pow(x6529,-0.5);
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x6530.value))));
IkReal gconst58=((1.0)*r11*x6528);
IkReal gconst59=((-1.0)*r10*x6528);
CheckValue<IkReal> x6531 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6531.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6531.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x6534 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6534.valid){
continue;
}
IkReal x6532=((1.0)*(x6534.value));
IkReal x6533=x6528;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj6=gconst58;
cj6=gconst59;
j6=((3.14159265)+(((-1.0)*x6532)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x6532)));
IkReal gconst58=((1.0)*r11*x6533);
IkReal gconst59=((-1.0)*r10*x6533);
IkReal x6535=r12*r12;
IkReal x6536=(cj2*r02);
IkReal x6537=(cj1*r22*sj2);
CheckValue<IkReal> x6541=IKPowWithIntegerCheck(((-1.0)+x6535),-1);
if(!x6541.valid){
continue;
}
IkReal x6538=x6541.value;
if((((1.0)+(((-1.0)*x6535)))) < -0.00001)
continue;
IkReal x6539=IKsqrt(((1.0)+(((-1.0)*x6535))));
IkReal x6540=(r12*x6538*x6539);
j5eval[0]=0;
j5eval[1]=0;
j5eval[2]=((IKabs(((((-1.0)*x6536*x6540))+((x6537*x6540)))))+(IKabs((x6536+(((-1.0)*x6537))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6542=((1.0)*gconst58);
IkReal x6543=((1.0)*sj1*sj2);
CheckValue<IkReal> x6544 = IKatan2WithCheck(IkReal((((cj2*gconst59*r10))+((gconst58*r21*sj1*sj2))+(((-1.0)*gconst59*r20*x6543))+(((-1.0)*cj2*r11*x6542)))),IkReal(((((-1.0)*r22*x6543))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6544.valid){
continue;
}
CheckValue<IkReal> x6545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6542))+(((-1.0)*gconst59*r01)))),-1);
if(!x6545.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6544.value)+(((1.5707963267949)*(x6545.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6546=IKcos(j5);
IkReal x6547=IKsin(j5);
IkReal x6548=((1.0)*cj2);
IkReal x6549=((1.0)*gconst59);
IkReal x6550=((1.0)*sj2);
IkReal x6551=(gconst58*x6547);
IkReal x6552=(gconst58*x6546);
IkReal x6553=((1.0)*x6546);
evalcond[0]=((((-1.0)*r20*x6546*x6549))+(((-1.0)*x6548))+((r22*x6547))+((r21*x6552)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6553))+(((-1.0)*r20*x6547*x6549))+((r21*x6551)));
evalcond[2]=((((-1.0)*cj1*x6550))+((r02*x6547))+(((-1.0)*r00*x6546*x6549))+((r01*x6552)));
evalcond[3]=((((-1.0)*sj1*x6550))+((r11*x6552))+((r12*x6547))+(((-1.0)*r10*x6546*x6549)));
evalcond[4]=((((-1.0)*sj1*sj3*x6548))+(((-1.0)*r12*x6553))+((r11*x6551))+((cj1*cj3))+(((-1.0)*r10*x6547*x6549)));
evalcond[5]=((((-1.0)*cj1*sj3*x6548))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x6553))+(((-1.0)*r00*x6547*x6549))+((r01*x6551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6554=((1.0)*cj1*sj2);
CheckValue<IkReal> x6555 = IKatan2WithCheck(IkReal((((cj1*gconst58*r21*sj2))+((cj2*gconst59*r00))+(((-1.0)*cj2*gconst58*r01))+(((-1.0)*gconst59*r20*x6554)))),IkReal(((((-1.0)*r22*x6554))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6555.valid){
continue;
}
CheckValue<IkReal> x6556=IKPowWithIntegerCheck(IKsign((((gconst58*r10))+((gconst59*r11)))),-1);
if(!x6556.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6555.value)+(((1.5707963267949)*(x6556.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6557=IKcos(j5);
IkReal x6558=IKsin(j5);
IkReal x6559=((1.0)*cj2);
IkReal x6560=((1.0)*gconst59);
IkReal x6561=((1.0)*sj2);
IkReal x6562=(gconst58*x6558);
IkReal x6563=(gconst58*x6557);
IkReal x6564=((1.0)*x6557);
evalcond[0]=((((-1.0)*r20*x6557*x6560))+(((-1.0)*x6559))+((r21*x6563))+((r22*x6558)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6564))+(((-1.0)*r20*x6558*x6560))+((r21*x6562)));
evalcond[2]=((((-1.0)*cj1*x6561))+((r02*x6558))+(((-1.0)*r00*x6557*x6560))+((r01*x6563)));
evalcond[3]=((((-1.0)*r10*x6557*x6560))+(((-1.0)*sj1*x6561))+((r11*x6563))+((r12*x6558)));
evalcond[4]=((((-1.0)*sj1*sj3*x6559))+((r11*x6562))+(((-1.0)*r10*x6558*x6560))+((cj1*cj3))+(((-1.0)*r12*x6564)));
evalcond[5]=((((-1.0)*cj1*sj3*x6559))+(((-1.0)*r00*x6558*x6560))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x6564))+((r01*x6562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x6565=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6565);
rxp0_2=(py*r00);
rxp1_0=(r21*x6565);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x6566=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6566);
rxp0_2=(py*r00);
rxp1_0=(r21*x6566);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=((((-1.0)*cj6*r20))+((r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x6567=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6567);
rxp0_2=(py*r00);
rxp1_0=(r21*x6567);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=(((r01*sj6))+(((-1.0)*cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6568=IKPowWithIntegerCheck(r12,-1);
if(!x6568.valid){
continue;
}
CheckValue<IkReal> x6569=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x6569.valid){
continue;
}
if( IKabs((sj1*sj2*(x6568.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x6569.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x6568.value)))+IKsqr((cj1*sj2*(x6569.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x6568.value)), (cj1*sj2*(x6569.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6570=IKsin(j5);
IkReal x6571=IKcos(j5);
IkReal x6572=((1.0)*sj2);
IkReal x6573=(cj6*r20);
IkReal x6574=((1.0)*cj2*sj3);
IkReal x6575=(sj6*x6570);
IkReal x6576=(sj6*x6571);
IkReal x6577=((1.0)*cj6*r00);
IkReal x6578=((1.0)*x6571);
evalcond[0]=(((r12*x6570))+(((-1.0)*sj1*x6572)));
evalcond[1]=((((-1.0)*sj1*x6574))+((cj1*cj3))+(((-1.0)*r12*x6578)));
evalcond[2]=(((sj2*sj3))+((r21*x6575))+(((-1.0)*x6570*x6573)));
evalcond[3]=((((-1.0)*x6573*x6578))+((r21*x6576))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*x6571*x6577))+((r01*x6576))+(((-1.0)*cj1*x6572)));
evalcond[5]=(((r01*x6575))+(((-1.0)*cj1*x6574))+(((-1.0)*cj3*sj1))+(((-1.0)*x6570*x6577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6579=IKPowWithIntegerCheck(r12,-1);
if(!x6579.valid){
continue;
}
CheckValue<IkReal> x6580=IKPowWithIntegerCheck(((((-1.0)*cj6*r20))+((r21*sj6))),-1);
if(!x6580.valid){
continue;
}
if( IKabs((sj1*sj2*(x6579.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x6580.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x6579.value)))+IKsqr((cj2*(x6580.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x6579.value)), (cj2*(x6580.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6581=IKsin(j5);
IkReal x6582=IKcos(j5);
IkReal x6583=((1.0)*sj2);
IkReal x6584=(cj6*r20);
IkReal x6585=((1.0)*cj2*sj3);
IkReal x6586=(sj6*x6581);
IkReal x6587=(sj6*x6582);
IkReal x6588=((1.0)*cj6*r00);
IkReal x6589=((1.0)*x6582);
evalcond[0]=((((-1.0)*sj1*x6583))+((r12*x6581)));
evalcond[1]=((((-1.0)*sj1*x6585))+(((-1.0)*r12*x6589))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+((r21*x6586))+(((-1.0)*x6581*x6584)));
evalcond[3]=((((-1.0)*x6584*x6589))+((r21*x6587))+(((-1.0)*cj2)));
evalcond[4]=(((r01*x6587))+(((-1.0)*x6582*x6588))+(((-1.0)*cj1*x6583)));
evalcond[5]=(((r01*x6586))+(((-1.0)*x6581*x6588))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6590 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6590.valid){
continue;
}
CheckValue<IkReal> x6591=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x6591.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6590.value)+(((1.5707963267949)*(x6591.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6592=IKsin(j5);
IkReal x6593=IKcos(j5);
IkReal x6594=((1.0)*sj2);
IkReal x6595=(cj6*r20);
IkReal x6596=((1.0)*cj2*sj3);
IkReal x6597=(sj6*x6592);
IkReal x6598=(sj6*x6593);
IkReal x6599=((1.0)*cj6*r00);
IkReal x6600=((1.0)*x6593);
evalcond[0]=(((r12*x6592))+(((-1.0)*sj1*x6594)));
evalcond[1]=((((-1.0)*sj1*x6596))+(((-1.0)*r12*x6600))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+((r21*x6597))+(((-1.0)*x6592*x6595)));
evalcond[3]=((((-1.0)*x6595*x6600))+((r21*x6598))+(((-1.0)*cj2)));
evalcond[4]=(((r01*x6598))+(((-1.0)*x6593*x6599))+(((-1.0)*cj1*x6594)));
evalcond[5]=(((r01*x6597))+(((-1.0)*x6592*x6599))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x6596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6601=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x6601;
j5eval[1]=IKsign(x6601);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6602=((1.0)*cj6);
IkReal x6603=((((-1.0)*r00*sj6))+(((-1.0)*r01*x6602)));
j5eval[0]=x6603;
j5eval[1]=IKsign(x6603);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x6602))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6604=r21*r21;
IkReal x6605=cj6*cj6;
IkReal x6606=(cj6*r20);
IkReal x6607=(r21*sj6);
IkReal x6608=((((2.0)*x6606*x6607))+(((-1.0)*(r22*r22)))+((x6604*x6605))+(((-1.0)*x6605*(r20*r20)))+(((-1.0)*x6604)));
j5eval[0]=x6608;
j5eval[1]=IKsign(x6608);
j5eval[2]=((IKabs((((sj3*x6607))+(((-1.0)*sj3*x6606)))))+(IKabs((r22*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6609=r21*r21;
IkReal x6610=cj6*cj6;
IkReal x6611=(cj6*r20);
IkReal x6612=(r21*sj6);
CheckValue<IkReal> x6613 = IKatan2WithCheck(IkReal((((sj3*x6612))+(((-1.0)*sj3*x6611)))),IkReal(((-1.0)*r22*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x6613.valid){
continue;
}
CheckValue<IkReal> x6614=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6610*(r20*r20)))+((x6609*x6610))+(((2.0)*x6611*x6612))+(((-1.0)*(r22*r22)))+(((-1.0)*x6609)))),-1);
if(!x6614.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6613.value)+(((1.5707963267949)*(x6614.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6615=IKcos(j5);
IkReal x6616=IKsin(j5);
IkReal x6617=(cj6*r10);
IkReal x6618=(cj6*r00);
IkReal x6619=(cj6*r20);
IkReal x6620=((1.0)*x6615);
IkReal x6621=(sj6*x6615);
IkReal x6622=(sj6*x6616);
IkReal x6623=((1.0)*x6616);
evalcond[0]=((((-1.0)*x6619*x6620))+((r22*x6616))+((r21*x6621)));
evalcond[1]=(((r02*x6616))+((r01*x6621))+(((-1.0)*x6618*x6620)));
evalcond[2]=((((-1.0)*r12*x6620))+(((-1.0)*x6617*x6623))+((r11*x6622)));
evalcond[3]=((-1.0)+(((-1.0)*x6617*x6620))+((r12*x6616))+((r11*x6621)));
evalcond[4]=(sj3+(((-1.0)*x6619*x6623))+(((-1.0)*r22*x6620))+((r21*x6622)));
evalcond[5]=(((r01*x6622))+(((-1.0)*x6618*x6623))+(((-1.0)*r02*x6620))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6624=((1.0)*cj6);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x6624)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
CheckValue<IkReal> x6626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x6624)))),-1);
if(!x6626.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6625.value)+(((1.5707963267949)*(x6626.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6627=IKcos(j5);
IkReal x6628=IKsin(j5);
IkReal x6629=(cj6*r10);
IkReal x6630=(cj6*r00);
IkReal x6631=(cj6*r20);
IkReal x6632=((1.0)*x6627);
IkReal x6633=(sj6*x6627);
IkReal x6634=(sj6*x6628);
IkReal x6635=((1.0)*x6628);
evalcond[0]=(((r21*x6633))+((r22*x6628))+(((-1.0)*x6631*x6632)));
evalcond[1]=(((r02*x6628))+((r01*x6633))+(((-1.0)*x6630*x6632)));
evalcond[2]=(((r11*x6634))+(((-1.0)*x6629*x6635))+(((-1.0)*r12*x6632)));
evalcond[3]=((-1.0)+((r12*x6628))+((r11*x6633))+(((-1.0)*x6629*x6632)));
evalcond[4]=(sj3+(((-1.0)*r22*x6632))+((r21*x6634))+(((-1.0)*x6631*x6635)));
evalcond[5]=(((r01*x6634))+(((-1.0)*x6630*x6635))+(((-1.0)*r02*x6632))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6636=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x6636.valid){
continue;
}
CheckValue<IkReal> x6637 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6637.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6636.value)))+(x6637.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6638=IKcos(j5);
IkReal x6639=IKsin(j5);
IkReal x6640=(cj6*r10);
IkReal x6641=(cj6*r00);
IkReal x6642=(cj6*r20);
IkReal x6643=((1.0)*x6638);
IkReal x6644=(sj6*x6638);
IkReal x6645=(sj6*x6639);
IkReal x6646=((1.0)*x6639);
evalcond[0]=(((r21*x6644))+(((-1.0)*x6642*x6643))+((r22*x6639)));
evalcond[1]=(((r01*x6644))+(((-1.0)*x6641*x6643))+((r02*x6639)));
evalcond[2]=((((-1.0)*x6640*x6646))+((r11*x6645))+(((-1.0)*r12*x6643)));
evalcond[3]=((-1.0)+(((-1.0)*x6640*x6643))+((r11*x6644))+((r12*x6639)));
evalcond[4]=(sj3+(((-1.0)*r22*x6643))+((r21*x6645))+(((-1.0)*x6642*x6646)));
evalcond[5]=(((r01*x6645))+(((-1.0)*x6641*x6646))+(((-1.0)*r02*x6643))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6647=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x6647;
j5eval[1]=IKsign(x6647);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6648=((1.0)*cj6);
IkReal x6649=((((-1.0)*r21*x6648))+(((-1.0)*r20*sj6)));
j5eval[0]=x6649;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x6648))))));
j5eval[2]=IKsign(x6649);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6650=r21*r21;
IkReal x6651=cj6*cj6;
IkReal x6652=(cj6*r20);
IkReal x6653=(r21*sj6);
IkReal x6654=((((2.0)*x6652*x6653))+(((-1.0)*x6650))+(((-1.0)*(r22*r22)))+(((-1.0)*x6651*(r20*r20)))+((x6650*x6651)));
j5eval[0]=x6654;
j5eval[1]=IKsign(x6654);
j5eval[2]=((IKabs(((((-1.0)*sj3*x6652))+((sj3*x6653)))))+(IKabs((r22*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6655=r21*r21;
IkReal x6656=cj6*cj6;
IkReal x6657=(cj6*r20);
IkReal x6658=(r21*sj6);
CheckValue<IkReal> x6659 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x6657))+((sj3*x6658)))),IkReal(((-1.0)*r22*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x6659.valid){
continue;
}
CheckValue<IkReal> x6660=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6656*(r20*r20)))+(((-1.0)*x6655))+(((2.0)*x6657*x6658))+(((-1.0)*(r22*r22)))+((x6655*x6656)))),-1);
if(!x6660.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6659.value)+(((1.5707963267949)*(x6660.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6661=IKcos(j5);
IkReal x6662=IKsin(j5);
IkReal x6663=((1.0)*cj6);
IkReal x6664=(sj6*x6661);
IkReal x6665=(sj6*x6662);
IkReal x6666=((1.0)*x6661);
evalcond[0]=((((-1.0)*r20*x6661*x6663))+((r21*x6664))+((r22*x6662)));
evalcond[1]=(((r02*x6662))+(((-1.0)*r00*x6661*x6663))+((r01*x6664)));
evalcond[2]=((((-1.0)*r10*x6662*x6663))+((r11*x6665))+(((-1.0)*r12*x6666)));
evalcond[3]=((1.0)+(((-1.0)*r10*x6661*x6663))+((r12*x6662))+((r11*x6664)));
evalcond[4]=(sj3+(((-1.0)*r20*x6662*x6663))+((r21*x6665))+(((-1.0)*r22*x6666)));
evalcond[5]=(cj3+((r01*x6665))+(((-1.0)*r02*x6666))+(((-1.0)*r00*x6662*x6663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6667=((1.0)*cj6);
CheckValue<IkReal> x6668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6667))+(((-1.0)*r20*sj6)))),-1);
if(!x6668.valid){
continue;
}
CheckValue<IkReal> x6669 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x6667)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6669.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6668.value)))+(x6669.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6670=IKcos(j5);
IkReal x6671=IKsin(j5);
IkReal x6672=((1.0)*cj6);
IkReal x6673=(sj6*x6670);
IkReal x6674=(sj6*x6671);
IkReal x6675=((1.0)*x6670);
evalcond[0]=(((r22*x6671))+(((-1.0)*r20*x6670*x6672))+((r21*x6673)));
evalcond[1]=(((r02*x6671))+(((-1.0)*r00*x6670*x6672))+((r01*x6673)));
evalcond[2]=(((r11*x6674))+(((-1.0)*r12*x6675))+(((-1.0)*r10*x6671*x6672)));
evalcond[3]=((1.0)+((r11*x6673))+((r12*x6671))+(((-1.0)*r10*x6670*x6672)));
evalcond[4]=(sj3+(((-1.0)*r20*x6671*x6672))+(((-1.0)*r22*x6675))+((r21*x6674)));
evalcond[5]=((((-1.0)*r02*x6675))+cj3+(((-1.0)*r00*x6671*x6672))+((r01*x6674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6676=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x6676.valid){
continue;
}
CheckValue<IkReal> x6677 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6677.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6676.value)))+(x6677.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6678=IKcos(j5);
IkReal x6679=IKsin(j5);
IkReal x6680=((1.0)*cj6);
IkReal x6681=(sj6*x6678);
IkReal x6682=(sj6*x6679);
IkReal x6683=((1.0)*x6678);
evalcond[0]=(((r21*x6681))+((r22*x6679))+(((-1.0)*r20*x6678*x6680)));
evalcond[1]=(((r02*x6679))+(((-1.0)*r00*x6678*x6680))+((r01*x6681)));
evalcond[2]=(((r11*x6682))+(((-1.0)*r12*x6683))+(((-1.0)*r10*x6679*x6680)));
evalcond[3]=((1.0)+((r11*x6681))+((r12*x6679))+(((-1.0)*r10*x6678*x6680)));
evalcond[4]=(sj3+(((-1.0)*r20*x6679*x6680))+((r21*x6682))+(((-1.0)*r22*x6683)));
evalcond[5]=((((-1.0)*r02*x6683))+cj3+(((-1.0)*r00*x6679*x6680))+((r01*x6682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6684=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x6684;
j5eval[1]=IKsign(x6684);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6685=((1.0)*cj6);
IkReal x6686=((((-1.0)*r21*x6685))+(((-1.0)*r20*sj6)));
j5eval[0]=x6686;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6685))+((r01*sj6))))));
j5eval[2]=IKsign(x6686);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x6687=cj6*cj6;
IkReal x6688=r11*r11;
IkReal x6689=(r11*sj6);
IkReal x6690=(cj6*r10);
IkReal x6691=((((-1.0)*x6687*(r10*r10)))+(((2.0)*x6689*x6690))+((x6687*x6688))+(((-1.0)*(r12*r12)))+(((-1.0)*x6688)));
j5eval[0]=x6691;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6690))+x6689))));
j5eval[2]=IKsign(x6691);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6692=cj6*cj6;
IkReal x6693=r11*r11;
IkReal x6694=(r11*sj6);
IkReal x6695=(cj6*r10);
CheckValue<IkReal> x6696=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6692*(r10*r10)))+(((-1.0)*x6693))+((x6692*x6693))+(((-1.0)*(r12*r12)))+(((2.0)*x6694*x6695)))),-1);
if(!x6696.valid){
continue;
}
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6695))+x6694)),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6696.value)))+(x6697.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6698=IKcos(j5);
IkReal x6699=IKsin(j5);
IkReal x6700=(cj6*r10);
IkReal x6701=(cj6*r00);
IkReal x6702=(cj6*r20);
IkReal x6703=((1.0)*x6698);
IkReal x6704=(sj6*x6698);
IkReal x6705=((1.0)*x6699);
IkReal x6706=(sj6*x6699);
evalcond[0]=(((r21*x6704))+((r22*x6699))+(((-1.0)*x6702*x6703)));
evalcond[1]=(((r01*x6704))+(((-1.0)*x6701*x6703))+((r02*x6699)));
evalcond[2]=(((r11*x6706))+(((-1.0)*r12*x6703))+(((-1.0)*x6700*x6705)));
evalcond[3]=((1.0)+((r12*x6699))+((r11*x6704))+(((-1.0)*x6700*x6703)));
evalcond[4]=((((-1.0)*sj3))+((r21*x6706))+(((-1.0)*r22*x6703))+(((-1.0)*x6702*x6705)));
evalcond[5]=((((-1.0)*r02*x6703))+((r01*x6706))+(((-1.0)*x6701*x6705))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6707=((1.0)*cj6);
CheckValue<IkReal> x6708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6707))+(((-1.0)*r20*sj6)))),-1);
if(!x6708.valid){
continue;
}
CheckValue<IkReal> x6709 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x6707)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6709.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6708.value)))+(x6709.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6710=IKcos(j5);
IkReal x6711=IKsin(j5);
IkReal x6712=(cj6*r10);
IkReal x6713=(cj6*r00);
IkReal x6714=(cj6*r20);
IkReal x6715=((1.0)*x6710);
IkReal x6716=(sj6*x6710);
IkReal x6717=((1.0)*x6711);
IkReal x6718=(sj6*x6711);
evalcond[0]=(((r22*x6711))+(((-1.0)*x6714*x6715))+((r21*x6716)));
evalcond[1]=((((-1.0)*x6713*x6715))+((r02*x6711))+((r01*x6716)));
evalcond[2]=(((r11*x6718))+(((-1.0)*x6712*x6717))+(((-1.0)*r12*x6715)));
evalcond[3]=((1.0)+((r11*x6716))+(((-1.0)*x6712*x6715))+((r12*x6711)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*x6714*x6717))+((r21*x6718))+(((-1.0)*r22*x6715)));
evalcond[5]=((((-1.0)*x6713*x6717))+(((-1.0)*r02*x6715))+((r01*x6718))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6719=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x6719.valid){
continue;
}
CheckValue<IkReal> x6720 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6720.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6719.value)))+(x6720.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6721=IKcos(j5);
IkReal x6722=IKsin(j5);
IkReal x6723=(cj6*r10);
IkReal x6724=(cj6*r00);
IkReal x6725=(cj6*r20);
IkReal x6726=((1.0)*x6721);
IkReal x6727=(sj6*x6721);
IkReal x6728=((1.0)*x6722);
IkReal x6729=(sj6*x6722);
evalcond[0]=(((r22*x6722))+((r21*x6727))+(((-1.0)*x6725*x6726)));
evalcond[1]=((((-1.0)*x6724*x6726))+((r02*x6722))+((r01*x6727)));
evalcond[2]=(((r11*x6729))+(((-1.0)*x6723*x6728))+(((-1.0)*r12*x6726)));
evalcond[3]=((1.0)+((r12*x6722))+((r11*x6727))+(((-1.0)*x6723*x6726)));
evalcond[4]=((((-1.0)*r22*x6726))+(((-1.0)*sj3))+((r21*x6729))+(((-1.0)*x6725*x6728)));
evalcond[5]=((((-1.0)*x6724*x6728))+(((-1.0)*r02*x6726))+((r01*x6729))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6730=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x6730;
j5eval[1]=IKsign(x6730);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6731=((1.0)*cj6);
IkReal x6732=((((-1.0)*r01*x6731))+(((-1.0)*r00*sj6)));
j5eval[0]=x6732;
j5eval[1]=IKsign(x6732);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6731))+((r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x6733=cj6*cj6;
IkReal x6734=(cj6*r20);
IkReal x6735=(r01*r21);
IkReal x6736=(r21*sj6);
IkReal x6737=((((-1.0)*x6735))+(((-1.0)*r02*r22))+((x6733*x6735))+((cj6*r00*x6736))+(((-1.0)*r00*r20*x6733))+((r01*sj6*x6734)));
j5eval[0]=x6737;
j5eval[1]=IKsign(x6737);
j5eval[2]=((IKabs((((cj3*x6736))+(((-1.0)*cj3*x6734)))))+(IKabs((cj3*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6738=cj6*cj6;
IkReal x6739=(cj6*r20);
IkReal x6740=(r01*r21);
IkReal x6741=(r21*sj6);
CheckValue<IkReal> x6742=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6740))+(((-1.0)*r02*r22))+((x6738*x6740))+((cj6*r00*x6741))+(((-1.0)*r00*r20*x6738))+((r01*sj6*x6739)))),-1);
if(!x6742.valid){
continue;
}
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal((((cj3*x6741))+(((-1.0)*cj3*x6739)))),IkReal(((-1.0)*cj3*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6742.value)))+(x6743.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6744=IKcos(j5);
IkReal x6745=IKsin(j5);
IkReal x6746=((1.0)*cj6);
IkReal x6747=(sj6*x6744);
IkReal x6748=(sj6*x6745);
IkReal x6749=((1.0)*x6744);
evalcond[0]=(((r21*x6747))+(((-1.0)*r20*x6744*x6746))+((r22*x6745)));
evalcond[1]=(((r02*x6745))+(((-1.0)*r00*x6744*x6746))+((r01*x6747)));
evalcond[2]=((((-1.0)*r12*x6749))+((r11*x6748))+(((-1.0)*r10*x6745*x6746)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x6744*x6746))+((r11*x6747))+((r12*x6745)));
evalcond[4]=(cj3+(((-1.0)*r00*x6745*x6746))+(((-1.0)*r02*x6749))+((r01*x6748)));
evalcond[5]=((((-1.0)*sj3))+((r21*x6748))+(((-1.0)*r20*x6745*x6746))+(((-1.0)*r22*x6749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6750=((1.0)*cj6);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x6750))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x6750)))),-1);
if(!x6752.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6751.value)+(((1.5707963267949)*(x6752.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6753=IKcos(j5);
IkReal x6754=IKsin(j5);
IkReal x6755=((1.0)*cj6);
IkReal x6756=(sj6*x6753);
IkReal x6757=(sj6*x6754);
IkReal x6758=((1.0)*x6753);
evalcond[0]=(((r22*x6754))+(((-1.0)*r20*x6753*x6755))+((r21*x6756)));
evalcond[1]=(((r01*x6756))+(((-1.0)*r00*x6753*x6755))+((r02*x6754)));
evalcond[2]=(((r11*x6757))+(((-1.0)*r10*x6754*x6755))+(((-1.0)*r12*x6758)));
evalcond[3]=((-1.0)+((r12*x6754))+((r11*x6756))+(((-1.0)*r10*x6753*x6755)));
evalcond[4]=(cj3+((r01*x6757))+(((-1.0)*r00*x6754*x6755))+(((-1.0)*r02*x6758)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r22*x6758))+((r21*x6757))+(((-1.0)*r20*x6754*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x6759.valid){
continue;
}
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6759.value)))+(x6760.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6761=IKcos(j5);
IkReal x6762=IKsin(j5);
IkReal x6763=((1.0)*cj6);
IkReal x6764=(sj6*x6761);
IkReal x6765=(sj6*x6762);
IkReal x6766=((1.0)*x6761);
evalcond[0]=(((r22*x6762))+((r21*x6764))+(((-1.0)*r20*x6761*x6763)));
evalcond[1]=(((r01*x6764))+(((-1.0)*r00*x6761*x6763))+((r02*x6762)));
evalcond[2]=(((r11*x6765))+(((-1.0)*r10*x6762*x6763))+(((-1.0)*r12*x6766)));
evalcond[3]=((-1.0)+((r12*x6762))+((r11*x6764))+(((-1.0)*r10*x6761*x6763)));
evalcond[4]=(((r01*x6765))+cj3+(((-1.0)*r02*x6766))+(((-1.0)*r00*x6762*x6763)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r20*x6762*x6763))+(((-1.0)*r22*x6766))+((r21*x6765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6767=cj6*cj6;
IkReal x6768=r21*r21;
IkReal x6769=(sj2*sj3);
IkReal x6770=(r21*sj6);
IkReal x6771=(cj6*r20);
CheckValue<IkReal> x6772=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6768+(((-2.0)*x6770*x6771))+((x6767*(r20*r20)))+(((-1.0)*x6767*x6768)))),-1);
if(!x6772.valid){
continue;
}
CheckValue<IkReal> x6773 = IKatan2WithCheck(IkReal((((x6769*x6771))+((cj2*r22))+(((-1.0)*x6769*x6770)))),IkReal(((((-1.0)*cj2*x6771))+((r22*x6769))+((cj2*x6770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6773.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6772.value)))+(x6773.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6774=IKcos(j5);
IkReal x6775=IKsin(j5);
IkReal x6776=((1.0)*sj2);
IkReal x6777=(sj6*x6775);
IkReal x6778=((1.0)*cj2*sj3);
IkReal x6779=((1.0)*x6774);
IkReal x6780=(sj6*x6774);
IkReal x6781=((1.0)*cj6*x6775);
evalcond[0]=(((r22*x6775))+(((-1.0)*cj6*r20*x6779))+((r21*x6780))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6779))+((r21*x6777))+(((-1.0)*r20*x6781)));
evalcond[2]=(((r02*x6775))+((r01*x6780))+(((-1.0)*cj1*x6776))+(((-1.0)*cj6*r00*x6779)));
evalcond[3]=(((r12*x6775))+((r11*x6780))+(((-1.0)*cj6*r10*x6779))+(((-1.0)*sj1*x6776)));
evalcond[4]=(((r11*x6777))+(((-1.0)*r12*x6779))+(((-1.0)*r10*x6781))+((cj1*cj3))+(((-1.0)*sj1*x6778)));
evalcond[5]=((((-1.0)*r02*x6779))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x6781))+(((-1.0)*cj1*x6778))+((r01*x6777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6782=((1.0)*sj6);
IkReal x6783=((1.0)*sj1*sj2);
CheckValue<IkReal> x6784 = IKatan2WithCheck(IkReal((((r21*sj1*sj2*sj6))+(((-1.0)*cj6*r20*x6783))+((cj2*cj6*r10))+(((-1.0)*cj2*r11*x6782)))),IkReal((((cj2*r12))+(((-1.0)*r22*x6783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6784.valid){
continue;
}
CheckValue<IkReal> x6785=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01))+(((-1.0)*r00*x6782)))),-1);
if(!x6785.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6784.value)+(((1.5707963267949)*(x6785.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6786=IKcos(j5);
IkReal x6787=IKsin(j5);
IkReal x6788=((1.0)*sj2);
IkReal x6789=(sj6*x6787);
IkReal x6790=((1.0)*cj2*sj3);
IkReal x6791=((1.0)*x6786);
IkReal x6792=(sj6*x6786);
IkReal x6793=((1.0)*cj6*x6787);
evalcond[0]=(((r21*x6792))+((r22*x6787))+(((-1.0)*cj6*r20*x6791))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r22*x6791))+(((-1.0)*r20*x6793))+((r21*x6789)));
evalcond[2]=(((r01*x6792))+((r02*x6787))+(((-1.0)*cj6*r00*x6791))+(((-1.0)*cj1*x6788)));
evalcond[3]=(((r12*x6787))+(((-1.0)*cj6*r10*x6791))+((r11*x6792))+(((-1.0)*sj1*x6788)));
evalcond[4]=((((-1.0)*r10*x6793))+(((-1.0)*sj1*x6790))+((r11*x6789))+((cj1*cj3))+(((-1.0)*r12*x6791)));
evalcond[5]=((((-1.0)*cj1*x6790))+(((-1.0)*r00*x6793))+(((-1.0)*cj3*sj1))+((r01*x6789))+(((-1.0)*r02*x6791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6794=((1.0)*cj1*sj2);
CheckValue<IkReal> x6795=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x6795.valid){
continue;
}
CheckValue<IkReal> x6796 = IKatan2WithCheck(IkReal((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*sj6))+(((-1.0)*cj6*r20*x6794)))),IkReal(((((-1.0)*r22*x6794))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6796.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6795.value)))+(x6796.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x6797=IKcos(j5);
IkReal x6798=IKsin(j5);
IkReal x6799=((1.0)*sj2);
IkReal x6800=(sj6*x6798);
IkReal x6801=((1.0)*cj2*sj3);
IkReal x6802=((1.0)*x6797);
IkReal x6803=(sj6*x6797);
IkReal x6804=((1.0)*cj6*x6798);
evalcond[0]=(((r22*x6798))+((r21*x6803))+(((-1.0)*cj6*r20*x6802))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x6800))+(((-1.0)*r22*x6802))+(((-1.0)*r20*x6804)));
evalcond[2]=(((r02*x6798))+(((-1.0)*cj6*r00*x6802))+(((-1.0)*cj1*x6799))+((r01*x6803)));
evalcond[3]=((((-1.0)*sj1*x6799))+(((-1.0)*cj6*r10*x6802))+((r11*x6803))+((r12*x6798)));
evalcond[4]=((((-1.0)*sj1*x6801))+(((-1.0)*r12*x6802))+((r11*x6800))+(((-1.0)*r10*x6804))+((cj1*cj3)));
evalcond[5]=((((-1.0)*cj1*x6801))+(((-1.0)*r02*x6802))+((r01*x6800))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x6804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x6805=cj6*cj6;
IkReal x6806=r21*r21;
IkReal x6807=(sj2*sj3);
IkReal x6808=(r21*sj6);
IkReal x6809=(cj6*r20);
CheckValue<IkReal> x6810 = IKatan2WithCheck(IkReal((((cj2*r22))+((x6807*x6809))+(((-1.0)*x6807*x6808)))),IkReal((((r22*x6807))+(((-1.0)*cj2*x6809))+((cj2*x6808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6810.valid){
continue;
}
CheckValue<IkReal> x6811=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x6805*x6806))+x6806+(((-2.0)*x6808*x6809))+((x6805*(r20*r20))))),-1);
if(!x6811.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x6810.value)+(((1.5707963267949)*(x6811.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x6812=IKcos(j5);
IkReal x6813=IKsin(j5);
IkReal x6814=(r21*sj6);
IkReal x6815=(cj6*r20);
IkReal x6816=((1.0)*x6812);
evalcond[0]=(((x6812*x6814))+((r22*x6813))+(((-1.0)*x6815*x6816))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((x6813*x6814))+(((-1.0)*x6813*x6815))+(((-1.0)*r22*x6816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6817=cj3*cj3;
IkReal x6818=(sj3*sj6);
IkReal x6819=((1.0)*r10);
IkReal x6820=(cj6*sj3);
IkReal x6821=(cj2*cj3*sj6);
IkReal x6822=((1.0)*cj2*cj3*cj6);
IkReal x6823=((1.0)+(((-1.0)*x6817))+((x6817*(cj2*cj2))));
j1eval[0]=x6823;
j1eval[1]=IKsign(x6823);
j1eval[2]=((IKabs((((r01*x6820))+(((-1.0)*r11*x6822))+(((-1.0)*x6819*x6821))+((r00*x6818)))))+(IKabs(((((-1.0)*r00*x6821))+(((-1.0)*r01*x6822))+(((-1.0)*r11*x6820))+(((-1.0)*x6818*x6819))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=cj3;
j1eval[2]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=((IKabs(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
j1eval[2]=IKsign(sj3);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=cj3;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6824=((1.0)*cj6);
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(cj3,-1);
if(!x6825.valid){
continue;
}
CheckValue<IkReal> x6826=IKPowWithIntegerCheck(sj3,-1);
if(!x6826.valid){
continue;
}
if( IKabs(((x6825.value)*((((r01*sj5*sj6))+(((-1.0)*r00*sj5*x6824))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6826.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6824)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6825.value)*((((r01*sj5*sj6))+(((-1.0)*r00*sj5*x6824))+(((-1.0)*cj5*r02))))))+IKsqr(((x6826.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6824))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6825.value)*((((r01*sj5*sj6))+(((-1.0)*r00*sj5*x6824))+(((-1.0)*cj5*r02))))), ((x6826.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6824))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6827=IKcos(j1);
IkReal x6828=IKsin(j1);
IkReal x6829=(cj6*r11);
IkReal x6830=(r00*sj6);
IkReal x6831=(r10*sj6);
IkReal x6832=(sj5*sj6);
IkReal x6833=(cj6*r01);
IkReal x6834=(cj5*sj6);
IkReal x6835=((1.0)*cj5);
IkReal x6836=(cj3*x6828);
IkReal x6837=((1.0)*cj6*r10);
IkReal x6838=((1.0)*x6828);
IkReal x6839=((1.0)*cj6*r00);
IkReal x6840=(cj3*x6827);
evalcond[0]=(((sj3*x6827))+x6829+x6831);
evalcond[1]=((((-1.0)*sj3*x6838))+x6833+x6830);
evalcond[2]=((((-1.0)*cj6*r00*x6835))+(((-1.0)*x6827))+((r01*x6834))+((r02*sj5)));
evalcond[3]=((((-1.0)*cj6*r10*x6835))+((r11*x6834))+((r12*sj5))+(((-1.0)*x6838)));
evalcond[4]=((((-1.0)*r12*x6835))+((r11*x6832))+(((-1.0)*sj5*x6837))+x6840);
evalcond[5]=((((-1.0)*r02*x6835))+(((-1.0)*sj5*x6839))+((r01*x6832))+(((-1.0)*x6836)));
evalcond[6]=((((0.31436)*x6836))+(((0.42076)*x6828))+(((-1.0)*px))+(((-0.01275)*x6827))+(((0.0003501)*x6830))+(((0.0003501)*x6833)));
evalcond[7]=((((0.0003501)*x6829))+(((-0.31436)*x6840))+(((-0.42076)*x6827))+(((-1.0)*py))+(((-0.01275)*x6828))+(((0.0003501)*x6831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6841=IKPowWithIntegerCheck(sj3,-1);
if(!x6841.valid){
continue;
}
if( IKabs(((x6841.value)*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r01*sj6))+(((-1.0)*cj5*cj6*r00))+((r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6841.value)*((((r00*sj6))+((cj6*r01))))))+IKsqr((((cj5*r01*sj6))+(((-1.0)*cj5*cj6*r00))+((r02*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6841.value)*((((r00*sj6))+((cj6*r01))))), (((cj5*r01*sj6))+(((-1.0)*cj5*cj6*r00))+((r02*sj5))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6842=IKcos(j1);
IkReal x6843=IKsin(j1);
IkReal x6844=(cj6*r11);
IkReal x6845=(r00*sj6);
IkReal x6846=(r10*sj6);
IkReal x6847=(sj5*sj6);
IkReal x6848=(cj6*r01);
IkReal x6849=(cj5*sj6);
IkReal x6850=((1.0)*cj5);
IkReal x6851=(cj3*x6843);
IkReal x6852=((1.0)*cj6*r10);
IkReal x6853=((1.0)*x6843);
IkReal x6854=((1.0)*cj6*r00);
IkReal x6855=(cj3*x6842);
evalcond[0]=(((sj3*x6842))+x6846+x6844);
evalcond[1]=((((-1.0)*sj3*x6853))+x6848+x6845);
evalcond[2]=((((-1.0)*cj6*r00*x6850))+((r02*sj5))+(((-1.0)*x6842))+((r01*x6849)));
evalcond[3]=((((-1.0)*x6853))+((r11*x6849))+(((-1.0)*cj6*r10*x6850))+((r12*sj5)));
evalcond[4]=(((r11*x6847))+(((-1.0)*sj5*x6852))+(((-1.0)*r12*x6850))+x6855);
evalcond[5]=((((-1.0)*r02*x6850))+(((-1.0)*sj5*x6854))+(((-1.0)*x6851))+((r01*x6847)));
evalcond[6]=((((0.31436)*x6851))+(((-1.0)*px))+(((-0.01275)*x6842))+(((0.0003501)*x6845))+(((0.0003501)*x6848))+(((0.42076)*x6843)));
evalcond[7]=((((-1.0)*py))+(((-0.01275)*x6843))+(((-0.42076)*x6842))+(((0.0003501)*x6844))+(((0.0003501)*x6846))+(((-0.31436)*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6856=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6856.valid){
continue;
}
CheckValue<IkReal> x6857 = IKatan2WithCheck(IkReal((((r00*sj6))+((cj6*r01)))),IkReal(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6857.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6856.value)))+(x6857.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6858=IKcos(j1);
IkReal x6859=IKsin(j1);
IkReal x6860=(cj6*r11);
IkReal x6861=(r00*sj6);
IkReal x6862=(r10*sj6);
IkReal x6863=(sj5*sj6);
IkReal x6864=(cj6*r01);
IkReal x6865=(cj5*sj6);
IkReal x6866=((1.0)*cj5);
IkReal x6867=(cj3*x6859);
IkReal x6868=((1.0)*cj6*r10);
IkReal x6869=((1.0)*x6859);
IkReal x6870=((1.0)*cj6*r00);
IkReal x6871=(cj3*x6858);
evalcond[0]=(((sj3*x6858))+x6860+x6862);
evalcond[1]=((((-1.0)*sj3*x6869))+x6864+x6861);
evalcond[2]=((((-1.0)*x6858))+((r02*sj5))+((r01*x6865))+(((-1.0)*cj6*r00*x6866)));
evalcond[3]=(((r11*x6865))+(((-1.0)*x6869))+(((-1.0)*cj6*r10*x6866))+((r12*sj5)));
evalcond[4]=(((r11*x6863))+(((-1.0)*r12*x6866))+(((-1.0)*sj5*x6868))+x6871);
evalcond[5]=((((-1.0)*x6867))+(((-1.0)*sj5*x6870))+(((-1.0)*r02*x6866))+((r01*x6863)));
evalcond[6]=((((0.42076)*x6859))+(((0.31436)*x6867))+(((-0.01275)*x6858))+(((-1.0)*px))+(((0.0003501)*x6861))+(((0.0003501)*x6864)));
evalcond[7]=((((-0.31436)*x6871))+(((-0.42076)*x6858))+(((-0.01275)*x6859))+(((-1.0)*py))+(((0.0003501)*x6862))+(((0.0003501)*x6860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=((IKabs(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
j1eval[2]=IKsign(sj3);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=cj3;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6872=((1.0)*cj6);
CheckValue<IkReal> x6873=IKPowWithIntegerCheck(cj3,-1);
if(!x6873.valid){
continue;
}
CheckValue<IkReal> x6874=IKPowWithIntegerCheck(sj3,-1);
if(!x6874.valid){
continue;
}
if( IKabs(((x6873.value)*((((r01*sj5*sj6))+(((-1.0)*r00*sj5*x6872))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6874.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6872)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6873.value)*((((r01*sj5*sj6))+(((-1.0)*r00*sj5*x6872))+(((-1.0)*cj5*r02))))))+IKsqr(((x6874.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6872))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6873.value)*((((r01*sj5*sj6))+(((-1.0)*r00*sj5*x6872))+(((-1.0)*cj5*r02))))), ((x6874.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6872))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6875=IKcos(j1);
IkReal x6876=IKsin(j1);
IkReal x6877=(cj6*r11);
IkReal x6878=(r00*sj6);
IkReal x6879=(r10*sj6);
IkReal x6880=(sj5*sj6);
IkReal x6881=(cj6*r01);
IkReal x6882=(cj5*sj6);
IkReal x6883=((1.0)*cj5);
IkReal x6884=(cj3*x6876);
IkReal x6885=((1.0)*cj6*r10);
IkReal x6886=((1.0)*cj6*r00);
IkReal x6887=(cj3*x6875);
evalcond[0]=(((sj3*x6875))+x6879+x6877);
evalcond[1]=((((-1.0)*sj3*x6876))+x6881+x6878);
evalcond[2]=(((r02*sj5))+x6875+((r01*x6882))+(((-1.0)*cj6*r00*x6883)));
evalcond[3]=((((-1.0)*cj6*r10*x6883))+((r11*x6882))+x6876+((r12*sj5)));
evalcond[4]=(((r11*x6880))+x6887+(((-1.0)*sj5*x6885))+(((-1.0)*r12*x6883)));
evalcond[5]=((((-1.0)*r02*x6883))+((r01*x6880))+(((-1.0)*sj5*x6886))+(((-1.0)*x6884)));
evalcond[6]=((((0.42076)*x6876))+(((0.0003501)*x6881))+(((-1.0)*px))+(((0.01275)*x6875))+(((0.31436)*x6884))+(((0.0003501)*x6878)));
evalcond[7]=((((-0.31436)*x6887))+(((-1.0)*py))+(((0.01275)*x6876))+(((-0.42076)*x6875))+(((0.0003501)*x6877))+(((0.0003501)*x6879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6888=IKPowWithIntegerCheck(sj3,-1);
if(!x6888.valid){
continue;
}
if( IKabs(((x6888.value)*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r01*sj6))+(((-1.0)*r02*sj5))+((cj5*cj6*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6888.value)*((((r00*sj6))+((cj6*r01))))))+IKsqr(((((-1.0)*cj5*r01*sj6))+(((-1.0)*r02*sj5))+((cj5*cj6*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6888.value)*((((r00*sj6))+((cj6*r01))))), ((((-1.0)*cj5*r01*sj6))+(((-1.0)*r02*sj5))+((cj5*cj6*r00))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6889=IKcos(j1);
IkReal x6890=IKsin(j1);
IkReal x6891=(cj6*r11);
IkReal x6892=(r00*sj6);
IkReal x6893=(r10*sj6);
IkReal x6894=(sj5*sj6);
IkReal x6895=(cj6*r01);
IkReal x6896=(cj5*sj6);
IkReal x6897=((1.0)*cj5);
IkReal x6898=(cj3*x6890);
IkReal x6899=((1.0)*cj6*r10);
IkReal x6900=((1.0)*cj6*r00);
IkReal x6901=(cj3*x6889);
evalcond[0]=(x6891+x6893+((sj3*x6889)));
evalcond[1]=(x6892+x6895+(((-1.0)*sj3*x6890)));
evalcond[2]=(((r02*sj5))+x6889+(((-1.0)*cj6*r00*x6897))+((r01*x6896)));
evalcond[3]=(x6890+((r12*sj5))+((r11*x6896))+(((-1.0)*cj6*r10*x6897)));
evalcond[4]=((((-1.0)*sj5*x6899))+(((-1.0)*r12*x6897))+x6901+((r11*x6894)));
evalcond[5]=((((-1.0)*x6898))+(((-1.0)*sj5*x6900))+(((-1.0)*r02*x6897))+((r01*x6894)));
evalcond[6]=((((0.01275)*x6889))+(((0.0003501)*x6895))+(((0.0003501)*x6892))+(((-1.0)*px))+(((0.31436)*x6898))+(((0.42076)*x6890)));
evalcond[7]=((((0.01275)*x6890))+(((0.0003501)*x6893))+(((0.0003501)*x6891))+(((-1.0)*py))+(((-0.42076)*x6889))+(((-0.31436)*x6901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x6902=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6902.valid){
continue;
}
CheckValue<IkReal> x6903 = IKatan2WithCheck(IkReal((((r00*sj6))+((cj6*r01)))),IkReal(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6903.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6902.value)))+(x6903.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6904=IKcos(j1);
IkReal x6905=IKsin(j1);
IkReal x6906=(cj6*r11);
IkReal x6907=(r00*sj6);
IkReal x6908=(r10*sj6);
IkReal x6909=(sj5*sj6);
IkReal x6910=(cj6*r01);
IkReal x6911=(cj5*sj6);
IkReal x6912=((1.0)*cj5);
IkReal x6913=(cj3*x6905);
IkReal x6914=((1.0)*cj6*r10);
IkReal x6915=((1.0)*cj6*r00);
IkReal x6916=(cj3*x6904);
evalcond[0]=(x6906+x6908+((sj3*x6904)));
evalcond[1]=((((-1.0)*sj3*x6905))+x6910+x6907);
evalcond[2]=((((-1.0)*cj6*r00*x6912))+((r02*sj5))+x6904+((r01*x6911)));
evalcond[3]=(((r12*sj5))+((r11*x6911))+(((-1.0)*cj6*r10*x6912))+x6905);
evalcond[4]=(((r11*x6909))+(((-1.0)*r12*x6912))+x6916+(((-1.0)*sj5*x6914)));
evalcond[5]=(((r01*x6909))+(((-1.0)*x6913))+(((-1.0)*sj5*x6915))+(((-1.0)*r02*x6912)));
evalcond[6]=((((0.0003501)*x6907))+(((0.0003501)*x6910))+(((-1.0)*px))+(((0.01275)*x6904))+(((0.42076)*x6905))+(((0.31436)*x6913)));
evalcond[7]=((((0.0003501)*x6908))+(((0.0003501)*x6906))+(((-0.42076)*x6904))+(((-1.0)*py))+(((0.01275)*x6905))+(((-0.31436)*x6916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs((((r00*sj6))+((cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj6))+((cj6*r01))))+IKsqr(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj6))+((cj6*r01))), ((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6917=IKcos(j1);
IkReal x6918=IKsin(j1);
IkReal x6919=(cj6*r11);
IkReal x6920=(r00*sj6);
IkReal x6921=(r10*sj6);
IkReal x6922=(sj5*sj6);
IkReal x6923=(cj6*r01);
IkReal x6924=(cj5*sj6);
IkReal x6925=((1.0)*cj5);
IkReal x6926=(cj2*x6917);
IkReal x6927=((1.0)*cj6*r10);
IkReal x6928=(sj2*x6917);
IkReal x6929=(sj2*x6918);
IkReal x6930=((1.0)*cj6*r00);
IkReal x6931=((1.0)*x6918);
evalcond[0]=(x6921+x6917+x6919);
evalcond[1]=(x6920+x6923+(((-1.0)*x6931)));
evalcond[2]=((((-1.0)*x6928))+((r01*x6924))+((r02*sj5))+(((-1.0)*cj6*r00*x6925)));
evalcond[3]=((((-1.0)*x6929))+((r11*x6924))+(((-1.0)*cj6*r10*x6925))+((r12*sj5)));
evalcond[4]=((((-1.0)*cj2*x6931))+((r11*x6922))+(((-1.0)*r12*x6925))+(((-1.0)*sj5*x6927)));
evalcond[5]=((((-1.0)*x6926))+((r01*x6922))+(((-1.0)*r02*x6925))+(((-1.0)*sj5*x6930)));
evalcond[6]=((((0.0003501)*x6923))+(((0.0003501)*x6920))+(((-1.0)*px))+(((0.31436)*x6926))+(((0.42076)*x6918))+(((-0.01275)*x6928)));
evalcond[7]=((((0.0003501)*x6919))+(((0.31436)*cj2*x6918))+(((-0.42076)*x6917))+(((0.0003501)*x6921))+(((-1.0)*py))+(((-0.01275)*x6929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj6))+((cj6*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01))))+IKsqr((((r10*sj6))+((cj6*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01))), (((r10*sj6))+((cj6*r11))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6932=IKsin(j1);
IkReal x6933=IKcos(j1);
IkReal x6934=(cj6*r11);
IkReal x6935=(r00*sj6);
IkReal x6936=(r10*sj6);
IkReal x6937=(sj5*sj6);
IkReal x6938=(cj6*r01);
IkReal x6939=(cj5*sj6);
IkReal x6940=((1.0)*cj5);
IkReal x6941=((1.0)*cj6*r10);
IkReal x6942=(cj2*x6933);
IkReal x6943=(sj2*x6933);
IkReal x6944=(sj2*x6932);
IkReal x6945=((1.0)*cj6*r00);
IkReal x6946=(cj2*x6932);
evalcond[0]=(x6932+x6935+x6938);
evalcond[1]=((((-1.0)*x6933))+x6936+x6934);
evalcond[2]=((((-1.0)*r12*x6940))+(((-1.0)*sj5*x6941))+((r11*x6937))+x6946);
evalcond[3]=(((r01*x6937))+(((-1.0)*sj5*x6945))+(((-1.0)*r02*x6940))+x6942);
evalcond[4]=((((-1.0)*x6943))+((r02*sj5))+((r01*x6939))+(((-1.0)*cj6*r00*x6940)));
evalcond[5]=((((-1.0)*cj6*r10*x6940))+(((-1.0)*x6944))+((r11*x6939))+((r12*sj5)));
evalcond[6]=((((-0.01275)*x6943))+(((-0.31436)*x6942))+(((-1.0)*px))+(((0.0003501)*x6935))+(((0.0003501)*x6938))+(((0.42076)*x6932)));
evalcond[7]=((((-0.01275)*x6944))+(((-0.42076)*x6933))+(((-0.31436)*x6946))+(((-1.0)*py))+(((0.0003501)*x6934))+(((0.0003501)*x6936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6947=(sj3*sj6);
IkReal x6948=(cj6*sj3);
IkReal x6949=((1.0)*cj3*sj6);
IkReal x6950=((1.0)*cj3*cj6);
if( IKabs(((((-1.0)*r11*x6950))+((r01*x6948))+((r00*x6947))+(((-1.0)*r10*x6949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x6947))+(((-1.0)*r11*x6948))+(((-1.0)*r01*x6950))+(((-1.0)*r00*x6949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6950))+((r01*x6948))+((r00*x6947))+(((-1.0)*r10*x6949))))+IKsqr(((((-1.0)*r10*x6947))+(((-1.0)*r11*x6948))+(((-1.0)*r01*x6950))+(((-1.0)*r00*x6949))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x6950))+((r01*x6948))+((r00*x6947))+(((-1.0)*r10*x6949))), ((((-1.0)*r10*x6947))+(((-1.0)*r11*x6948))+(((-1.0)*r01*x6950))+(((-1.0)*r00*x6949))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x6951=IKcos(j1);
IkReal x6952=IKsin(j1);
IkReal x6953=(cj6*r11);
IkReal x6954=((1.0)*sj3);
IkReal x6955=(r00*sj6);
IkReal x6956=(r10*sj6);
IkReal x6957=(sj5*sj6);
IkReal x6958=(cj6*r01);
IkReal x6959=((1.0)*cj5);
IkReal x6960=(cj3*x6951);
IkReal x6961=(cj3*x6952);
IkReal x6962=((1.0)*cj6*sj5);
IkReal x6963=(sj3*x6951);
IkReal x6964=(x6952*x6954);
evalcond[0]=(x6961+x6963+x6953+x6956);
evalcond[1]=((((-1.0)*x6964))+x6960+x6958+x6955);
evalcond[2]=((((-1.0)*r12*x6959))+(((-1.0)*r10*x6962))+(((-1.0)*x6964))+x6960+((r11*x6957)));
evalcond[3]=((((-1.0)*x6961))+(((-1.0)*x6951*x6954))+(((-1.0)*r02*x6959))+((r01*x6957))+(((-1.0)*r00*x6962)));
evalcond[4]=((((0.42076)*x6952))+(((0.31436)*x6963))+(((0.31436)*x6961))+(((0.0003501)*x6955))+(((0.0003501)*x6958))+(((-1.0)*px)));
evalcond[5]=((((-0.31436)*x6960))+(((0.0003501)*x6956))+(((0.0003501)*x6953))+(((-1.0)*py))+(((0.31436)*sj3*x6952))+(((-0.42076)*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6965=(r10*sj6);
IkReal x6966=(r00*sj6);
IkReal x6967=((1.0)*sj3);
IkReal x6968=(cj6*r11);
IkReal x6969=(cj6*r01);
if( IKabs((((sj3*x6966))+((sj3*x6969))+((cj3*x6965))+((cj3*x6968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6965*x6967))+((cj3*x6966))+((cj3*x6969))+(((-1.0)*x6967*x6968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj3*x6966))+((sj3*x6969))+((cj3*x6965))+((cj3*x6968))))+IKsqr(((((-1.0)*x6965*x6967))+((cj3*x6966))+((cj3*x6969))+(((-1.0)*x6967*x6968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((sj3*x6966))+((sj3*x6969))+((cj3*x6965))+((cj3*x6968))), ((((-1.0)*x6965*x6967))+((cj3*x6966))+((cj3*x6969))+(((-1.0)*x6967*x6968))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x6970=IKcos(j1);
IkReal x6971=IKsin(j1);
IkReal x6972=(cj6*r11);
IkReal x6973=(r00*sj6);
IkReal x6974=(r10*sj6);
IkReal x6975=(sj5*sj6);
IkReal x6976=(cj6*r01);
IkReal x6977=((1.0)*cj5);
IkReal x6978=(sj3*x6970);
IkReal x6979=(cj3*x6971);
IkReal x6980=((1.0)*cj6*sj5);
IkReal x6981=(sj3*x6971);
IkReal x6982=(cj3*x6970);
IkReal x6983=((1.0)*x6979);
evalcond[0]=((((-1.0)*x6983))+x6974+x6972+x6978);
evalcond[1]=((((-1.0)*x6982))+(((-1.0)*x6981))+x6976+x6973);
evalcond[2]=((((-1.0)*r10*x6980))+(((-1.0)*r12*x6977))+x6982+x6981+((r11*x6975)));
evalcond[3]=((((-1.0)*r02*x6977))+((r01*x6975))+(((-1.0)*x6983))+(((-1.0)*r00*x6980))+x6978);
evalcond[4]=((((-0.31436)*x6978))+(((0.31436)*x6979))+(((-1.0)*px))+(((0.0003501)*x6973))+(((0.0003501)*x6976))+(((0.42076)*x6971)));
evalcond[5]=((((-0.31436)*x6982))+(((-0.31436)*x6981))+(((-1.0)*py))+(((-0.42076)*x6970))+(((0.0003501)*x6972))+(((0.0003501)*x6974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x6984=((1.0)*sj6);
IkReal x6985=((1.0)*cj6);
j1eval[0]=cj2;
j1eval[1]=((IKabs(((((-1.0)*r10*x6984))+(((-1.0)*r11*x6985)))))+(IKabs(((((-1.0)*r00*x6984))+(((-1.0)*r01*x6985))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x6986=((1.0)*cj6);
CheckValue<IkReal> x6987=IKPowWithIntegerCheck(cj2,-1);
if(!x6987.valid){
continue;
}
CheckValue<IkReal> x6988=IKPowWithIntegerCheck(sj2,-1);
if(!x6988.valid){
continue;
}
if( IKabs(((x6987.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6986)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6988.value)*((((cj5*r01*sj6))+(((-1.0)*cj5*r00*x6986))+((r02*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6987.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6986))))))+IKsqr(((x6988.value)*((((cj5*r01*sj6))+(((-1.0)*cj5*r00*x6986))+((r02*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x6987.value)*(((((-1.0)*r10*sj6))+(((-1.0)*r11*x6986))))), ((x6988.value)*((((cj5*r01*sj6))+(((-1.0)*cj5*r00*x6986))+((r02*sj5))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x6989=IKcos(j1);
IkReal x6990=IKsin(j1);
IkReal x6991=(cj6*r11);
IkReal x6992=(r00*sj6);
IkReal x6993=(r10*sj6);
IkReal x6994=(sj5*sj6);
IkReal x6995=(cj6*r01);
IkReal x6996=(cj5*sj6);
IkReal x6997=((1.0)*cj5);
IkReal x6998=((1.0)*cj6*r10);
IkReal x6999=(sj2*x6989);
IkReal x7000=(sj2*x6990);
IkReal x7001=((1.0)*cj6*r00);
evalcond[0]=(((cj2*x6990))+x6991+x6993);
evalcond[1]=(((cj2*x6989))+x6995+x6992);
evalcond[2]=((((-1.0)*r12*x6997))+((r11*x6994))+x6989+(((-1.0)*sj5*x6998)));
evalcond[3]=((((-1.0)*x6990))+(((-1.0)*sj5*x7001))+((r01*x6994))+(((-1.0)*r02*x6997)));
evalcond[4]=((((-1.0)*x6999))+((r02*sj5))+((r01*x6996))+(((-1.0)*cj6*r00*x6997)));
evalcond[5]=((((-1.0)*x7000))+((r11*x6996))+(((-1.0)*cj6*r10*x6997))+((r12*sj5)));
evalcond[6]=((((-0.01275)*x6999))+(((-1.0)*px))+(((0.73512)*x6990))+(((0.0003501)*x6992))+(((0.0003501)*x6995)));
evalcond[7]=((((-0.01275)*x7000))+(((-1.0)*py))+(((0.0003501)*x6993))+(((0.0003501)*x6991))+(((-0.73512)*x6989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7002=((1.0)*r11);
CheckValue<IkReal> x7003=IKPowWithIntegerCheck(cj2,-1);
if(!x7003.valid){
continue;
}
if( IKabs(((x7003.value)*(((((-1.0)*r10*sj6))+(((-1.0)*cj6*x7002)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*sj5*sj6*x7002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7003.value)*(((((-1.0)*r10*sj6))+(((-1.0)*cj6*x7002))))))+IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*sj5*sj6*x7002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7003.value)*(((((-1.0)*r10*sj6))+(((-1.0)*cj6*x7002))))), (((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*sj5*sj6*x7002))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7004=IKcos(j1);
IkReal x7005=IKsin(j1);
IkReal x7006=(cj6*r11);
IkReal x7007=(r00*sj6);
IkReal x7008=(r10*sj6);
IkReal x7009=(sj5*sj6);
IkReal x7010=(cj6*r01);
IkReal x7011=(cj5*sj6);
IkReal x7012=((1.0)*cj5);
IkReal x7013=((1.0)*cj6*r10);
IkReal x7014=(sj2*x7004);
IkReal x7015=(sj2*x7005);
IkReal x7016=((1.0)*cj6*r00);
evalcond[0]=(x7008+x7006+((cj2*x7005)));
evalcond[1]=(x7010+x7007+((cj2*x7004)));
evalcond[2]=(x7004+(((-1.0)*sj5*x7013))+((r11*x7009))+(((-1.0)*r12*x7012)));
evalcond[3]=((((-1.0)*x7005))+(((-1.0)*sj5*x7016))+(((-1.0)*r02*x7012))+((r01*x7009)));
evalcond[4]=(((r02*sj5))+((r01*x7011))+(((-1.0)*cj6*r00*x7012))+(((-1.0)*x7014)));
evalcond[5]=(((r12*sj5))+((r11*x7011))+(((-1.0)*cj6*r10*x7012))+(((-1.0)*x7015)));
evalcond[6]=((((0.0003501)*x7007))+(((0.0003501)*x7010))+(((-1.0)*px))+(((0.73512)*x7005))+(((-0.01275)*x7014)));
evalcond[7]=((((-0.73512)*x7004))+(((0.0003501)*x7008))+(((0.0003501)*x7006))+(((-1.0)*py))+(((-0.01275)*x7015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7017=((1.0)*sj6);
IkReal x7018=((1.0)*cj6);
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7018))+(((-1.0)*r10*x7017)))),IkReal(((((-1.0)*r00*x7017))+(((-1.0)*r01*x7018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x7020.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x7019.value)+(((1.5707963267949)*(x7020.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7021=IKcos(j1);
IkReal x7022=IKsin(j1);
IkReal x7023=(cj6*r11);
IkReal x7024=(r00*sj6);
IkReal x7025=(r10*sj6);
IkReal x7026=(sj5*sj6);
IkReal x7027=(cj6*r01);
IkReal x7028=(cj5*sj6);
IkReal x7029=((1.0)*cj5);
IkReal x7030=((1.0)*cj6*r10);
IkReal x7031=(sj2*x7021);
IkReal x7032=(sj2*x7022);
IkReal x7033=((1.0)*cj6*r00);
evalcond[0]=(x7023+x7025+((cj2*x7022)));
evalcond[1]=(x7027+x7024+((cj2*x7021)));
evalcond[2]=((((-1.0)*r12*x7029))+x7021+((r11*x7026))+(((-1.0)*sj5*x7030)));
evalcond[3]=((((-1.0)*sj5*x7033))+((r01*x7026))+(((-1.0)*x7022))+(((-1.0)*r02*x7029)));
evalcond[4]=(((r01*x7028))+(((-1.0)*x7031))+((r02*sj5))+(((-1.0)*cj6*r00*x7029)));
evalcond[5]=(((r11*x7028))+(((-1.0)*cj6*r10*x7029))+(((-1.0)*x7032))+((r12*sj5)));
evalcond[6]=((((0.0003501)*x7024))+(((0.0003501)*x7027))+(((0.73512)*x7022))+(((-0.01275)*x7031))+(((-1.0)*px)));
evalcond[7]=((((-0.73512)*x7021))+(((0.0003501)*x7025))+(((0.0003501)*x7023))+(((-0.01275)*x7032))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
j1eval[1]=IKsign(cj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(cj2,-1);
if(!x7034.valid){
continue;
}
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(sj2,-1);
if(!x7035.valid){
continue;
}
if( IKabs(((x7034.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7035.value)*((((cj5*r01*sj6))+(((-1.0)*cj5*cj6*r00))+((r02*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7034.value)*((((r10*sj6))+((cj6*r11))))))+IKsqr(((x7035.value)*((((cj5*r01*sj6))+(((-1.0)*cj5*cj6*r00))+((r02*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7034.value)*((((r10*sj6))+((cj6*r11))))), ((x7035.value)*((((cj5*r01*sj6))+(((-1.0)*cj5*cj6*r00))+((r02*sj5))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7036=IKsin(j1);
IkReal x7037=IKcos(j1);
IkReal x7038=(cj6*r11);
IkReal x7039=(r00*sj6);
IkReal x7040=(r10*sj6);
IkReal x7041=(sj5*sj6);
IkReal x7042=(cj6*r01);
IkReal x7043=((0.01275)*sj2);
IkReal x7044=(cj5*sj6);
IkReal x7045=((1.0)*cj5);
IkReal x7046=((1.0)*x7037);
IkReal x7047=((1.0)*cj6*r10);
IkReal x7048=((1.0)*cj6*r00);
IkReal x7049=((1.0)*x7036);
evalcond[0]=(x7040+x7038+(((-1.0)*cj2*x7049)));
evalcond[1]=(x7042+x7039+(((-1.0)*cj2*x7046)));
evalcond[2]=(x7036+((r01*x7041))+(((-1.0)*r02*x7045))+(((-1.0)*sj5*x7048)));
evalcond[3]=((((-1.0)*x7046))+(((-1.0)*r12*x7045))+((r11*x7041))+(((-1.0)*sj5*x7047)));
evalcond[4]=(((r01*x7044))+(((-1.0)*sj2*x7046))+((r02*sj5))+(((-1.0)*cj6*r00*x7045)));
evalcond[5]=(((r11*x7044))+(((-1.0)*sj2*x7049))+(((-1.0)*cj6*r10*x7045))+((r12*sj5)));
evalcond[6]=((((0.0003501)*x7039))+(((0.0003501)*x7042))+(((-1.0)*x7037*x7043))+(((-1.0)*px))+(((0.1064)*x7036)));
evalcond[7]=((((0.0003501)*x7038))+(((0.0003501)*x7040))+(((-1.0)*x7036*x7043))+(((-0.1064)*x7037))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7050=IKPowWithIntegerCheck(cj2,-1);
if(!x7050.valid){
continue;
}
if( IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7050.value)*((((r00*sj6))+((cj6*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))))+IKsqr(((x7050.value)*((((r00*sj6))+((cj6*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+((cj5*r02))), ((x7050.value)*((((r00*sj6))+((cj6*r01))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7051=IKsin(j1);
IkReal x7052=IKcos(j1);
IkReal x7053=(cj6*r11);
IkReal x7054=(r00*sj6);
IkReal x7055=(r10*sj6);
IkReal x7056=(sj5*sj6);
IkReal x7057=(cj6*r01);
IkReal x7058=((0.01275)*sj2);
IkReal x7059=(cj5*sj6);
IkReal x7060=((1.0)*cj5);
IkReal x7061=((1.0)*x7052);
IkReal x7062=((1.0)*cj6*r10);
IkReal x7063=((1.0)*cj6*r00);
IkReal x7064=((1.0)*x7051);
evalcond[0]=(x7053+x7055+(((-1.0)*cj2*x7064)));
evalcond[1]=(x7057+x7054+(((-1.0)*cj2*x7061)));
evalcond[2]=(x7051+(((-1.0)*r02*x7060))+(((-1.0)*sj5*x7063))+((r01*x7056)));
evalcond[3]=((((-1.0)*x7061))+(((-1.0)*r12*x7060))+((r11*x7056))+(((-1.0)*sj5*x7062)));
evalcond[4]=((((-1.0)*cj6*r00*x7060))+((r02*sj5))+(((-1.0)*sj2*x7061))+((r01*x7059)));
evalcond[5]=(((r11*x7059))+(((-1.0)*sj2*x7064))+((r12*sj5))+(((-1.0)*cj6*r10*x7060)));
evalcond[6]=((((0.0003501)*x7057))+(((0.0003501)*x7054))+(((-1.0)*px))+(((-1.0)*x7052*x7058))+(((0.1064)*x7051)));
evalcond[7]=((((0.0003501)*x7053))+(((0.0003501)*x7055))+(((-1.0)*py))+(((-0.1064)*x7052))+(((-1.0)*x7051*x7058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7065=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x7065.valid){
continue;
}
CheckValue<IkReal> x7066 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7066.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7065.value)))+(x7066.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7067=IKsin(j1);
IkReal x7068=IKcos(j1);
IkReal x7069=(cj6*r11);
IkReal x7070=(r00*sj6);
IkReal x7071=(r10*sj6);
IkReal x7072=(sj5*sj6);
IkReal x7073=(cj6*r01);
IkReal x7074=((0.01275)*sj2);
IkReal x7075=(cj5*sj6);
IkReal x7076=((1.0)*cj5);
IkReal x7077=((1.0)*x7068);
IkReal x7078=((1.0)*cj6*r10);
IkReal x7079=((1.0)*cj6*r00);
IkReal x7080=((1.0)*x7067);
evalcond[0]=(x7071+x7069+(((-1.0)*cj2*x7080)));
evalcond[1]=(x7070+x7073+(((-1.0)*cj2*x7077)));
evalcond[2]=(x7067+((r01*x7072))+(((-1.0)*r02*x7076))+(((-1.0)*sj5*x7079)));
evalcond[3]=(((r11*x7072))+(((-1.0)*x7077))+(((-1.0)*sj5*x7078))+(((-1.0)*r12*x7076)));
evalcond[4]=((((-1.0)*cj6*r00*x7076))+((r01*x7075))+((r02*sj5))+(((-1.0)*sj2*x7077)));
evalcond[5]=((((-1.0)*cj6*r10*x7076))+((r11*x7075))+(((-1.0)*sj2*x7080))+((r12*sj5)));
evalcond[6]=((((-1.0)*x7068*x7074))+(((0.1064)*x7067))+(((-1.0)*px))+(((0.0003501)*x7073))+(((0.0003501)*x7070)));
evalcond[7]=((((-1.0)*x7067*x7074))+(((-0.1064)*x7068))+(((-1.0)*py))+(((0.0003501)*x7069))+(((0.0003501)*x7071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7086=IKPowWithIntegerCheck(sj2,-1);
if(!x7086.valid){
continue;
}
IkReal x7081=x7086.value;
IkReal x7082=((1.0)*sj6);
IkReal x7083=(r02*sj5);
IkReal x7084=(cj5*r01);
IkReal x7085=(cj5*cj6*r00);
CheckValue<IkReal> x7087=IKPowWithIntegerCheck(cj2,-1);
if(!x7087.valid){
continue;
}
CheckValue<IkReal> x7088=IKPowWithIntegerCheck(cj3,-1);
if(!x7088.valid){
continue;
}
if( IKabs((x7081*(x7087.value)*(x7088.value)*(((((-1.0)*cj6*r11*sj2))+(((-1.0)*r10*sj2*x7082))+(((-1.0)*sj3*x7082*x7084))+((sj3*x7085))+(((-1.0)*sj3*x7083)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7081*(((((-1.0)*x7085))+x7083+((sj6*x7084)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7081*(x7087.value)*(x7088.value)*(((((-1.0)*cj6*r11*sj2))+(((-1.0)*r10*sj2*x7082))+(((-1.0)*sj3*x7082*x7084))+((sj3*x7085))+(((-1.0)*sj3*x7083))))))+IKsqr((x7081*(((((-1.0)*x7085))+x7083+((sj6*x7084))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x7081*(x7087.value)*(x7088.value)*(((((-1.0)*cj6*r11*sj2))+(((-1.0)*r10*sj2*x7082))+(((-1.0)*sj3*x7082*x7084))+((sj3*x7085))+(((-1.0)*sj3*x7083))))), (x7081*(((((-1.0)*x7085))+x7083+((sj6*x7084))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7089=IKcos(j1);
IkReal x7090=IKsin(j1);
IkReal x7091=((0.31436)*sj3);
IkReal x7092=(cj6*r11);
IkReal x7093=((1.0)*sj3);
IkReal x7094=(r00*sj6);
IkReal x7095=(r10*sj6);
IkReal x7096=(sj5*sj6);
IkReal x7097=(cj6*r01);
IkReal x7098=((0.01275)*sj2);
IkReal x7099=((1.0)*sj2);
IkReal x7100=(cj5*sj6);
IkReal x7101=((1.0)*cj5);
IkReal x7102=(cj2*x7089);
IkReal x7103=(cj3*x7090);
IkReal x7104=((1.0)*cj6*r10);
IkReal x7105=((1.0)*cj6*r00);
IkReal x7106=(cj2*x7090);
IkReal x7107=(cj3*x7089);
evalcond[0]=(x7095+x7092+((cj2*x7103))+((sj3*x7089)));
evalcond[1]=((((-1.0)*x7089*x7099))+(((-1.0)*cj6*r00*x7101))+((r02*sj5))+((r01*x7100)));
evalcond[2]=(((r12*sj5))+(((-1.0)*cj6*r10*x7101))+(((-1.0)*x7090*x7099))+((r11*x7100)));
evalcond[3]=(x7097+x7094+((cj3*x7102))+(((-1.0)*x7090*x7093)));
evalcond[4]=(x7107+((r11*x7096))+(((-1.0)*r12*x7101))+(((-1.0)*sj5*x7104))+(((-1.0)*x7093*x7106)));
evalcond[5]=((((-1.0)*x7103))+((r01*x7096))+(((-1.0)*r02*x7101))+(((-1.0)*sj5*x7105))+(((-1.0)*x7093*x7102)));
evalcond[6]=((((0.0003501)*x7094))+(((0.0003501)*x7097))+(((0.42076)*x7090))+(((-1.0)*x7089*x7098))+(((-1.0)*px))+(((0.31436)*x7103))+((x7091*x7102)));
evalcond[7]=((((0.0003501)*x7092))+(((0.0003501)*x7095))+(((-1.0)*py))+(((-0.31436)*x7107))+(((-1.0)*x7090*x7098))+(((-0.42076)*x7089))+((x7091*x7106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7113=IKPowWithIntegerCheck(sj2,-1);
if(!x7113.valid){
continue;
}
IkReal x7108=x7113.value;
IkReal x7109=(cj2*cj3);
IkReal x7110=(r02*sj5);
IkReal x7111=(cj5*r01*sj6);
IkReal x7112=((1.0)*cj5*cj6*r00);
CheckValue<IkReal> x7114=IKPowWithIntegerCheck(sj3,-1);
if(!x7114.valid){
continue;
}
if( IKabs((x7108*(x7114.value)*((((cj6*r01*sj2))+((x7109*x7110))+((x7109*x7111))+(((-1.0)*x7109*x7112))+((r00*sj2*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7108*((x7111+x7110+(((-1.0)*x7112)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7108*(x7114.value)*((((cj6*r01*sj2))+((x7109*x7110))+((x7109*x7111))+(((-1.0)*x7109*x7112))+((r00*sj2*sj6))))))+IKsqr((x7108*((x7111+x7110+(((-1.0)*x7112))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x7108*(x7114.value)*((((cj6*r01*sj2))+((x7109*x7110))+((x7109*x7111))+(((-1.0)*x7109*x7112))+((r00*sj2*sj6))))), (x7108*((x7111+x7110+(((-1.0)*x7112))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7115=IKcos(j1);
IkReal x7116=IKsin(j1);
IkReal x7117=((0.31436)*sj3);
IkReal x7118=(cj6*r11);
IkReal x7119=((1.0)*sj3);
IkReal x7120=(r00*sj6);
IkReal x7121=(r10*sj6);
IkReal x7122=(sj5*sj6);
IkReal x7123=(cj6*r01);
IkReal x7124=((0.01275)*sj2);
IkReal x7125=((1.0)*sj2);
IkReal x7126=(cj5*sj6);
IkReal x7127=((1.0)*cj5);
IkReal x7128=(cj2*x7115);
IkReal x7129=(cj3*x7116);
IkReal x7130=((1.0)*cj6*r10);
IkReal x7131=((1.0)*cj6*r00);
IkReal x7132=(cj2*x7116);
IkReal x7133=(cj3*x7115);
evalcond[0]=(x7118+x7121+((cj2*x7129))+((sj3*x7115)));
evalcond[1]=(((r01*x7126))+(((-1.0)*x7115*x7125))+(((-1.0)*cj6*r00*x7127))+((r02*sj5)));
evalcond[2]=((((-1.0)*x7116*x7125))+(((-1.0)*cj6*r10*x7127))+((r12*sj5))+((r11*x7126)));
evalcond[3]=(x7123+x7120+(((-1.0)*x7116*x7119))+((cj3*x7128)));
evalcond[4]=(x7133+(((-1.0)*sj5*x7130))+(((-1.0)*x7119*x7132))+(((-1.0)*r12*x7127))+((r11*x7122)));
evalcond[5]=(((r01*x7122))+(((-1.0)*x7119*x7128))+(((-1.0)*x7129))+(((-1.0)*sj5*x7131))+(((-1.0)*r02*x7127)));
evalcond[6]=((((-1.0)*x7115*x7124))+(((0.42076)*x7116))+(((0.0003501)*x7123))+(((0.0003501)*x7120))+((x7117*x7128))+(((-1.0)*px))+(((0.31436)*x7129)));
evalcond[7]=((((-1.0)*x7116*x7124))+((x7117*x7132))+(((0.0003501)*x7121))+(((0.0003501)*x7118))+(((-1.0)*py))+(((-0.31436)*x7133))+(((-0.42076)*x7115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7134=cj3*cj3;
IkReal x7135=(sj3*sj6);
IkReal x7136=((1.0)*r10);
IkReal x7137=(cj6*sj3);
IkReal x7138=(cj2*cj3*sj6);
IkReal x7139=((1.0)*cj2*cj3*cj6);
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7139))+((r01*x7137))+((r00*x7135))+(((-1.0)*x7136*x7138)))),IkReal(((((-1.0)*r01*x7139))+(((-1.0)*r11*x7137))+(((-1.0)*x7135*x7136))+(((-1.0)*r00*x7138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign(((1.0)+((x7134*(cj2*cj2)))+(((-1.0)*x7134)))),-1);
if(!x7141.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x7140.value)+(((1.5707963267949)*(x7141.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7142=IKcos(j1);
IkReal x7143=IKsin(j1);
IkReal x7144=((0.31436)*sj3);
IkReal x7145=(cj6*r11);
IkReal x7146=((1.0)*sj3);
IkReal x7147=(r00*sj6);
IkReal x7148=(r10*sj6);
IkReal x7149=(sj5*sj6);
IkReal x7150=(cj6*r01);
IkReal x7151=((0.01275)*sj2);
IkReal x7152=((1.0)*sj2);
IkReal x7153=(cj5*sj6);
IkReal x7154=((1.0)*cj5);
IkReal x7155=(cj2*x7142);
IkReal x7156=(cj3*x7143);
IkReal x7157=((1.0)*cj6*r10);
IkReal x7158=((1.0)*cj6*r00);
IkReal x7159=(cj2*x7143);
IkReal x7160=(cj3*x7142);
evalcond[0]=(x7148+x7145+((sj3*x7142))+((cj2*x7156)));
evalcond[1]=(((r01*x7153))+((r02*sj5))+(((-1.0)*cj6*r00*x7154))+(((-1.0)*x7142*x7152)));
evalcond[2]=((((-1.0)*cj6*r10*x7154))+(((-1.0)*x7143*x7152))+((r11*x7153))+((r12*sj5)));
evalcond[3]=(x7147+x7150+((cj3*x7155))+(((-1.0)*x7143*x7146)));
evalcond[4]=(x7160+(((-1.0)*x7146*x7159))+(((-1.0)*r12*x7154))+((r11*x7149))+(((-1.0)*sj5*x7157)));
evalcond[5]=((((-1.0)*x7146*x7155))+((r01*x7149))+(((-1.0)*x7156))+(((-1.0)*sj5*x7158))+(((-1.0)*r02*x7154)));
evalcond[6]=((((0.0003501)*x7147))+(((0.0003501)*x7150))+(((0.31436)*x7156))+(((-1.0)*px))+((x7144*x7155))+(((0.42076)*x7143))+(((-1.0)*x7142*x7151)));
evalcond[7]=((((0.0003501)*x7148))+(((0.0003501)*x7145))+(((-1.0)*x7143*x7151))+(((-0.31436)*x7160))+(((-0.42076)*x7142))+(((-1.0)*py))+((x7144*x7159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7161=cj3*cj3;
IkReal x7162=(cj2*cj3);
IkReal x7163=(r00*sj6);
IkReal x7164=(cj6*r01);
IkReal x7165=(r10*sj6);
IkReal x7166=(cj6*r11);
IkReal x7167=((1.0)*sj3);
IkReal x7168=((1.0)+((x7161*(cj2*cj2)))+(((-1.0)*x7161)));
j1eval[0]=x7168;
j1eval[1]=IKsign(x7168);
j1eval[2]=((IKabs((((x7162*x7165))+((x7162*x7166))+(((-1.0)*x7163*x7167))+(((-1.0)*x7164*x7167)))))+(IKabs((((x7162*x7164))+((x7162*x7163))+((sj3*x7165))+((sj3*x7166))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7169=cj6*cj6;
IkReal x7170=r21*r21;
IkReal x7171=(sj2*sj3);
IkReal x7172=(cj6*r20);
IkReal x7173=((1.0)*cj2);
IkReal x7174=(r21*sj6);
IkReal x7175=(x7170+((x7169*(r20*r20)))+(r22*r22)+(((-1.0)*x7169*x7170))+(((-2.0)*x7172*x7174)));
j5eval[0]=x7175;
j5eval[1]=((IKabs((((cj2*x7172))+(((-1.0)*x7173*x7174))+((r22*x7171)))))+(IKabs(((((-1.0)*x7171*x7174))+(((-1.0)*r22*x7173))+((x7171*x7172))))));
j5eval[2]=IKsign(x7175);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7176=(cj2*cj3);
IkReal x7177=(sj2*sj3);
j1eval[0]=((((-1.0)*x7177))+(((33.0007843137255)*x7176))+(((24.6556862745098)*cj2)));
j1eval[1]=IKsign(((((0.31436)*cj2))+(((0.42076)*x7176))+(((-0.01275)*x7177))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((1.35991303789004)*px))+(((-0.0235864773548509)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0235864773548509)*px))+(((-1.35991303789004)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35991303789004)*px))+(((-0.0235864773548509)*py))))+IKsqr(((((-0.0235864773548509)*px))+(((-1.35991303789004)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35991303789004)*px))+(((-0.0235864773548509)*py))), ((((-0.0235864773548509)*px))+(((-1.35991303789004)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x7178=IKsin(j1);
IkReal x7179=IKcos(j1);
evalcond[0]=((((0.73512)*x7178))+(((-0.01275)*x7179))+(((-1.0)*px)));
evalcond[1]=((((-0.01275)*x7178))+(((-1.0)*py))+(((-0.73512)*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x7180=((1.0)*cj6);
IkReal x7181=((((-1.0)*r00*sj6))+(((-1.0)*r01*x7180)));
j5eval[0]=x7181;
j5eval[1]=IKsign(x7181);
j5eval[2]=((IKabs((cj1*r22)))+(IKabs((((cj1*r21*sj6))+(((-1.0)*cj1*r20*x7180))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x7182=((1.0)*cj6);
IkReal x7183=((((-1.0)*r10*sj6))+(((-1.0)*r11*x7182)));
j5eval[0]=x7183;
j5eval[1]=IKsign(x7183);
j5eval[2]=((IKabs((((r21*sj1*sj6))+(((-1.0)*r20*sj1*x7182)))))+(IKabs((r22*sj1))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x7184=cj6*cj6;
IkReal x7185=((1.0)*r21);
IkReal x7186=(cj6*sj6);
IkReal x7187=(((r11*r21))+((r12*r22))+(((-1.0)*r10*x7185*x7186))+(((-1.0)*r11*r20*x7186))+((r10*r20*x7184))+(((-1.0)*r11*x7184*x7185)));
j5eval[0]=x7187;
j5eval[1]=((IKabs((cj1*r22)))+(IKabs(((((-1.0)*cj1*sj6*x7185))+((cj1*cj6*r20))))));
j5eval[2]=IKsign(x7187);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7188=cj6*cj6;
IkReal x7189=((1.0)*r21);
IkReal x7190=(cj6*sj6);
CheckValue<IkReal> x7191 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj6*x7189))+((cj1*cj6*r20)))),IkReal((cj1*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7191.valid){
continue;
}
CheckValue<IkReal> x7192=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r10*x7189*x7190))+((r12*r22))+(((-1.0)*r11*r20*x7190))+(((-1.0)*r11*x7188*x7189))+((r10*r20*x7188)))),-1);
if(!x7192.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7191.value)+(((1.5707963267949)*(x7192.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7193=IKsin(j5);
IkReal x7194=IKcos(j5);
IkReal x7195=((1.0)*sj1);
IkReal x7196=(r01*sj6);
IkReal x7197=(r21*sj6);
IkReal x7198=(r11*sj6);
IkReal x7199=((1.0)*x7193);
IkReal x7200=((1.0)*x7194);
IkReal x7201=(cj6*x7194);
evalcond[0]=(((x7193*x7197))+(((-1.0)*cj6*r20*x7199))+(((-1.0)*r22*x7200)));
evalcond[1]=(((r20*x7201))+(((-1.0)*r22*x7199))+(((-1.0)*x7197*x7200)));
evalcond[2]=(cj1+(((-1.0)*cj6*r10*x7199))+((x7193*x7198))+(((-1.0)*r12*x7200)));
evalcond[3]=((((-1.0)*x7195))+((x7193*x7196))+(((-1.0)*cj6*r00*x7199))+(((-1.0)*r02*x7200)));
evalcond[4]=(((r00*x7201))+(((-1.0)*x7196*x7200))+(((-1.0)*r02*x7199))+(((-1.0)*cj1)));
evalcond[5]=(((r10*x7201))+(((-1.0)*x7195))+(((-1.0)*x7198*x7200))+(((-1.0)*r12*x7199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7202=((1.0)*cj6);
CheckValue<IkReal> x7203 = IKatan2WithCheck(IkReal((r22*sj1)),IkReal((((r21*sj1*sj6))+(((-1.0)*r20*sj1*x7202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7203.valid){
continue;
}
CheckValue<IkReal> x7204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x7202)))),-1);
if(!x7204.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7203.value)+(((1.5707963267949)*(x7204.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7205=IKsin(j5);
IkReal x7206=IKcos(j5);
IkReal x7207=((1.0)*sj1);
IkReal x7208=(r01*sj6);
IkReal x7209=(r21*sj6);
IkReal x7210=(r11*sj6);
IkReal x7211=((1.0)*x7205);
IkReal x7212=((1.0)*x7206);
IkReal x7213=(cj6*x7206);
evalcond[0]=(((x7205*x7209))+(((-1.0)*cj6*r20*x7211))+(((-1.0)*r22*x7212)));
evalcond[1]=((((-1.0)*x7209*x7212))+((r20*x7213))+(((-1.0)*r22*x7211)));
evalcond[2]=(cj1+((x7205*x7210))+(((-1.0)*r12*x7212))+(((-1.0)*cj6*r10*x7211)));
evalcond[3]=((((-1.0)*cj6*r00*x7211))+((x7205*x7208))+(((-1.0)*r02*x7212))+(((-1.0)*x7207)));
evalcond[4]=(((r00*x7213))+(((-1.0)*r02*x7211))+(((-1.0)*cj1))+(((-1.0)*x7208*x7212)));
evalcond[5]=(((r10*x7213))+(((-1.0)*r12*x7211))+(((-1.0)*x7210*x7212))+(((-1.0)*x7207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7214=((1.0)*cj6);
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal(((((-1.0)*cj1*r20*x7214))+((cj1*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
CheckValue<IkReal> x7216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7214))+(((-1.0)*r00*sj6)))),-1);
if(!x7216.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7215.value)+(((1.5707963267949)*(x7216.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7217=IKsin(j5);
IkReal x7218=IKcos(j5);
IkReal x7219=((1.0)*sj1);
IkReal x7220=(r01*sj6);
IkReal x7221=(r21*sj6);
IkReal x7222=(r11*sj6);
IkReal x7223=((1.0)*x7217);
IkReal x7224=((1.0)*x7218);
IkReal x7225=(cj6*x7218);
evalcond[0]=((((-1.0)*cj6*r20*x7223))+((x7217*x7221))+(((-1.0)*r22*x7224)));
evalcond[1]=(((r20*x7225))+(((-1.0)*x7221*x7224))+(((-1.0)*r22*x7223)));
evalcond[2]=(cj1+(((-1.0)*cj6*r10*x7223))+(((-1.0)*r12*x7224))+((x7217*x7222)));
evalcond[3]=((((-1.0)*r02*x7224))+(((-1.0)*x7219))+((x7217*x7220))+(((-1.0)*cj6*r00*x7223)));
evalcond[4]=((((-1.0)*r02*x7223))+((r00*x7225))+(((-1.0)*x7220*x7224))+(((-1.0)*cj1)));
evalcond[5]=(((r10*x7225))+(((-1.0)*x7219))+(((-1.0)*x7222*x7224))+(((-1.0)*r12*x7223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-1.11028649963459)*py))+(((9.26544969106822)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.11028649963459)*px))+(((-9.26544969106822)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.11028649963459)*py))+(((9.26544969106822)*px))))+IKsqr(((((-1.11028649963459)*px))+(((-9.26544969106822)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.11028649963459)*py))+(((9.26544969106822)*px))), ((((-1.11028649963459)*px))+(((-9.26544969106822)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x7226=IKsin(j1);
IkReal x7227=IKcos(j1);
evalcond[0]=((((0.1064)*x7226))+(((-1.0)*px))+(((-0.01275)*x7227)));
evalcond[1]=((((-1.0)*py))+(((-0.1064)*x7227))+(((-0.01275)*x7226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x7228=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x7228;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x7228);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x7229=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x7229;
j5eval[1]=((IKabs((((cj1*r21*sj6))+(((-1.0)*cj1*cj6*r20)))))+(IKabs((cj1*r22))));
j5eval[2]=IKsign(x7229);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x7230=cj6*cj6;
IkReal x7231=((1.0)*r21);
IkReal x7232=((1.0)*cj6*sj6);
IkReal x7233=((((-1.0)*r01*r20*x7232))+((r01*r21))+((r02*r22))+(((-1.0)*cj6*r00*sj6*x7231))+(((-1.0)*r01*x7230*x7231))+((r00*r20*x7230)));
j5eval[0]=x7233;
j5eval[1]=IKsign(x7233);
j5eval[2]=((IKabs((((cj6*r20*sj1))+(((-1.0)*sj1*sj6*x7231)))))+(IKabs((r22*sj1))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7234=cj6*cj6;
IkReal x7235=((1.0)*r21);
IkReal x7236=((1.0)*cj6*sj6);
CheckValue<IkReal> x7237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x7236))+((r01*r21))+(((-1.0)*r01*x7234*x7235))+((r02*r22))+(((-1.0)*cj6*r00*sj6*x7235))+((r00*r20*x7234)))),-1);
if(!x7237.valid){
continue;
}
CheckValue<IkReal> x7238 = IKatan2WithCheck(IkReal((((cj6*r20*sj1))+(((-1.0)*sj1*sj6*x7235)))),IkReal((r22*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x7238.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7237.value)))+(x7238.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7239=IKsin(j5);
IkReal x7240=IKcos(j5);
IkReal x7241=((1.0)*cj1);
IkReal x7242=(r01*sj6);
IkReal x7243=(r21*sj6);
IkReal x7244=(r11*sj6);
IkReal x7245=((1.0)*x7239);
IkReal x7246=((1.0)*x7240);
IkReal x7247=(cj6*x7240);
evalcond[0]=((((-1.0)*r22*x7246))+((x7239*x7243))+(((-1.0)*cj6*r20*x7245)));
evalcond[1]=((((-1.0)*r22*x7245))+((r20*x7247))+(((-1.0)*x7243*x7246)));
evalcond[2]=(sj1+(((-1.0)*cj6*r00*x7245))+(((-1.0)*r02*x7246))+((x7239*x7242)));
evalcond[3]=((((-1.0)*r12*x7246))+(((-1.0)*cj6*r10*x7245))+((x7239*x7244))+(((-1.0)*x7241)));
evalcond[4]=((((-1.0)*x7242*x7246))+((r00*x7247))+(((-1.0)*r02*x7245))+(((-1.0)*x7241)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r12*x7245))+(((-1.0)*x7244*x7246))+((r10*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7248=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x7248.valid){
continue;
}
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal((((cj1*r21*sj6))+(((-1.0)*cj1*cj6*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7248.value)))+(x7249.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7250=IKsin(j5);
IkReal x7251=IKcos(j5);
IkReal x7252=((1.0)*cj1);
IkReal x7253=(r01*sj6);
IkReal x7254=(r21*sj6);
IkReal x7255=(r11*sj6);
IkReal x7256=((1.0)*x7250);
IkReal x7257=((1.0)*x7251);
IkReal x7258=(cj6*x7251);
evalcond[0]=(((x7250*x7254))+(((-1.0)*r22*x7257))+(((-1.0)*cj6*r20*x7256)));
evalcond[1]=((((-1.0)*r22*x7256))+(((-1.0)*x7254*x7257))+((r20*x7258)));
evalcond[2]=(sj1+((x7250*x7253))+(((-1.0)*cj6*r00*x7256))+(((-1.0)*r02*x7257)));
evalcond[3]=((((-1.0)*x7252))+((x7250*x7255))+(((-1.0)*r12*x7257))+(((-1.0)*cj6*r10*x7256)));
evalcond[4]=((((-1.0)*x7252))+((r00*x7258))+(((-1.0)*r02*x7256))+(((-1.0)*x7253*x7257)));
evalcond[5]=((((-1.0)*sj1))+((r10*x7258))+(((-1.0)*r12*x7256))+(((-1.0)*x7255*x7257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7259 = IKatan2WithCheck(IkReal((r22*sj1)),IkReal((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7259.valid){
continue;
}
CheckValue<IkReal> x7260=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x7260.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7259.value)+(((1.5707963267949)*(x7260.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7261=IKsin(j5);
IkReal x7262=IKcos(j5);
IkReal x7263=((1.0)*cj1);
IkReal x7264=(r01*sj6);
IkReal x7265=(r21*sj6);
IkReal x7266=(r11*sj6);
IkReal x7267=((1.0)*x7261);
IkReal x7268=((1.0)*x7262);
IkReal x7269=(cj6*x7262);
evalcond[0]=((((-1.0)*r22*x7268))+(((-1.0)*cj6*r20*x7267))+((x7261*x7265)));
evalcond[1]=((((-1.0)*r22*x7267))+((r20*x7269))+(((-1.0)*x7265*x7268)));
evalcond[2]=(sj1+((x7261*x7264))+(((-1.0)*r02*x7268))+(((-1.0)*cj6*r00*x7267)));
evalcond[3]=((((-1.0)*x7263))+(((-1.0)*cj6*r10*x7267))+((x7261*x7266))+(((-1.0)*r12*x7268)));
evalcond[4]=((((-1.0)*x7264*x7268))+(((-1.0)*x7263))+((r00*x7269))+(((-1.0)*r02*x7267)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*x7266*x7268))+((r10*x7269))+(((-1.0)*r12*x7267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((1.35991303789004)*px))+(((0.0235864773548509)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0235864773548509)*px))+(((-1.35991303789004)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.35991303789004)*px))+(((0.0235864773548509)*py))))+IKsqr(((((0.0235864773548509)*px))+(((-1.35991303789004)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.35991303789004)*px))+(((0.0235864773548509)*py))), ((((0.0235864773548509)*px))+(((-1.35991303789004)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x7270=IKsin(j1);
IkReal x7271=IKcos(j1);
evalcond[0]=((((0.73512)*x7270))+(((0.01275)*x7271))+(((-1.0)*px)));
evalcond[1]=((((-0.73512)*x7271))+(((0.01275)*x7270))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x7272=((1.0)*cj6);
IkReal x7273=((((-1.0)*r00*sj6))+(((-1.0)*r01*x7272)));
j5eval[0]=x7273;
j5eval[1]=IKsign(x7273);
j5eval[2]=((IKabs(((((-1.0)*cj1*r20*x7272))+((cj1*r21*sj6)))))+(IKabs((cj1*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x7274=cj6*cj6;
IkReal x7275=((1.0)*cj6);
IkReal x7276=(r21*sj6);
IkReal x7277=(r01*r21);
IkReal x7278=(x7277+(((-1.0)*r00*x7275*x7276))+(((-1.0)*r01*r20*sj6*x7275))+((r00*r20*x7274))+((r02*r22))+(((-1.0)*x7274*x7277)));
j5eval[0]=x7278;
j5eval[1]=IKsign(x7278);
j5eval[2]=((IKabs((cj1*r22)))+(IKabs(((((-1.0)*cj1*r20*x7275))+((cj1*x7276))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=0;
sj3=0;
cj3=1.0;
IkReal x7279=cj6*cj6;
IkReal x7280=((1.0)*r11);
IkReal x7281=(cj6*sj6);
IkReal x7282=(((r11*r21))+(((-1.0)*r10*r21*x7281))+((r12*r22))+(((-1.0)*r21*x7279*x7280))+((r10*r20*x7279))+(((-1.0)*r20*x7280*x7281)));
j5eval[0]=x7282;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x7282);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7283=cj6*cj6;
IkReal x7284=((1.0)*r11);
IkReal x7285=(cj6*r20);
IkReal x7286=(r21*sj6);
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal((r22*sj1)),IkReal(((((-1.0)*sj1*x7285))+((sj1*x7286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
CheckValue<IkReal> x7288=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*sj6*x7284*x7285))+((r10*r20*x7283))+(((-1.0)*cj6*r10*x7286))+((r12*r22))+(((-1.0)*r21*x7283*x7284)))),-1);
if(!x7288.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7287.value)+(((1.5707963267949)*(x7288.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7289=IKsin(j5);
IkReal x7290=IKcos(j5);
IkReal x7291=(r01*sj6);
IkReal x7292=(r21*sj6);
IkReal x7293=(r11*sj6);
IkReal x7294=((1.0)*x7289);
IkReal x7295=((1.0)*x7290);
IkReal x7296=(cj6*x7290);
evalcond[0]=((((-1.0)*cj6*r20*x7294))+(((-1.0)*r22*x7295))+((x7289*x7292)));
evalcond[1]=((((-1.0)*r22*x7294))+(((-1.0)*x7292*x7295))+((r20*x7296)));
evalcond[2]=(cj1+(((-1.0)*cj6*r10*x7294))+(((-1.0)*r12*x7295))+((x7289*x7293)));
evalcond[3]=((((-1.0)*x7291*x7295))+cj1+(((-1.0)*r02*x7294))+((r00*x7296)));
evalcond[4]=(sj1+((r10*x7296))+(((-1.0)*x7293*x7295))+(((-1.0)*r12*x7294)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r02*x7295))+((x7289*x7291))+(((-1.0)*cj6*r00*x7294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7297=cj6*cj6;
IkReal x7298=((1.0)*cj6);
IkReal x7299=(r21*sj6);
IkReal x7300=(r01*r21);
CheckValue<IkReal> x7301 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal((((cj1*x7299))+(((-1.0)*cj1*r20*x7298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7301.valid){
continue;
}
CheckValue<IkReal> x7302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7298*x7299))+x7300+(((-1.0)*r01*r20*sj6*x7298))+((r00*r20*x7297))+(((-1.0)*x7297*x7300))+((r02*r22)))),-1);
if(!x7302.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7301.value)+(((1.5707963267949)*(x7302.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7303=IKsin(j5);
IkReal x7304=IKcos(j5);
IkReal x7305=(r01*sj6);
IkReal x7306=(r21*sj6);
IkReal x7307=(r11*sj6);
IkReal x7308=((1.0)*x7303);
IkReal x7309=((1.0)*x7304);
IkReal x7310=(cj6*x7304);
evalcond[0]=(((x7303*x7306))+(((-1.0)*cj6*r20*x7308))+(((-1.0)*r22*x7309)));
evalcond[1]=(((r20*x7310))+(((-1.0)*r22*x7308))+(((-1.0)*x7306*x7309)));
evalcond[2]=(cj1+((x7303*x7307))+(((-1.0)*cj6*r10*x7308))+(((-1.0)*r12*x7309)));
evalcond[3]=((((-1.0)*r02*x7308))+cj1+((r00*x7310))+(((-1.0)*x7305*x7309)));
evalcond[4]=(sj1+((r10*x7310))+(((-1.0)*r12*x7308))+(((-1.0)*x7307*x7309)));
evalcond[5]=((((-1.0)*r02*x7309))+(((-1.0)*sj1))+((x7303*x7305))+(((-1.0)*cj6*r00*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7311=((1.0)*cj6);
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal((((cj1*r21*sj6))+(((-1.0)*cj1*r20*x7311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x7311)))),-1);
if(!x7313.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7312.value)+(((1.5707963267949)*(x7313.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7314=IKsin(j5);
IkReal x7315=IKcos(j5);
IkReal x7316=(r01*sj6);
IkReal x7317=(r21*sj6);
IkReal x7318=(r11*sj6);
IkReal x7319=((1.0)*x7314);
IkReal x7320=((1.0)*x7315);
IkReal x7321=(cj6*x7315);
evalcond[0]=((((-1.0)*r22*x7320))+(((-1.0)*cj6*r20*x7319))+((x7314*x7317)));
evalcond[1]=((((-1.0)*x7317*x7320))+((r20*x7321))+(((-1.0)*r22*x7319)));
evalcond[2]=(cj1+(((-1.0)*cj6*r10*x7319))+((x7314*x7318))+(((-1.0)*r12*x7320)));
evalcond[3]=(cj1+(((-1.0)*x7316*x7320))+((r00*x7321))+(((-1.0)*r02*x7319)));
evalcond[4]=(sj1+((r10*x7321))+(((-1.0)*x7318*x7320))+(((-1.0)*r12*x7319)));
evalcond[5]=((((-1.0)*sj1))+((x7314*x7316))+(((-1.0)*cj6*r00*x7319))+(((-1.0)*r02*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((1.11028649963459)*py))+(((9.26544969106822)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.11028649963459)*px))+(((-9.26544969106822)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.11028649963459)*py))+(((9.26544969106822)*px))))+IKsqr(((((1.11028649963459)*px))+(((-9.26544969106822)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.11028649963459)*py))+(((9.26544969106822)*px))), ((((1.11028649963459)*px))+(((-9.26544969106822)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x7322=IKsin(j1);
IkReal x7323=IKcos(j1);
evalcond[0]=((((0.01275)*x7323))+(((-1.0)*px))+(((0.1064)*x7322)));
evalcond[1]=((((0.01275)*x7322))+(((-1.0)*py))+(((-0.1064)*x7323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x7324=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x7324;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x7324);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x7325=cj6*cj6;
IkReal x7326=((1.0)*cj6);
IkReal x7327=(r21*sj6);
IkReal x7328=(r01*r21);
IkReal x7329=(((r00*r20*x7325))+x7328+(((-1.0)*r01*r20*sj6*x7326))+(((-1.0)*x7325*x7328))+((r02*r22))+(((-1.0)*r00*x7326*x7327)));
j5eval[0]=x7329;
j5eval[1]=IKsign(x7329);
j5eval[2]=((IKabs((((cj1*x7327))+(((-1.0)*cj1*r20*x7326)))))+(IKabs((cj1*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j3=3.14159265358979;
sj3=0;
cj3=-1.0;
IkReal x7330=cj6*cj6;
IkReal x7331=((1.0)*r11);
IkReal x7332=(cj6*sj6);
IkReal x7333=((((-1.0)*r21*x7330*x7331))+((r11*r21))+((r12*r22))+(((-1.0)*r20*x7331*x7332))+(((-1.0)*r10*r21*x7332))+((r10*r20*x7330)));
j5eval[0]=x7333;
j5eval[1]=((IKabs((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))))+(IKabs((r22*sj1))));
j5eval[2]=IKsign(x7333);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7334=cj6*cj6;
IkReal x7335=((1.0)*r11);
IkReal x7336=(cj6*r20);
IkReal x7337=(r21*sj6);
CheckValue<IkReal> x7338=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*cj6*r10*x7337))+((r12*r22))+((r10*r20*x7334))+(((-1.0)*sj6*x7335*x7336))+(((-1.0)*r21*x7334*x7335)))),-1);
if(!x7338.valid){
continue;
}
CheckValue<IkReal> x7339 = IKatan2WithCheck(IkReal((r22*sj1)),IkReal((((sj1*x7337))+(((-1.0)*sj1*x7336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7339.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7338.value)))+(x7339.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7340=IKsin(j5);
IkReal x7341=IKcos(j5);
IkReal x7342=(r01*sj6);
IkReal x7343=(r21*sj6);
IkReal x7344=(r11*sj6);
IkReal x7345=((1.0)*x7340);
IkReal x7346=((1.0)*x7341);
IkReal x7347=(cj6*x7341);
evalcond[0]=((((-1.0)*cj6*r20*x7345))+(((-1.0)*r22*x7346))+((x7340*x7343)));
evalcond[1]=((((-1.0)*r22*x7345))+((r20*x7347))+(((-1.0)*x7343*x7346)));
evalcond[2]=((((-1.0)*cj6*r00*x7345))+sj1+((x7340*x7342))+(((-1.0)*r02*x7346)));
evalcond[3]=(cj1+(((-1.0)*x7342*x7346))+((r00*x7347))+(((-1.0)*r02*x7345)));
evalcond[4]=(sj1+(((-1.0)*r12*x7345))+(((-1.0)*x7344*x7346))+((r10*x7347)));
evalcond[5]=((((-1.0)*r12*x7346))+((x7340*x7344))+(((-1.0)*cj6*r10*x7345))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7348=cj6*cj6;
IkReal x7349=((1.0)*cj6);
IkReal x7350=(r21*sj6);
IkReal x7351=(r01*r21);
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal((cj1*r22)),IkReal((((cj1*x7350))+(((-1.0)*cj1*r20*x7349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
CheckValue<IkReal> x7353=IKPowWithIntegerCheck(IKsign((x7351+(((-1.0)*r01*r20*sj6*x7349))+(((-1.0)*x7348*x7351))+(((-1.0)*r00*x7349*x7350))+((r02*r22))+((r00*r20*x7348)))),-1);
if(!x7353.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7352.value)+(((1.5707963267949)*(x7353.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7354=IKsin(j5);
IkReal x7355=IKcos(j5);
IkReal x7356=(r01*sj6);
IkReal x7357=(r21*sj6);
IkReal x7358=(r11*sj6);
IkReal x7359=((1.0)*x7354);
IkReal x7360=((1.0)*x7355);
IkReal x7361=(cj6*x7355);
evalcond[0]=((((-1.0)*r22*x7360))+(((-1.0)*cj6*r20*x7359))+((x7354*x7357)));
evalcond[1]=((((-1.0)*r22*x7359))+((r20*x7361))+(((-1.0)*x7357*x7360)));
evalcond[2]=(sj1+(((-1.0)*r02*x7360))+((x7354*x7356))+(((-1.0)*cj6*r00*x7359)));
evalcond[3]=(((r00*x7361))+cj1+(((-1.0)*r02*x7359))+(((-1.0)*x7356*x7360)));
evalcond[4]=(sj1+(((-1.0)*r12*x7359))+((r10*x7361))+(((-1.0)*x7358*x7360)));
evalcond[5]=((((-1.0)*r12*x7360))+(((-1.0)*cj6*r10*x7359))+(((-1.0)*cj1))+((x7354*x7358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7362 = IKatan2WithCheck(IkReal((r22*sj1)),IkReal((((r21*sj1*sj6))+(((-1.0)*cj6*r20*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7362.valid){
continue;
}
CheckValue<IkReal> x7363=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x7363.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7362.value)+(((1.5707963267949)*(x7363.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7364=IKsin(j5);
IkReal x7365=IKcos(j5);
IkReal x7366=(r01*sj6);
IkReal x7367=(r21*sj6);
IkReal x7368=(r11*sj6);
IkReal x7369=((1.0)*x7364);
IkReal x7370=((1.0)*x7365);
IkReal x7371=(cj6*x7365);
evalcond[0]=((((-1.0)*r22*x7370))+(((-1.0)*cj6*r20*x7369))+((x7364*x7367)));
evalcond[1]=(((r20*x7371))+(((-1.0)*r22*x7369))+(((-1.0)*x7367*x7370)));
evalcond[2]=(sj1+((x7364*x7366))+(((-1.0)*r02*x7370))+(((-1.0)*cj6*r00*x7369)));
evalcond[3]=(cj1+((r00*x7371))+(((-1.0)*r02*x7369))+(((-1.0)*x7366*x7370)));
evalcond[4]=(sj1+(((-1.0)*r12*x7369))+(((-1.0)*x7368*x7370))+((r10*x7371)));
evalcond[5]=(((x7364*x7368))+(((-1.0)*r12*x7370))+(((-1.0)*cj1))+(((-1.0)*cj6*r10*x7369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7372=(cj6*r01);
IkReal x7373=(cj2*sj3);
IkReal x7374=((0.01275)*sj2);
IkReal x7375=(r00*sj6);
IkReal x7376=(cj2*cj3);
IkReal x7377=((0.0003501)*sj3);
IkReal x7378=((0.31436)*x7375);
CheckValue<IkReal> x7379=IKPowWithIntegerCheck(IKsign(((((0.31436)*cj2))+(((-1.0)*sj3*x7374))+(((0.42076)*x7376)))),-1);
if(!x7379.valid){
continue;
}
CheckValue<IkReal> x7380 = IKatan2WithCheck(IkReal(((((-0.31436)*x7372*x7373))+(((-0.0003501)*x7372*x7376))+(((-0.0003501)*x7375*x7376))+(((-1.0)*x7373*x7378))+((x7372*x7374))+((px*x7376))+((x7374*x7375)))),IkReal(((((0.31436)*cj3*x7372))+(((-1.0)*x7375*x7377))+(((-1.0)*x7372*x7377))+((px*sj3))+((cj3*x7378))+(((0.42076)*x7375))+(((0.42076)*x7372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7380.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7379.value)))+(x7380.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x7381=IKcos(j1);
IkReal x7382=IKsin(j1);
IkReal x7383=((0.31436)*sj3);
IkReal x7384=((0.31436)*cj3);
IkReal x7385=(r00*sj6);
IkReal x7386=((0.0003501)*cj6);
IkReal x7387=((0.01275)*sj2);
IkReal x7388=((1.0)*cj6);
IkReal x7389=(r10*sj6);
IkReal x7390=(cj2*x7381);
IkReal x7391=(cj2*x7382);
evalcond[0]=(((sj3*x7381))+((cj3*x7391))+(((-1.0)*x7389))+(((-1.0)*r11*x7388)));
evalcond[1]=((((-1.0)*sj3*x7382))+((cj3*x7390))+(((-1.0)*x7385))+(((-1.0)*r01*x7388)));
evalcond[2]=((((-1.0)*x7381*x7387))+(((0.0003501)*x7385))+((r01*x7386))+(((-1.0)*px))+(((0.42076)*x7382))+((x7383*x7390))+((x7382*x7384)));
evalcond[3]=((((-1.0)*x7381*x7384))+(((-0.42076)*x7381))+(((0.0003501)*x7389))+(((-1.0)*py))+((x7383*x7391))+((r11*x7386))+(((-1.0)*x7382*x7387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7392=((1.0)*sj6);
IkReal x7393=((1.0)*cj1*sj2);
IkReal x7394=((((-1.0)*cj6*r11))+(((-1.0)*r10*x7392)));
j5eval[0]=x7394;
j5eval[1]=IKsign(x7394);
j5eval[2]=((IKabs((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj6*r20*x7393))+(((-1.0)*cj2*r01*x7392)))))+(IKabs(((((-1.0)*r22*x7393))+((cj2*r02))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7395=cj6*cj6;
IkReal x7396=r21*r21;
IkReal x7397=(sj2*sj3);
IkReal x7398=(cj6*r20);
IkReal x7399=((1.0)*cj2);
IkReal x7400=(r21*sj6);
IkReal x7401=(x7396+(r22*r22)+(((-1.0)*x7395*x7396))+((x7395*(r20*r20)))+(((-2.0)*x7398*x7400)));
j5eval[0]=x7401;
j5eval[1]=((IKabs(((((-1.0)*x7399*x7400))+((r22*x7397))+((cj2*x7398)))))+(IKabs((((x7397*x7398))+(((-1.0)*r22*x7399))+(((-1.0)*x7397*x7400))))));
j5eval[2]=IKsign(x7401);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7402=cj6*cj6;
IkReal x7403=((1.0)*sj2);
IkReal x7404=(r01*sj6);
IkReal x7405=(cj6*r00);
IkReal x7406=(sj2*sj3);
IkReal x7407=(r21*sj6);
IkReal x7408=(cj6*r20);
IkReal x7409=(r01*r21);
IkReal x7410=((((-1.0)*x7402*x7409))+((r00*r20*x7402))+(((-1.0)*x7404*x7408))+(((-1.0)*x7405*x7407))+x7409+((r02*r22)));
j5eval[0]=x7410;
j5eval[1]=IKsign(x7410);
j5eval[2]=((IKabs((((r02*x7406))+(((-1.0)*cj1*x7403*x7407))+((cj1*sj2*x7408)))))+(IKabs(((((-1.0)*cj1*r22*x7403))+((x7405*x7406))+(((-1.0)*sj3*x7403*x7404))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x7411=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x7411;
j5eval[1]=IKsign(x7411);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x7412=((1.0)*sj6);
IkReal x7413=((((-1.0)*cj6*r11))+(((-1.0)*r10*x7412)));
j5eval[0]=x7413;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7412))+((cj6*r00))))));
j5eval[2]=IKsign(x7413);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x7414=r21*r21;
IkReal x7415=cj6*cj6;
IkReal x7416=(r21*sj6);
IkReal x7417=(cj6*r20);
IkReal x7418=((((-1.0)*x7415*(r20*r20)))+(((-1.0)*x7414))+(((-1.0)*(r22*r22)))+(((2.0)*x7416*x7417))+((x7414*x7415)));
j5eval[0]=x7418;
j5eval[1]=IKsign(x7418);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7417))+x7416))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7419=r21*r21;
IkReal x7420=cj6*cj6;
IkReal x7421=(r21*sj6);
IkReal x7422=(cj6*r20);
CheckValue<IkReal> x7423 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7422))+x7421)),IKFAST_ATAN2_MAGTHRESH);
if(!x7423.valid){
continue;
}
CheckValue<IkReal> x7424=IKPowWithIntegerCheck(IKsign(((((2.0)*x7421*x7422))+((x7419*x7420))+(((-1.0)*x7419))+(((-1.0)*(r22*r22)))+(((-1.0)*x7420*(r20*r20))))),-1);
if(!x7424.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7423.value)+(((1.5707963267949)*(x7424.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7425=IKsin(j5);
IkReal x7426=IKcos(j5);
IkReal x7427=((1.0)*sj3);
IkReal x7428=(sj6*x7425);
IkReal x7429=((1.0)*x7425);
IkReal x7430=((1.0)*x7426);
IkReal x7431=(cj6*x7426);
IkReal x7432=(sj6*x7430);
IkReal x7433=(cj6*x7429);
evalcond[0]=((((-1.0)*r22*x7430))+((r21*x7428))+(((-1.0)*r20*x7433)));
evalcond[1]=((((-1.0)*r01*x7432))+((r00*x7431))+(((-1.0)*r02*x7429)));
evalcond[2]=((((-1.0)*r11*x7432))+((r10*x7431))+(((-1.0)*r12*x7429)));
evalcond[3]=((-1.0)+(((-1.0)*r22*x7429))+((r20*x7431))+(((-1.0)*r21*x7432)));
evalcond[4]=((((-1.0)*r12*x7430))+(((-1.0)*r10*x7433))+(((-1.0)*sj1*x7427))+((r11*x7428))+((cj1*cj3)));
evalcond[5]=(((r01*x7428))+(((-1.0)*r00*x7433))+(((-1.0)*r02*x7430))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x7427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7434=((1.0)*sj6);
CheckValue<IkReal> x7435=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x7434)))),-1);
if(!x7435.valid){
continue;
}
CheckValue<IkReal> x7436 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7434))+((cj6*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7436.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7435.value)))+(x7436.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7437=IKsin(j5);
IkReal x7438=IKcos(j5);
IkReal x7439=((1.0)*sj3);
IkReal x7440=(sj6*x7437);
IkReal x7441=((1.0)*x7437);
IkReal x7442=((1.0)*x7438);
IkReal x7443=(cj6*x7438);
IkReal x7444=(sj6*x7442);
IkReal x7445=(cj6*x7441);
evalcond[0]=(((r21*x7440))+(((-1.0)*r22*x7442))+(((-1.0)*r20*x7445)));
evalcond[1]=((((-1.0)*r01*x7444))+((r00*x7443))+(((-1.0)*r02*x7441)));
evalcond[2]=(((r10*x7443))+(((-1.0)*r11*x7444))+(((-1.0)*r12*x7441)));
evalcond[3]=((-1.0)+((r20*x7443))+(((-1.0)*r22*x7441))+(((-1.0)*r21*x7444)));
evalcond[4]=((((-1.0)*r10*x7445))+((r11*x7440))+(((-1.0)*sj1*x7439))+((cj1*cj3))+(((-1.0)*r12*x7442)));
evalcond[5]=((((-1.0)*r00*x7445))+((r01*x7440))+(((-1.0)*r02*x7442))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x7439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7446=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x7446.valid){
continue;
}
CheckValue<IkReal> x7447 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7447.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7446.value)))+(x7447.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7448=IKsin(j5);
IkReal x7449=IKcos(j5);
IkReal x7450=((1.0)*sj3);
IkReal x7451=(sj6*x7448);
IkReal x7452=((1.0)*x7448);
IkReal x7453=((1.0)*x7449);
IkReal x7454=(cj6*x7449);
IkReal x7455=(sj6*x7453);
IkReal x7456=(cj6*x7452);
evalcond[0]=(((r21*x7451))+(((-1.0)*r22*x7453))+(((-1.0)*r20*x7456)));
evalcond[1]=((((-1.0)*r01*x7455))+((r00*x7454))+(((-1.0)*r02*x7452)));
evalcond[2]=(((r10*x7454))+(((-1.0)*r12*x7452))+(((-1.0)*r11*x7455)));
evalcond[3]=((-1.0)+((r20*x7454))+(((-1.0)*r22*x7452))+(((-1.0)*r21*x7455)));
evalcond[4]=((((-1.0)*r10*x7456))+((r11*x7451))+(((-1.0)*sj1*x7450))+((cj1*cj3))+(((-1.0)*r12*x7453)));
evalcond[5]=((((-1.0)*cj1*x7450))+(((-1.0)*r00*x7456))+((r01*x7451))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x7457=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x7457;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj6))+((cj6*r00))))));
j5eval[2]=IKsign(x7457);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x7458=((1.0)*sj6);
IkReal x7459=((((-1.0)*r00*x7458))+(((-1.0)*cj6*r01)));
j5eval[0]=x7459;
j5eval[1]=IKsign(x7459);
j5eval[2]=((IKabs(r12))+(IKabs((((cj6*r10))+(((-1.0)*r11*x7458))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x7460=cj6*cj6;
IkReal x7461=r21*r21;
IkReal x7462=(r21*sj6);
IkReal x7463=(cj6*r20);
IkReal x7464=((r22*r22)+(((-2.0)*x7462*x7463))+x7461+(((-1.0)*x7460*x7461))+((x7460*(r20*r20))));
j5eval[0]=x7464;
j5eval[1]=IKsign(x7464);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7463))+x7462))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7465=cj6*cj6;
IkReal x7466=r21*r21;
IkReal x7467=(r21*sj6);
IkReal x7468=(cj6*r20);
CheckValue<IkReal> x7469 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7468))+x7467)),IKFAST_ATAN2_MAGTHRESH);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7467*x7468))+(r22*r22)+((x7465*(r20*r20)))+(((-1.0)*x7465*x7466))+x7466)),-1);
if(!x7470.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7469.value)+(((1.5707963267949)*(x7470.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7471=IKsin(j5);
IkReal x7472=IKcos(j5);
IkReal x7473=(sj6*x7471);
IkReal x7474=((1.0)*x7471);
IkReal x7475=((1.0)*x7472);
IkReal x7476=(cj6*x7472);
IkReal x7477=(sj6*x7475);
IkReal x7478=(cj6*x7474);
evalcond[0]=((((-1.0)*r20*x7478))+(((-1.0)*r22*x7475))+((r21*x7473)));
evalcond[1]=((((-1.0)*r02*x7474))+(((-1.0)*r01*x7477))+((r00*x7476)));
evalcond[2]=(((r10*x7476))+(((-1.0)*r11*x7477))+(((-1.0)*r12*x7474)));
evalcond[3]=((1.0)+((r20*x7476))+(((-1.0)*r21*x7477))+(((-1.0)*r22*x7474)));
evalcond[4]=(((sj1*sj3))+((cj1*cj3))+((r11*x7473))+(((-1.0)*r10*x7478))+(((-1.0)*r12*x7475)));
evalcond[5]=((((-1.0)*r02*x7475))+(((-1.0)*r00*x7478))+((cj1*sj3))+(((-1.0)*cj3*sj1))+((r01*x7473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7479=((1.0)*sj6);
CheckValue<IkReal> x7480 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7479))+((cj6*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7480.valid){
continue;
}
CheckValue<IkReal> x7481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7479))+(((-1.0)*cj6*r01)))),-1);
if(!x7481.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7480.value)+(((1.5707963267949)*(x7481.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7482=IKsin(j5);
IkReal x7483=IKcos(j5);
IkReal x7484=(sj6*x7482);
IkReal x7485=((1.0)*x7482);
IkReal x7486=((1.0)*x7483);
IkReal x7487=(cj6*x7483);
IkReal x7488=(sj6*x7486);
IkReal x7489=(cj6*x7485);
evalcond[0]=((((-1.0)*r20*x7489))+(((-1.0)*r22*x7486))+((r21*x7484)));
evalcond[1]=(((r00*x7487))+(((-1.0)*r01*x7488))+(((-1.0)*r02*x7485)));
evalcond[2]=(((r10*x7487))+(((-1.0)*r11*x7488))+(((-1.0)*r12*x7485)));
evalcond[3]=((1.0)+((r20*x7487))+(((-1.0)*r21*x7488))+(((-1.0)*r22*x7485)));
evalcond[4]=(((r11*x7484))+((sj1*sj3))+(((-1.0)*r10*x7489))+((cj1*cj3))+(((-1.0)*r12*x7486)));
evalcond[5]=(((cj1*sj3))+((r01*x7484))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x7489))+(((-1.0)*r02*x7486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
CheckValue<IkReal> x7491=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x7491.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7490.value)+(((1.5707963267949)*(x7491.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7492=IKsin(j5);
IkReal x7493=IKcos(j5);
IkReal x7494=(sj6*x7492);
IkReal x7495=((1.0)*x7492);
IkReal x7496=((1.0)*x7493);
IkReal x7497=(cj6*x7493);
IkReal x7498=(sj6*x7496);
IkReal x7499=(cj6*x7495);
evalcond[0]=((((-1.0)*r20*x7499))+(((-1.0)*r22*x7496))+((r21*x7494)));
evalcond[1]=(((r00*x7497))+(((-1.0)*r01*x7498))+(((-1.0)*r02*x7495)));
evalcond[2]=(((r10*x7497))+(((-1.0)*r11*x7498))+(((-1.0)*r12*x7495)));
evalcond[3]=((1.0)+((r20*x7497))+(((-1.0)*r21*x7498))+(((-1.0)*r22*x7495)));
evalcond[4]=(((r11*x7494))+((sj1*sj3))+(((-1.0)*r10*x7499))+((cj1*cj3))+(((-1.0)*r12*x7496)));
evalcond[5]=(((cj1*sj3))+((r01*x7494))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x7499))+(((-1.0)*r02*x7496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7500=((-1.0)*r10);
IkReal x7502 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7502)==0){
continue;
}
IkReal x7501=pow(x7502,-0.5);
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7500),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
IkReal gconst60=((-1.0)*(x7503.value));
IkReal gconst61=(r11*x7501);
IkReal gconst62=(x7500*x7501);
CheckValue<IkReal> x7504 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7504.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7504.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7505=(sj1*sj2);
CheckValue<IkReal> x7506 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*gconst61*r11))+((gconst61*r21*x7505))+(((-1.0)*gconst62*r20*x7505))+((cj2*gconst62*r10)))),IkReal(((((-1.0)*r22*x7505))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7506.valid){
continue;
}
CheckValue<IkReal> x7507=IKPowWithIntegerCheck(IKsign((((gconst61*r00))+((gconst62*r01)))),-1);
if(!x7507.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7506.value)+(((1.5707963267949)*(x7507.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7508=IKsin(j5);
IkReal x7509=IKcos(j5);
IkReal x7510=((1.0)*sj2);
IkReal x7511=(gconst61*x7508);
IkReal x7512=((1.0)*cj2*sj3);
IkReal x7513=(gconst62*x7509);
IkReal x7514=((1.0)*x7508);
IkReal x7515=((1.0)*x7509);
IkReal x7516=(gconst61*x7515);
IkReal x7517=(gconst62*x7514);
evalcond[0]=(((sj2*sj3))+((r21*x7511))+(((-1.0)*r20*x7517))+(((-1.0)*r22*x7515)));
evalcond[1]=(((r20*x7513))+(((-1.0)*r21*x7516))+(((-1.0)*cj2))+(((-1.0)*r22*x7514)));
evalcond[2]=(((r00*x7513))+(((-1.0)*cj1*x7510))+(((-1.0)*r01*x7516))+(((-1.0)*r02*x7514)));
evalcond[3]=(((r10*x7513))+(((-1.0)*sj1*x7510))+(((-1.0)*r12*x7514))+(((-1.0)*r11*x7516)));
evalcond[4]=((((-1.0)*r10*x7517))+((r11*x7511))+(((-1.0)*sj1*x7512))+((cj1*cj3))+(((-1.0)*r12*x7515)));
evalcond[5]=(((r01*x7511))+(((-1.0)*cj1*x7512))+(((-1.0)*r00*x7517))+(((-1.0)*r02*x7515))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7518=((-1.0)*r11);
IkReal x7520 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7520)==0){
continue;
}
IkReal x7519=pow(x7520,-0.5);
CheckValue<IkReal> x7521 = IKatan2WithCheck(IkReal(x7518),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7521.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x7521.value))));
IkReal gconst64=(x7518*x7519);
IkReal gconst65=((1.0)*r10*x7519);
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7522.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x7523=((-1.0)*r11);
CheckValue<IkReal> x7526 = IKatan2WithCheck(IkReal(x7523),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7526.valid){
continue;
}
IkReal x7524=((1.0)*(x7526.value));
IkReal x7525=x7519;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj6=gconst64;
cj6=gconst65;
j6=((3.14159265)+(((-1.0)*x7524)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x7524)));
IkReal gconst64=(x7523*x7525);
IkReal gconst65=((1.0)*r10*x7525);
IkReal x7527=r12*r12;
IkReal x7528=(cj2*r02);
CheckValue<IkReal> x7533=IKPowWithIntegerCheck(((-1.0)+x7527),-1);
if(!x7533.valid){
continue;
}
IkReal x7529=x7533.value;
IkReal x7530=((1.0)*cj1*r22*sj2);
if((((1.0)+(((-1.0)*x7527)))) < -0.00001)
continue;
IkReal x7531=IKsqrt(((1.0)+(((-1.0)*x7527))));
IkReal x7532=(r12*x7529*x7531);
j5eval[0]=0;
j5eval[1]=0;
j5eval[2]=((IKabs((((x7528*x7532))+(((-1.0)*x7530*x7532)))))+(IKabs(((((-1.0)*x7530))+x7528))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7534=(gconst65*r20);
IkReal x7535=(sj2*sj3);
IkReal x7536=(gconst64*r21);
IkReal x7537=((1.0)*cj2);
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(((((-1.0)*x7535*x7536))+(((-1.0)*r22*x7537))+((x7534*x7535)))),IkReal((((r22*x7535))+(((-1.0)*x7536*x7537))+((cj2*x7534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7534*x7536))+(x7534*x7534)+(x7536*x7536))),-1);
if(!x7539.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7538.value)+(((1.5707963267949)*(x7539.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7540=IKsin(j5);
IkReal x7541=IKcos(j5);
IkReal x7542=(gconst64*r01);
IkReal x7543=(gconst65*r00);
IkReal x7544=(gconst64*r11);
IkReal x7545=(gconst65*r20);
IkReal x7546=((1.0)*sj1);
IkReal x7547=(cj2*sj3);
IkReal x7548=((1.0)*cj1);
IkReal x7549=(gconst64*r21);
IkReal x7550=(gconst65*r10);
IkReal x7551=((1.0)*x7541);
IkReal x7552=((1.0)*x7540);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x7551))+(((-1.0)*x7545*x7552))+((x7540*x7549)));
evalcond[1]=((((-1.0)*r22*x7552))+((x7541*x7545))+(((-1.0)*cj2))+(((-1.0)*x7549*x7551)));
evalcond[2]=((((-1.0)*x7542*x7551))+(((-1.0)*sj2*x7548))+((x7541*x7543))+(((-1.0)*r02*x7552)));
evalcond[3]=((((-1.0)*x7544*x7551))+(((-1.0)*sj2*x7546))+((x7541*x7550))+(((-1.0)*r12*x7552)));
evalcond[4]=((((-1.0)*x7550*x7552))+(((-1.0)*r12*x7551))+((cj1*cj3))+(((-1.0)*x7546*x7547))+((x7540*x7544)));
evalcond[5]=((((-1.0)*x7543*x7552))+(((-1.0)*x7547*x7548))+(((-1.0)*cj3*x7546))+((x7540*x7542))+(((-1.0)*r02*x7551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7553=((1.0)*gconst64);
IkReal x7554=((1.0)*cj1*sj2);
CheckValue<IkReal> x7555 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r01*x7553))+((cj1*gconst64*r21*sj2))+(((-1.0)*gconst65*r20*x7554))+((cj2*gconst65*r00)))),IkReal(((((-1.0)*r22*x7554))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7553))+(((-1.0)*gconst65*r11)))),-1);
if(!x7556.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7555.value)+(((1.5707963267949)*(x7556.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j5);
IkReal x7558=IKcos(j5);
IkReal x7559=(gconst64*r01);
IkReal x7560=(gconst65*r00);
IkReal x7561=(gconst64*r11);
IkReal x7562=(gconst65*r20);
IkReal x7563=((1.0)*sj1);
IkReal x7564=(cj2*sj3);
IkReal x7565=((1.0)*cj1);
IkReal x7566=(gconst64*r21);
IkReal x7567=(gconst65*r10);
IkReal x7568=((1.0)*x7558);
IkReal x7569=((1.0)*x7557);
evalcond[0]=(((sj2*sj3))+(((-1.0)*x7562*x7569))+(((-1.0)*r22*x7568))+((x7557*x7566)));
evalcond[1]=((((-1.0)*r22*x7569))+(((-1.0)*x7566*x7568))+((x7558*x7562))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r02*x7569))+(((-1.0)*sj2*x7565))+(((-1.0)*x7559*x7568))+((x7558*x7560)));
evalcond[3]=((((-1.0)*sj2*x7563))+(((-1.0)*r12*x7569))+(((-1.0)*x7561*x7568))+((x7558*x7567)));
evalcond[4]=((((-1.0)*x7563*x7564))+(((-1.0)*x7567*x7569))+((x7557*x7561))+(((-1.0)*r12*x7568))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r02*x7568))+(((-1.0)*x7564*x7565))+((x7557*x7559))+(((-1.0)*cj3*x7563))+(((-1.0)*x7560*x7569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x7570=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7570);
rxp0_2=(py*r00);
rxp1_0=(r21*x7570);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x7571=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7571);
rxp0_2=(py*r00);
rxp1_0=(r21*x7571);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x7572=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7572);
rxp0_2=(py*r00);
rxp1_0=(r21*x7572);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(r12,-1);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574=IKPowWithIntegerCheck(((((-1.0)*r01*sj6))+((cj6*r00))),-1);
if(!x7574.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x7573.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x7574.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x7573.value)))+IKsqr((cj1*sj2*(x7574.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x7573.value)), (cj1*sj2*(x7574.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7575=IKsin(j5);
IkReal x7576=IKcos(j5);
IkReal x7577=((1.0)*sj1);
IkReal x7578=(cj2*sj3);
IkReal x7579=((1.0)*cj1);
IkReal x7580=(cj6*x7576);
IkReal x7581=(sj6*x7575);
IkReal x7582=((1.0)*x7575);
IkReal x7583=((1.0)*sj6*x7576);
evalcond[0]=((((-1.0)*sj2*x7577))+(((-1.0)*r12*x7582)));
evalcond[1]=((((-1.0)*r12*x7576))+(((-1.0)*x7577*x7578))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*cj6*r20*x7582))+((r21*x7581)));
evalcond[3]=((((-1.0)*r21*x7583))+(((-1.0)*cj2))+((r20*x7580)));
evalcond[4]=((((-1.0)*r01*x7583))+((r00*x7580))+(((-1.0)*sj2*x7579)));
evalcond[5]=((((-1.0)*cj3*x7577))+(((-1.0)*x7578*x7579))+(((-1.0)*cj6*r00*x7582))+((r01*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7584=IKPowWithIntegerCheck(r12,-1);
if(!x7584.valid){
continue;
}
CheckValue<IkReal> x7585=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x7585.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x7584.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x7585.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x7584.value)))+IKsqr((cj2*(x7585.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x7584.value)), (cj2*(x7585.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7586=IKsin(j5);
IkReal x7587=IKcos(j5);
IkReal x7588=((1.0)*sj1);
IkReal x7589=(cj2*sj3);
IkReal x7590=((1.0)*cj1);
IkReal x7591=(cj6*x7587);
IkReal x7592=(sj6*x7586);
IkReal x7593=((1.0)*x7586);
IkReal x7594=((1.0)*sj6*x7587);
evalcond[0]=((((-1.0)*sj2*x7588))+(((-1.0)*r12*x7593)));
evalcond[1]=((((-1.0)*r12*x7587))+((cj1*cj3))+(((-1.0)*x7588*x7589)));
evalcond[2]=(((sj2*sj3))+((r21*x7592))+(((-1.0)*cj6*r20*x7593)));
evalcond[3]=(((r20*x7591))+(((-1.0)*r21*x7594))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x7590))+((r00*x7591))+(((-1.0)*r01*x7594)));
evalcond[5]=((((-1.0)*cj3*x7588))+(((-1.0)*x7589*x7590))+(((-1.0)*cj6*r00*x7593))+((r01*x7592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7595=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x7595.valid){
continue;
}
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal(((-1.0)*sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7595.value)))+(x7596.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7597=IKsin(j5);
IkReal x7598=IKcos(j5);
IkReal x7599=((1.0)*sj1);
IkReal x7600=(cj2*sj3);
IkReal x7601=((1.0)*cj1);
IkReal x7602=(cj6*x7598);
IkReal x7603=(sj6*x7597);
IkReal x7604=((1.0)*x7597);
IkReal x7605=((1.0)*sj6*x7598);
evalcond[0]=((((-1.0)*sj2*x7599))+(((-1.0)*r12*x7604)));
evalcond[1]=((((-1.0)*r12*x7598))+((cj1*cj3))+(((-1.0)*x7599*x7600)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*cj6*r20*x7604))+((r21*x7603)));
evalcond[3]=(((r20*x7602))+(((-1.0)*cj2))+(((-1.0)*r21*x7605)));
evalcond[4]=(((r00*x7602))+(((-1.0)*sj2*x7601))+(((-1.0)*r01*x7605)));
evalcond[5]=((((-1.0)*cj3*x7599))+((r01*x7603))+(((-1.0)*cj6*r00*x7604))+(((-1.0)*x7600*x7601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x7606=((1.0)*sj6);
IkReal x7607=((((-1.0)*cj6*r01))+(((-1.0)*r00*x7606)));
j5eval[0]=x7607;
j5eval[1]=((IKabs(r22))+(IKabs((((cj6*r20))+(((-1.0)*r21*x7606))))));
j5eval[2]=IKsign(x7607);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x7608=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x7608;
j5eval[1]=((IKabs((r12*sj3)))+(IKabs((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3))))));
j5eval[2]=IKsign(x7608);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x7609=cj6*cj6;
IkReal x7610=r11*r11;
IkReal x7611=(r11*sj6);
IkReal x7612=(cj6*r10);
IkReal x7613=((((2.0)*x7611*x7612))+(((-1.0)*(r12*r12)))+((x7609*x7610))+(((-1.0)*x7609*(r10*r10)))+(((-1.0)*x7610)));
j5eval[0]=x7613;
j5eval[1]=((IKabs(((((-1.0)*x7612))+x7611)))+(IKabs(r12)));
j5eval[2]=IKsign(x7613);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7614=cj6*cj6;
IkReal x7615=r11*r11;
IkReal x7616=(r11*sj6);
IkReal x7617=(cj6*r10);
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7617))+x7616)),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x7614*(r10*r10)))+(((2.0)*x7616*x7617))+(((-1.0)*x7615))+((x7614*x7615)))),-1);
if(!x7619.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7618.value)+(((1.5707963267949)*(x7619.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7620=IKsin(j5);
IkReal x7621=IKcos(j5);
IkReal x7622=(r01*sj6);
IkReal x7623=(r21*sj6);
IkReal x7624=(r11*sj6);
IkReal x7625=((1.0)*x7620);
IkReal x7626=((1.0)*x7621);
IkReal x7627=(cj6*x7621);
evalcond[0]=(((x7620*x7624))+(((-1.0)*r12*x7626))+(((-1.0)*cj6*r10*x7625)));
evalcond[1]=((((-1.0)*x7623*x7626))+((r20*x7627))+(((-1.0)*r22*x7625)));
evalcond[2]=((((-1.0)*x7622*x7626))+((r00*x7627))+(((-1.0)*r02*x7625)));
evalcond[3]=(sj3+(((-1.0)*cj6*r20*x7625))+((x7620*x7623))+(((-1.0)*r22*x7626)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x7625))+(((-1.0)*x7624*x7626))+((r10*x7627)));
evalcond[5]=(((x7620*x7622))+(((-1.0)*cj6*r00*x7625))+(((-1.0)*cj3))+(((-1.0)*r02*x7626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
CheckValue<IkReal> x7629=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x7629.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7628.value)+(((1.5707963267949)*(x7629.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7630=IKsin(j5);
IkReal x7631=IKcos(j5);
IkReal x7632=(r01*sj6);
IkReal x7633=(r21*sj6);
IkReal x7634=(r11*sj6);
IkReal x7635=((1.0)*x7630);
IkReal x7636=((1.0)*x7631);
IkReal x7637=(cj6*x7631);
evalcond[0]=(((x7630*x7634))+(((-1.0)*cj6*r10*x7635))+(((-1.0)*r12*x7636)));
evalcond[1]=((((-1.0)*r22*x7635))+(((-1.0)*x7633*x7636))+((r20*x7637)));
evalcond[2]=(((r00*x7637))+(((-1.0)*r02*x7635))+(((-1.0)*x7632*x7636)));
evalcond[3]=((((-1.0)*cj6*r20*x7635))+((x7630*x7633))+(((-1.0)*r22*x7636))+sj3);
evalcond[4]=((-1.0)+(((-1.0)*x7634*x7636))+((r10*x7637))+(((-1.0)*r12*x7635)));
evalcond[5]=(((x7630*x7632))+(((-1.0)*cj6*r00*x7635))+(((-1.0)*r02*x7636))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7638=((1.0)*sj6);
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x7638)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
CheckValue<IkReal> x7640=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01))+(((-1.0)*r00*x7638)))),-1);
if(!x7640.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7639.value)+(((1.5707963267949)*(x7640.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7641=IKsin(j5);
IkReal x7642=IKcos(j5);
IkReal x7643=(r01*sj6);
IkReal x7644=(r21*sj6);
IkReal x7645=(r11*sj6);
IkReal x7646=((1.0)*x7641);
IkReal x7647=((1.0)*x7642);
IkReal x7648=(cj6*x7642);
evalcond[0]=(((x7641*x7645))+(((-1.0)*r12*x7647))+(((-1.0)*cj6*r10*x7646)));
evalcond[1]=((((-1.0)*r22*x7646))+(((-1.0)*x7644*x7647))+((r20*x7648)));
evalcond[2]=((((-1.0)*r02*x7646))+(((-1.0)*x7643*x7647))+((r00*x7648)));
evalcond[3]=((((-1.0)*r22*x7647))+(((-1.0)*cj6*r20*x7646))+sj3+((x7641*x7644)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x7646))+(((-1.0)*x7645*x7647))+((r10*x7648)));
evalcond[5]=((((-1.0)*r02*x7647))+((x7641*x7643))+(((-1.0)*cj3))+(((-1.0)*cj6*r00*x7646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x7649=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x7649;
j5eval[1]=((IKabs((r12*sj3)))+(IKabs((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3))))));
j5eval[2]=IKsign(x7649);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x7650=((1.0)*cj6);
IkReal x7651=((((-1.0)*r21*x7650))+(((-1.0)*r20*sj6)));
j5eval[0]=x7651;
j5eval[1]=((IKabs((cj3*r12)))+(IKabs((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x7650))))));
j5eval[2]=IKsign(x7651);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x7652=cj6*cj6;
IkReal x7653=r11*r11;
IkReal x7654=(r11*sj6);
IkReal x7655=(cj6*r10);
IkReal x7656=((r12*r12)+((x7652*(r10*r10)))+(((-2.0)*x7654*x7655))+(((-1.0)*x7652*x7653))+x7653);
j5eval[0]=x7656;
j5eval[1]=IKsign(x7656);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7655))+x7654))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7657=cj6*cj6;
IkReal x7658=r11*r11;
IkReal x7659=(r11*sj6);
IkReal x7660=(cj6*r10);
CheckValue<IkReal> x7661 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7660))+x7659)),IKFAST_ATAN2_MAGTHRESH);
if(!x7661.valid){
continue;
}
CheckValue<IkReal> x7662=IKPowWithIntegerCheck(IKsign((((x7657*(r10*r10)))+(r12*r12)+(((-1.0)*x7657*x7658))+(((-2.0)*x7659*x7660))+x7658)),-1);
if(!x7662.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7661.value)+(((1.5707963267949)*(x7662.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7663=IKsin(j5);
IkReal x7664=IKcos(j5);
IkReal x7665=(r01*sj6);
IkReal x7666=(r21*sj6);
IkReal x7667=(r11*sj6);
IkReal x7668=((1.0)*x7663);
IkReal x7669=((1.0)*x7664);
IkReal x7670=(cj6*x7664);
evalcond[0]=((((-1.0)*r12*x7669))+(((-1.0)*cj6*r10*x7668))+((x7663*x7667)));
evalcond[1]=((((-1.0)*r22*x7668))+(((-1.0)*x7666*x7669))+((r20*x7670)));
evalcond[2]=((((-1.0)*r02*x7668))+(((-1.0)*x7665*x7669))+((r00*x7670)));
evalcond[3]=(sj3+(((-1.0)*r22*x7669))+((x7663*x7666))+(((-1.0)*cj6*r20*x7668)));
evalcond[4]=(cj3+(((-1.0)*r02*x7669))+((x7663*x7665))+(((-1.0)*cj6*r00*x7668)));
evalcond[5]=((1.0)+(((-1.0)*r12*x7668))+((r10*x7670))+(((-1.0)*x7667*x7669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7671=((1.0)*cj6);
CheckValue<IkReal> x7672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7671))+(((-1.0)*r20*sj6)))),-1);
if(!x7672.valid){
continue;
}
CheckValue<IkReal> x7673 = IKatan2WithCheck(IkReal((cj3*r12)),IkReal((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x7671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7673.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7672.value)))+(x7673.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7674=IKsin(j5);
IkReal x7675=IKcos(j5);
IkReal x7676=(r01*sj6);
IkReal x7677=(r21*sj6);
IkReal x7678=(r11*sj6);
IkReal x7679=((1.0)*x7674);
IkReal x7680=((1.0)*x7675);
IkReal x7681=(cj6*x7675);
evalcond[0]=((((-1.0)*r12*x7680))+(((-1.0)*cj6*r10*x7679))+((x7674*x7678)));
evalcond[1]=((((-1.0)*x7677*x7680))+((r20*x7681))+(((-1.0)*r22*x7679)));
evalcond[2]=((((-1.0)*x7676*x7680))+(((-1.0)*r02*x7679))+((r00*x7681)));
evalcond[3]=(sj3+(((-1.0)*r22*x7680))+((x7674*x7677))+(((-1.0)*cj6*r20*x7679)));
evalcond[4]=(cj3+((x7674*x7676))+(((-1.0)*cj6*r00*x7679))+(((-1.0)*r02*x7680)));
evalcond[5]=((1.0)+((r10*x7681))+(((-1.0)*r12*x7679))+(((-1.0)*x7678*x7680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x7683.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7682.value)+(((1.5707963267949)*(x7683.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7684=IKsin(j5);
IkReal x7685=IKcos(j5);
IkReal x7686=(r01*sj6);
IkReal x7687=(r21*sj6);
IkReal x7688=(r11*sj6);
IkReal x7689=((1.0)*x7684);
IkReal x7690=((1.0)*x7685);
IkReal x7691=(cj6*x7685);
evalcond[0]=((((-1.0)*cj6*r10*x7689))+((x7684*x7688))+(((-1.0)*r12*x7690)));
evalcond[1]=((((-1.0)*x7687*x7690))+(((-1.0)*r22*x7689))+((r20*x7691)));
evalcond[2]=(((r00*x7691))+(((-1.0)*x7686*x7690))+(((-1.0)*r02*x7689)));
evalcond[3]=(sj3+(((-1.0)*r22*x7690))+((x7684*x7687))+(((-1.0)*cj6*r20*x7689)));
evalcond[4]=((((-1.0)*r02*x7690))+cj3+(((-1.0)*cj6*r00*x7689))+((x7684*x7686)));
evalcond[5]=((1.0)+((r10*x7691))+(((-1.0)*r12*x7689))+(((-1.0)*x7688*x7690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x7692=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x7692;
j5eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs(r22)));
j5eval[2]=IKsign(x7692);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x7693=((1.0)*sj6);
IkReal x7694=((((-1.0)*cj6*r21))+(((-1.0)*r20*x7693)));
j5eval[0]=x7694;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7693))+((cj6*r00))))));
j5eval[2]=IKsign(x7694);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x7695=((1.0)*cj6);
IkReal x7696=((((-1.0)*r01*x7695))+(((-1.0)*r00*sj6)));
j5eval[0]=x7696;
j5eval[1]=((IKabs((((r11*sj3*sj6))+(((-1.0)*r10*sj3*x7695)))))+(IKabs((r12*sj3))));
j5eval[2]=IKsign(x7696);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7697=((1.0)*cj6);
CheckValue<IkReal> x7698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7697))+(((-1.0)*r00*sj6)))),-1);
if(!x7698.valid){
continue;
}
CheckValue<IkReal> x7699 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*r10*sj3*x7697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7699.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7698.value)))+(x7699.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7700=IKsin(j5);
IkReal x7701=IKcos(j5);
IkReal x7702=(r01*sj6);
IkReal x7703=(r21*sj6);
IkReal x7704=(r11*sj6);
IkReal x7705=((1.0)*x7700);
IkReal x7706=((1.0)*x7701);
IkReal x7707=(cj6*x7701);
evalcond[0]=(((x7700*x7704))+(((-1.0)*cj6*r10*x7705))+(((-1.0)*r12*x7706)));
evalcond[1]=((((-1.0)*r22*x7705))+((r20*x7707))+(((-1.0)*x7703*x7706)));
evalcond[2]=((((-1.0)*x7702*x7706))+(((-1.0)*r02*x7705))+((r00*x7707)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7705))+(((-1.0)*x7704*x7706))+((r10*x7707)));
evalcond[4]=(((x7700*x7703))+(((-1.0)*sj3))+(((-1.0)*r22*x7706))+(((-1.0)*cj6*r20*x7705)));
evalcond[5]=(((x7700*x7702))+(((-1.0)*cj6*r00*x7705))+(((-1.0)*r02*x7706))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7708=((1.0)*sj6);
CheckValue<IkReal> x7709=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21))+(((-1.0)*r20*x7708)))),-1);
if(!x7709.valid){
continue;
}
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7708))+((cj6*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7709.value)))+(x7710.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7711=IKsin(j5);
IkReal x7712=IKcos(j5);
IkReal x7713=(r01*sj6);
IkReal x7714=(r21*sj6);
IkReal x7715=(r11*sj6);
IkReal x7716=((1.0)*x7711);
IkReal x7717=((1.0)*x7712);
IkReal x7718=(cj6*x7712);
evalcond[0]=((((-1.0)*cj6*r10*x7716))+(((-1.0)*r12*x7717))+((x7711*x7715)));
evalcond[1]=((((-1.0)*r22*x7716))+((r20*x7718))+(((-1.0)*x7714*x7717)));
evalcond[2]=((((-1.0)*r02*x7716))+(((-1.0)*x7713*x7717))+((r00*x7718)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7716))+(((-1.0)*x7715*x7717))+((r10*x7718)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*r22*x7717))+(((-1.0)*cj6*r20*x7716))+((x7711*x7714)));
evalcond[5]=((((-1.0)*cj6*r00*x7716))+((x7711*x7713))+(((-1.0)*r02*x7717))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x7719=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x7719.valid){
continue;
}
CheckValue<IkReal> x7720 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7720.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7719.value)))+(x7720.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7721=IKsin(j5);
IkReal x7722=IKcos(j5);
IkReal x7723=(r01*sj6);
IkReal x7724=(r21*sj6);
IkReal x7725=(r11*sj6);
IkReal x7726=((1.0)*x7721);
IkReal x7727=((1.0)*x7722);
IkReal x7728=(cj6*x7722);
evalcond[0]=(((x7721*x7725))+(((-1.0)*cj6*r10*x7726))+(((-1.0)*r12*x7727)));
evalcond[1]=((((-1.0)*x7724*x7727))+(((-1.0)*r22*x7726))+((r20*x7728)));
evalcond[2]=(((r00*x7728))+(((-1.0)*r02*x7726))+(((-1.0)*x7723*x7727)));
evalcond[3]=((1.0)+(((-1.0)*x7725*x7727))+((r10*x7728))+(((-1.0)*r12*x7726)));
evalcond[4]=((((-1.0)*sj3))+((x7721*x7724))+(((-1.0)*cj6*r20*x7726))+(((-1.0)*r22*x7727)));
evalcond[5]=((((-1.0)*cj6*r00*x7726))+(((-1.0)*r02*x7727))+((x7721*x7723))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x7729=((1.0)*sj6);
IkReal x7730=((((-1.0)*cj6*r01))+(((-1.0)*r00*x7729)));
j5eval[0]=x7730;
j5eval[1]=((IKabs(((((-1.0)*r21*x7729))+((cj6*r20)))))+(IKabs(r22)));
j5eval[2]=IKsign(x7730);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x7731=((1.0)*cj6);
IkReal x7732=((((-1.0)*r21*x7731))+(((-1.0)*r20*sj6)));
j5eval[0]=x7732;
j5eval[1]=((IKabs((cj3*r12)))+(IKabs((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x7731))))));
j5eval[2]=IKsign(x7732);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x7733=cj6*cj6;
IkReal x7734=r11*r11;
IkReal x7735=(r11*sj6);
IkReal x7736=(cj6*r10);
IkReal x7737=((((-1.0)*x7734))+((x7733*x7734))+(((2.0)*x7735*x7736))+(((-1.0)*(r12*r12)))+(((-1.0)*x7733*(r10*r10))));
j5eval[0]=x7737;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7736))+x7735))));
j5eval[2]=IKsign(x7737);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7738=cj6*cj6;
IkReal x7739=r11*r11;
IkReal x7740=(r11*sj6);
IkReal x7741=(cj6*r10);
CheckValue<IkReal> x7742=IKPowWithIntegerCheck(IKsign(((((2.0)*x7740*x7741))+(((-1.0)*x7739))+(((-1.0)*(r12*r12)))+(((-1.0)*x7738*(r10*r10)))+((x7738*x7739)))),-1);
if(!x7742.valid){
continue;
}
CheckValue<IkReal> x7743 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7741))+x7740)),IKFAST_ATAN2_MAGTHRESH);
if(!x7743.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7742.value)))+(x7743.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7744=IKsin(j5);
IkReal x7745=IKcos(j5);
IkReal x7746=(r01*sj6);
IkReal x7747=(r21*sj6);
IkReal x7748=(r11*sj6);
IkReal x7749=((1.0)*x7744);
IkReal x7750=((1.0)*x7745);
IkReal x7751=(cj6*x7745);
evalcond[0]=((((-1.0)*r12*x7750))+(((-1.0)*cj6*r10*x7749))+((x7744*x7748)));
evalcond[1]=((((-1.0)*r22*x7749))+((r20*x7751))+(((-1.0)*x7747*x7750)));
evalcond[2]=(((r00*x7751))+(((-1.0)*r02*x7749))+(((-1.0)*x7746*x7750)));
evalcond[3]=((((-1.0)*r02*x7750))+cj3+(((-1.0)*cj6*r00*x7749))+((x7744*x7746)));
evalcond[4]=((-1.0)+((r10*x7751))+(((-1.0)*r12*x7749))+(((-1.0)*x7748*x7750)));
evalcond[5]=((((-1.0)*r22*x7750))+(((-1.0)*sj3))+(((-1.0)*cj6*r20*x7749))+((x7744*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7752=((1.0)*cj6);
CheckValue<IkReal> x7753 = IKatan2WithCheck(IkReal((cj3*r12)),IkReal((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x7752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7753.valid){
continue;
}
CheckValue<IkReal> x7754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7752))+(((-1.0)*r20*sj6)))),-1);
if(!x7754.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7753.value)+(((1.5707963267949)*(x7754.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7755=IKsin(j5);
IkReal x7756=IKcos(j5);
IkReal x7757=(r01*sj6);
IkReal x7758=(r21*sj6);
IkReal x7759=(r11*sj6);
IkReal x7760=((1.0)*x7755);
IkReal x7761=((1.0)*x7756);
IkReal x7762=(cj6*x7756);
evalcond[0]=((((-1.0)*cj6*r10*x7760))+((x7755*x7759))+(((-1.0)*r12*x7761)));
evalcond[1]=((((-1.0)*r22*x7760))+(((-1.0)*x7758*x7761))+((r20*x7762)));
evalcond[2]=((((-1.0)*r02*x7760))+(((-1.0)*x7757*x7761))+((r00*x7762)));
evalcond[3]=((((-1.0)*r02*x7761))+cj3+(((-1.0)*cj6*r00*x7760))+((x7755*x7757)));
evalcond[4]=((-1.0)+(((-1.0)*x7759*x7761))+(((-1.0)*r12*x7760))+((r10*x7762)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r22*x7761))+(((-1.0)*cj6*r20*x7760))+((x7755*x7758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7763=((1.0)*sj6);
CheckValue<IkReal> x7764 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x7763)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7764.valid){
continue;
}
CheckValue<IkReal> x7765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7763))+(((-1.0)*cj6*r01)))),-1);
if(!x7765.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7764.value)+(((1.5707963267949)*(x7765.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7766=IKsin(j5);
IkReal x7767=IKcos(j5);
IkReal x7768=(r01*sj6);
IkReal x7769=(r21*sj6);
IkReal x7770=(r11*sj6);
IkReal x7771=((1.0)*x7766);
IkReal x7772=((1.0)*x7767);
IkReal x7773=(cj6*x7767);
evalcond[0]=((((-1.0)*cj6*r10*x7771))+(((-1.0)*r12*x7772))+((x7766*x7770)));
evalcond[1]=((((-1.0)*x7769*x7772))+(((-1.0)*r22*x7771))+((r20*x7773)));
evalcond[2]=(((r00*x7773))+(((-1.0)*r02*x7771))+(((-1.0)*x7768*x7772)));
evalcond[3]=(((x7766*x7768))+(((-1.0)*r02*x7772))+cj3+(((-1.0)*cj6*r00*x7771)));
evalcond[4]=((-1.0)+(((-1.0)*x7770*x7772))+(((-1.0)*r12*x7771))+((r10*x7773)));
evalcond[5]=(((x7766*x7769))+(((-1.0)*sj3))+(((-1.0)*r22*x7772))+(((-1.0)*cj6*r20*x7771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7774=cj6*cj6;
IkReal x7775=((1.0)*sj2);
IkReal x7776=(r01*sj6);
IkReal x7777=(cj6*r00);
IkReal x7778=(sj2*sj3);
IkReal x7779=(r21*sj6);
IkReal x7780=(cj6*r20);
IkReal x7781=(r01*r21);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r22*x7775))+((x7777*x7778))+(((-1.0)*sj3*x7775*x7776)))),IkReal((((cj1*sj2*x7780))+((r02*x7778))+(((-1.0)*cj1*x7775*x7779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
CheckValue<IkReal> x7783=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7777*x7779))+(((-1.0)*x7776*x7780))+(((-1.0)*x7774*x7781))+((r02*r22))+x7781+((r00*r20*x7774)))),-1);
if(!x7783.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7782.value)+(((1.5707963267949)*(x7783.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7784=IKsin(j5);
IkReal x7785=IKcos(j5);
IkReal x7786=((1.0)*sj2);
IkReal x7787=(sj6*x7784);
IkReal x7788=((1.0)*cj2*sj3);
IkReal x7789=((1.0)*x7784);
IkReal x7790=((1.0)*x7785);
IkReal x7791=(cj6*x7785);
IkReal x7792=(sj6*x7790);
IkReal x7793=(cj6*x7789);
evalcond[0]=((((-1.0)*r22*x7790))+((sj2*sj3))+(((-1.0)*r20*x7793))+((r21*x7787)));
evalcond[1]=(((r20*x7791))+(((-1.0)*r21*x7792))+(((-1.0)*r22*x7789))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*cj1*x7786))+(((-1.0)*r02*x7789))+(((-1.0)*r01*x7792))+((r00*x7791)));
evalcond[3]=(((r10*x7791))+(((-1.0)*r11*x7792))+(((-1.0)*sj1*x7786))+(((-1.0)*r12*x7789)));
evalcond[4]=((((-1.0)*r10*x7793))+(((-1.0)*r12*x7790))+(((-1.0)*sj1*x7788))+((r11*x7787))+((cj1*cj3)));
evalcond[5]=((((-1.0)*cj1*x7788))+((r01*x7787))+(((-1.0)*r00*x7793))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x7790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7794=cj6*cj6;
IkReal x7795=r21*r21;
IkReal x7796=(sj2*sj3);
IkReal x7797=((1.0)*cj2);
IkReal x7798=(r21*sj6);
IkReal x7799=(cj6*r20);
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7797))+((x7796*x7799))+(((-1.0)*x7796*x7798)))),IkReal((((cj2*x7799))+((r22*x7796))+(((-1.0)*x7797*x7798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7798*x7799))+(r22*r22)+((x7794*(r20*r20)))+x7795+(((-1.0)*x7794*x7795)))),-1);
if(!x7801.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7800.value)+(((1.5707963267949)*(x7801.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7802=IKsin(j5);
IkReal x7803=IKcos(j5);
IkReal x7804=((1.0)*sj2);
IkReal x7805=(sj6*x7802);
IkReal x7806=((1.0)*cj2*sj3);
IkReal x7807=((1.0)*x7802);
IkReal x7808=((1.0)*x7803);
IkReal x7809=(cj6*x7803);
IkReal x7810=(sj6*x7808);
IkReal x7811=(cj6*x7807);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x7811))+((r21*x7805))+(((-1.0)*r22*x7808)));
evalcond[1]=((((-1.0)*r21*x7810))+(((-1.0)*r22*x7807))+(((-1.0)*cj2))+((r20*x7809)));
evalcond[2]=((((-1.0)*cj1*x7804))+((r00*x7809))+(((-1.0)*r02*x7807))+(((-1.0)*r01*x7810)));
evalcond[3]=((((-1.0)*r12*x7807))+(((-1.0)*sj1*x7804))+(((-1.0)*r11*x7810))+((r10*x7809)));
evalcond[4]=(((r11*x7805))+(((-1.0)*r12*x7808))+(((-1.0)*sj1*x7806))+((cj1*cj3))+(((-1.0)*r10*x7811)));
evalcond[5]=((((-1.0)*cj1*x7806))+(((-1.0)*r02*x7808))+((r01*x7805))+(((-1.0)*r00*x7811))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7812=((1.0)*sj6);
IkReal x7813=((1.0)*cj1*sj2);
CheckValue<IkReal> x7814 = IKatan2WithCheck(IkReal((((cj1*r21*sj2*sj6))+(((-1.0)*cj6*r20*x7813))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*x7812)))),IkReal(((((-1.0)*r22*x7813))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7814.valid){
continue;
}
CheckValue<IkReal> x7815=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x7812)))),-1);
if(!x7815.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x7814.value)+(((1.5707963267949)*(x7815.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x7816=IKsin(j5);
IkReal x7817=IKcos(j5);
IkReal x7818=((1.0)*sj2);
IkReal x7819=(sj6*x7816);
IkReal x7820=((1.0)*cj2*sj3);
IkReal x7821=((1.0)*x7816);
IkReal x7822=((1.0)*x7817);
IkReal x7823=(cj6*x7817);
IkReal x7824=(sj6*x7822);
IkReal x7825=(cj6*x7821);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r20*x7825))+((r21*x7819))+(((-1.0)*r22*x7822)));
evalcond[1]=((((-1.0)*r21*x7824))+((r20*x7823))+(((-1.0)*r22*x7821))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r02*x7821))+(((-1.0)*r01*x7824))+(((-1.0)*cj1*x7818))+((r00*x7823)));
evalcond[3]=(((r10*x7823))+(((-1.0)*sj1*x7818))+(((-1.0)*r12*x7821))+(((-1.0)*r11*x7824)));
evalcond[4]=(((r11*x7819))+(((-1.0)*sj1*x7820))+(((-1.0)*r10*x7825))+((cj1*cj3))+(((-1.0)*r12*x7822)));
evalcond[5]=((((-1.0)*cj1*x7820))+(((-1.0)*r00*x7825))+(((-1.0)*r02*x7822))+(((-1.0)*cj3*sj1))+((r01*x7819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x7826=cj6*cj6;
IkReal x7827=r21*r21;
IkReal x7828=(sj2*sj3);
IkReal x7829=((1.0)*cj2);
IkReal x7830=(r21*sj6);
IkReal x7831=(cj6*r20);
CheckValue<IkReal> x7832=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7826*x7827))+(((-2.0)*x7830*x7831))+(r22*r22)+((x7826*(r20*r20)))+x7827)),-1);
if(!x7832.valid){
continue;
}
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7829))+((x7828*x7831))+(((-1.0)*x7828*x7830)))),IkReal(((((-1.0)*x7829*x7830))+((r22*x7828))+((cj2*x7831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7832.value)))+(x7833.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x7834=IKsin(j5);
IkReal x7835=IKcos(j5);
IkReal x7836=((1.0)*r22);
IkReal x7837=(r21*sj6);
IkReal x7838=(cj6*r20);
evalcond[0]=(((sj2*sj3))+((x7834*x7837))+(((-1.0)*x7834*x7838))+(((-1.0)*x7835*x7836)));
evalcond[1]=(((x7835*x7838))+(((-1.0)*x7834*x7836))+(((-1.0)*x7835*x7837))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7839=cj3*cj3;
IkReal x7840=(cj2*cj3);
IkReal x7841=(r00*sj6);
IkReal x7842=(cj6*r01);
IkReal x7843=(r10*sj6);
IkReal x7844=(cj6*r11);
IkReal x7845=((1.0)*sj3);
IkReal x7846=((1.0)+(((-1.0)*x7839))+((x7839*(cj2*cj2))));
j1eval[0]=x7846;
j1eval[1]=IKsign(x7846);
j1eval[2]=((IKabs((((sj3*x7844))+((sj3*x7843))+((x7840*x7842))+((x7840*x7841)))))+(IKabs(((((-1.0)*x7842*x7845))+(((-1.0)*x7841*x7845))+((x7840*x7843))+((x7840*x7844))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=cj3;
j1eval[2]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01))))));
j1eval[2]=IKsign(sj3);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=cj3;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7847=IKPowWithIntegerCheck(cj3,-1);
if(!x7847.valid){
continue;
}
CheckValue<IkReal> x7848=IKPowWithIntegerCheck(sj3,-1);
if(!x7848.valid){
continue;
}
if( IKabs(((x7847.value)*((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7848.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7847.value)*((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*sj5))))))+IKsqr(((x7848.value)*((((r10*sj6))+((cj6*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7847.value)*((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*sj5))))), ((x7848.value)*((((r10*sj6))+((cj6*r11))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7849=IKcos(j1);
IkReal x7850=IKsin(j1);
IkReal x7851=(r00*sj6);
IkReal x7852=(sj5*sj6);
IkReal x7853=((0.0003501)*cj6);
IkReal x7854=(cj5*cj6);
IkReal x7855=((1.0)*sj6);
IkReal x7856=((1.0)*cj6);
IkReal x7857=((1.0)*cj5);
IkReal x7858=((1.0)*sj5);
IkReal x7859=(cj3*x7850);
IkReal x7860=(sj5*x7856);
IkReal x7861=((1.0)*x7850);
IkReal x7862=(cj3*x7849);
evalcond[0]=((((-1.0)*r11*x7856))+((sj3*x7849))+(((-1.0)*r10*x7855)));
evalcond[1]=((((-1.0)*sj3*x7861))+(((-1.0)*x7851))+(((-1.0)*r01*x7856)));
evalcond[2]=(((r11*x7852))+x7862+(((-1.0)*r10*x7860))+(((-1.0)*r12*x7857)));
evalcond[3]=((((-1.0)*cj5*r01*x7855))+(((-1.0)*x7849))+((r00*x7854))+(((-1.0)*r02*x7858)));
evalcond[4]=((((-1.0)*cj5*r11*x7855))+(((-1.0)*x7861))+((r10*x7854))+(((-1.0)*r12*x7858)));
evalcond[5]=((((-1.0)*r00*x7860))+(((-1.0)*x7859))+((r01*x7852))+(((-1.0)*r02*x7857)));
evalcond[6]=((((0.42076)*x7850))+(((-0.01275)*x7849))+(((-1.0)*px))+(((0.31436)*x7859))+((r01*x7853))+(((0.0003501)*x7851)));
evalcond[7]=(((r11*x7853))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.42076)*x7849))+(((-0.31436)*x7862))+(((-0.01275)*x7850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7863=IKPowWithIntegerCheck(sj3,-1);
if(!x7863.valid){
continue;
}
if( IKabs((((cj5*cj6*r10))+(((-1.0)*cj5*r11*sj6))+(((-1.0)*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7863.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*cj6*r10))+(((-1.0)*cj5*r11*sj6))+(((-1.0)*r12*sj5))))+IKsqr(((x7863.value)*((((r10*sj6))+((cj6*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*cj6*r10))+(((-1.0)*cj5*r11*sj6))+(((-1.0)*r12*sj5))), ((x7863.value)*((((r10*sj6))+((cj6*r11))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7864=IKcos(j1);
IkReal x7865=IKsin(j1);
IkReal x7866=(r00*sj6);
IkReal x7867=(sj5*sj6);
IkReal x7868=((0.0003501)*cj6);
IkReal x7869=(cj5*cj6);
IkReal x7870=((1.0)*sj6);
IkReal x7871=((1.0)*cj6);
IkReal x7872=((1.0)*cj5);
IkReal x7873=((1.0)*sj5);
IkReal x7874=(cj3*x7865);
IkReal x7875=(sj5*x7871);
IkReal x7876=((1.0)*x7865);
IkReal x7877=(cj3*x7864);
evalcond[0]=(((sj3*x7864))+(((-1.0)*r11*x7871))+(((-1.0)*r10*x7870)));
evalcond[1]=((((-1.0)*sj3*x7876))+(((-1.0)*r01*x7871))+(((-1.0)*x7866)));
evalcond[2]=(((r11*x7867))+(((-1.0)*r12*x7872))+x7877+(((-1.0)*r10*x7875)));
evalcond[3]=(((r00*x7869))+(((-1.0)*x7864))+(((-1.0)*r02*x7873))+(((-1.0)*cj5*r01*x7870)));
evalcond[4]=((((-1.0)*cj5*r11*x7870))+(((-1.0)*r12*x7873))+((r10*x7869))+(((-1.0)*x7876)));
evalcond[5]=((((-1.0)*r00*x7875))+(((-1.0)*x7874))+((r01*x7867))+(((-1.0)*r02*x7872)));
evalcond[6]=((((0.0003501)*x7866))+(((-0.01275)*x7864))+(((0.31436)*x7874))+(((0.42076)*x7865))+((r01*x7868))+(((-1.0)*px)));
evalcond[7]=((((-0.01275)*x7865))+((r11*x7868))+(((-0.31436)*x7877))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.42076)*x7864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7878=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x7878.valid){
continue;
}
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)))),IkReal((((r10*sj6))+((cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7878.value)))+(x7879.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7880=IKcos(j1);
IkReal x7881=IKsin(j1);
IkReal x7882=(r00*sj6);
IkReal x7883=(sj5*sj6);
IkReal x7884=((0.0003501)*cj6);
IkReal x7885=(cj5*cj6);
IkReal x7886=((1.0)*sj6);
IkReal x7887=((1.0)*cj6);
IkReal x7888=((1.0)*cj5);
IkReal x7889=((1.0)*sj5);
IkReal x7890=(cj3*x7881);
IkReal x7891=(sj5*x7887);
IkReal x7892=((1.0)*x7881);
IkReal x7893=(cj3*x7880);
evalcond[0]=(((sj3*x7880))+(((-1.0)*r10*x7886))+(((-1.0)*r11*x7887)));
evalcond[1]=((((-1.0)*r01*x7887))+(((-1.0)*x7882))+(((-1.0)*sj3*x7892)));
evalcond[2]=(((r11*x7883))+x7893+(((-1.0)*r12*x7888))+(((-1.0)*r10*x7891)));
evalcond[3]=((((-1.0)*r02*x7889))+((r00*x7885))+(((-1.0)*x7880))+(((-1.0)*cj5*r01*x7886)));
evalcond[4]=((((-1.0)*x7892))+((r10*x7885))+(((-1.0)*cj5*r11*x7886))+(((-1.0)*r12*x7889)));
evalcond[5]=(((r01*x7883))+(((-1.0)*r02*x7888))+(((-1.0)*r00*x7891))+(((-1.0)*x7890)));
evalcond[6]=((((0.0003501)*x7882))+(((0.42076)*x7881))+((r01*x7884))+(((-1.0)*px))+(((0.31436)*x7890))+(((-0.01275)*x7880)));
evalcond[7]=((((0.0003501)*r10*sj6))+((r11*x7884))+(((-1.0)*py))+(((-0.42076)*x7880))+(((-0.01275)*x7881))+(((-0.31436)*x7893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=sj3;
j1eval[1]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01))))));
j1eval[2]=IKsign(sj3);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=cj3;
j1eval[1]=sj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(cj3,-1);
if(!x7894.valid){
continue;
}
CheckValue<IkReal> x7895=IKPowWithIntegerCheck(sj3,-1);
if(!x7895.valid){
continue;
}
if( IKabs(((x7894.value)*((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7895.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7894.value)*((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*sj5))))))+IKsqr(((x7895.value)*((((r10*sj6))+((cj6*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x7894.value)*((((r01*sj5*sj6))+(((-1.0)*cj5*r02))+(((-1.0)*cj6*r00*sj5))))), ((x7895.value)*((((r10*sj6))+((cj6*r11))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7896=IKcos(j1);
IkReal x7897=IKsin(j1);
IkReal x7898=(sj5*sj6);
IkReal x7899=(r00*sj6);
IkReal x7900=((0.0003501)*cj6);
IkReal x7901=(cj5*cj6);
IkReal x7902=((1.0)*sj6);
IkReal x7903=((1.0)*cj6);
IkReal x7904=((1.0)*cj5);
IkReal x7905=((1.0)*sj5);
IkReal x7906=(cj3*x7897);
IkReal x7907=(sj5*x7903);
IkReal x7908=(cj3*x7896);
evalcond[0]=((((-1.0)*r11*x7903))+((sj3*x7896))+(((-1.0)*r10*x7902)));
evalcond[1]=((((-1.0)*sj3*x7897))+(((-1.0)*r01*x7903))+(((-1.0)*x7899)));
evalcond[2]=(x7896+((r00*x7901))+(((-1.0)*cj5*r01*x7902))+(((-1.0)*r02*x7905)));
evalcond[3]=((((-1.0)*r12*x7905))+((r10*x7901))+(((-1.0)*cj5*r11*x7902))+x7897);
evalcond[4]=((((-1.0)*r12*x7904))+x7908+(((-1.0)*r10*x7907))+((r11*x7898)));
evalcond[5]=((((-1.0)*x7906))+(((-1.0)*r00*x7907))+((r01*x7898))+(((-1.0)*r02*x7904)));
evalcond[6]=((((0.31436)*x7906))+(((-1.0)*px))+((r01*x7900))+(((0.01275)*x7896))+(((0.0003501)*x7899))+(((0.42076)*x7897)));
evalcond[7]=((((-0.31436)*x7908))+(((-0.42076)*x7896))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((0.01275)*x7897))+((r11*x7900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7909=IKPowWithIntegerCheck(sj3,-1);
if(!x7909.valid){
continue;
}
if( IKabs((((cj5*r11*sj6))+(((-1.0)*cj5*cj6*r10))+((r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7909.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*sj6))+(((-1.0)*cj5*cj6*r10))+((r12*sj5))))+IKsqr(((x7909.value)*((((r10*sj6))+((cj6*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r11*sj6))+(((-1.0)*cj5*cj6*r10))+((r12*sj5))), ((x7909.value)*((((r10*sj6))+((cj6*r11))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7910=IKcos(j1);
IkReal x7911=IKsin(j1);
IkReal x7912=(sj5*sj6);
IkReal x7913=(r00*sj6);
IkReal x7914=((0.0003501)*cj6);
IkReal x7915=(cj5*cj6);
IkReal x7916=((1.0)*sj6);
IkReal x7917=((1.0)*cj6);
IkReal x7918=((1.0)*cj5);
IkReal x7919=((1.0)*sj5);
IkReal x7920=(cj3*x7911);
IkReal x7921=(sj5*x7917);
IkReal x7922=(cj3*x7910);
evalcond[0]=(((sj3*x7910))+(((-1.0)*r10*x7916))+(((-1.0)*r11*x7917)));
evalcond[1]=((((-1.0)*sj3*x7911))+(((-1.0)*x7913))+(((-1.0)*r01*x7917)));
evalcond[2]=((((-1.0)*r02*x7919))+x7910+((r00*x7915))+(((-1.0)*cj5*r01*x7916)));
evalcond[3]=((((-1.0)*cj5*r11*x7916))+((r10*x7915))+x7911+(((-1.0)*r12*x7919)));
evalcond[4]=(x7922+(((-1.0)*r10*x7921))+((r11*x7912))+(((-1.0)*r12*x7918)));
evalcond[5]=((((-1.0)*r02*x7918))+(((-1.0)*x7920))+((r01*x7912))+(((-1.0)*r00*x7921)));
evalcond[6]=((((-1.0)*px))+(((0.31436)*x7920))+((r01*x7914))+(((0.0003501)*x7913))+(((0.42076)*x7911))+(((0.01275)*x7910)));
evalcond[7]=((((-0.42076)*x7910))+(((-0.31436)*x7922))+(((0.0003501)*r10*sj6))+((r11*x7914))+(((-1.0)*py))+(((0.01275)*x7911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x7923=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x7923.valid){
continue;
}
CheckValue<IkReal> x7924 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)))),IkReal((((r10*sj6))+((cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7924.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7923.value)))+(x7924.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7925=IKcos(j1);
IkReal x7926=IKsin(j1);
IkReal x7927=(sj5*sj6);
IkReal x7928=(r00*sj6);
IkReal x7929=((0.0003501)*cj6);
IkReal x7930=(cj5*cj6);
IkReal x7931=((1.0)*sj6);
IkReal x7932=((1.0)*cj6);
IkReal x7933=((1.0)*cj5);
IkReal x7934=((1.0)*sj5);
IkReal x7935=(cj3*x7926);
IkReal x7936=(sj5*x7932);
IkReal x7937=(cj3*x7925);
evalcond[0]=((((-1.0)*r11*x7932))+((sj3*x7925))+(((-1.0)*r10*x7931)));
evalcond[1]=((((-1.0)*sj3*x7926))+(((-1.0)*r01*x7932))+(((-1.0)*x7928)));
evalcond[2]=((((-1.0)*cj5*r01*x7931))+(((-1.0)*r02*x7934))+x7925+((r00*x7930)));
evalcond[3]=((((-1.0)*cj5*r11*x7931))+(((-1.0)*r12*x7934))+((r10*x7930))+x7926);
evalcond[4]=((((-1.0)*r12*x7933))+x7937+((r11*x7927))+(((-1.0)*r10*x7936)));
evalcond[5]=((((-1.0)*r00*x7936))+(((-1.0)*r02*x7933))+(((-1.0)*x7935))+((r01*x7927)));
evalcond[6]=((((-1.0)*px))+(((0.31436)*x7935))+((r01*x7929))+(((0.0003501)*x7928))+(((0.42076)*x7926))+(((0.01275)*x7925)));
evalcond[7]=((((-0.42076)*x7925))+(((-0.31436)*x7937))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+((r11*x7929))+(((0.01275)*x7926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj6))+((cj6*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01))))+IKsqr((((r10*sj6))+((cj6*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01))), (((r10*sj6))+((cj6*r11))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7938=IKsin(j1);
IkReal x7939=IKcos(j1);
IkReal x7940=(r00*sj6);
IkReal x7941=(sj5*sj6);
IkReal x7942=((0.0003501)*cj6);
IkReal x7943=(cj5*cj6);
IkReal x7944=((1.0)*sj6);
IkReal x7945=((1.0)*cj6);
IkReal x7946=((1.0)*cj5);
IkReal x7947=((1.0)*sj5);
IkReal x7948=(cj2*x7939);
IkReal x7949=(sj5*x7945);
IkReal x7950=(sj2*x7939);
IkReal x7951=(sj2*x7938);
IkReal x7952=((1.0)*x7938);
evalcond[0]=((((-1.0)*r11*x7945))+x7939+(((-1.0)*r10*x7944)));
evalcond[1]=((((-1.0)*r01*x7945))+(((-1.0)*x7952))+(((-1.0)*x7940)));
evalcond[2]=(((r11*x7941))+(((-1.0)*r12*x7946))+(((-1.0)*r10*x7949))+(((-1.0)*cj2*x7952)));
evalcond[3]=((((-1.0)*r00*x7949))+(((-1.0)*r02*x7946))+(((-1.0)*x7948))+((r01*x7941)));
evalcond[4]=((((-1.0)*cj5*r01*x7944))+(((-1.0)*r02*x7947))+(((-1.0)*x7950))+((r00*x7943)));
evalcond[5]=((((-1.0)*cj5*r11*x7944))+(((-1.0)*x7951))+(((-1.0)*r12*x7947))+((r10*x7943)));
evalcond[6]=((((0.31436)*x7948))+(((0.0003501)*x7940))+(((-1.0)*px))+(((0.42076)*x7938))+((r01*x7942))+(((-0.01275)*x7950)));
evalcond[7]=(((r11*x7942))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((0.31436)*cj2*x7938))+(((-0.42076)*x7939))+(((-0.01275)*x7951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs((((r00*sj6))+((cj6*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj6))+((cj6*r01))))+IKsqr(((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj6))+((cj6*r01))), ((((-1.0)*r10*sj6))+(((-1.0)*cj6*r11))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x7953=IKsin(j1);
IkReal x7954=IKcos(j1);
IkReal x7955=(r00*sj6);
IkReal x7956=(sj5*sj6);
IkReal x7957=((0.0003501)*cj6);
IkReal x7958=((0.01275)*sj2);
IkReal x7959=(cj5*cj6);
IkReal x7960=((1.0)*sj6);
IkReal x7961=((1.0)*cj6);
IkReal x7962=((1.0)*cj5);
IkReal x7963=((1.0)*sj5);
IkReal x7964=(cj2*x7954);
IkReal x7965=(sj5*x7961);
IkReal x7966=((1.0)*x7954);
IkReal x7967=(cj2*x7953);
evalcond[0]=((((-1.0)*x7955))+x7953+(((-1.0)*r01*x7961)));
evalcond[1]=((((-1.0)*x7966))+(((-1.0)*r11*x7961))+(((-1.0)*r10*x7960)));
evalcond[2]=(((r11*x7956))+x7967+(((-1.0)*r12*x7962))+(((-1.0)*r10*x7965)));
evalcond[3]=(((r01*x7956))+x7964+(((-1.0)*r00*x7965))+(((-1.0)*r02*x7962)));
evalcond[4]=(((r00*x7959))+(((-1.0)*sj2*x7966))+(((-1.0)*r02*x7963))+(((-1.0)*cj5*r01*x7960)));
evalcond[5]=((((-1.0)*r12*x7963))+((r10*x7959))+(((-1.0)*cj5*r11*x7960))+(((-1.0)*sj2*x7953)));
evalcond[6]=(((r01*x7957))+(((-1.0)*x7954*x7958))+(((-0.31436)*x7964))+(((0.0003501)*x7955))+(((-1.0)*px))+(((0.42076)*x7953)));
evalcond[7]=((((-1.0)*x7953*x7958))+((r11*x7957))+(((-0.31436)*x7967))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.42076)*x7954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7968=(r10*sj6);
IkReal x7969=(cj6*sj3);
IkReal x7970=(r00*sj6);
IkReal x7971=(cj3*cj6);
if( IKabs((((r11*x7971))+((cj3*x7968))+(((-1.0)*r01*x7969))+(((-1.0)*sj3*x7970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7969))+((r01*x7971))+((sj3*x7968))+((cj3*x7970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x7971))+((cj3*x7968))+(((-1.0)*r01*x7969))+(((-1.0)*sj3*x7970))))+IKsqr((((r11*x7969))+((r01*x7971))+((sj3*x7968))+((cj3*x7970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x7971))+((cj3*x7968))+(((-1.0)*r01*x7969))+(((-1.0)*sj3*x7970))), (((r11*x7969))+((r01*x7971))+((sj3*x7968))+((cj3*x7970))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x7972=IKcos(j1);
IkReal x7973=IKsin(j1);
IkReal x7974=((1.0)*sj3);
IkReal x7975=(sj5*sj6);
IkReal x7976=(r00*sj6);
IkReal x7977=((0.0003501)*cj6);
IkReal x7978=((1.0)*cj6);
IkReal x7979=(r10*sj6);
IkReal x7980=((1.0)*cj5);
IkReal x7981=(cj3*x7972);
IkReal x7982=(cj3*x7973);
IkReal x7983=(sj5*x7978);
IkReal x7984=(sj3*x7972);
IkReal x7985=(x7973*x7974);
evalcond[0]=(x7982+x7984+(((-1.0)*x7979))+(((-1.0)*r11*x7978)));
evalcond[1]=(x7981+(((-1.0)*x7976))+(((-1.0)*r01*x7978))+(((-1.0)*x7985)));
evalcond[2]=((((-1.0)*r12*x7980))+((r11*x7975))+(((-1.0)*r10*x7983))+x7981+(((-1.0)*x7985)));
evalcond[3]=((((-1.0)*r00*x7983))+((r01*x7975))+(((-1.0)*x7982))+(((-1.0)*r02*x7980))+(((-1.0)*x7972*x7974)));
evalcond[4]=(((r01*x7977))+(((0.31436)*x7984))+(((0.31436)*x7982))+(((0.0003501)*x7976))+(((0.42076)*x7973))+(((-1.0)*px)));
evalcond[5]=(((r11*x7977))+(((0.0003501)*x7979))+(((-1.0)*py))+(((-0.31436)*x7981))+(((-0.42076)*x7972))+(((0.31436)*sj3*x7973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x7986=(cj6*r11);
IkReal x7987=(sj3*sj6);
IkReal x7988=((1.0)*cj3);
IkReal x7989=(cj6*r01);
IkReal x7990=(sj6*x7988);
if( IKabs(((((-1.0)*r00*x7987))+(((-1.0)*r10*x7990))+(((-1.0)*sj3*x7989))+(((-1.0)*x7986*x7988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7990))+(((-1.0)*x7988*x7989))+((sj3*x7986))+((r10*x7987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7987))+(((-1.0)*r10*x7990))+(((-1.0)*sj3*x7989))+(((-1.0)*x7986*x7988))))+IKsqr(((((-1.0)*r00*x7990))+(((-1.0)*x7988*x7989))+((sj3*x7986))+((r10*x7987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x7987))+(((-1.0)*r10*x7990))+(((-1.0)*sj3*x7989))+(((-1.0)*x7986*x7988))), ((((-1.0)*r00*x7990))+(((-1.0)*x7988*x7989))+((sj3*x7986))+((r10*x7987))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x7991=IKcos(j1);
IkReal x7992=IKsin(j1);
IkReal x7993=(sj5*sj6);
IkReal x7994=(r00*sj6);
IkReal x7995=((0.0003501)*cj6);
IkReal x7996=((1.0)*cj6);
IkReal x7997=(r10*sj6);
IkReal x7998=((1.0)*cj5);
IkReal x7999=(sj3*x7991);
IkReal x8000=(cj3*x7992);
IkReal x8001=(sj5*x7996);
IkReal x8002=(sj3*x7992);
IkReal x8003=(cj3*x7991);
IkReal x8004=((1.0)*x8000);
evalcond[0]=((((-1.0)*r11*x7996))+x7999+(((-1.0)*x7997))+(((-1.0)*x8004)));
evalcond[1]=((((-1.0)*r01*x7996))+(((-1.0)*x7994))+(((-1.0)*x8002))+(((-1.0)*x8003)));
evalcond[2]=(((r11*x7993))+(((-1.0)*r12*x7998))+(((-1.0)*r10*x8001))+x8002+x8003);
evalcond[3]=(((r01*x7993))+x7999+(((-1.0)*r00*x8001))+(((-1.0)*x8004))+(((-1.0)*r02*x7998)));
evalcond[4]=((((0.31436)*x8000))+(((0.0003501)*x7994))+(((0.42076)*x7992))+((r01*x7995))+(((-1.0)*px))+(((-0.31436)*x7999)));
evalcond[5]=(((r11*x7995))+(((0.0003501)*x7997))+(((-0.42076)*x7991))+(((-1.0)*py))+(((-0.31436)*x8003))+(((-0.31436)*x8002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
j1eval[1]=IKsign(cj2);
j1eval[2]=((IKabs((((r10*sj6))+((cj6*r11)))))+(IKabs((((r00*sj6))+((cj6*r01))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x8005=IKPowWithIntegerCheck(cj2,-1);
if(!x8005.valid){
continue;
}
CheckValue<IkReal> x8006=IKPowWithIntegerCheck(sj2,-1);
if(!x8006.valid){
continue;
}
if( IKabs(((x8005.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8006.value)*(((((-1.0)*cj5*r01*sj6))+(((-1.0)*r02*sj5))+((cj5*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8005.value)*((((r10*sj6))+((cj6*r11))))))+IKsqr(((x8006.value)*(((((-1.0)*cj5*r01*sj6))+(((-1.0)*r02*sj5))+((cj5*cj6*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x8005.value)*((((r10*sj6))+((cj6*r11))))), ((x8006.value)*(((((-1.0)*cj5*r01*sj6))+(((-1.0)*r02*sj5))+((cj5*cj6*r00))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8007=IKcos(j1);
IkReal x8008=IKsin(j1);
IkReal x8009=(r00*sj6);
IkReal x8010=(sj5*sj6);
IkReal x8011=((0.0003501)*cj6);
IkReal x8012=(cj5*cj6);
IkReal x8013=((1.0)*sj6);
IkReal x8014=((1.0)*cj6);
IkReal x8015=((1.0)*cj5);
IkReal x8016=((1.0)*sj5);
IkReal x8017=(sj5*x8014);
IkReal x8018=(sj2*x8007);
IkReal x8019=(sj2*x8008);
evalcond[0]=((((-1.0)*r10*x8013))+((cj2*x8008))+(((-1.0)*r11*x8014)));
evalcond[1]=((((-1.0)*r01*x8014))+(((-1.0)*x8009))+((cj2*x8007)));
evalcond[2]=(((r11*x8010))+(((-1.0)*r10*x8017))+x8007+(((-1.0)*r12*x8015)));
evalcond[3]=((((-1.0)*r00*x8017))+(((-1.0)*r02*x8015))+((r01*x8010))+(((-1.0)*x8008)));
evalcond[4]=((((-1.0)*r02*x8016))+((r00*x8012))+(((-1.0)*x8018))+(((-1.0)*cj5*r01*x8013)));
evalcond[5]=((((-1.0)*x8019))+((r10*x8012))+(((-1.0)*cj5*r11*x8013))+(((-1.0)*r12*x8016)));
evalcond[6]=(((r01*x8011))+(((-0.01275)*x8018))+(((-1.0)*px))+(((0.73512)*x8008))+(((0.0003501)*x8009)));
evalcond[7]=((((-0.73512)*x8007))+(((-0.01275)*x8019))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+((r11*x8011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x8020=IKPowWithIntegerCheck(cj2,-1);
if(!x8020.valid){
continue;
}
if( IKabs(((x8020.value)*((((r10*sj6))+((cj6*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8020.value)*((((r10*sj6))+((cj6*r11))))))+IKsqr((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x8020.value)*((((r10*sj6))+((cj6*r11))))), (((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj5*sj6))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8021=IKcos(j1);
IkReal x8022=IKsin(j1);
IkReal x8023=(r00*sj6);
IkReal x8024=(sj5*sj6);
IkReal x8025=((0.0003501)*cj6);
IkReal x8026=(cj5*cj6);
IkReal x8027=((1.0)*sj6);
IkReal x8028=((1.0)*cj6);
IkReal x8029=((1.0)*cj5);
IkReal x8030=((1.0)*sj5);
IkReal x8031=(sj5*x8028);
IkReal x8032=(sj2*x8021);
IkReal x8033=(sj2*x8022);
evalcond[0]=((((-1.0)*r11*x8028))+(((-1.0)*r10*x8027))+((cj2*x8022)));
evalcond[1]=((((-1.0)*x8023))+(((-1.0)*r01*x8028))+((cj2*x8021)));
evalcond[2]=((((-1.0)*r12*x8029))+x8021+(((-1.0)*r10*x8031))+((r11*x8024)));
evalcond[3]=((((-1.0)*x8022))+(((-1.0)*r02*x8029))+(((-1.0)*r00*x8031))+((r01*x8024)));
evalcond[4]=((((-1.0)*x8032))+(((-1.0)*r02*x8030))+(((-1.0)*cj5*r01*x8027))+((r00*x8026)));
evalcond[5]=(((r10*x8026))+(((-1.0)*r12*x8030))+(((-1.0)*x8033))+(((-1.0)*cj5*r11*x8027)));
evalcond[6]=((((-0.01275)*x8032))+(((-1.0)*px))+(((0.73512)*x8022))+((r01*x8025))+(((0.0003501)*x8023)));
evalcond[7]=((((-0.01275)*x8033))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.73512)*x8021))+((r11*x8025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal((((r10*sj6))+((cj6*r11)))),IkReal((((r00*sj6))+((cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8034.value)))+(x8035.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8036=IKcos(j1);
IkReal x8037=IKsin(j1);
IkReal x8038=(r00*sj6);
IkReal x8039=(sj5*sj6);
IkReal x8040=((0.0003501)*cj6);
IkReal x8041=(cj5*cj6);
IkReal x8042=((1.0)*sj6);
IkReal x8043=((1.0)*cj6);
IkReal x8044=((1.0)*cj5);
IkReal x8045=((1.0)*sj5);
IkReal x8046=(sj5*x8043);
IkReal x8047=(sj2*x8036);
IkReal x8048=(sj2*x8037);
evalcond[0]=((((-1.0)*r11*x8043))+(((-1.0)*r10*x8042))+((cj2*x8037)));
evalcond[1]=((((-1.0)*x8038))+((cj2*x8036))+(((-1.0)*r01*x8043)));
evalcond[2]=((((-1.0)*r10*x8046))+x8036+((r11*x8039))+(((-1.0)*r12*x8044)));
evalcond[3]=((((-1.0)*x8037))+(((-1.0)*r02*x8044))+((r01*x8039))+(((-1.0)*r00*x8046)));
evalcond[4]=((((-1.0)*x8047))+(((-1.0)*r02*x8045))+(((-1.0)*cj5*r01*x8042))+((r00*x8041)));
evalcond[5]=(((r10*x8041))+(((-1.0)*x8048))+(((-1.0)*cj5*r11*x8042))+(((-1.0)*r12*x8045)));
evalcond[6]=(((r01*x8040))+(((-0.01275)*x8047))+(((-1.0)*px))+(((0.73512)*x8037))+(((0.0003501)*x8038)));
evalcond[7]=((((-0.01275)*x8048))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.73512)*x8036))+((r11*x8040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8049=((1.0)*sj6);
IkReal x8050=((1.0)*cj6);
j1eval[0]=cj2;
j1eval[1]=((IKabs(((((-1.0)*r01*x8050))+(((-1.0)*r00*x8049)))))+(IKabs(((((-1.0)*r10*x8049))+(((-1.0)*r11*x8050))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1eval[0]=cj2;
j1eval[1]=sj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x8051=((1.0)*sj6);
CheckValue<IkReal> x8052=IKPowWithIntegerCheck(cj2,-1);
if(!x8052.valid){
continue;
}
CheckValue<IkReal> x8053=IKPowWithIntegerCheck(sj2,-1);
if(!x8053.valid){
continue;
}
if( IKabs(((x8052.value)*(((((-1.0)*cj6*r11))+(((-1.0)*r10*x8051)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8053.value)*(((((-1.0)*r02*sj5))+((cj5*cj6*r00))+(((-1.0)*cj5*r01*x8051)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8052.value)*(((((-1.0)*cj6*r11))+(((-1.0)*r10*x8051))))))+IKsqr(((x8053.value)*(((((-1.0)*r02*sj5))+((cj5*cj6*r00))+(((-1.0)*cj5*r01*x8051))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x8052.value)*(((((-1.0)*cj6*r11))+(((-1.0)*r10*x8051))))), ((x8053.value)*(((((-1.0)*r02*sj5))+((cj5*cj6*r00))+(((-1.0)*cj5*r01*x8051))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8054=IKsin(j1);
IkReal x8055=IKcos(j1);
IkReal x8056=(r00*sj6);
IkReal x8057=(sj5*sj6);
IkReal x8058=((0.0003501)*cj6);
IkReal x8059=((0.01275)*sj2);
IkReal x8060=(cj5*cj6);
IkReal x8061=((1.0)*sj6);
IkReal x8062=((1.0)*cj6);
IkReal x8063=((1.0)*cj5);
IkReal x8064=((1.0)*sj5);
IkReal x8065=((1.0)*x8055);
IkReal x8066=(sj5*x8062);
IkReal x8067=((1.0)*x8054);
evalcond[0]=((((-1.0)*r10*x8061))+(((-1.0)*cj2*x8067))+(((-1.0)*r11*x8062)));
evalcond[1]=((((-1.0)*cj2*x8065))+(((-1.0)*x8056))+(((-1.0)*r01*x8062)));
evalcond[2]=((((-1.0)*r00*x8066))+x8054+((r01*x8057))+(((-1.0)*r02*x8063)));
evalcond[3]=((((-1.0)*x8065))+(((-1.0)*r10*x8066))+(((-1.0)*r12*x8063))+((r11*x8057)));
evalcond[4]=((((-1.0)*cj5*r01*x8061))+((r00*x8060))+(((-1.0)*sj2*x8065))+(((-1.0)*r02*x8064)));
evalcond[5]=(((r10*x8060))+(((-1.0)*cj5*r11*x8061))+(((-1.0)*r12*x8064))+(((-1.0)*sj2*x8067)));
evalcond[6]=((((0.1064)*x8054))+(((-1.0)*x8055*x8059))+(((-1.0)*px))+(((0.0003501)*x8056))+((r01*x8058)));
evalcond[7]=((((-0.1064)*x8055))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+((r11*x8058))+(((-1.0)*x8054*x8059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x8068=((1.0)*sj6);
CheckValue<IkReal> x8069=IKPowWithIntegerCheck(cj2,-1);
if(!x8069.valid){
continue;
}
if( IKabs((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x8068))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8069.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x8068)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x8068))+((cj5*r02))))+IKsqr(((x8069.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x8068))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x8068))+((cj5*r02))), ((x8069.value)*(((((-1.0)*cj6*r01))+(((-1.0)*r00*x8068))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8070=IKsin(j1);
IkReal x8071=IKcos(j1);
IkReal x8072=(r00*sj6);
IkReal x8073=(sj5*sj6);
IkReal x8074=((0.0003501)*cj6);
IkReal x8075=((0.01275)*sj2);
IkReal x8076=(cj5*cj6);
IkReal x8077=((1.0)*sj6);
IkReal x8078=((1.0)*cj6);
IkReal x8079=((1.0)*cj5);
IkReal x8080=((1.0)*sj5);
IkReal x8081=((1.0)*x8071);
IkReal x8082=(sj5*x8078);
IkReal x8083=((1.0)*x8070);
evalcond[0]=((((-1.0)*cj2*x8083))+(((-1.0)*r10*x8077))+(((-1.0)*r11*x8078)));
evalcond[1]=((((-1.0)*x8072))+(((-1.0)*cj2*x8081))+(((-1.0)*r01*x8078)));
evalcond[2]=((((-1.0)*r02*x8079))+(((-1.0)*r00*x8082))+((r01*x8073))+x8070);
evalcond[3]=((((-1.0)*x8081))+((r11*x8073))+(((-1.0)*r10*x8082))+(((-1.0)*r12*x8079)));
evalcond[4]=((((-1.0)*r02*x8080))+(((-1.0)*sj2*x8081))+(((-1.0)*cj5*r01*x8077))+((r00*x8076)));
evalcond[5]=(((r10*x8076))+(((-1.0)*sj2*x8083))+(((-1.0)*r12*x8080))+(((-1.0)*cj5*r11*x8077)));
evalcond[6]=((((0.0003501)*x8072))+(((0.1064)*x8070))+(((-1.0)*x8071*x8075))+((r01*x8074))+(((-1.0)*px)));
evalcond[7]=((((-1.0)*x8070*x8075))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.1064)*x8071))+((r11*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x8084=((1.0)*sj6);
IkReal x8085=((1.0)*cj6);
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x8084))+(((-1.0)*r11*x8085)))),IkReal(((((-1.0)*r01*x8085))+(((-1.0)*r00*x8084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x8087.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x8086.value)+(((1.5707963267949)*(x8087.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8088=IKsin(j1);
IkReal x8089=IKcos(j1);
IkReal x8090=(r00*sj6);
IkReal x8091=(sj5*sj6);
IkReal x8092=((0.0003501)*cj6);
IkReal x8093=((0.01275)*sj2);
IkReal x8094=(cj5*cj6);
IkReal x8095=((1.0)*sj6);
IkReal x8096=((1.0)*cj6);
IkReal x8097=((1.0)*cj5);
IkReal x8098=((1.0)*sj5);
IkReal x8099=((1.0)*x8089);
IkReal x8100=(sj5*x8096);
IkReal x8101=((1.0)*x8088);
evalcond[0]=((((-1.0)*cj2*x8101))+(((-1.0)*r11*x8096))+(((-1.0)*r10*x8095)));
evalcond[1]=((((-1.0)*cj2*x8099))+(((-1.0)*x8090))+(((-1.0)*r01*x8096)));
evalcond[2]=((((-1.0)*r02*x8097))+((r01*x8091))+x8088+(((-1.0)*r00*x8100)));
evalcond[3]=((((-1.0)*x8099))+((r11*x8091))+(((-1.0)*r12*x8097))+(((-1.0)*r10*x8100)));
evalcond[4]=((((-1.0)*r02*x8098))+(((-1.0)*cj5*r01*x8095))+((r00*x8094))+(((-1.0)*sj2*x8099)));
evalcond[5]=(((r10*x8094))+(((-1.0)*r12*x8098))+(((-1.0)*sj2*x8101))+(((-1.0)*cj5*r11*x8095)));
evalcond[6]=((((0.1064)*x8088))+(((-1.0)*px))+(((-1.0)*x8089*x8093))+((r01*x8092))+(((0.0003501)*x8090)));
evalcond[7]=((((0.0003501)*r10*sj6))+(((-0.1064)*x8089))+(((-1.0)*py))+((r11*x8092))+(((-1.0)*x8088*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x8107=IKPowWithIntegerCheck(sj2,-1);
if(!x8107.valid){
continue;
}
IkReal x8102=x8107.value;
IkReal x8103=(cj5*sj3);
IkReal x8104=(cj6*r00);
IkReal x8105=(r01*sj6);
IkReal x8106=(r02*sj5);
CheckValue<IkReal> x8108=IKPowWithIntegerCheck(cj2,-1);
if(!x8108.valid){
continue;
}
CheckValue<IkReal> x8109=IKPowWithIntegerCheck(cj3,-1);
if(!x8109.valid){
continue;
}
if( IKabs((x8102*(x8108.value)*(x8109.value)*((((r10*sj2*sj6))+(((-1.0)*x8103*x8104))+((sj3*x8106))+((cj6*r11*sj2))+((x8103*x8105)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8102*((((cj5*x8104))+(((-1.0)*x8106))+(((-1.0)*cj5*x8105)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8102*(x8108.value)*(x8109.value)*((((r10*sj2*sj6))+(((-1.0)*x8103*x8104))+((sj3*x8106))+((cj6*r11*sj2))+((x8103*x8105))))))+IKsqr((x8102*((((cj5*x8104))+(((-1.0)*x8106))+(((-1.0)*cj5*x8105))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x8102*(x8108.value)*(x8109.value)*((((r10*sj2*sj6))+(((-1.0)*x8103*x8104))+((sj3*x8106))+((cj6*r11*sj2))+((x8103*x8105))))), (x8102*((((cj5*x8104))+(((-1.0)*x8106))+(((-1.0)*cj5*x8105))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8110=IKsin(j1);
IkReal x8111=IKcos(j1);
IkReal x8112=((0.31436)*sj3);
IkReal x8113=(r00*sj6);
IkReal x8114=((1.0)*sj3);
IkReal x8115=(sj5*sj6);
IkReal x8116=((0.0003501)*cj6);
IkReal x8117=((0.01275)*sj2);
IkReal x8118=(cj5*cj6);
IkReal x8119=((1.0)*sj6);
IkReal x8120=((1.0)*cj6);
IkReal x8121=((1.0)*sj2);
IkReal x8122=((1.0)*cj5);
IkReal x8123=((1.0)*sj5);
IkReal x8124=(cj2*x8111);
IkReal x8125=(cj3*x8110);
IkReal x8126=(sj5*x8120);
IkReal x8127=(cj2*x8110);
IkReal x8128=(cj3*x8111);
evalcond[0]=((((-1.0)*x8111*x8121))+((r00*x8118))+(((-1.0)*cj5*r01*x8119))+(((-1.0)*r02*x8123)));
evalcond[1]=((((-1.0)*r12*x8123))+(((-1.0)*cj5*r11*x8119))+(((-1.0)*x8110*x8121))+((r10*x8118)));
evalcond[2]=((((-1.0)*r11*x8120))+(((-1.0)*r10*x8119))+((cj2*x8125))+((sj3*x8111)));
evalcond[3]=((((-1.0)*x8110*x8114))+((cj3*x8124))+(((-1.0)*r01*x8120))+(((-1.0)*x8113)));
evalcond[4]=((((-1.0)*x8114*x8127))+(((-1.0)*r12*x8122))+((r11*x8115))+(((-1.0)*r10*x8126))+x8128);
evalcond[5]=((((-1.0)*x8114*x8124))+((r01*x8115))+(((-1.0)*r02*x8122))+(((-1.0)*r00*x8126))+(((-1.0)*x8125)));
evalcond[6]=(((x8112*x8124))+(((-1.0)*x8111*x8117))+(((-1.0)*px))+(((0.42076)*x8110))+(((0.31436)*x8125))+((r01*x8116))+(((0.0003501)*x8113)));
evalcond[7]=((((-0.42076)*x8111))+((x8112*x8127))+(((-1.0)*x8110*x8117))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+((r11*x8116))+(((-0.31436)*x8128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x8134=IKPowWithIntegerCheck(sj2,-1);
if(!x8134.valid){
continue;
}
IkReal x8129=x8134.value;
IkReal x8130=(cj2*cj3);
IkReal x8131=(r12*sj5);
IkReal x8132=(cj5*cj6*r10);
IkReal x8133=(cj5*r11*sj6);
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(sj3,-1);
if(!x8135.valid){
continue;
}
if( IKabs((x8129*(((((-1.0)*x8133))+(((-1.0)*x8131))+x8132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8129*(x8135.value)*((((r10*sj2*sj6))+((x8130*x8131))+((x8130*x8133))+(((-1.0)*x8130*x8132))+((cj6*r11*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8129*(((((-1.0)*x8133))+(((-1.0)*x8131))+x8132))))+IKsqr((x8129*(x8135.value)*((((r10*sj2*sj6))+((x8130*x8131))+((x8130*x8133))+(((-1.0)*x8130*x8132))+((cj6*r11*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x8129*(((((-1.0)*x8133))+(((-1.0)*x8131))+x8132))), (x8129*(x8135.value)*((((r10*sj2*sj6))+((x8130*x8131))+((x8130*x8133))+(((-1.0)*x8130*x8132))+((cj6*r11*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8136=IKsin(j1);
IkReal x8137=IKcos(j1);
IkReal x8138=((0.31436)*sj3);
IkReal x8139=(r00*sj6);
IkReal x8140=((1.0)*sj3);
IkReal x8141=(sj5*sj6);
IkReal x8142=((0.0003501)*cj6);
IkReal x8143=((0.01275)*sj2);
IkReal x8144=(cj5*cj6);
IkReal x8145=((1.0)*sj6);
IkReal x8146=((1.0)*cj6);
IkReal x8147=((1.0)*sj2);
IkReal x8148=((1.0)*cj5);
IkReal x8149=((1.0)*sj5);
IkReal x8150=(cj2*x8137);
IkReal x8151=(cj3*x8136);
IkReal x8152=(sj5*x8146);
IkReal x8153=(cj2*x8136);
IkReal x8154=(cj3*x8137);
evalcond[0]=((((-1.0)*r02*x8149))+((r00*x8144))+(((-1.0)*cj5*r01*x8145))+(((-1.0)*x8137*x8147)));
evalcond[1]=((((-1.0)*cj5*r11*x8145))+((r10*x8144))+(((-1.0)*x8136*x8147))+(((-1.0)*r12*x8149)));
evalcond[2]=(((cj2*x8151))+(((-1.0)*r10*x8145))+(((-1.0)*r11*x8146))+((sj3*x8137)));
evalcond[3]=(((cj3*x8150))+(((-1.0)*r01*x8146))+(((-1.0)*x8139))+(((-1.0)*x8136*x8140)));
evalcond[4]=((((-1.0)*r10*x8152))+(((-1.0)*x8140*x8153))+((r11*x8141))+(((-1.0)*r12*x8148))+x8154);
evalcond[5]=((((-1.0)*x8140*x8150))+(((-1.0)*r02*x8148))+((r01*x8141))+(((-1.0)*x8151))+(((-1.0)*r00*x8152)));
evalcond[6]=((((0.42076)*x8136))+(((0.31436)*x8151))+(((0.0003501)*x8139))+(((-1.0)*px))+((r01*x8142))+((x8138*x8150))+(((-1.0)*x8137*x8143)));
evalcond[7]=((((-1.0)*x8136*x8143))+(((-0.31436)*x8154))+(((0.0003501)*r10*sj6))+(((-1.0)*py))+(((-0.42076)*x8137))+((r11*x8142))+((x8138*x8153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x8155=cj3*cj3;
IkReal x8156=(cj2*cj3);
IkReal x8157=(r00*sj6);
IkReal x8158=(cj6*r01);
IkReal x8159=(cj6*r11);
IkReal x8160=(r10*sj6);
IkReal x8161=((1.0)*sj3);
CheckValue<IkReal> x8162 = IKatan2WithCheck(IkReal((((x8156*x8159))+(((-1.0)*x8157*x8161))+(((-1.0)*x8158*x8161))+((x8156*x8160)))),IkReal((((x8156*x8158))+((x8156*x8157))+((sj3*x8160))+((sj3*x8159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8162.valid){
continue;
}
CheckValue<IkReal> x8163=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x8155))+((x8155*(cj2*cj2))))),-1);
if(!x8163.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x8162.value)+(((1.5707963267949)*(x8163.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x8164=IKsin(j1);
IkReal x8165=IKcos(j1);
IkReal x8166=((0.31436)*sj3);
IkReal x8167=(r00*sj6);
IkReal x8168=((1.0)*sj3);
IkReal x8169=(sj5*sj6);
IkReal x8170=((0.0003501)*cj6);
IkReal x8171=((0.01275)*sj2);
IkReal x8172=(cj5*cj6);
IkReal x8173=((1.0)*sj6);
IkReal x8174=((1.0)*cj6);
IkReal x8175=((1.0)*sj2);
IkReal x8176=((1.0)*cj5);
IkReal x8177=((1.0)*sj5);
IkReal x8178=(cj2*x8165);
IkReal x8179=(cj3*x8164);
IkReal x8180=(sj5*x8174);
IkReal x8181=(cj2*x8164);
IkReal x8182=(cj3*x8165);
evalcond[0]=((((-1.0)*x8165*x8175))+(((-1.0)*r02*x8177))+((r00*x8172))+(((-1.0)*cj5*r01*x8173)));
evalcond[1]=((((-1.0)*r12*x8177))+(((-1.0)*cj5*r11*x8173))+(((-1.0)*x8164*x8175))+((r10*x8172)));
evalcond[2]=((((-1.0)*r11*x8174))+((sj3*x8165))+((cj2*x8179))+(((-1.0)*r10*x8173)));
evalcond[3]=((((-1.0)*r01*x8174))+(((-1.0)*x8167))+((cj3*x8178))+(((-1.0)*x8164*x8168)));
evalcond[4]=(((r11*x8169))+(((-1.0)*r12*x8176))+(((-1.0)*r10*x8180))+(((-1.0)*x8168*x8181))+x8182);
evalcond[5]=((((-1.0)*x8179))+(((-1.0)*x8168*x8178))+(((-1.0)*r00*x8180))+((r01*x8169))+(((-1.0)*r02*x8176)));
evalcond[6]=((((0.0003501)*x8167))+(((0.31436)*x8179))+((x8166*x8178))+(((-1.0)*px))+(((-1.0)*x8165*x8171))+((r01*x8170))+(((0.42076)*x8164)));
evalcond[7]=(((x8166*x8181))+(((-0.31436)*x8182))+(((-0.42076)*x8165))+(((-1.0)*x8164*x8171))+((r11*x8170))+(((0.0003501)*r10*sj6))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x8183=cj3*cj3;
IkReal x8184=(cj2*cj3);
IkReal x8185=(r00*sj6);
IkReal x8186=(cj6*r01);
IkReal x8187=(cj6*r11);
IkReal x8188=(r10*sj6);
IkReal x8189=((1.0)*sj3);
CheckValue<IkReal> x8190=IKPowWithIntegerCheck(IKsign(((1.0)+((x8183*(cj2*cj2)))+(((-1.0)*x8183)))),-1);
if(!x8190.valid){
continue;
}
CheckValue<IkReal> x8191 = IKatan2WithCheck(IkReal((((x8184*x8187))+((x8184*x8188))+(((-1.0)*x8185*x8189))+(((-1.0)*x8186*x8189)))),IkReal((((sj3*x8187))+((sj3*x8188))+((x8184*x8186))+((x8184*x8185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8191.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8190.value)))+(x8191.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x8192=IKcos(j1);
IkReal x8193=IKsin(j1);
IkReal x8194=((0.31436)*sj3);
IkReal x8195=((0.31436)*cj3);
IkReal x8196=(r00*sj6);
IkReal x8197=((0.0003501)*cj6);
IkReal x8198=((0.01275)*sj2);
IkReal x8199=((1.0)*cj6);
IkReal x8200=(r10*sj6);
IkReal x8201=(cj2*x8192);
IkReal x8202=(cj2*x8193);
evalcond[0]=(((sj3*x8192))+(((-1.0)*x8200))+(((-1.0)*r11*x8199))+((cj3*x8202)));
evalcond[1]=((((-1.0)*sj3*x8193))+(((-1.0)*r01*x8199))+(((-1.0)*x8196))+((cj3*x8201)));
evalcond[2]=((((0.42076)*x8193))+((r01*x8197))+((x8194*x8201))+(((0.0003501)*x8196))+(((-1.0)*x8192*x8198))+(((-1.0)*px))+((x8193*x8195)));
evalcond[3]=(((r11*x8197))+((x8194*x8202))+(((0.0003501)*x8200))+(((-0.42076)*x8192))+(((-1.0)*x8192*x8195))+(((-1.0)*py))+(((-1.0)*x8193*x8198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x8203=((1.0)*sj6);
IkReal x8204=((1.0)*cj1*sj2);
IkReal x8205=((((-1.0)*r10*x8203))+(((-1.0)*cj6*r11)));
j5eval[0]=x8205;
j5eval[1]=IKsign(x8205);
j5eval[2]=((IKabs((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj6*r20*x8204))+(((-1.0)*cj2*r01*x8203)))))+(IKabs((((cj2*r02))+(((-1.0)*r22*x8204))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x8206=cj6*cj6;
IkReal x8207=r21*r21;
IkReal x8208=(sj2*sj3);
IkReal x8209=(cj6*r20);
IkReal x8210=((1.0)*cj2);
IkReal x8211=(r21*sj6);
IkReal x8212=((r22*r22)+(((-1.0)*x8206*x8207))+((x8206*(r20*r20)))+(((-2.0)*x8209*x8211))+x8207);
j5eval[0]=x8212;
j5eval[1]=((IKabs((((r22*x8208))+(((-1.0)*x8210*x8211))+((cj2*x8209)))))+(IKabs((((x8208*x8209))+(((-1.0)*r22*x8210))+(((-1.0)*x8208*x8211))))));
j5eval[2]=IKsign(x8212);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x8213=cj6*cj6;
IkReal x8214=((1.0)*sj2);
IkReal x8215=(r01*sj6);
IkReal x8216=(cj6*r00);
IkReal x8217=(sj2*sj3);
IkReal x8218=(r21*sj6);
IkReal x8219=(cj6*r20);
IkReal x8220=(r01*r21);
IkReal x8221=((((-1.0)*x8213*x8220))+(((-1.0)*x8216*x8218))+(((-1.0)*x8215*x8219))+((r00*r20*x8213))+((r02*r22))+x8220);
j5eval[0]=x8221;
j5eval[1]=IKsign(x8221);
j5eval[2]=((IKabs(((((-1.0)*cj1*x8214*x8218))+((cj1*sj2*x8219))+((r02*x8217)))))+(IKabs((((x8216*x8217))+(((-1.0)*sj3*x8214*x8215))+(((-1.0)*cj1*r22*x8214))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x8222=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x8222;
j5eval[1]=IKsign(x8222);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x8223=((1.0)*sj6);
IkReal x8224=((((-1.0)*cj6*r11))+(((-1.0)*r10*x8223)));
j5eval[0]=x8224;
j5eval[1]=((IKabs(r02))+(IKabs((((cj6*r00))+(((-1.0)*r01*x8223))))));
j5eval[2]=IKsign(x8224);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x8225=r21*r21;
IkReal x8226=cj6*cj6;
IkReal x8227=(r21*sj6);
IkReal x8228=(cj6*r20);
IkReal x8229=((((-1.0)*x8225))+(((-1.0)*(r22*r22)))+((x8225*x8226))+(((-1.0)*x8226*(r20*r20)))+(((2.0)*x8227*x8228)));
j5eval[0]=x8229;
j5eval[1]=IKsign(x8229);
j5eval[2]=((IKabs(((((-1.0)*x8228))+x8227)))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8230=r21*r21;
IkReal x8231=cj6*cj6;
IkReal x8232=(r21*sj6);
IkReal x8233=(cj6*r20);
CheckValue<IkReal> x8234=IKPowWithIntegerCheck(IKsign(((((2.0)*x8232*x8233))+(((-1.0)*x8230))+(((-1.0)*(r22*r22)))+(((-1.0)*x8231*(r20*r20)))+((x8230*x8231)))),-1);
if(!x8234.valid){
continue;
}
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x8233))+x8232)),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8234.value)))+(x8235.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8236=IKsin(j5);
IkReal x8237=IKcos(j5);
IkReal x8238=((1.0)*sj3);
IkReal x8239=(sj6*x8236);
IkReal x8240=((1.0)*x8236);
IkReal x8241=((1.0)*x8237);
IkReal x8242=(cj6*x8237);
IkReal x8243=(sj6*x8241);
IkReal x8244=(cj6*x8240);
evalcond[0]=((((-1.0)*r20*x8244))+(((-1.0)*r22*x8241))+((r21*x8239)));
evalcond[1]=((((-1.0)*r02*x8240))+(((-1.0)*r01*x8243))+((r00*x8242)));
evalcond[2]=(((r10*x8242))+(((-1.0)*r11*x8243))+(((-1.0)*r12*x8240)));
evalcond[3]=((-1.0)+((r20*x8242))+(((-1.0)*r21*x8243))+(((-1.0)*r22*x8240)));
evalcond[4]=((((-1.0)*sj1*x8238))+((r11*x8239))+(((-1.0)*r10*x8244))+((cj1*cj3))+(((-1.0)*r12*x8241)));
evalcond[5]=((((-1.0)*r00*x8244))+(((-1.0)*cj1*x8238))+((r01*x8239))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8245=((1.0)*sj6);
CheckValue<IkReal> x8246 = IKatan2WithCheck(IkReal((((cj6*r00))+(((-1.0)*r01*x8245)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8246.valid){
continue;
}
CheckValue<IkReal> x8247=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x8245)))),-1);
if(!x8247.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8246.value)+(((1.5707963267949)*(x8247.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8248=IKsin(j5);
IkReal x8249=IKcos(j5);
IkReal x8250=((1.0)*sj3);
IkReal x8251=(sj6*x8248);
IkReal x8252=((1.0)*x8248);
IkReal x8253=((1.0)*x8249);
IkReal x8254=(cj6*x8249);
IkReal x8255=(sj6*x8253);
IkReal x8256=(cj6*x8252);
evalcond[0]=(((r21*x8251))+(((-1.0)*r22*x8253))+(((-1.0)*r20*x8256)));
evalcond[1]=(((r00*x8254))+(((-1.0)*r01*x8255))+(((-1.0)*r02*x8252)));
evalcond[2]=(((r10*x8254))+(((-1.0)*r12*x8252))+(((-1.0)*r11*x8255)));
evalcond[3]=((-1.0)+(((-1.0)*r22*x8252))+(((-1.0)*r21*x8255))+((r20*x8254)));
evalcond[4]=((((-1.0)*r12*x8253))+(((-1.0)*r10*x8256))+((r11*x8251))+(((-1.0)*sj1*x8250))+((cj1*cj3)));
evalcond[5]=(((r01*x8251))+(((-1.0)*r00*x8256))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8250))+(((-1.0)*r02*x8253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8257=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x8257.valid){
continue;
}
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8257.value)))+(x8258.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8259=IKsin(j5);
IkReal x8260=IKcos(j5);
IkReal x8261=((1.0)*sj3);
IkReal x8262=(sj6*x8259);
IkReal x8263=((1.0)*x8259);
IkReal x8264=((1.0)*x8260);
IkReal x8265=(cj6*x8260);
IkReal x8266=(sj6*x8264);
IkReal x8267=(cj6*x8263);
evalcond[0]=((((-1.0)*r20*x8267))+((r21*x8262))+(((-1.0)*r22*x8264)));
evalcond[1]=((((-1.0)*r02*x8263))+(((-1.0)*r01*x8266))+((r00*x8265)));
evalcond[2]=((((-1.0)*r12*x8263))+(((-1.0)*r11*x8266))+((r10*x8265)));
evalcond[3]=((-1.0)+(((-1.0)*r21*x8266))+((r20*x8265))+(((-1.0)*r22*x8263)));
evalcond[4]=((((-1.0)*r12*x8264))+(((-1.0)*sj1*x8261))+(((-1.0)*r10*x8267))+((cj1*cj3))+((r11*x8262)));
evalcond[5]=((((-1.0)*r02*x8264))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8261))+((r01*x8262))+(((-1.0)*r00*x8267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x8268=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x8268;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj6))+((cj6*r00))))));
j5eval[2]=IKsign(x8268);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x8269=((1.0)*sj6);
IkReal x8270=((((-1.0)*cj6*r01))+(((-1.0)*r00*x8269)));
j5eval[0]=x8270;
j5eval[1]=IKsign(x8270);
j5eval[2]=((IKabs((((cj6*r10))+(((-1.0)*r11*x8269)))))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x8271=cj6*cj6;
IkReal x8272=r21*r21;
IkReal x8273=(r21*sj6);
IkReal x8274=(cj6*r20);
IkReal x8275=((r22*r22)+((x8271*(r20*r20)))+(((-1.0)*x8271*x8272))+(((-2.0)*x8273*x8274))+x8272);
j5eval[0]=x8275;
j5eval[1]=IKsign(x8275);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x8274))+x8273))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8276=cj6*cj6;
IkReal x8277=r21*r21;
IkReal x8278=(r21*sj6);
IkReal x8279=(cj6*r20);
CheckValue<IkReal> x8280 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x8279))+x8278)),IKFAST_ATAN2_MAGTHRESH);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8278*x8279))+x8277+((x8276*(r20*r20)))+(((-1.0)*x8276*x8277)))),-1);
if(!x8281.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8280.value)+(((1.5707963267949)*(x8281.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8282=IKsin(j5);
IkReal x8283=IKcos(j5);
IkReal x8284=(sj6*x8282);
IkReal x8285=((1.0)*x8282);
IkReal x8286=((1.0)*x8283);
IkReal x8287=(cj6*x8283);
IkReal x8288=(sj6*x8286);
IkReal x8289=(cj6*x8285);
evalcond[0]=((((-1.0)*r20*x8289))+((r21*x8284))+(((-1.0)*r22*x8286)));
evalcond[1]=((((-1.0)*r02*x8285))+((r00*x8287))+(((-1.0)*r01*x8288)));
evalcond[2]=((((-1.0)*r12*x8285))+((r10*x8287))+(((-1.0)*r11*x8288)));
evalcond[3]=((1.0)+(((-1.0)*r21*x8288))+((r20*x8287))+(((-1.0)*r22*x8285)));
evalcond[4]=((((-1.0)*r12*x8286))+((sj1*sj3))+(((-1.0)*r10*x8289))+((r11*x8284))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r02*x8286))+((r01*x8284))+((cj1*sj3))+(((-1.0)*r00*x8289))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8290=((1.0)*sj6);
CheckValue<IkReal> x8291 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x8290))+((cj6*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8291.valid){
continue;
}
CheckValue<IkReal> x8292=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01))+(((-1.0)*r00*x8290)))),-1);
if(!x8292.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8291.value)+(((1.5707963267949)*(x8292.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8293=IKsin(j5);
IkReal x8294=IKcos(j5);
IkReal x8295=(sj6*x8293);
IkReal x8296=((1.0)*x8293);
IkReal x8297=((1.0)*x8294);
IkReal x8298=(cj6*x8294);
IkReal x8299=(sj6*x8297);
IkReal x8300=(cj6*x8296);
evalcond[0]=(((r21*x8295))+(((-1.0)*r20*x8300))+(((-1.0)*r22*x8297)));
evalcond[1]=(((r00*x8298))+(((-1.0)*r01*x8299))+(((-1.0)*r02*x8296)));
evalcond[2]=((((-1.0)*r11*x8299))+(((-1.0)*r12*x8296))+((r10*x8298)));
evalcond[3]=((1.0)+(((-1.0)*r21*x8299))+((r20*x8298))+(((-1.0)*r22*x8296)));
evalcond[4]=((((-1.0)*r12*x8297))+((sj1*sj3))+(((-1.0)*r10*x8300))+((r11*x8295))+((cj1*cj3)));
evalcond[5]=(((r01*x8295))+(((-1.0)*r00*x8300))+((cj1*sj3))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x8297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
CheckValue<IkReal> x8302=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x8302.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8301.value)+(((1.5707963267949)*(x8302.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8303=IKsin(j5);
IkReal x8304=IKcos(j5);
IkReal x8305=(sj6*x8303);
IkReal x8306=((1.0)*x8303);
IkReal x8307=((1.0)*x8304);
IkReal x8308=(cj6*x8304);
IkReal x8309=(sj6*x8307);
IkReal x8310=(cj6*x8306);
evalcond[0]=((((-1.0)*r22*x8307))+(((-1.0)*r20*x8310))+((r21*x8305)));
evalcond[1]=(((r00*x8308))+(((-1.0)*r01*x8309))+(((-1.0)*r02*x8306)));
evalcond[2]=((((-1.0)*r12*x8306))+(((-1.0)*r11*x8309))+((r10*x8308)));
evalcond[3]=((1.0)+(((-1.0)*r22*x8306))+(((-1.0)*r21*x8309))+((r20*x8308)));
evalcond[4]=((((-1.0)*r12*x8307))+((sj1*sj3))+((r11*x8305))+((cj1*cj3))+(((-1.0)*r10*x8310)));
evalcond[5]=(((cj1*sj3))+((r01*x8305))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x8307))+(((-1.0)*r00*x8310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8311=((-1.0)*r10);
IkReal x8313 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8313)==0){
continue;
}
IkReal x8312=pow(x8313,-0.5);
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8311),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
IkReal gconst60=((-1.0)*(x8314.value));
IkReal gconst61=(r11*x8312);
IkReal gconst62=(x8311*x8312);
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8315.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8316=(sj1*sj2);
CheckValue<IkReal> x8317=IKPowWithIntegerCheck(IKsign((((gconst61*r00))+((gconst62*r01)))),-1);
if(!x8317.valid){
continue;
}
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*gconst61*r11))+((cj2*gconst62*r10))+(((-1.0)*gconst62*r20*x8316))+((gconst61*r21*x8316)))),IkReal((((cj2*r12))+(((-1.0)*r22*x8316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8317.value)))+(x8318.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8319=IKsin(j5);
IkReal x8320=IKcos(j5);
IkReal x8321=((1.0)*sj2);
IkReal x8322=(gconst61*x8319);
IkReal x8323=((1.0)*cj2*sj3);
IkReal x8324=(gconst62*x8320);
IkReal x8325=((1.0)*x8319);
IkReal x8326=((1.0)*x8320);
IkReal x8327=(gconst61*x8326);
IkReal x8328=(gconst62*x8325);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x8326))+((r21*x8322))+(((-1.0)*r20*x8328)));
evalcond[1]=((((-1.0)*r22*x8325))+(((-1.0)*r21*x8327))+((r20*x8324))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r01*x8327))+(((-1.0)*cj1*x8321))+((r00*x8324))+(((-1.0)*r02*x8325)));
evalcond[3]=(((r10*x8324))+(((-1.0)*r11*x8327))+(((-1.0)*r12*x8325))+(((-1.0)*sj1*x8321)));
evalcond[4]=((((-1.0)*r10*x8328))+((r11*x8322))+(((-1.0)*r12*x8326))+((cj1*cj3))+(((-1.0)*sj1*x8323)));
evalcond[5]=((((-1.0)*r00*x8328))+(((-1.0)*cj1*x8323))+(((-1.0)*cj3*sj1))+((r01*x8322))+(((-1.0)*r02*x8326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8329=((-1.0)*r11);
IkReal x8331 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8331)==0){
continue;
}
IkReal x8330=pow(x8331,-0.5);
CheckValue<IkReal> x8332 = IKatan2WithCheck(IkReal(x8329),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8332.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x8332.value))));
IkReal gconst64=(x8329*x8330);
IkReal gconst65=((1.0)*r10*x8330);
CheckValue<IkReal> x8333 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8333.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8333.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8334=((-1.0)*r11);
CheckValue<IkReal> x8337 = IKatan2WithCheck(IkReal(x8334),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8337.valid){
continue;
}
IkReal x8335=((1.0)*(x8337.value));
IkReal x8336=x8330;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj6=gconst64;
cj6=gconst65;
j6=((3.14159265)+(((-1.0)*x8335)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x8335)));
IkReal gconst64=(x8334*x8336);
IkReal gconst65=((1.0)*r10*x8336);
IkReal x8338=r12*r12;
IkReal x8339=(cj2*r02);
CheckValue<IkReal> x8344=IKPowWithIntegerCheck(((-1.0)+x8338),-1);
if(!x8344.valid){
continue;
}
IkReal x8340=x8344.value;
IkReal x8341=((1.0)*cj1*r22*sj2);
if((((1.0)+(((-1.0)*x8338)))) < -0.00001)
continue;
IkReal x8342=IKsqrt(((1.0)+(((-1.0)*x8338))));
IkReal x8343=(r12*x8340*x8342);
j5eval[0]=0;
j5eval[1]=0;
j5eval[2]=((IKabs(((((-1.0)*x8341*x8343))+((x8339*x8343)))))+(IKabs((x8339+(((-1.0)*x8341))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8345=(gconst65*r20);
IkReal x8346=(sj2*sj3);
IkReal x8347=(gconst64*r21);
IkReal x8348=((1.0)*cj2);
CheckValue<IkReal> x8349 = IKatan2WithCheck(IkReal((((x8345*x8346))+(((-1.0)*r22*x8348))+(((-1.0)*x8346*x8347)))),IkReal((((cj2*x8345))+((r22*x8346))+(((-1.0)*x8347*x8348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8349.valid){
continue;
}
CheckValue<IkReal> x8350=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8347*x8347)+(x8345*x8345)+(((-2.0)*x8345*x8347)))),-1);
if(!x8350.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8349.value)+(((1.5707963267949)*(x8350.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8351=IKsin(j5);
IkReal x8352=IKcos(j5);
IkReal x8353=(gconst64*r01);
IkReal x8354=(gconst65*r00);
IkReal x8355=(gconst64*r11);
IkReal x8356=(gconst65*r20);
IkReal x8357=((1.0)*sj1);
IkReal x8358=(cj2*sj3);
IkReal x8359=((1.0)*cj1);
IkReal x8360=(gconst64*r21);
IkReal x8361=(gconst65*r10);
IkReal x8362=((1.0)*x8352);
IkReal x8363=((1.0)*x8351);
evalcond[0]=(((sj2*sj3))+((x8351*x8360))+(((-1.0)*r22*x8362))+(((-1.0)*x8356*x8363)));
evalcond[1]=((((-1.0)*r22*x8363))+(((-1.0)*cj2))+(((-1.0)*x8360*x8362))+((x8352*x8356)));
evalcond[2]=((((-1.0)*r02*x8363))+(((-1.0)*sj2*x8359))+(((-1.0)*x8353*x8362))+((x8352*x8354)));
evalcond[3]=(((x8352*x8361))+(((-1.0)*r12*x8363))+(((-1.0)*sj2*x8357))+(((-1.0)*x8355*x8362)));
evalcond[4]=((((-1.0)*x8361*x8363))+((x8351*x8355))+(((-1.0)*x8357*x8358))+(((-1.0)*r12*x8362))+((cj1*cj3)));
evalcond[5]=((((-1.0)*x8358*x8359))+((x8351*x8353))+(((-1.0)*r02*x8362))+(((-1.0)*x8354*x8363))+(((-1.0)*cj3*x8357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8364=((1.0)*gconst64);
IkReal x8365=((1.0)*cj1*sj2);
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r01*x8364))+(((-1.0)*gconst65*r20*x8365))+((cj1*gconst64*r21*sj2))+((cj2*gconst65*r00)))),IkReal((((cj2*r02))+(((-1.0)*r22*x8365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
CheckValue<IkReal> x8367=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r11))+(((-1.0)*r10*x8364)))),-1);
if(!x8367.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8366.value)+(((1.5707963267949)*(x8367.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8368=IKsin(j5);
IkReal x8369=IKcos(j5);
IkReal x8370=(gconst64*r01);
IkReal x8371=(gconst65*r00);
IkReal x8372=(gconst64*r11);
IkReal x8373=(gconst65*r20);
IkReal x8374=((1.0)*sj1);
IkReal x8375=(cj2*sj3);
IkReal x8376=((1.0)*cj1);
IkReal x8377=(gconst64*r21);
IkReal x8378=(gconst65*r10);
IkReal x8379=((1.0)*x8369);
IkReal x8380=((1.0)*x8368);
evalcond[0]=(((sj2*sj3))+(((-1.0)*x8373*x8380))+(((-1.0)*r22*x8379))+((x8368*x8377)));
evalcond[1]=(((x8369*x8373))+(((-1.0)*x8377*x8379))+(((-1.0)*r22*x8380))+(((-1.0)*cj2)));
evalcond[2]=(((x8369*x8371))+(((-1.0)*r02*x8380))+(((-1.0)*sj2*x8376))+(((-1.0)*x8370*x8379)));
evalcond[3]=(((x8369*x8378))+(((-1.0)*x8372*x8379))+(((-1.0)*sj2*x8374))+(((-1.0)*r12*x8380)));
evalcond[4]=((((-1.0)*x8374*x8375))+(((-1.0)*r12*x8379))+((x8368*x8372))+((cj1*cj3))+(((-1.0)*x8378*x8380)));
evalcond[5]=((((-1.0)*cj3*x8374))+(((-1.0)*x8371*x8380))+(((-1.0)*r02*x8379))+((x8368*x8370))+(((-1.0)*x8375*x8376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8381=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8381);
rxp0_2=(py*r00);
rxp1_0=(r21*x8381);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8382=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8382);
rxp0_2=(py*r00);
rxp1_0=(r21*x8382);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8383=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8383);
rxp0_2=(py*r00);
rxp1_0=(r21*x8383);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8384=IKPowWithIntegerCheck(r12,-1);
if(!x8384.valid){
continue;
}
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(((((-1.0)*r01*sj6))+((cj6*r00))),-1);
if(!x8385.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x8384.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x8385.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x8384.value)))+IKsqr((cj1*sj2*(x8385.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x8384.value)), (cj1*sj2*(x8385.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8386=IKsin(j5);
IkReal x8387=IKcos(j5);
IkReal x8388=((1.0)*sj1);
IkReal x8389=(cj2*sj3);
IkReal x8390=((1.0)*cj1);
IkReal x8391=(cj6*x8387);
IkReal x8392=(sj6*x8386);
IkReal x8393=((1.0)*x8386);
IkReal x8394=((1.0)*sj6*x8387);
evalcond[0]=((((-1.0)*sj2*x8388))+(((-1.0)*r12*x8393)));
evalcond[1]=(((cj1*cj3))+(((-1.0)*r12*x8387))+(((-1.0)*x8388*x8389)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*cj6*r20*x8393))+((r21*x8392)));
evalcond[3]=(((r20*x8391))+(((-1.0)*cj2))+(((-1.0)*r21*x8394)));
evalcond[4]=((((-1.0)*sj2*x8390))+((r00*x8391))+(((-1.0)*r01*x8394)));
evalcond[5]=((((-1.0)*cj6*r00*x8393))+(((-1.0)*cj3*x8388))+((r01*x8392))+(((-1.0)*x8389*x8390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8395=IKPowWithIntegerCheck(r12,-1);
if(!x8395.valid){
continue;
}
CheckValue<IkReal> x8396=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x8396.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x8395.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x8396.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x8395.value)))+IKsqr((cj2*(x8396.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x8395.value)), (cj2*(x8396.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8397=IKsin(j5);
IkReal x8398=IKcos(j5);
IkReal x8399=((1.0)*sj1);
IkReal x8400=(cj2*sj3);
IkReal x8401=((1.0)*cj1);
IkReal x8402=(cj6*x8398);
IkReal x8403=(sj6*x8397);
IkReal x8404=((1.0)*x8397);
IkReal x8405=((1.0)*sj6*x8398);
evalcond[0]=((((-1.0)*sj2*x8399))+(((-1.0)*r12*x8404)));
evalcond[1]=((((-1.0)*x8399*x8400))+((cj1*cj3))+(((-1.0)*r12*x8398)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*cj6*r20*x8404))+((r21*x8403)));
evalcond[3]=((((-1.0)*r21*x8405))+((r20*x8402))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*r01*x8405))+((r00*x8402))+(((-1.0)*sj2*x8401)));
evalcond[5]=((((-1.0)*cj3*x8399))+((r01*x8403))+(((-1.0)*x8400*x8401))+(((-1.0)*cj6*r00*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x8406.valid){
continue;
}
CheckValue<IkReal> x8407 = IKatan2WithCheck(IkReal(((-1.0)*sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8407.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8406.value)))+(x8407.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8408=IKsin(j5);
IkReal x8409=IKcos(j5);
IkReal x8410=((1.0)*sj1);
IkReal x8411=(cj2*sj3);
IkReal x8412=((1.0)*cj1);
IkReal x8413=(cj6*x8409);
IkReal x8414=(sj6*x8408);
IkReal x8415=((1.0)*x8408);
IkReal x8416=((1.0)*sj6*x8409);
evalcond[0]=((((-1.0)*r12*x8415))+(((-1.0)*sj2*x8410)));
evalcond[1]=((((-1.0)*x8410*x8411))+(((-1.0)*r12*x8409))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*cj6*r20*x8415))+((r21*x8414)));
evalcond[3]=(((r20*x8413))+(((-1.0)*r21*x8416))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*r01*x8416))+((r00*x8413))+(((-1.0)*sj2*x8412)));
evalcond[5]=((((-1.0)*cj6*r00*x8415))+((r01*x8414))+(((-1.0)*x8411*x8412))+(((-1.0)*cj3*x8410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8417=((1.0)*sj6);
IkReal x8418=((((-1.0)*r00*x8417))+(((-1.0)*cj6*r01)));
j5eval[0]=x8418;
j5eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x8417))+((cj6*r20))))));
j5eval[2]=IKsign(x8418);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8419=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x8419;
j5eval[1]=((IKabs((r12*sj3)))+(IKabs((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3))))));
j5eval[2]=IKsign(x8419);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8420=cj6*cj6;
IkReal x8421=r11*r11;
IkReal x8422=(r11*sj6);
IkReal x8423=(cj6*r10);
IkReal x8424=((((2.0)*x8422*x8423))+(((-1.0)*x8420*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8420*x8421))+(((-1.0)*x8421)));
j5eval[0]=x8424;
j5eval[1]=((IKabs(r12))+(IKabs((x8422+(((-1.0)*x8423))))));
j5eval[2]=IKsign(x8424);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8425=cj6*cj6;
IkReal x8426=r11*r11;
IkReal x8427=(r11*sj6);
IkReal x8428=(cj6*r10);
CheckValue<IkReal> x8429 = IKatan2WithCheck(IkReal(r12),IkReal((x8427+(((-1.0)*x8428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8429.valid){
continue;
}
CheckValue<IkReal> x8430=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8425*(r10*r10)))+((x8425*x8426))+(((2.0)*x8427*x8428))+(((-1.0)*(r12*r12)))+(((-1.0)*x8426)))),-1);
if(!x8430.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8429.value)+(((1.5707963267949)*(x8430.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8431=IKsin(j5);
IkReal x8432=IKcos(j5);
IkReal x8433=(r01*sj6);
IkReal x8434=(r21*sj6);
IkReal x8435=(r11*sj6);
IkReal x8436=((1.0)*x8431);
IkReal x8437=((1.0)*x8432);
IkReal x8438=(cj6*x8432);
evalcond[0]=((((-1.0)*r12*x8437))+(((-1.0)*cj6*r10*x8436))+((x8431*x8435)));
evalcond[1]=((((-1.0)*r22*x8436))+(((-1.0)*x8434*x8437))+((r20*x8438)));
evalcond[2]=((((-1.0)*r02*x8436))+((r00*x8438))+(((-1.0)*x8433*x8437)));
evalcond[3]=(sj3+(((-1.0)*cj6*r20*x8436))+(((-1.0)*r22*x8437))+((x8431*x8434)));
evalcond[4]=((-1.0)+(((-1.0)*x8435*x8437))+(((-1.0)*r12*x8436))+((r10*x8438)));
evalcond[5]=((((-1.0)*r02*x8437))+(((-1.0)*cj6*r00*x8436))+((x8431*x8433))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
CheckValue<IkReal> x8440=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x8440.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8439.value)+(((1.5707963267949)*(x8440.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8441=IKsin(j5);
IkReal x8442=IKcos(j5);
IkReal x8443=(r01*sj6);
IkReal x8444=(r21*sj6);
IkReal x8445=(r11*sj6);
IkReal x8446=((1.0)*x8441);
IkReal x8447=((1.0)*x8442);
IkReal x8448=(cj6*x8442);
evalcond[0]=(((x8441*x8445))+(((-1.0)*r12*x8447))+(((-1.0)*cj6*r10*x8446)));
evalcond[1]=((((-1.0)*x8444*x8447))+((r20*x8448))+(((-1.0)*r22*x8446)));
evalcond[2]=((((-1.0)*x8443*x8447))+((r00*x8448))+(((-1.0)*r02*x8446)));
evalcond[3]=(sj3+((x8441*x8444))+(((-1.0)*cj6*r20*x8446))+(((-1.0)*r22*x8447)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8446))+(((-1.0)*x8445*x8447))+((r10*x8448)));
evalcond[5]=(((x8441*x8443))+(((-1.0)*cj6*r00*x8446))+(((-1.0)*r02*x8447))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8449=((1.0)*sj6);
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8449))+(((-1.0)*cj6*r01)))),-1);
if(!x8450.valid){
continue;
}
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8449)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8450.value)))+(x8451.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8452=IKsin(j5);
IkReal x8453=IKcos(j5);
IkReal x8454=(r01*sj6);
IkReal x8455=(r21*sj6);
IkReal x8456=(r11*sj6);
IkReal x8457=((1.0)*x8452);
IkReal x8458=((1.0)*x8453);
IkReal x8459=(cj6*x8453);
evalcond[0]=((((-1.0)*r12*x8458))+((x8452*x8456))+(((-1.0)*cj6*r10*x8457)));
evalcond[1]=(((r20*x8459))+(((-1.0)*r22*x8457))+(((-1.0)*x8455*x8458)));
evalcond[2]=((((-1.0)*x8454*x8458))+(((-1.0)*r02*x8457))+((r00*x8459)));
evalcond[3]=(sj3+(((-1.0)*cj6*r20*x8457))+(((-1.0)*r22*x8458))+((x8452*x8455)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8457))+(((-1.0)*x8456*x8458))+((r10*x8459)));
evalcond[5]=((((-1.0)*cj6*r00*x8457))+(((-1.0)*r02*x8458))+((x8452*x8454))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x8460=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x8460;
j5eval[1]=((IKabs((r12*sj3)))+(IKabs((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3))))));
j5eval[2]=IKsign(x8460);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x8461=((1.0)*cj6);
IkReal x8462=((((-1.0)*r21*x8461))+(((-1.0)*r20*sj6)));
j5eval[0]=x8462;
j5eval[1]=((IKabs((cj3*r12)))+(IKabs((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x8461))))));
j5eval[2]=IKsign(x8462);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x8463=cj6*cj6;
IkReal x8464=r11*r11;
IkReal x8465=(r11*sj6);
IkReal x8466=(cj6*r10);
IkReal x8467=((((-1.0)*x8463*x8464))+(r12*r12)+x8464+(((-2.0)*x8465*x8466))+((x8463*(r10*r10))));
j5eval[0]=x8467;
j5eval[1]=IKsign(x8467);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8466))+x8465))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8468=cj6*cj6;
IkReal x8469=r11*r11;
IkReal x8470=(r11*sj6);
IkReal x8471=(cj6*r10);
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal(r12),IkReal((x8470+(((-1.0)*x8471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
CheckValue<IkReal> x8473=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8469+((x8468*(r10*r10)))+(((-1.0)*x8468*x8469))+(((-2.0)*x8470*x8471)))),-1);
if(!x8473.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8472.value)+(((1.5707963267949)*(x8473.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8474=IKsin(j5);
IkReal x8475=IKcos(j5);
IkReal x8476=(r01*sj6);
IkReal x8477=(r21*sj6);
IkReal x8478=(r11*sj6);
IkReal x8479=((1.0)*x8474);
IkReal x8480=((1.0)*x8475);
IkReal x8481=(cj6*x8475);
evalcond[0]=((((-1.0)*cj6*r10*x8479))+(((-1.0)*r12*x8480))+((x8474*x8478)));
evalcond[1]=((((-1.0)*x8477*x8480))+(((-1.0)*r22*x8479))+((r20*x8481)));
evalcond[2]=((((-1.0)*r02*x8479))+(((-1.0)*x8476*x8480))+((r00*x8481)));
evalcond[3]=(sj3+(((-1.0)*cj6*r20*x8479))+(((-1.0)*r22*x8480))+((x8474*x8477)));
evalcond[4]=((((-1.0)*r02*x8480))+cj3+(((-1.0)*cj6*r00*x8479))+((x8474*x8476)));
evalcond[5]=((1.0)+((r10*x8481))+(((-1.0)*x8478*x8480))+(((-1.0)*r12*x8479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8482=((1.0)*cj6);
CheckValue<IkReal> x8483=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8482))+(((-1.0)*r20*sj6)))),-1);
if(!x8483.valid){
continue;
}
CheckValue<IkReal> x8484 = IKatan2WithCheck(IkReal((cj3*r12)),IkReal((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x8482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8484.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8483.value)))+(x8484.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8485=IKsin(j5);
IkReal x8486=IKcos(j5);
IkReal x8487=(r01*sj6);
IkReal x8488=(r21*sj6);
IkReal x8489=(r11*sj6);
IkReal x8490=((1.0)*x8485);
IkReal x8491=((1.0)*x8486);
IkReal x8492=(cj6*x8486);
evalcond[0]=(((x8485*x8489))+(((-1.0)*cj6*r10*x8490))+(((-1.0)*r12*x8491)));
evalcond[1]=((((-1.0)*r22*x8490))+(((-1.0)*x8488*x8491))+((r20*x8492)));
evalcond[2]=(((r00*x8492))+(((-1.0)*r02*x8490))+(((-1.0)*x8487*x8491)));
evalcond[3]=(sj3+((x8485*x8488))+(((-1.0)*r22*x8491))+(((-1.0)*cj6*r20*x8490)));
evalcond[4]=((((-1.0)*r02*x8491))+cj3+((x8485*x8487))+(((-1.0)*cj6*r00*x8490)));
evalcond[5]=((1.0)+((r10*x8492))+(((-1.0)*r12*x8490))+(((-1.0)*x8489*x8491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
CheckValue<IkReal> x8494=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x8494.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8493.value)+(((1.5707963267949)*(x8494.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8495=IKsin(j5);
IkReal x8496=IKcos(j5);
IkReal x8497=(r01*sj6);
IkReal x8498=(r21*sj6);
IkReal x8499=(r11*sj6);
IkReal x8500=((1.0)*x8495);
IkReal x8501=((1.0)*x8496);
IkReal x8502=(cj6*x8496);
evalcond[0]=(((x8495*x8499))+(((-1.0)*r12*x8501))+(((-1.0)*cj6*r10*x8500)));
evalcond[1]=((((-1.0)*x8498*x8501))+(((-1.0)*r22*x8500))+((r20*x8502)));
evalcond[2]=((((-1.0)*x8497*x8501))+(((-1.0)*r02*x8500))+((r00*x8502)));
evalcond[3]=(sj3+(((-1.0)*r22*x8501))+((x8495*x8498))+(((-1.0)*cj6*r20*x8500)));
evalcond[4]=((((-1.0)*cj6*r00*x8500))+cj3+((x8495*x8497))+(((-1.0)*r02*x8501)));
evalcond[5]=((1.0)+((r10*x8502))+(((-1.0)*x8499*x8501))+(((-1.0)*r12*x8500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8503=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x8503;
j5eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs(r22)));
j5eval[2]=IKsign(x8503);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8504=((1.0)*sj6);
IkReal x8505=((((-1.0)*cj6*r21))+(((-1.0)*r20*x8504)));
j5eval[0]=x8505;
j5eval[1]=((IKabs(((((-1.0)*r01*x8504))+((cj6*r00)))))+(IKabs(r02)));
j5eval[2]=IKsign(x8505);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8506=((1.0)*cj6);
IkReal x8507=((((-1.0)*r00*sj6))+(((-1.0)*r01*x8506)));
j5eval[0]=x8507;
j5eval[1]=((IKabs((((r11*sj3*sj6))+(((-1.0)*r10*sj3*x8506)))))+(IKabs((r12*sj3))));
j5eval[2]=IKsign(x8507);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8508=((1.0)*cj6);
CheckValue<IkReal> x8509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x8508)))),-1);
if(!x8509.valid){
continue;
}
CheckValue<IkReal> x8510 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*r10*sj3*x8508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8510.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8509.value)))+(x8510.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8511=IKsin(j5);
IkReal x8512=IKcos(j5);
IkReal x8513=(r01*sj6);
IkReal x8514=(r21*sj6);
IkReal x8515=(r11*sj6);
IkReal x8516=((1.0)*x8511);
IkReal x8517=((1.0)*x8512);
IkReal x8518=(cj6*x8512);
evalcond[0]=((((-1.0)*r12*x8517))+(((-1.0)*cj6*r10*x8516))+((x8511*x8515)));
evalcond[1]=((((-1.0)*x8514*x8517))+(((-1.0)*r22*x8516))+((r20*x8518)));
evalcond[2]=((((-1.0)*x8513*x8517))+(((-1.0)*r02*x8516))+((r00*x8518)));
evalcond[3]=((1.0)+(((-1.0)*x8515*x8517))+(((-1.0)*r12*x8516))+((r10*x8518)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*r22*x8517))+((x8511*x8514))+(((-1.0)*cj6*r20*x8516)));
evalcond[5]=((((-1.0)*cj6*r00*x8516))+(((-1.0)*r02*x8517))+((x8511*x8513))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8519=((1.0)*sj6);
CheckValue<IkReal> x8520 = IKatan2WithCheck(IkReal((((cj6*r00))+(((-1.0)*r01*x8519)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8520.valid){
continue;
}
CheckValue<IkReal> x8521=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21))+(((-1.0)*r20*x8519)))),-1);
if(!x8521.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8520.value)+(((1.5707963267949)*(x8521.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8522=IKsin(j5);
IkReal x8523=IKcos(j5);
IkReal x8524=(r01*sj6);
IkReal x8525=(r21*sj6);
IkReal x8526=(r11*sj6);
IkReal x8527=((1.0)*x8522);
IkReal x8528=((1.0)*x8523);
IkReal x8529=(cj6*x8523);
evalcond[0]=(((x8522*x8526))+(((-1.0)*cj6*r10*x8527))+(((-1.0)*r12*x8528)));
evalcond[1]=(((r20*x8529))+(((-1.0)*x8525*x8528))+(((-1.0)*r22*x8527)));
evalcond[2]=((((-1.0)*r02*x8527))+(((-1.0)*x8524*x8528))+((r00*x8529)));
evalcond[3]=((1.0)+(((-1.0)*x8526*x8528))+(((-1.0)*r12*x8527))+((r10*x8529)));
evalcond[4]=(((x8522*x8525))+(((-1.0)*sj3))+(((-1.0)*r22*x8528))+(((-1.0)*cj6*r20*x8527)));
evalcond[5]=(((x8522*x8524))+(((-1.0)*cj6*r00*x8527))+(((-1.0)*r02*x8528))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8530=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x8530.valid){
continue;
}
CheckValue<IkReal> x8531 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8531.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8530.value)))+(x8531.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8532=IKsin(j5);
IkReal x8533=IKcos(j5);
IkReal x8534=(r01*sj6);
IkReal x8535=(r21*sj6);
IkReal x8536=(r11*sj6);
IkReal x8537=((1.0)*x8532);
IkReal x8538=((1.0)*x8533);
IkReal x8539=(cj6*x8533);
evalcond[0]=((((-1.0)*cj6*r10*x8537))+((x8532*x8536))+(((-1.0)*r12*x8538)));
evalcond[1]=((((-1.0)*r22*x8537))+((r20*x8539))+(((-1.0)*x8535*x8538)));
evalcond[2]=((((-1.0)*r02*x8537))+((r00*x8539))+(((-1.0)*x8534*x8538)));
evalcond[3]=((1.0)+(((-1.0)*x8536*x8538))+((r10*x8539))+(((-1.0)*r12*x8537)));
evalcond[4]=((((-1.0)*cj6*r20*x8537))+(((-1.0)*sj3))+(((-1.0)*r22*x8538))+((x8532*x8535)));
evalcond[5]=((((-1.0)*r02*x8538))+((x8532*x8534))+(((-1.0)*cj6*r00*x8537))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x8540=((1.0)*sj6);
IkReal x8541=((((-1.0)*r00*x8540))+(((-1.0)*cj6*r01)));
j5eval[0]=x8541;
j5eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*x8540)))))+(IKabs(r22)));
j5eval[2]=IKsign(x8541);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x8542=((1.0)*cj6);
IkReal x8543=((((-1.0)*r21*x8542))+(((-1.0)*r20*sj6)));
j5eval[0]=x8543;
j5eval[1]=((IKabs((cj3*r12)))+(IKabs((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x8542))))));
j5eval[2]=IKsign(x8543);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x8544=cj6*cj6;
IkReal x8545=r11*r11;
IkReal x8546=(r11*sj6);
IkReal x8547=(cj6*r10);
IkReal x8548=(((x8544*x8545))+(((-1.0)*(r12*r12)))+(((2.0)*x8546*x8547))+(((-1.0)*x8544*(r10*r10)))+(((-1.0)*x8545)));
j5eval[0]=x8548;
j5eval[1]=((IKabs((x8546+(((-1.0)*x8547)))))+(IKabs(r12)));
j5eval[2]=IKsign(x8548);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8549=cj6*cj6;
IkReal x8550=r11*r11;
IkReal x8551=(r11*sj6);
IkReal x8552=(cj6*r10);
CheckValue<IkReal> x8553=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8549*(r10*r10)))+((x8549*x8550))+(((-1.0)*(r12*r12)))+(((-1.0)*x8550))+(((2.0)*x8551*x8552)))),-1);
if(!x8553.valid){
continue;
}
CheckValue<IkReal> x8554 = IKatan2WithCheck(IkReal(r12),IkReal((x8551+(((-1.0)*x8552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8554.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8553.value)))+(x8554.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8555=IKsin(j5);
IkReal x8556=IKcos(j5);
IkReal x8557=(r01*sj6);
IkReal x8558=(r21*sj6);
IkReal x8559=(r11*sj6);
IkReal x8560=((1.0)*x8555);
IkReal x8561=((1.0)*x8556);
IkReal x8562=(cj6*x8556);
evalcond[0]=((((-1.0)*r12*x8561))+((x8555*x8559))+(((-1.0)*cj6*r10*x8560)));
evalcond[1]=((((-1.0)*x8558*x8561))+((r20*x8562))+(((-1.0)*r22*x8560)));
evalcond[2]=(((r00*x8562))+(((-1.0)*x8557*x8561))+(((-1.0)*r02*x8560)));
evalcond[3]=(cj3+((x8555*x8557))+(((-1.0)*r02*x8561))+(((-1.0)*cj6*r00*x8560)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8560))+((r10*x8562))+(((-1.0)*x8559*x8561)));
evalcond[5]=((((-1.0)*cj6*r20*x8560))+(((-1.0)*sj3))+((x8555*x8558))+(((-1.0)*r22*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8563=((1.0)*cj6);
CheckValue<IkReal> x8564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8563))+(((-1.0)*r20*sj6)))),-1);
if(!x8564.valid){
continue;
}
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal((cj3*r12)),IkReal((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x8563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8564.value)))+(x8565.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8566=IKsin(j5);
IkReal x8567=IKcos(j5);
IkReal x8568=(r01*sj6);
IkReal x8569=(r21*sj6);
IkReal x8570=(r11*sj6);
IkReal x8571=((1.0)*x8566);
IkReal x8572=((1.0)*x8567);
IkReal x8573=(cj6*x8567);
evalcond[0]=(((x8566*x8570))+(((-1.0)*r12*x8572))+(((-1.0)*cj6*r10*x8571)));
evalcond[1]=((((-1.0)*x8569*x8572))+((r20*x8573))+(((-1.0)*r22*x8571)));
evalcond[2]=((((-1.0)*r02*x8571))+((r00*x8573))+(((-1.0)*x8568*x8572)));
evalcond[3]=(cj3+(((-1.0)*cj6*r00*x8571))+(((-1.0)*r02*x8572))+((x8566*x8568)));
evalcond[4]=((-1.0)+((r10*x8573))+(((-1.0)*x8570*x8572))+(((-1.0)*r12*x8571)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*cj6*r20*x8571))+((x8566*x8569))+(((-1.0)*r22*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8574=((1.0)*sj6);
CheckValue<IkReal> x8575=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01))+(((-1.0)*r00*x8574)))),-1);
if(!x8575.valid){
continue;
}
CheckValue<IkReal> x8576 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8574))+((cj6*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8576.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8575.value)))+(x8576.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8577=IKsin(j5);
IkReal x8578=IKcos(j5);
IkReal x8579=(r01*sj6);
IkReal x8580=(r21*sj6);
IkReal x8581=(r11*sj6);
IkReal x8582=((1.0)*x8577);
IkReal x8583=((1.0)*x8578);
IkReal x8584=(cj6*x8578);
evalcond[0]=(((x8577*x8581))+(((-1.0)*r12*x8583))+(((-1.0)*cj6*r10*x8582)));
evalcond[1]=((((-1.0)*r22*x8582))+(((-1.0)*x8580*x8583))+((r20*x8584)));
evalcond[2]=((((-1.0)*r02*x8582))+((r00*x8584))+(((-1.0)*x8579*x8583)));
evalcond[3]=(cj3+((x8577*x8579))+(((-1.0)*cj6*r00*x8582))+(((-1.0)*r02*x8583)));
evalcond[4]=((-1.0)+(((-1.0)*x8581*x8583))+((r10*x8584))+(((-1.0)*r12*x8582)));
evalcond[5]=((((-1.0)*r22*x8583))+(((-1.0)*sj3))+((x8577*x8580))+(((-1.0)*cj6*r20*x8582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8585=cj6*cj6;
IkReal x8586=((1.0)*sj2);
IkReal x8587=(r01*sj6);
IkReal x8588=(cj6*r00);
IkReal x8589=(sj2*sj3);
IkReal x8590=(r21*sj6);
IkReal x8591=(cj6*r20);
IkReal x8592=(r01*r21);
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x8586*x8587))+((x8588*x8589))+(((-1.0)*cj1*r22*x8586)))),IkReal((((r02*x8589))+(((-1.0)*cj1*x8586*x8590))+((cj1*sj2*x8591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
CheckValue<IkReal> x8594=IKPowWithIntegerCheck(IKsign((x8592+((r00*r20*x8585))+(((-1.0)*x8588*x8590))+(((-1.0)*x8585*x8592))+((r02*r22))+(((-1.0)*x8587*x8591)))),-1);
if(!x8594.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8593.value)+(((1.5707963267949)*(x8594.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8595=IKsin(j5);
IkReal x8596=IKcos(j5);
IkReal x8597=((1.0)*sj2);
IkReal x8598=(sj6*x8595);
IkReal x8599=((1.0)*cj2*sj3);
IkReal x8600=((1.0)*x8595);
IkReal x8601=((1.0)*x8596);
IkReal x8602=(cj6*x8596);
IkReal x8603=(sj6*x8601);
IkReal x8604=(cj6*x8600);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x8601))+(((-1.0)*r20*x8604))+((r21*x8598)));
evalcond[1]=(((r20*x8602))+(((-1.0)*r22*x8600))+(((-1.0)*r21*x8603))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r01*x8603))+(((-1.0)*r02*x8600))+((r00*x8602))+(((-1.0)*cj1*x8597)));
evalcond[3]=((((-1.0)*r12*x8600))+((r10*x8602))+(((-1.0)*r11*x8603))+(((-1.0)*sj1*x8597)));
evalcond[4]=((((-1.0)*r12*x8601))+(((-1.0)*r10*x8604))+((cj1*cj3))+(((-1.0)*sj1*x8599))+((r11*x8598)));
evalcond[5]=((((-1.0)*r00*x8604))+(((-1.0)*r02*x8601))+((r01*x8598))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8605=cj6*cj6;
IkReal x8606=r21*r21;
IkReal x8607=(sj2*sj3);
IkReal x8608=((1.0)*cj2);
IkReal x8609=(r21*sj6);
IkReal x8610=(cj6*r20);
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8605*x8606))+x8606+(r22*r22)+(((-2.0)*x8609*x8610))+((x8605*(r20*r20))))),-1);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal((((x8607*x8610))+(((-1.0)*x8607*x8609))+(((-1.0)*r22*x8608)))),IkReal(((((-1.0)*x8608*x8609))+((r22*x8607))+((cj2*x8610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8611.value)))+(x8612.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8613=IKsin(j5);
IkReal x8614=IKcos(j5);
IkReal x8615=((1.0)*sj2);
IkReal x8616=(sj6*x8613);
IkReal x8617=((1.0)*cj2*sj3);
IkReal x8618=((1.0)*x8613);
IkReal x8619=((1.0)*x8614);
IkReal x8620=(cj6*x8614);
IkReal x8621=(sj6*x8619);
IkReal x8622=(cj6*x8618);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x8619))+((r21*x8616))+(((-1.0)*r20*x8622)));
evalcond[1]=((((-1.0)*r22*x8618))+((r20*x8620))+(((-1.0)*r21*x8621))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r02*x8618))+(((-1.0)*r01*x8621))+(((-1.0)*cj1*x8615))+((r00*x8620)));
evalcond[3]=((((-1.0)*r11*x8621))+(((-1.0)*sj1*x8615))+(((-1.0)*r12*x8618))+((r10*x8620)));
evalcond[4]=((((-1.0)*sj1*x8617))+(((-1.0)*r10*x8622))+((r11*x8616))+(((-1.0)*r12*x8619))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r02*x8619))+((r01*x8616))+(((-1.0)*r00*x8622))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8623=((1.0)*sj6);
IkReal x8624=((1.0)*cj1*sj2);
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r01*x8623))+((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj6*r20*x8624)))),IkReal((((cj2*r02))+(((-1.0)*r22*x8624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
CheckValue<IkReal> x8626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8623))+(((-1.0)*cj6*r11)))),-1);
if(!x8626.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8625.value)+(((1.5707963267949)*(x8626.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8627=IKsin(j5);
IkReal x8628=IKcos(j5);
IkReal x8629=((1.0)*sj2);
IkReal x8630=(sj6*x8627);
IkReal x8631=((1.0)*cj2*sj3);
IkReal x8632=((1.0)*x8627);
IkReal x8633=((1.0)*x8628);
IkReal x8634=(cj6*x8628);
IkReal x8635=(sj6*x8633);
IkReal x8636=(cj6*x8632);
evalcond[0]=(((sj2*sj3))+((r21*x8630))+(((-1.0)*r22*x8633))+(((-1.0)*r20*x8636)));
evalcond[1]=((((-1.0)*r22*x8632))+((r20*x8634))+(((-1.0)*r21*x8635))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r01*x8635))+(((-1.0)*cj1*x8629))+((r00*x8634))+(((-1.0)*r02*x8632)));
evalcond[3]=((((-1.0)*sj1*x8629))+(((-1.0)*r11*x8635))+(((-1.0)*r12*x8632))+((r10*x8634)));
evalcond[4]=((((-1.0)*sj1*x8631))+(((-1.0)*r12*x8633))+(((-1.0)*r10*x8636))+((cj1*cj3))+((r11*x8630)));
evalcond[5]=((((-1.0)*r00*x8636))+(((-1.0)*cj1*x8631))+(((-1.0)*cj3*sj1))+((r01*x8630))+(((-1.0)*r02*x8633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x8637=cj2*cj2;
IkReal x8638=cj3*cj3;
IkReal x8639=(r00*sj6);
IkReal x8640=(cj6*r01);
IkReal x8641=((0.31436)*py);
IkReal x8642=((0.01275)*sj2);
IkReal x8643=(cj2*sj3);
IkReal x8644=((0.000110057436)*cj3);
IkReal x8645=((4.463775e-6)*sj2);
IkReal x8646=(cj6*r11);
IkReal x8647=(r10*sj6);
IkReal x8648=((0.31436)*px);
IkReal x8649=((0.0988222096)*x8638);
IkReal x8650=((0.000110057436)*x8643);
CheckValue<IkReal> x8651=IKPowWithIntegerCheck(IKsign(((0.1772015401)+(((-0.00801618)*sj2*x8643))+x8649+(((-1.0)*x8637*x8649))+(((0.2645402272)*cj3))+(((0.0986596471)*x8637)))),-1);
if(!x8651.valid){
continue;
}
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal(((((-0.000147308076)*x8640))+(((-1.0)*x8646*x8650))+(((-1.0)*x8639*x8644))+(((-1.0)*py*x8642))+(((-1.0)*x8647*x8650))+(((-0.000147308076)*x8639))+((x8641*x8643))+((cj3*x8648))+(((0.42076)*px))+((x8645*x8647))+((x8645*x8646))+(((-1.0)*x8640*x8644)))),IkReal(((((-1.0)*x8640*x8650))+((x8640*x8645))+(((-0.42076)*py))+(((-1.0)*x8639*x8650))+((x8639*x8645))+((x8644*x8647))+((x8644*x8646))+(((-1.0)*cj3*x8641))+(((-1.0)*px*x8642))+((x8643*x8648))+(((0.000147308076)*x8646))+(((0.000147308076)*x8647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8651.value)))+(x8652.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x8653=IKsin(j1);
IkReal x8654=IKcos(j1);
IkReal x8655=((0.0003501)*cj6);
IkReal x8656=((0.0003501)*sj6);
IkReal x8657=((0.01275)*sj2);
IkReal x8658=((0.31436)*cj3);
IkReal x8659=((0.31436)*cj2*sj3);
evalcond[0]=(((r00*x8656))+((r01*x8655))+((x8654*x8659))+(((-1.0)*x8654*x8657))+(((0.42076)*x8653))+(((-1.0)*px))+((x8653*x8658)));
evalcond[1]=(((r10*x8656))+(((-1.0)*x8654*x8658))+(((-0.42076)*x8654))+(((-1.0)*py))+((r11*x8655))+((x8653*x8659))+(((-1.0)*x8653*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x8660=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x8660;
j5eval[1]=IKsign(x8660);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8661=((((-1.0)*r00*sj6))+(((-1.0)*cj6*r01)));
j5eval[0]=x8661;
j5eval[1]=IKsign(x8661);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8662=r21*r21;
IkReal x8663=cj6*cj6;
IkReal x8664=((1.0)*cj4);
IkReal x8665=(cj4*x8662);
IkReal x8666=((((2.0)*cj4*cj6*r20*r21*sj6))+(((-1.0)*x8662*x8664))+(((-1.0)*x8664*(r22*r22)))+(((-1.0)*x8663*x8664*(r20*r20)))+((x8663*x8665)));
j5eval[0]=x8666;
j5eval[1]=IKsign(x8666);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x8667=((1.0)*cj1*sj2);
IkReal x8668=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x8668;
j5eval[1]=((IKabs(((((-1.0)*r22*x8667))+((cj2*r02)))))+(IKabs((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*sj6))+(((-1.0)*cj6*r20*x8667))))));
j5eval[2]=IKsign(x8668);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x8669=((1.0)*cj6);
IkReal x8670=((1.0)*sj6);
IkReal x8671=(sj1*sj2);
IkReal x8672=((((-1.0)*r01*x8669))+(((-1.0)*r00*x8670)));
j5eval[0]=x8672;
j5eval[1]=IKsign(x8672);
j5eval[2]=((IKabs((((r21*sj6*x8671))+((cj2*cj6*r10))+(((-1.0)*r20*x8669*x8671))+(((-1.0)*cj2*r11*x8670)))))+(IKabs(((((-1.0)*r22*x8671))+((cj2*r12))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x8673=cj6*cj6;
IkReal x8674=r21*r21;
IkReal x8675=(sj2*sj3);
IkReal x8676=(r21*sj6);
IkReal x8677=(cj6*r20);
IkReal x8678=(x8674+(r22*r22)+(((-1.0)*x8673*x8674))+((x8673*(r20*r20)))+(((-2.0)*x8676*x8677)));
j5eval[0]=x8678;
j5eval[1]=IKsign(x8678);
j5eval[2]=((IKabs(((((-1.0)*cj2*x8677))+((r22*x8675))+((cj2*x8676)))))+(IKabs(((((-1.0)*x8675*x8676))+((cj2*r22))+((x8675*x8677))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8679=((-1.0)*r00);
IkReal x8681 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8681)==0){
continue;
}
IkReal x8680=pow(x8681,-0.5);
CheckValue<IkReal> x8682 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8679),IKFAST_ATAN2_MAGTHRESH);
if(!x8682.valid){
continue;
}
IkReal gconst12=((-1.0)*(x8682.value));
IkReal gconst13=(r01*x8680);
IkReal gconst14=(x8679*x8680);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8683.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8684=(cj1*sj2);
CheckValue<IkReal> x8685=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x8685.valid){
continue;
}
CheckValue<IkReal> x8686 = IKatan2WithCheck(IkReal((((cj2*gconst14*r00))+(((-1.0)*cj2*gconst13*r01))+((gconst13*r21*x8684))+(((-1.0)*gconst14*r20*x8684)))),IkReal(((((-1.0)*r22*x8684))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8686.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8685.value)))+(x8686.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8687=IKcos(j5);
IkReal x8688=IKsin(j5);
IkReal x8689=((1.0)*gconst14);
IkReal x8690=((1.0)*sj2);
IkReal x8691=(gconst13*x8687);
IkReal x8692=((1.0)*cj2*sj3);
IkReal x8693=(gconst13*x8688);
IkReal x8694=((1.0)*x8687);
evalcond[0]=(((r21*x8691))+(((-1.0)*r20*x8687*x8689))+((r22*x8688))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x8693))+(((-1.0)*r20*x8688*x8689))+(((-1.0)*r22*x8694)));
evalcond[2]=((((-1.0)*r00*x8687*x8689))+((r01*x8691))+(((-1.0)*cj1*x8690))+((r02*x8688)));
evalcond[3]=(((r12*x8688))+(((-1.0)*r10*x8687*x8689))+(((-1.0)*sj1*x8690))+((r11*x8691)));
evalcond[4]=((((-1.0)*r10*x8688*x8689))+((cj1*cj3))+(((-1.0)*r12*x8694))+(((-1.0)*sj1*x8692))+((r11*x8693)));
evalcond[5]=((((-1.0)*cj3*sj1))+(((-1.0)*r02*x8694))+((r01*x8693))+(((-1.0)*r00*x8688*x8689))+(((-1.0)*cj1*x8692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8695=((-1.0)*r01);
IkReal x8697 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8697)==0){
continue;
}
IkReal x8696=pow(x8697,-0.5);
CheckValue<IkReal> x8698 = IKatan2WithCheck(IkReal(x8695),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8698.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x8698.value))));
IkReal gconst16=(x8695*x8696);
IkReal gconst17=((1.0)*r00*x8696);
CheckValue<IkReal> x8699 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8699.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8700=(cj1*sj2);
CheckValue<IkReal> x8701 = IKatan2WithCheck(IkReal((((gconst16*r21*x8700))+(((-1.0)*gconst17*r20*x8700))+((cj2*gconst17*r00))+(((-1.0)*cj2*gconst16*r01)))),IkReal((((cj2*r02))+(((-1.0)*r22*x8700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8701.valid){
continue;
}
CheckValue<IkReal> x8702=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x8702.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8701.value)+(((1.5707963267949)*(x8702.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8703=IKcos(j5);
IkReal x8704=IKsin(j5);
IkReal x8705=((1.0)*cj2);
IkReal x8706=((1.0)*sj2);
IkReal x8707=(gconst16*x8704);
IkReal x8708=(gconst16*x8703);
IkReal x8709=((1.0)*x8703);
IkReal x8710=(gconst17*x8709);
IkReal x8711=((1.0)*gconst17*x8704);
evalcond[0]=((((-1.0)*r20*x8710))+((r21*x8708))+((r22*x8704))+(((-1.0)*x8705)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r20*x8711))+((r21*x8707))+(((-1.0)*r22*x8709)));
evalcond[2]=((((-1.0)*cj1*x8706))+((r02*x8704))+((r01*x8708))+(((-1.0)*r00*x8710)));
evalcond[3]=(((r11*x8708))+((r12*x8704))+(((-1.0)*sj1*x8706))+(((-1.0)*r10*x8710)));
evalcond[4]=((((-1.0)*sj1*sj3*x8705))+((r11*x8707))+(((-1.0)*r10*x8711))+((cj1*cj3))+(((-1.0)*r12*x8709)));
evalcond[5]=((((-1.0)*cj1*sj3*x8705))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x8709))+((r01*x8707))+(((-1.0)*r00*x8711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8713 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8713)==0){
continue;
}
IkReal x8712=pow(x8713,-0.5);
CheckValue<IkReal> x8714 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8714.valid){
continue;
}
IkReal gconst18=((-1.0)*(x8714.value));
IkReal gconst19=((-1.0)*r11*x8712);
IkReal gconst20=(r10*x8712);
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8715.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8716=((1.0)*gconst19);
IkReal x8717=((1.0)*gconst20);
IkReal x8718=(sj1*sj2);
CheckValue<IkReal> x8719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8717))+(((-1.0)*r00*x8716)))),-1);
if(!x8719.valid){
continue;
}
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r11*x8716))+((cj2*gconst20*r10))+(((-1.0)*r20*x8717*x8718))+((gconst19*r21*x8718)))),IkReal((((cj2*r12))+(((-1.0)*r22*x8718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8719.value)))+(x8720.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8721=IKcos(j5);
IkReal x8722=IKsin(j5);
IkReal x8723=((1.0)*gconst20);
IkReal x8724=((1.0)*sj2);
IkReal x8725=((1.0)*cj2*sj3);
IkReal x8726=(gconst19*x8721);
IkReal x8727=((1.0)*x8721);
IkReal x8728=(gconst19*x8722);
evalcond[0]=(((r21*x8726))+((r22*x8722))+(((-1.0)*r20*x8721*x8723))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r20*x8722*x8723))+((r21*x8728))+(((-1.0)*r22*x8727)));
evalcond[2]=(((r02*x8722))+(((-1.0)*r00*x8721*x8723))+(((-1.0)*cj1*x8724))+((r01*x8726)));
evalcond[3]=((((-1.0)*r10*x8721*x8723))+((r11*x8726))+(((-1.0)*sj1*x8724))+((r12*x8722)));
evalcond[4]=(((r11*x8728))+(((-1.0)*sj1*x8725))+(((-1.0)*r10*x8722*x8723))+((cj1*cj3))+(((-1.0)*r12*x8727)));
evalcond[5]=((((-1.0)*r00*x8722*x8723))+(((-1.0)*cj1*x8725))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x8727))+((r01*x8728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8730 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8730)==0){
continue;
}
IkReal x8729=pow(x8730,-0.5);
CheckValue<IkReal> x8731 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8731.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x8731.value))));
IkReal gconst22=((1.0)*r11*x8729);
IkReal gconst23=((-1.0)*r10*x8729);
CheckValue<IkReal> x8732 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8732.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
CheckValue<IkReal> x8735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8735.valid){
continue;
}
IkReal x8733=((1.0)*(x8735.value));
IkReal x8734=x8729;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj6=gconst22;
cj6=gconst23;
j6=((3.14159265)+(((-1.0)*x8733)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x8733)));
IkReal gconst22=((1.0)*r11*x8734);
IkReal gconst23=((-1.0)*r10*x8734);
IkReal x8736=r12*r12;
IkReal x8737=(cj2*r02);
IkReal x8738=(cj1*r22*sj2);
CheckValue<IkReal> x8742=IKPowWithIntegerCheck(((-1.0)+x8736),-1);
if(!x8742.valid){
continue;
}
IkReal x8739=x8742.value;
if((((1.0)+(((-1.0)*x8736)))) < -0.00001)
continue;
IkReal x8740=IKsqrt(((1.0)+(((-1.0)*x8736))));
IkReal x8741=(r12*x8739*x8740);
j5eval[0]=0;
j5eval[1]=0;
j5eval[2]=((IKabs((((x8738*x8741))+(((-1.0)*x8737*x8741)))))+(IKabs((x8737+(((-1.0)*x8738))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8743=((1.0)*gconst23);
IkReal x8744=((1.0)*gconst22);
IkReal x8745=(sj1*sj2);
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal((((gconst22*r21*x8745))+(((-1.0)*r20*x8743*x8745))+((cj2*gconst23*r10))+(((-1.0)*cj2*r11*x8744)))),IkReal(((((-1.0)*r22*x8745))+((cj2*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
CheckValue<IkReal> x8747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8743))+(((-1.0)*r00*x8744)))),-1);
if(!x8747.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8746.value)+(((1.5707963267949)*(x8747.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8748=IKcos(j5);
IkReal x8749=IKsin(j5);
IkReal x8750=(gconst22*r01);
IkReal x8751=((1.0)*gconst23);
IkReal x8752=((1.0)*cj1);
IkReal x8753=(cj2*sj3);
IkReal x8754=((1.0)*sj1);
IkReal x8755=(gconst22*r11);
IkReal x8756=(gconst22*r21);
IkReal x8757=((1.0)*x8748);
evalcond[0]=(((x8748*x8756))+((r22*x8749))+(((-1.0)*r20*x8748*x8751))+(((-1.0)*cj2)));
evalcond[1]=((((-1.0)*r20*x8749*x8751))+((sj2*sj3))+(((-1.0)*r22*x8757))+((x8749*x8756)));
evalcond[2]=((((-1.0)*r00*x8748*x8751))+((r02*x8749))+((x8748*x8750))+(((-1.0)*sj2*x8752)));
evalcond[3]=(((r12*x8749))+(((-1.0)*r10*x8748*x8751))+((x8748*x8755))+(((-1.0)*sj2*x8754)));
evalcond[4]=((((-1.0)*r10*x8749*x8751))+(((-1.0)*x8753*x8754))+((x8749*x8755))+(((-1.0)*r12*x8757))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r00*x8749*x8751))+(((-1.0)*cj3*x8754))+(((-1.0)*r02*x8757))+((x8749*x8750))+(((-1.0)*x8752*x8753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8758=(cj1*sj2);
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(IKsign((((gconst22*r10))+((gconst23*r11)))),-1);
if(!x8759.valid){
continue;
}
CheckValue<IkReal> x8760 = IKatan2WithCheck(IkReal(((((-1.0)*gconst23*r20*x8758))+(((-1.0)*cj2*gconst22*r01))+((cj2*gconst23*r00))+((gconst22*r21*x8758)))),IkReal(((((-1.0)*r22*x8758))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8760.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8759.value)))+(x8760.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8761=IKcos(j5);
IkReal x8762=IKsin(j5);
IkReal x8763=(gconst22*r01);
IkReal x8764=((1.0)*gconst23);
IkReal x8765=((1.0)*cj1);
IkReal x8766=(cj2*sj3);
IkReal x8767=((1.0)*sj1);
IkReal x8768=(gconst22*r11);
IkReal x8769=(gconst22*r21);
IkReal x8770=((1.0)*x8761);
evalcond[0]=(((x8761*x8769))+(((-1.0)*cj2))+(((-1.0)*r20*x8761*x8764))+((r22*x8762)));
evalcond[1]=(((sj2*sj3))+(((-1.0)*r20*x8762*x8764))+(((-1.0)*r22*x8770))+((x8762*x8769)));
evalcond[2]=((((-1.0)*r00*x8761*x8764))+((x8761*x8763))+((r02*x8762))+(((-1.0)*sj2*x8765)));
evalcond[3]=(((x8761*x8768))+(((-1.0)*r10*x8761*x8764))+((r12*x8762))+(((-1.0)*sj2*x8767)));
evalcond[4]=((((-1.0)*x8766*x8767))+(((-1.0)*r10*x8762*x8764))+(((-1.0)*r12*x8770))+((cj1*cj3))+((x8762*x8768)));
evalcond[5]=((((-1.0)*r02*x8770))+(((-1.0)*r00*x8762*x8764))+(((-1.0)*x8765*x8766))+((x8762*x8763))+(((-1.0)*cj3*x8767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8771=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8771);
rxp0_2=(py*r00);
rxp1_0=(r21*x8771);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8772=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8772);
rxp0_2=(py*r00);
rxp1_0=(r21*x8772);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=((((-1.0)*cj6*r20))+((r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8773=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8773);
rxp0_2=(py*r00);
rxp1_0=(r21*x8773);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=(((r01*sj6))+(((-1.0)*cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8774=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8774);
rxp0_2=(py*r00);
rxp1_0=(r21*x8774);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x8775=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x8775;
j5eval[1]=IKsign(x8775);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x8776=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8776);
rxp0_2=(py*r00);
rxp1_0=(r21*x8776);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x8777=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x8777;
j5eval[1]=IKsign(x8777);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8778=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8778);
rxp0_2=(py*r00);
rxp1_0=(r21*x8778);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x8779=((1.0)*cj6);
j5eval[0]=(((r01*sj6))+(((-1.0)*r00*x8779)));
j5eval[1]=((((-1.0)*r20*x8779))+((r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8780=((1.0)*cj6);
CheckValue<IkReal> x8781=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*r00*x8780))),-1);
if(!x8781.valid){
continue;
}
CheckValue<IkReal> x8782=IKPowWithIntegerCheck((((r21*sj6))+(((-1.0)*r20*x8780))),-1);
if(!x8782.valid){
continue;
}
if( IKabs((cj2*(x8781.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x8782.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*(x8781.value)))+IKsqr((cj2*(x8782.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*(x8781.value)), (cj2*(x8782.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8783=IKsin(j5);
IkReal x8784=IKcos(j5);
IkReal x8785=((1.0)*cj2);
IkReal x8786=(sj6*x8783);
IkReal x8787=(sj6*x8784);
IkReal x8788=((1.0)*cj6*r00);
IkReal x8789=((1.0)*cj6*r20);
evalcond[0]=(r12*x8783);
evalcond[1]=((-1.0)*r12*x8784);
evalcond[2]=(sj2+((r21*x8786))+(((-1.0)*x8783*x8789)));
evalcond[3]=((((-1.0)*x8783*x8788))+(((-1.0)*x8785))+((r01*x8786)));
evalcond[4]=(((r21*x8787))+(((-1.0)*x8784*x8789))+(((-1.0)*x8785)));
evalcond[5]=((((-1.0)*sj2))+(((-1.0)*x8784*x8788))+((r01*x8787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8790=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x8790.valid){
continue;
}
CheckValue<IkReal> x8791 = IKatan2WithCheck(IkReal(((-1.0)*sj2)),IkReal(cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x8791.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8790.value)))+(x8791.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8792=IKsin(j5);
IkReal x8793=IKcos(j5);
IkReal x8794=((1.0)*cj2);
IkReal x8795=(sj6*x8792);
IkReal x8796=(sj6*x8793);
IkReal x8797=((1.0)*cj6*r00);
IkReal x8798=((1.0)*cj6*r20);
evalcond[0]=(r12*x8792);
evalcond[1]=((-1.0)*r12*x8793);
evalcond[2]=((((-1.0)*x8792*x8798))+sj2+((r21*x8795)));
evalcond[3]=((((-1.0)*x8792*x8797))+((r01*x8795))+(((-1.0)*x8794)));
evalcond[4]=(((r21*x8796))+(((-1.0)*x8793*x8798))+(((-1.0)*x8794)));
evalcond[5]=((((-1.0)*sj2))+(((-1.0)*x8793*x8797))+((r01*x8796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8799=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x8799.valid){
continue;
}
CheckValue<IkReal> x8800 = IKatan2WithCheck(IkReal(cj2),IkReal(sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x8800.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8799.value)))+(x8800.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8801=IKsin(j5);
IkReal x8802=IKcos(j5);
IkReal x8803=((1.0)*cj2);
IkReal x8804=(sj6*x8801);
IkReal x8805=(sj6*x8802);
IkReal x8806=((1.0)*cj6*r00);
IkReal x8807=((1.0)*cj6*r20);
evalcond[0]=(r12*x8801);
evalcond[1]=((-1.0)*r12*x8802);
evalcond[2]=(((r21*x8804))+sj2+(((-1.0)*x8801*x8807)));
evalcond[3]=(((r01*x8804))+(((-1.0)*x8801*x8806))+(((-1.0)*x8803)));
evalcond[4]=(((r21*x8805))+(((-1.0)*x8803))+(((-1.0)*x8802*x8807)));
evalcond[5]=((((-1.0)*sj2))+((r01*x8805))+(((-1.0)*x8802*x8806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8808=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8808);
rxp0_2=(py*r00);
rxp1_0=(r21*x8808);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x8809=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x8809;
j5eval[1]=IKsign(x8809);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x8810=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8810);
rxp0_2=(py*r00);
rxp1_0=(r21*x8810);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x8811=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x8811;
j5eval[1]=((IKabs(cj2))+(IKabs(sj2)));
j5eval[2]=IKsign(x8811);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8812=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8812);
rxp0_2=(py*r00);
rxp1_0=(r21*x8812);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x8813=((1.0)*cj6);
j5eval[0]=(((r01*sj6))+(((-1.0)*r00*x8813)));
j5eval[1]=((((-1.0)*r20*x8813))+((r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8814=((1.0)*cj6);
CheckValue<IkReal> x8815=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*r00*x8814))),-1);
if(!x8815.valid){
continue;
}
CheckValue<IkReal> x8816=IKPowWithIntegerCheck(((((-1.0)*r20*x8814))+((r21*sj6))),-1);
if(!x8816.valid){
continue;
}
if( IKabs(((-1.0)*cj2*(x8815.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x8816.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj2*(x8815.value)))+IKsqr((cj2*(x8816.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*cj2*(x8815.value)), (cj2*(x8816.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8817=IKsin(j5);
IkReal x8818=IKcos(j5);
IkReal x8819=(sj6*x8817);
IkReal x8820=(sj6*x8818);
IkReal x8821=((1.0)*cj6*r00);
IkReal x8822=((1.0)*cj6*r20);
evalcond[0]=(r12*x8817);
evalcond[1]=((-1.0)*r12*x8818);
evalcond[2]=(((r21*x8819))+sj2+(((-1.0)*x8817*x8822)));
evalcond[3]=(cj2+((r01*x8819))+(((-1.0)*x8817*x8821)));
evalcond[4]=(sj2+((r01*x8820))+(((-1.0)*x8818*x8821)));
evalcond[5]=(((r21*x8820))+(((-1.0)*x8818*x8822))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8823 = IKatan2WithCheck(IkReal(((-1.0)*cj2)),IkReal(((-1.0)*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x8823.valid){
continue;
}
CheckValue<IkReal> x8824=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x8824.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8823.value)+(((1.5707963267949)*(x8824.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8825=IKsin(j5);
IkReal x8826=IKcos(j5);
IkReal x8827=(sj6*x8825);
IkReal x8828=(sj6*x8826);
IkReal x8829=((1.0)*cj6*r00);
IkReal x8830=((1.0)*cj6*r20);
evalcond[0]=(r12*x8825);
evalcond[1]=((-1.0)*r12*x8826);
evalcond[2]=(((r21*x8827))+sj2+(((-1.0)*x8825*x8830)));
evalcond[3]=(cj2+((r01*x8827))+(((-1.0)*x8825*x8829)));
evalcond[4]=(sj2+(((-1.0)*x8826*x8829))+((r01*x8828)));
evalcond[5]=(((r21*x8828))+(((-1.0)*x8826*x8830))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8831=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x8831.valid){
continue;
}
CheckValue<IkReal> x8832 = IKatan2WithCheck(IkReal(((-1.0)*sj2)),IkReal(cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x8832.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8831.value)))+(x8832.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8833=IKsin(j5);
IkReal x8834=IKcos(j5);
IkReal x8835=(sj6*x8833);
IkReal x8836=(sj6*x8834);
IkReal x8837=((1.0)*cj6*r00);
IkReal x8838=((1.0)*cj6*r20);
evalcond[0]=(r12*x8833);
evalcond[1]=((-1.0)*r12*x8834);
evalcond[2]=((((-1.0)*x8833*x8838))+sj2+((r21*x8835)));
evalcond[3]=((((-1.0)*x8833*x8837))+cj2+((r01*x8835)));
evalcond[4]=(sj2+(((-1.0)*x8834*x8837))+((r01*x8836)));
evalcond[5]=((((-1.0)*x8834*x8838))+((r21*x8836))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8839=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8839);
rxp0_2=(py*r00);
rxp1_0=(r21*x8839);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x8840=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x8840;
j5eval[1]=IKsign(x8840);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x8841=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8841);
rxp0_2=(py*r00);
rxp1_0=(r21*x8841);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x8842=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x8842;
j5eval[1]=IKsign(x8842);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8843=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8843);
rxp0_2=(py*r00);
rxp1_0=(r21*x8843);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x8844=((1.0)*cj6);
j5eval[0]=(((r21*sj6))+(((-1.0)*r20*x8844)));
j5eval[1]=(((r01*sj6))+(((-1.0)*r00*x8844)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8845=((1.0)*cj6);
CheckValue<IkReal> x8846=IKPowWithIntegerCheck((((r21*sj6))+(((-1.0)*r20*x8845))),-1);
if(!x8846.valid){
continue;
}
CheckValue<IkReal> x8847=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*r00*x8845))),-1);
if(!x8847.valid){
continue;
}
if( IKabs((sj2*(x8846.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*(x8847.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj2*(x8846.value)))+IKsqr((sj2*(x8847.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj2*(x8846.value)), (sj2*(x8847.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8848=IKsin(j5);
IkReal x8849=IKcos(j5);
IkReal x8850=((1.0)*sj2);
IkReal x8851=(sj6*x8848);
IkReal x8852=(sj6*x8849);
IkReal x8853=((1.0)*cj6*r00);
IkReal x8854=((1.0)*cj6*r20);
evalcond[0]=(r12*x8848);
evalcond[1]=((-1.0)*r12*x8849);
evalcond[2]=(cj2+((r01*x8851))+(((-1.0)*x8848*x8853)));
evalcond[3]=((((-1.0)*x8850))+(((-1.0)*x8848*x8854))+((r21*x8851)));
evalcond[4]=((((-1.0)*x8849*x8854))+((r21*x8852))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*x8850))+((r01*x8852))+(((-1.0)*x8849*x8853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8855=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x8855.valid){
continue;
}
CheckValue<IkReal> x8856 = IKatan2WithCheck(IkReal(((-1.0)*cj2)),IkReal(sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x8856.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8855.value)))+(x8856.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8857=IKsin(j5);
IkReal x8858=IKcos(j5);
IkReal x8859=((1.0)*sj2);
IkReal x8860=(sj6*x8857);
IkReal x8861=(sj6*x8858);
IkReal x8862=((1.0)*cj6*r00);
IkReal x8863=((1.0)*cj6*r20);
evalcond[0]=(r12*x8857);
evalcond[1]=((-1.0)*r12*x8858);
evalcond[2]=((((-1.0)*x8857*x8862))+cj2+((r01*x8860)));
evalcond[3]=((((-1.0)*x8857*x8863))+(((-1.0)*x8859))+((r21*x8860)));
evalcond[4]=(((r21*x8861))+(((-1.0)*x8858*x8863))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*x8859))+((r01*x8861))+(((-1.0)*x8858*x8862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8864=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x8864.valid){
continue;
}
CheckValue<IkReal> x8865 = IKatan2WithCheck(IkReal(sj2),IkReal(cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x8865.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8864.value)))+(x8865.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8866=IKsin(j5);
IkReal x8867=IKcos(j5);
IkReal x8868=((1.0)*sj2);
IkReal x8869=(sj6*x8866);
IkReal x8870=(sj6*x8867);
IkReal x8871=((1.0)*cj6*r00);
IkReal x8872=((1.0)*cj6*r20);
evalcond[0]=(r12*x8866);
evalcond[1]=((-1.0)*r12*x8867);
evalcond[2]=(cj2+((r01*x8869))+(((-1.0)*x8866*x8871)));
evalcond[3]=(((r21*x8869))+(((-1.0)*x8866*x8872))+(((-1.0)*x8868)));
evalcond[4]=((((-1.0)*x8867*x8872))+((r21*x8870))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*x8867*x8871))+(((-1.0)*x8868))+((r01*x8870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x8873=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8873);
rxp0_2=(py*r00);
rxp1_0=(r21*x8873);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x8874=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x8874;
j5eval[1]=IKsign(x8874);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x8875=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8875);
rxp0_2=(py*r00);
rxp1_0=(r21*x8875);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x8876=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x8876;
j5eval[1]=((IKabs(cj2))+(IKabs(sj2)));
j5eval[2]=IKsign(x8876);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x8877=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8877);
rxp0_2=(py*r00);
rxp1_0=(r21*x8877);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x8878=((1.0)*cj6);
j5eval[0]=(((r01*sj6))+(((-1.0)*r00*x8878)));
j5eval[1]=(((r21*sj6))+(((-1.0)*r20*x8878)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8879=((1.0)*cj6);
CheckValue<IkReal> x8880=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*r00*x8879))),-1);
if(!x8880.valid){
continue;
}
CheckValue<IkReal> x8881=IKPowWithIntegerCheck((((r21*sj6))+(((-1.0)*r20*x8879))),-1);
if(!x8881.valid){
continue;
}
if( IKabs((cj2*(x8880.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x8881.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*(x8880.value)))+IKsqr((cj2*(x8881.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*(x8880.value)), (cj2*(x8881.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8882=IKcos(j5);
IkReal x8883=IKsin(j5);
IkReal x8884=((1.0)*cj2);
IkReal x8885=(sj6*x8883);
IkReal x8886=(sj6*x8882);
IkReal x8887=((1.0)*cj6*r00);
IkReal x8888=((1.0)*cj6*r20);
evalcond[0]=(r12*x8883);
evalcond[1]=((-1.0)*r12*x8882);
evalcond[2]=(sj2+(((-1.0)*x8882*x8887))+((r01*x8886)));
evalcond[3]=((((-1.0)*sj2))+((r21*x8885))+(((-1.0)*x8883*x8888)));
evalcond[4]=((((-1.0)*x8883*x8887))+(((-1.0)*x8884))+((r01*x8885)));
evalcond[5]=(((r21*x8886))+(((-1.0)*x8882*x8888))+(((-1.0)*x8884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(cj2),IkReal(((-1.0)*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
CheckValue<IkReal> x8890=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x8890.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8889.value)+(((1.5707963267949)*(x8890.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8891=IKcos(j5);
IkReal x8892=IKsin(j5);
IkReal x8893=((1.0)*cj2);
IkReal x8894=(sj6*x8892);
IkReal x8895=(sj6*x8891);
IkReal x8896=((1.0)*cj6*r00);
IkReal x8897=((1.0)*cj6*r20);
evalcond[0]=(r12*x8892);
evalcond[1]=((-1.0)*r12*x8891);
evalcond[2]=(((r01*x8895))+(((-1.0)*x8891*x8896))+sj2);
evalcond[3]=((((-1.0)*sj2))+(((-1.0)*x8892*x8897))+((r21*x8894)));
evalcond[4]=(((r01*x8894))+(((-1.0)*x8892*x8896))+(((-1.0)*x8893)));
evalcond[5]=((((-1.0)*x8891*x8897))+((r21*x8895))+(((-1.0)*x8893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8898=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x8898.valid){
continue;
}
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal(sj2),IkReal(cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8898.value)))+(x8899.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8900=IKcos(j5);
IkReal x8901=IKsin(j5);
IkReal x8902=((1.0)*cj2);
IkReal x8903=(sj6*x8901);
IkReal x8904=(sj6*x8900);
IkReal x8905=((1.0)*cj6*r00);
IkReal x8906=((1.0)*cj6*r20);
evalcond[0]=(r12*x8901);
evalcond[1]=((-1.0)*r12*x8900);
evalcond[2]=(sj2+(((-1.0)*x8900*x8905))+((r01*x8904)));
evalcond[3]=(((r21*x8903))+(((-1.0)*sj2))+(((-1.0)*x8901*x8906)));
evalcond[4]=((((-1.0)*x8902))+((r01*x8903))+(((-1.0)*x8901*x8905)));
evalcond[5]=(((r21*x8904))+(((-1.0)*x8900*x8906))+(((-1.0)*x8902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(r12,-1);
if(!x8907.valid){
continue;
}
CheckValue<IkReal> x8908=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x8908.valid){
continue;
}
if( IKabs((sj1*sj2*(x8907.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x8908.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x8907.value)))+IKsqr((cj1*sj2*(x8908.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x8907.value)), (cj1*sj2*(x8908.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8909=IKsin(j5);
IkReal x8910=IKcos(j5);
IkReal x8911=((1.0)*sj2);
IkReal x8912=(cj6*r20);
IkReal x8913=((1.0)*cj2*sj3);
IkReal x8914=(sj6*x8909);
IkReal x8915=(sj6*x8910);
IkReal x8916=((1.0)*cj6*r00);
IkReal x8917=((1.0)*x8910);
evalcond[0]=(((r12*x8909))+(((-1.0)*sj1*x8911)));
evalcond[1]=((((-1.0)*r12*x8917))+(((-1.0)*sj1*x8913))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*x8909*x8912))+((r21*x8914)));
evalcond[3]=((((-1.0)*x8912*x8917))+((r21*x8915))+(((-1.0)*cj2)));
evalcond[4]=(((r01*x8915))+(((-1.0)*x8910*x8916))+(((-1.0)*cj1*x8911)));
evalcond[5]=((((-1.0)*x8909*x8916))+((r01*x8914))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8918=IKPowWithIntegerCheck(r12,-1);
if(!x8918.valid){
continue;
}
CheckValue<IkReal> x8919=IKPowWithIntegerCheck(((((-1.0)*cj6*r20))+((r21*sj6))),-1);
if(!x8919.valid){
continue;
}
if( IKabs((sj1*sj2*(x8918.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x8919.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x8918.value)))+IKsqr((cj2*(x8919.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x8918.value)), (cj2*(x8919.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8920=IKsin(j5);
IkReal x8921=IKcos(j5);
IkReal x8922=((1.0)*sj2);
IkReal x8923=(cj6*r20);
IkReal x8924=((1.0)*cj2*sj3);
IkReal x8925=(sj6*x8920);
IkReal x8926=(sj6*x8921);
IkReal x8927=((1.0)*cj6*r00);
IkReal x8928=((1.0)*x8921);
evalcond[0]=((((-1.0)*sj1*x8922))+((r12*x8920)));
evalcond[1]=((((-1.0)*sj1*x8924))+(((-1.0)*r12*x8928))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*x8920*x8923))+((r21*x8925)));
evalcond[3]=(((r21*x8926))+(((-1.0)*cj2))+(((-1.0)*x8923*x8928)));
evalcond[4]=((((-1.0)*cj1*x8922))+(((-1.0)*x8921*x8927))+((r01*x8926)));
evalcond[5]=((((-1.0)*x8920*x8927))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8924))+((r01*x8925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8929 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8929.valid){
continue;
}
CheckValue<IkReal> x8930=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x8930.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8929.value)+(((1.5707963267949)*(x8930.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8931=IKsin(j5);
IkReal x8932=IKcos(j5);
IkReal x8933=((1.0)*sj2);
IkReal x8934=(cj6*r20);
IkReal x8935=((1.0)*cj2*sj3);
IkReal x8936=(sj6*x8931);
IkReal x8937=(sj6*x8932);
IkReal x8938=((1.0)*cj6*r00);
IkReal x8939=((1.0)*x8932);
evalcond[0]=(((r12*x8931))+(((-1.0)*sj1*x8933)));
evalcond[1]=((((-1.0)*r12*x8939))+((cj1*cj3))+(((-1.0)*sj1*x8935)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*x8931*x8934))+((r21*x8936)));
evalcond[3]=((((-1.0)*x8934*x8939))+(((-1.0)*cj2))+((r21*x8937)));
evalcond[4]=((((-1.0)*x8932*x8938))+(((-1.0)*cj1*x8933))+((r01*x8937)));
evalcond[5]=((((-1.0)*cj3*sj1))+(((-1.0)*cj1*x8935))+(((-1.0)*x8931*x8938))+((r01*x8936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8940=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x8940;
j5eval[1]=IKsign(x8940);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8941=((1.0)*cj6);
IkReal x8942=((((-1.0)*r01*x8941))+(((-1.0)*r00*sj6)));
j5eval[0]=x8942;
j5eval[1]=IKsign(x8942);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x8941))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x8943=r21*r21;
IkReal x8944=cj6*cj6;
IkReal x8945=(cj6*r20);
IkReal x8946=(r21*sj6);
IkReal x8947=((((2.0)*x8945*x8946))+((x8943*x8944))+(((-1.0)*(r22*r22)))+(((-1.0)*x8943))+(((-1.0)*x8944*(r20*r20))));
j5eval[0]=x8947;
j5eval[1]=IKsign(x8947);
j5eval[2]=((IKabs(((((-1.0)*sj3*x8945))+((sj3*x8946)))))+(IKabs((r22*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x8948=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x8948;
j5eval[1]=IKsign(x8948);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x8949=((1.0)*cj6);
IkReal x8950=((((-1.0)*r01*x8949))+(((-1.0)*r00*sj6)));
j5eval[0]=x8950;
j5eval[1]=IKsign(x8950);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x8949))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x8951=cj6*cj6;
IkReal x8952=r01*r01;
IkReal x8953=(r01*sj6);
IkReal x8954=(cj6*r00);
IkReal x8955=(x8952+(((-1.0)*x8951*x8952))+(r02*r02)+((x8951*(r00*r00)))+(((-2.0)*x8953*x8954)));
j5eval[0]=x8955;
j5eval[1]=((IKabs(r02))+(IKabs((x8953+(((-1.0)*x8954))))));
j5eval[2]=IKsign(x8955);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8956=cj6*cj6;
IkReal x8957=r01*r01;
IkReal x8958=(r01*sj6);
IkReal x8959=(cj6*r00);
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal((x8958+(((-1.0)*x8959)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
CheckValue<IkReal> x8961=IKPowWithIntegerCheck(IKsign((((x8956*(r00*r00)))+(((-2.0)*x8958*x8959))+(((-1.0)*x8956*x8957))+x8957+(r02*r02))),-1);
if(!x8961.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8960.value)+(((1.5707963267949)*(x8961.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8962=IKcos(j5);
IkReal x8963=IKsin(j5);
IkReal x8964=(cj6*r00);
IkReal x8965=(cj6*r10);
IkReal x8966=(cj6*r20);
IkReal x8967=(sj6*x8962);
IkReal x8968=(sj6*x8963);
IkReal x8969=((1.0)*x8962);
IkReal x8970=((1.0)*x8963);
evalcond[0]=(((r22*x8963))+(((-1.0)*x8966*x8969))+((r21*x8967)));
evalcond[1]=(((r02*x8963))+(((-1.0)*x8964*x8969))+((r01*x8967)));
evalcond[2]=((((-1.0)*r22*x8969))+(((-1.0)*x8966*x8970))+((r21*x8968)));
evalcond[3]=(((r11*x8968))+(((-1.0)*r12*x8969))+(((-1.0)*x8965*x8970)));
evalcond[4]=((-1.0)+((r11*x8967))+(((-1.0)*x8965*x8969))+((r12*x8963)));
evalcond[5]=((-1.0)+(((-1.0)*x8964*x8970))+((r01*x8968))+(((-1.0)*r02*x8969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x8971=((1.0)*cj6);
CheckValue<IkReal> x8972 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x8971)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8972.valid){
continue;
}
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x8971)))),-1);
if(!x8973.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x8972.value)+(((1.5707963267949)*(x8973.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8974=IKcos(j5);
IkReal x8975=IKsin(j5);
IkReal x8976=(cj6*r00);
IkReal x8977=(cj6*r10);
IkReal x8978=(cj6*r20);
IkReal x8979=(sj6*x8974);
IkReal x8980=(sj6*x8975);
IkReal x8981=((1.0)*x8974);
IkReal x8982=((1.0)*x8975);
evalcond[0]=(((r21*x8979))+(((-1.0)*x8978*x8981))+((r22*x8975)));
evalcond[1]=(((r01*x8979))+((r02*x8975))+(((-1.0)*x8976*x8981)));
evalcond[2]=(((r21*x8980))+(((-1.0)*x8978*x8982))+(((-1.0)*r22*x8981)));
evalcond[3]=((((-1.0)*r12*x8981))+(((-1.0)*x8977*x8982))+((r11*x8980)));
evalcond[4]=((-1.0)+((r11*x8979))+((r12*x8975))+(((-1.0)*x8977*x8981)));
evalcond[5]=((-1.0)+((r01*x8980))+(((-1.0)*r02*x8981))+(((-1.0)*x8976*x8982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x8983=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x8983.valid){
continue;
}
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8983.value)))+(x8984.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x8985=IKcos(j5);
IkReal x8986=IKsin(j5);
IkReal x8987=(cj6*r00);
IkReal x8988=(cj6*r10);
IkReal x8989=(cj6*r20);
IkReal x8990=(sj6*x8985);
IkReal x8991=(sj6*x8986);
IkReal x8992=((1.0)*x8985);
IkReal x8993=((1.0)*x8986);
evalcond[0]=(((r22*x8986))+((r21*x8990))+(((-1.0)*x8989*x8992)));
evalcond[1]=(((r02*x8986))+(((-1.0)*x8987*x8992))+((r01*x8990)));
evalcond[2]=(((r21*x8991))+(((-1.0)*x8989*x8993))+(((-1.0)*r22*x8992)));
evalcond[3]=((((-1.0)*r12*x8992))+((r11*x8991))+(((-1.0)*x8988*x8993)));
evalcond[4]=((-1.0)+((r11*x8990))+((r12*x8986))+(((-1.0)*x8988*x8992)));
evalcond[5]=((-1.0)+(((-1.0)*x8987*x8993))+((r01*x8991))+(((-1.0)*r02*x8992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8994=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x8994;
j5eval[1]=IKsign(x8994);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8995=((1.0)*cj6);
IkReal x8996=((((-1.0)*r00*sj6))+(((-1.0)*r01*x8995)));
j5eval[0]=x8996;
j5eval[1]=IKsign(x8996);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x8995)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8997=cj6*cj6;
IkReal x8998=(r21*sj6);
IkReal x8999=(cj6*r20);
IkReal x9000=(r01*r21);
IkReal x9001=((((-1.0)*r02*r22))+(((-1.0)*x9000))+(((-1.0)*r00*r20*x8997))+((cj6*r00*x8998))+((x8997*x9000))+((r01*sj6*x8999)));
j5eval[0]=x9001;
j5eval[1]=IKsign(x9001);
j5eval[2]=((IKabs(r22))+(IKabs((x8998+(((-1.0)*x8999))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9002=cj6*cj6;
IkReal x9003=(r21*sj6);
IkReal x9004=(cj6*r20);
IkReal x9005=(r01*r21);
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(((((-1.0)*x9004))+x9003)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
CheckValue<IkReal> x9007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x9002))+(((-1.0)*x9005))+((cj6*r00*x9003))+((x9002*x9005))+((r01*sj6*x9004)))),-1);
if(!x9007.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9006.value)+(((1.5707963267949)*(x9007.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9008=IKcos(j5);
IkReal x9009=IKsin(j5);
IkReal x9010=(cj6*r00);
IkReal x9011=(cj6*r10);
IkReal x9012=(cj6*r20);
IkReal x9013=(sj6*x9008);
IkReal x9014=(sj6*x9009);
IkReal x9015=((1.0)*x9008);
IkReal x9016=((1.0)*x9009);
evalcond[0]=(((r22*x9009))+(((-1.0)*x9012*x9015))+((r21*x9013)));
evalcond[1]=(((r02*x9009))+((r01*x9013))+(((-1.0)*x9010*x9015)));
evalcond[2]=((((-1.0)*r22*x9015))+(((-1.0)*x9012*x9016))+((r21*x9014)));
evalcond[3]=((((-1.0)*x9011*x9016))+(((-1.0)*r12*x9015))+((r11*x9014)));
evalcond[4]=((-1.0)+(((-1.0)*x9011*x9015))+((r12*x9009))+((r11*x9013)));
evalcond[5]=((1.0)+(((-1.0)*r02*x9015))+((r01*x9014))+(((-1.0)*x9010*x9016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9017=((1.0)*cj6);
CheckValue<IkReal> x9018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x9017)))),-1);
if(!x9018.valid){
continue;
}
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x9017)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9018.value)))+(x9019.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9020=IKcos(j5);
IkReal x9021=IKsin(j5);
IkReal x9022=(cj6*r00);
IkReal x9023=(cj6*r10);
IkReal x9024=(cj6*r20);
IkReal x9025=(sj6*x9020);
IkReal x9026=(sj6*x9021);
IkReal x9027=((1.0)*x9020);
IkReal x9028=((1.0)*x9021);
evalcond[0]=(((r21*x9025))+((r22*x9021))+(((-1.0)*x9024*x9027)));
evalcond[1]=(((r01*x9025))+(((-1.0)*x9022*x9027))+((r02*x9021)));
evalcond[2]=(((r21*x9026))+(((-1.0)*r22*x9027))+(((-1.0)*x9024*x9028)));
evalcond[3]=((((-1.0)*r12*x9027))+(((-1.0)*x9023*x9028))+((r11*x9026)));
evalcond[4]=((-1.0)+(((-1.0)*x9023*x9027))+((r11*x9025))+((r12*x9021)));
evalcond[5]=((1.0)+((r01*x9026))+(((-1.0)*x9022*x9028))+(((-1.0)*r02*x9027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9029=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x9029.valid){
continue;
}
CheckValue<IkReal> x9030 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9030.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9029.value)))+(x9030.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9031=IKcos(j5);
IkReal x9032=IKsin(j5);
IkReal x9033=(cj6*r00);
IkReal x9034=(cj6*r10);
IkReal x9035=(cj6*r20);
IkReal x9036=(sj6*x9031);
IkReal x9037=(sj6*x9032);
IkReal x9038=((1.0)*x9031);
IkReal x9039=((1.0)*x9032);
evalcond[0]=((((-1.0)*x9035*x9038))+((r22*x9032))+((r21*x9036)));
evalcond[1]=(((r01*x9036))+(((-1.0)*x9033*x9038))+((r02*x9032)));
evalcond[2]=((((-1.0)*x9035*x9039))+((r21*x9037))+(((-1.0)*r22*x9038)));
evalcond[3]=((((-1.0)*r12*x9038))+(((-1.0)*x9034*x9039))+((r11*x9037)));
evalcond[4]=((-1.0)+(((-1.0)*x9034*x9038))+((r11*x9036))+((r12*x9032)));
evalcond[5]=((1.0)+((r01*x9037))+(((-1.0)*x9033*x9039))+(((-1.0)*r02*x9038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x9040=((-1.0)*pz);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9040);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9040);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x9041=((-1.0)*pz);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9041);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9041);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9042=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9042.valid){
continue;
}
cj5array[0]=x9042.value;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9043=IKsin(j5);
IkReal x9044=IKcos(j5);
IkReal x9045=(r01*sj6);
IkReal x9046=((1.0)*cj6);
evalcond[0]=(r22*x9043);
evalcond[1]=(sj3+(((-1.0)*r22*x9044)));
evalcond[2]=((((-1.0)*r10*x9043*x9046))+((r11*sj6*x9043)));
evalcond[3]=(((x9043*x9045))+(((-1.0)*r00*x9043*x9046)));
evalcond[4]=(((x9044*x9045))+(((-1.0)*r00*x9044*x9046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9047=IKPowWithIntegerCheck(r22,-1);
if(!x9047.valid){
continue;
}
cj5array[0]=(sj3*(x9047.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9048=IKsin(j5);
IkReal x9049=IKcos(j5);
IkReal x9050=((1.0)*cj6);
IkReal x9051=(sj6*x9049);
IkReal x9052=(sj6*x9048);
evalcond[0]=(r22*x9048);
evalcond[1]=(((r11*x9052))+(((-1.0)*r10*x9048*x9050)));
evalcond[2]=((((-1.0)*r00*x9048*x9050))+((r01*x9052)));
evalcond[3]=(((r01*x9051))+(((-1.0)*r00*x9049*x9050)));
evalcond[4]=((-1.0)+((r11*x9051))+(((-1.0)*r10*x9049*x9050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9053=r21*r21;
IkReal x9054=cj6*cj6;
IkReal x9055=(cj6*r20);
IkReal x9056=(r21*sj6);
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign(((((2.0)*x9055*x9056))+((x9053*x9054))+(((-1.0)*(r22*r22)))+(((-1.0)*x9054*(r20*r20)))+(((-1.0)*x9053)))),-1);
if(!x9057.valid){
continue;
}
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x9055))+((sj3*x9056)))),IkReal(((-1.0)*r22*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9057.value)))+(x9058.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9059=IKcos(j5);
IkReal x9060=IKsin(j5);
IkReal x9061=(cj6*r10);
IkReal x9062=(cj6*r00);
IkReal x9063=(cj6*r20);
IkReal x9064=((1.0)*x9059);
IkReal x9065=(sj6*x9059);
IkReal x9066=(sj6*x9060);
IkReal x9067=((1.0)*x9060);
evalcond[0]=(((r22*x9060))+((r21*x9065))+(((-1.0)*x9063*x9064)));
evalcond[1]=(((r01*x9065))+(((-1.0)*x9062*x9064))+((r02*x9060)));
evalcond[2]=(((r11*x9066))+(((-1.0)*r12*x9064))+(((-1.0)*x9061*x9067)));
evalcond[3]=((-1.0)+((r11*x9065))+((r12*x9060))+(((-1.0)*x9061*x9064)));
evalcond[4]=(sj3+((r21*x9066))+(((-1.0)*x9063*x9067))+(((-1.0)*r22*x9064)));
evalcond[5]=(((r01*x9066))+(((-1.0)*x9062*x9067))+(((-1.0)*r02*x9064))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9068=((1.0)*cj6);
CheckValue<IkReal> x9069 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x9068)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9069.valid){
continue;
}
CheckValue<IkReal> x9070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9068))+(((-1.0)*r00*sj6)))),-1);
if(!x9070.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9069.value)+(((1.5707963267949)*(x9070.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9071=IKcos(j5);
IkReal x9072=IKsin(j5);
IkReal x9073=(cj6*r10);
IkReal x9074=(cj6*r00);
IkReal x9075=(cj6*r20);
IkReal x9076=((1.0)*x9071);
IkReal x9077=(sj6*x9071);
IkReal x9078=(sj6*x9072);
IkReal x9079=((1.0)*x9072);
evalcond[0]=((((-1.0)*x9075*x9076))+((r21*x9077))+((r22*x9072)));
evalcond[1]=((((-1.0)*x9074*x9076))+((r01*x9077))+((r02*x9072)));
evalcond[2]=((((-1.0)*r12*x9076))+((r11*x9078))+(((-1.0)*x9073*x9079)));
evalcond[3]=((-1.0)+((r11*x9077))+(((-1.0)*x9073*x9076))+((r12*x9072)));
evalcond[4]=((((-1.0)*x9075*x9079))+((r21*x9078))+sj3+(((-1.0)*r22*x9076)));
evalcond[5]=((((-1.0)*r02*x9076))+(((-1.0)*x9074*x9079))+((r01*x9078))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9080=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x9080.valid){
continue;
}
CheckValue<IkReal> x9081 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9081.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9080.value)))+(x9081.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9082=IKcos(j5);
IkReal x9083=IKsin(j5);
IkReal x9084=(cj6*r10);
IkReal x9085=(cj6*r00);
IkReal x9086=(cj6*r20);
IkReal x9087=((1.0)*x9082);
IkReal x9088=(sj6*x9082);
IkReal x9089=(sj6*x9083);
IkReal x9090=((1.0)*x9083);
evalcond[0]=((((-1.0)*x9086*x9087))+((r21*x9088))+((r22*x9083)));
evalcond[1]=(((r01*x9088))+(((-1.0)*x9085*x9087))+((r02*x9083)));
evalcond[2]=(((r11*x9089))+(((-1.0)*x9084*x9090))+(((-1.0)*r12*x9087)));
evalcond[3]=((-1.0)+((r11*x9088))+((r12*x9083))+(((-1.0)*x9084*x9087)));
evalcond[4]=(sj3+(((-1.0)*x9086*x9090))+((r21*x9089))+(((-1.0)*r22*x9087)));
evalcond[5]=(((r01*x9089))+(((-1.0)*x9085*x9090))+(((-1.0)*r02*x9087))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x9091=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x9091;
j5eval[1]=IKsign(x9091);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x9092=((1.0)*cj6);
IkReal x9093=((((-1.0)*r21*x9092))+(((-1.0)*r20*sj6)));
j5eval[0]=x9093;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x9092))))));
j5eval[2]=IKsign(x9093);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x9094=r21*r21;
IkReal x9095=cj6*cj6;
IkReal x9096=(cj6*r20);
IkReal x9097=(r21*sj6);
IkReal x9098=((((-1.0)*x9095*(r20*r20)))+((x9094*x9095))+(((2.0)*x9096*x9097))+(((-1.0)*(r22*r22)))+(((-1.0)*x9094)));
j5eval[0]=x9098;
j5eval[1]=IKsign(x9098);
j5eval[2]=((IKabs((((sj3*x9097))+(((-1.0)*sj3*x9096)))))+(IKabs((r22*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x9099=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x9099;
j5eval[1]=IKsign(x9099);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x9100=((1.0)*cj6);
IkReal x9101=((((-1.0)*r21*x9100))+(((-1.0)*r20*sj6)));
j5eval[0]=x9101;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x9100))))));
j5eval[2]=IKsign(x9101);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x9102=cj6*cj6;
IkReal x9103=(r21*sj6);
IkReal x9104=(cj6*r20);
IkReal x9105=(r01*r21);
IkReal x9106=((((-1.0)*x9105))+(((-1.0)*r00*r20*x9102))+(((-1.0)*r02*r22))+((cj6*r00*x9103))+((x9102*x9105))+((r01*sj6*x9104)));
j5eval[0]=x9106;
j5eval[1]=IKsign(x9106);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x9104))+x9103))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9107=cj6*cj6;
IkReal x9108=(r21*sj6);
IkReal x9109=(cj6*r20);
IkReal x9110=(r01*r21);
CheckValue<IkReal> x9111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x9107))+(((-1.0)*r02*r22))+(((-1.0)*x9110))+((cj6*r00*x9108))+((x9107*x9110))+((r01*sj6*x9109)))),-1);
if(!x9111.valid){
continue;
}
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(((((-1.0)*x9109))+x9108)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9111.value)))+(x9112.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9113=IKcos(j5);
IkReal x9114=IKsin(j5);
IkReal x9115=(cj6*r00);
IkReal x9116=(cj6*r10);
IkReal x9117=(cj6*r20);
IkReal x9118=(sj6*x9113);
IkReal x9119=(sj6*x9114);
IkReal x9120=((1.0)*x9113);
IkReal x9121=((1.0)*x9114);
evalcond[0]=(((r21*x9118))+(((-1.0)*x9117*x9120))+((r22*x9114)));
evalcond[1]=((((-1.0)*x9115*x9120))+((r01*x9118))+((r02*x9114)));
evalcond[2]=(((r21*x9119))+(((-1.0)*x9117*x9121))+(((-1.0)*r22*x9120)));
evalcond[3]=((((-1.0)*r12*x9120))+(((-1.0)*x9116*x9121))+((r11*x9119)));
evalcond[4]=((1.0)+(((-1.0)*x9116*x9120))+((r12*x9114))+((r11*x9118)));
evalcond[5]=((1.0)+(((-1.0)*r02*x9120))+(((-1.0)*x9115*x9121))+((r01*x9119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9122=((1.0)*cj6);
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9122))+(((-1.0)*r20*sj6)))),-1);
if(!x9123.valid){
continue;
}
CheckValue<IkReal> x9124 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x9122)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9124.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9123.value)))+(x9124.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9125=IKcos(j5);
IkReal x9126=IKsin(j5);
IkReal x9127=(cj6*r00);
IkReal x9128=(cj6*r10);
IkReal x9129=(cj6*r20);
IkReal x9130=(sj6*x9125);
IkReal x9131=(sj6*x9126);
IkReal x9132=((1.0)*x9125);
IkReal x9133=((1.0)*x9126);
evalcond[0]=(((r22*x9126))+((r21*x9130))+(((-1.0)*x9129*x9132)));
evalcond[1]=((((-1.0)*x9127*x9132))+((r02*x9126))+((r01*x9130)));
evalcond[2]=((((-1.0)*r22*x9132))+((r21*x9131))+(((-1.0)*x9129*x9133)));
evalcond[3]=((((-1.0)*x9128*x9133))+(((-1.0)*r12*x9132))+((r11*x9131)));
evalcond[4]=((1.0)+(((-1.0)*x9128*x9132))+((r11*x9130))+((r12*x9126)));
evalcond[5]=((1.0)+(((-1.0)*x9127*x9133))+(((-1.0)*r02*x9132))+((r01*x9131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9134=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x9134.valid){
continue;
}
CheckValue<IkReal> x9135 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9135.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9134.value)))+(x9135.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9136=IKcos(j5);
IkReal x9137=IKsin(j5);
IkReal x9138=(cj6*r00);
IkReal x9139=(cj6*r10);
IkReal x9140=(cj6*r20);
IkReal x9141=(sj6*x9136);
IkReal x9142=(sj6*x9137);
IkReal x9143=((1.0)*x9136);
IkReal x9144=((1.0)*x9137);
evalcond[0]=((((-1.0)*x9140*x9143))+((r22*x9137))+((r21*x9141)));
evalcond[1]=(((r01*x9141))+((r02*x9137))+(((-1.0)*x9138*x9143)));
evalcond[2]=((((-1.0)*x9140*x9144))+((r21*x9142))+(((-1.0)*r22*x9143)));
evalcond[3]=((((-1.0)*r12*x9143))+(((-1.0)*x9139*x9144))+((r11*x9142)));
evalcond[4]=((1.0)+((r12*x9137))+(((-1.0)*x9139*x9143))+((r11*x9141)));
evalcond[5]=((1.0)+((r01*x9142))+(((-1.0)*r02*x9143))+(((-1.0)*x9138*x9144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9145=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x9145;
j5eval[1]=IKsign(x9145);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9146=((1.0)*cj6);
IkReal x9147=((((-1.0)*r21*x9146))+(((-1.0)*r20*sj6)));
j5eval[0]=x9147;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x9146))+((r01*sj6))))));
j5eval[2]=IKsign(x9147);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9148=cj6*cj6;
IkReal x9149=r01*r01;
IkReal x9150=(r01*sj6);
IkReal x9151=(cj6*r00);
IkReal x9152=((((-2.0)*x9150*x9151))+x9149+(((-1.0)*x9148*x9149))+((x9148*(r00*r00)))+(r02*r02));
j5eval[0]=x9152;
j5eval[1]=((IKabs(r02))+(IKabs((x9150+(((-1.0)*x9151))))));
j5eval[2]=IKsign(x9152);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9153=cj6*cj6;
IkReal x9154=r01*r01;
IkReal x9155=(r01*sj6);
IkReal x9156=(cj6*r00);
CheckValue<IkReal> x9157=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9155*x9156))+(((-1.0)*x9153*x9154))+x9154+((x9153*(r00*r00)))+(r02*r02))),-1);
if(!x9157.valid){
continue;
}
CheckValue<IkReal> x9158 = IKatan2WithCheck(IkReal((x9155+(((-1.0)*x9156)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9158.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9157.value)))+(x9158.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9159=IKcos(j5);
IkReal x9160=IKsin(j5);
IkReal x9161=(cj6*r00);
IkReal x9162=(cj6*r10);
IkReal x9163=(cj6*r20);
IkReal x9164=(sj6*x9159);
IkReal x9165=(sj6*x9160);
IkReal x9166=((1.0)*x9159);
IkReal x9167=((1.0)*x9160);
evalcond[0]=((((-1.0)*x9163*x9166))+((r22*x9160))+((r21*x9164)));
evalcond[1]=(((r01*x9164))+((r02*x9160))+(((-1.0)*x9161*x9166)));
evalcond[2]=((((-1.0)*r22*x9166))+(((-1.0)*x9163*x9167))+((r21*x9165)));
evalcond[3]=((((-1.0)*r12*x9166))+(((-1.0)*x9162*x9167))+((r11*x9165)));
evalcond[4]=((1.0)+(((-1.0)*x9162*x9166))+((r11*x9164))+((r12*x9160)));
evalcond[5]=((-1.0)+((r01*x9165))+(((-1.0)*x9161*x9167))+(((-1.0)*r02*x9166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9168=((1.0)*cj6);
CheckValue<IkReal> x9169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9168))+(((-1.0)*r20*sj6)))),-1);
if(!x9169.valid){
continue;
}
CheckValue<IkReal> x9170 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x9168)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9170.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9169.value)))+(x9170.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9171=IKcos(j5);
IkReal x9172=IKsin(j5);
IkReal x9173=(cj6*r00);
IkReal x9174=(cj6*r10);
IkReal x9175=(cj6*r20);
IkReal x9176=(sj6*x9171);
IkReal x9177=(sj6*x9172);
IkReal x9178=((1.0)*x9171);
IkReal x9179=((1.0)*x9172);
evalcond[0]=(((r21*x9176))+((r22*x9172))+(((-1.0)*x9175*x9178)));
evalcond[1]=(((r02*x9172))+((r01*x9176))+(((-1.0)*x9173*x9178)));
evalcond[2]=(((r21*x9177))+(((-1.0)*r22*x9178))+(((-1.0)*x9175*x9179)));
evalcond[3]=((((-1.0)*r12*x9178))+((r11*x9177))+(((-1.0)*x9174*x9179)));
evalcond[4]=((1.0)+((r12*x9172))+((r11*x9176))+(((-1.0)*x9174*x9178)));
evalcond[5]=((-1.0)+((r01*x9177))+(((-1.0)*x9173*x9179))+(((-1.0)*r02*x9178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9180=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x9180.valid){
continue;
}
CheckValue<IkReal> x9181 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9181.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9180.value)))+(x9181.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9182=IKcos(j5);
IkReal x9183=IKsin(j5);
IkReal x9184=(cj6*r00);
IkReal x9185=(cj6*r10);
IkReal x9186=(cj6*r20);
IkReal x9187=(sj6*x9182);
IkReal x9188=(sj6*x9183);
IkReal x9189=((1.0)*x9182);
IkReal x9190=((1.0)*x9183);
evalcond[0]=((((-1.0)*x9186*x9189))+((r22*x9183))+((r21*x9187)));
evalcond[1]=(((r02*x9183))+(((-1.0)*x9184*x9189))+((r01*x9187)));
evalcond[2]=((((-1.0)*r22*x9189))+((r21*x9188))+(((-1.0)*x9186*x9190)));
evalcond[3]=((((-1.0)*r12*x9189))+((r11*x9188))+(((-1.0)*x9185*x9190)));
evalcond[4]=((1.0)+((r11*x9187))+((r12*x9183))+(((-1.0)*x9185*x9189)));
evalcond[5]=((-1.0)+(((-1.0)*x9184*x9190))+(((-1.0)*r02*x9189))+((r01*x9188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x9191=((-1.0)*px);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9191);
rxp1_1=(px*r21);
rxp1_2=(r11*x9191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x9192=((-1.0)*px);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9192);
rxp1_1=(px*r21);
rxp1_2=(r11*x9192);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9193=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9193.valid){
continue;
}
cj5array[0]=((-1.0)*(x9193.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9194=IKsin(j5);
IkReal x9195=IKcos(j5);
IkReal x9196=(cj6*r20);
IkReal x9197=(sj6*x9194);
IkReal x9198=((1.0)*x9195);
IkReal x9199=((1.0)*x9194);
evalcond[0]=(r02*x9194);
evalcond[1]=(cj3+(((-1.0)*r02*x9198)));
evalcond[2]=(((r21*x9197))+(((-1.0)*x9196*x9199)));
evalcond[3]=((((-1.0)*cj6*r10*x9199))+((r11*x9197)));
evalcond[4]=((((-1.0)*x9196*x9198))+((r21*sj6*x9195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9200=IKPowWithIntegerCheck(r02,-1);
if(!x9200.valid){
continue;
}
cj5array[0]=(cj3*(x9200.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9201=IKsin(j5);
IkReal x9202=IKcos(j5);
IkReal x9203=(r11*sj6);
IkReal x9204=(r21*sj6);
IkReal x9205=((1.0)*cj6*x9202);
IkReal x9206=((1.0)*cj6*x9201);
evalcond[0]=(r02*x9201);
evalcond[1]=(((x9201*x9204))+(((-1.0)*r20*x9206)));
evalcond[2]=(((x9201*x9203))+(((-1.0)*r10*x9206)));
evalcond[3]=(((x9202*x9204))+(((-1.0)*r20*x9205)));
evalcond[4]=((1.0)+((x9202*x9203))+(((-1.0)*r10*x9205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9207=r21*r21;
IkReal x9208=cj6*cj6;
IkReal x9209=(cj6*r20);
IkReal x9210=(r21*sj6);
CheckValue<IkReal> x9211 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x9209))+((sj3*x9210)))),IkReal(((-1.0)*r22*sj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x9211.valid){
continue;
}
CheckValue<IkReal> x9212=IKPowWithIntegerCheck(IKsign(((((2.0)*x9209*x9210))+(((-1.0)*x9208*(r20*r20)))+(((-1.0)*(r22*r22)))+((x9207*x9208))+(((-1.0)*x9207)))),-1);
if(!x9212.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9211.value)+(((1.5707963267949)*(x9212.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9213=IKcos(j5);
IkReal x9214=IKsin(j5);
IkReal x9215=((1.0)*cj6);
IkReal x9216=(sj6*x9213);
IkReal x9217=(sj6*x9214);
IkReal x9218=((1.0)*x9213);
evalcond[0]=(((r21*x9216))+((r22*x9214))+(((-1.0)*r20*x9213*x9215)));
evalcond[1]=((((-1.0)*r00*x9213*x9215))+((r02*x9214))+((r01*x9216)));
evalcond[2]=(((r11*x9217))+(((-1.0)*r12*x9218))+(((-1.0)*r10*x9214*x9215)));
evalcond[3]=((1.0)+((r12*x9214))+((r11*x9216))+(((-1.0)*r10*x9213*x9215)));
evalcond[4]=(sj3+((r21*x9217))+(((-1.0)*r20*x9214*x9215))+(((-1.0)*r22*x9218)));
evalcond[5]=((((-1.0)*r02*x9218))+cj3+(((-1.0)*r00*x9214*x9215))+((r01*x9217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9219=((1.0)*cj6);
CheckValue<IkReal> x9220 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9219))+((r01*sj6)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9220.valid){
continue;
}
CheckValue<IkReal> x9221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9219))+(((-1.0)*r20*sj6)))),-1);
if(!x9221.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9220.value)+(((1.5707963267949)*(x9221.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9222=IKcos(j5);
IkReal x9223=IKsin(j5);
IkReal x9224=((1.0)*cj6);
IkReal x9225=(sj6*x9222);
IkReal x9226=(sj6*x9223);
IkReal x9227=((1.0)*x9222);
evalcond[0]=((((-1.0)*r20*x9222*x9224))+((r21*x9225))+((r22*x9223)));
evalcond[1]=(((r01*x9225))+(((-1.0)*r00*x9222*x9224))+((r02*x9223)));
evalcond[2]=((((-1.0)*r10*x9223*x9224))+((r11*x9226))+(((-1.0)*r12*x9227)));
evalcond[3]=((1.0)+((r12*x9223))+((r11*x9225))+(((-1.0)*r10*x9222*x9224)));
evalcond[4]=(sj3+(((-1.0)*r20*x9223*x9224))+((r21*x9226))+(((-1.0)*r22*x9227)));
evalcond[5]=(((r01*x9226))+(((-1.0)*r02*x9227))+cj3+(((-1.0)*r00*x9223*x9224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9228=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x9228.valid){
continue;
}
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9228.value)))+(x9229.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9230=IKcos(j5);
IkReal x9231=IKsin(j5);
IkReal x9232=((1.0)*cj6);
IkReal x9233=(sj6*x9230);
IkReal x9234=(sj6*x9231);
IkReal x9235=((1.0)*x9230);
evalcond[0]=((((-1.0)*r20*x9230*x9232))+((r22*x9231))+((r21*x9233)));
evalcond[1]=(((r02*x9231))+(((-1.0)*r00*x9230*x9232))+((r01*x9233)));
evalcond[2]=((((-1.0)*r10*x9231*x9232))+(((-1.0)*r12*x9235))+((r11*x9234)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9230*x9232))+((r11*x9233))+((r12*x9231)));
evalcond[4]=(sj3+(((-1.0)*r20*x9231*x9232))+((r21*x9234))+(((-1.0)*r22*x9235)));
evalcond[5]=(cj3+(((-1.0)*r00*x9231*x9232))+((r01*x9234))+(((-1.0)*r02*x9235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9236=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x9236;
j5eval[1]=IKsign(x9236);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9237=((1.0)*cj6);
IkReal x9238=((((-1.0)*r21*x9237))+(((-1.0)*r20*sj6)));
j5eval[0]=x9238;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x9237))))));
j5eval[2]=IKsign(x9238);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9239=cj6*cj6;
IkReal x9240=r11*r11;
IkReal x9241=(r11*sj6);
IkReal x9242=(cj6*r10);
IkReal x9243=(((x9239*x9240))+(((2.0)*x9241*x9242))+(((-1.0)*x9239*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9240)));
j5eval[0]=x9243;
j5eval[1]=((IKabs(r12))+(IKabs((x9241+(((-1.0)*x9242))))));
j5eval[2]=IKsign(x9243);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x9244=((-1.0)*pz);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9244);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9244);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x9245=((-1.0)*pz);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9245);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9245);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9246=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9246.valid){
continue;
}
cj5array[0]=((-1.0)*(x9246.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9247=IKsin(j5);
IkReal x9248=IKcos(j5);
IkReal x9249=(r01*sj6);
IkReal x9250=((1.0)*cj6);
evalcond[0]=(r22*x9247);
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*r22*x9248)));
evalcond[2]=((((-1.0)*r10*x9247*x9250))+((r11*sj6*x9247)));
evalcond[3]=((((-1.0)*r00*x9247*x9250))+((x9247*x9249)));
evalcond[4]=((((-1.0)*r00*x9248*x9250))+((x9248*x9249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9251=IKPowWithIntegerCheck(r22,-1);
if(!x9251.valid){
continue;
}
cj5array[0]=((-1.0)*sj3*(x9251.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9252=IKsin(j5);
IkReal x9253=IKcos(j5);
IkReal x9254=((1.0)*cj6);
IkReal x9255=(sj6*x9253);
IkReal x9256=(sj6*x9252);
evalcond[0]=(r22*x9252);
evalcond[1]=(((r11*x9256))+(((-1.0)*r10*x9252*x9254)));
evalcond[2]=((((-1.0)*r00*x9252*x9254))+((r01*x9256)));
evalcond[3]=((((-1.0)*r00*x9253*x9254))+((r01*x9255)));
evalcond[4]=((1.0)+((r11*x9255))+(((-1.0)*r10*x9253*x9254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x9257=((-1.0)*px);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9257);
rxp1_1=(px*r21);
rxp1_2=(r11*x9257);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x9258=((-1.0)*px);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9258);
rxp1_1=(px*r21);
rxp1_2=(r11*x9258);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9260=IKPowWithIntegerCheck(r02,-1);
if(!x9260.valid){
continue;
}
IkReal x9259=x9260.value;
cj5array[0]=((((-3.18106629342156)*px*x9259))+(((1.33846545362005)*x9259)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9261=IKsin(j5);
IkReal x9262=IKcos(j5);
IkReal x9263=(r11*sj6);
IkReal x9264=(r21*sj6);
IkReal x9265=((1.0)*cj6*x9262);
IkReal x9266=((1.0)*cj6*x9261);
evalcond[0]=(r02*x9261);
evalcond[1]=((((-1.0)*r20*x9266))+((x9261*x9264)));
evalcond[2]=((((-1.0)*r10*x9266))+((x9261*x9263)));
evalcond[3]=(((x9262*x9264))+(((-1.0)*r20*x9265)));
evalcond[4]=((1.0)+((x9262*x9263))+(((-1.0)*r10*x9265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9267=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9267.valid){
continue;
}
cj5array[0]=((-1.0)*(x9267.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9268=IKsin(j5);
IkReal x9269=IKcos(j5);
IkReal x9270=(cj6*r20);
IkReal x9271=(sj6*x9268);
IkReal x9272=((1.0)*x9269);
IkReal x9273=((1.0)*x9268);
evalcond[0]=(r02*x9268);
evalcond[1]=((1.33846545362005)+(((-3.18106629342156)*px))+(((-1.0)*r02*x9272)));
evalcond[2]=(((r21*x9271))+(((-1.0)*x9270*x9273)));
evalcond[3]=((((-1.0)*cj6*r10*x9273))+((r11*x9271)));
evalcond[4]=(((r21*sj6*x9269))+(((-1.0)*x9270*x9272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9274=cj6*cj6;
IkReal x9275=r11*r11;
IkReal x9276=(r11*sj6);
IkReal x9277=(cj6*r10);
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9274*(r10*r10)))+(((-1.0)*x9275))+(((-1.0)*(r12*r12)))+(((2.0)*x9276*x9277))+((x9274*x9275)))),-1);
if(!x9278.valid){
continue;
}
CheckValue<IkReal> x9279 = IKatan2WithCheck(IkReal(r12),IkReal((x9276+(((-1.0)*x9277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9279.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9278.value)))+(x9279.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9280=IKcos(j5);
IkReal x9281=IKsin(j5);
IkReal x9282=(cj6*r10);
IkReal x9283=(cj6*r00);
IkReal x9284=(cj6*r20);
IkReal x9285=((1.0)*x9280);
IkReal x9286=(sj6*x9280);
IkReal x9287=((1.0)*x9281);
IkReal x9288=(sj6*x9281);
evalcond[0]=(((r22*x9281))+((r21*x9286))+(((-1.0)*x9284*x9285)));
evalcond[1]=(((r02*x9281))+((r01*x9286))+(((-1.0)*x9283*x9285)));
evalcond[2]=((((-1.0)*r12*x9285))+((r11*x9288))+(((-1.0)*x9282*x9287)));
evalcond[3]=((1.0)+((r11*x9286))+(((-1.0)*x9282*x9285))+((r12*x9281)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*r22*x9285))+((r21*x9288))+(((-1.0)*x9284*x9287)));
evalcond[5]=(((r01*x9288))+(((-1.0)*r02*x9285))+(((-1.0)*x9283*x9287))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9289=((1.0)*cj6);
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*r00*x9289)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
CheckValue<IkReal> x9291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9289))+(((-1.0)*r20*sj6)))),-1);
if(!x9291.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9290.value)+(((1.5707963267949)*(x9291.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9292=IKcos(j5);
IkReal x9293=IKsin(j5);
IkReal x9294=(cj6*r10);
IkReal x9295=(cj6*r00);
IkReal x9296=(cj6*r20);
IkReal x9297=((1.0)*x9292);
IkReal x9298=(sj6*x9292);
IkReal x9299=((1.0)*x9293);
IkReal x9300=(sj6*x9293);
evalcond[0]=(((r22*x9293))+(((-1.0)*x9296*x9297))+((r21*x9298)));
evalcond[1]=(((r02*x9293))+((r01*x9298))+(((-1.0)*x9295*x9297)));
evalcond[2]=((((-1.0)*x9294*x9299))+((r11*x9300))+(((-1.0)*r12*x9297)));
evalcond[3]=((1.0)+((r11*x9298))+(((-1.0)*x9294*x9297))+((r12*x9293)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*x9296*x9299))+((r21*x9300))+(((-1.0)*r22*x9297)));
evalcond[5]=(((r01*x9300))+(((-1.0)*r02*x9297))+(((-1.0)*cj3))+(((-1.0)*x9295*x9299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9301=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x9301.valid){
continue;
}
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9301.value)))+(x9302.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9303=IKcos(j5);
IkReal x9304=IKsin(j5);
IkReal x9305=(cj6*r10);
IkReal x9306=(cj6*r00);
IkReal x9307=(cj6*r20);
IkReal x9308=((1.0)*x9303);
IkReal x9309=(sj6*x9303);
IkReal x9310=((1.0)*x9304);
IkReal x9311=(sj6*x9304);
evalcond[0]=((((-1.0)*x9307*x9308))+((r22*x9304))+((r21*x9309)));
evalcond[1]=((((-1.0)*x9306*x9308))+((r02*x9304))+((r01*x9309)));
evalcond[2]=((((-1.0)*x9305*x9310))+((r11*x9311))+(((-1.0)*r12*x9308)));
evalcond[3]=((1.0)+(((-1.0)*x9305*x9308))+((r12*x9304))+((r11*x9309)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*x9307*x9310))+((r21*x9311))+(((-1.0)*r22*x9308)));
evalcond[5]=((((-1.0)*x9306*x9310))+((r01*x9311))+(((-1.0)*r02*x9308))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x9312=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x9312;
j5eval[1]=IKsign(x9312);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x9313=((1.0)*cj6);
IkReal x9314=((((-1.0)*r00*sj6))+(((-1.0)*r01*x9313)));
j5eval[0]=x9314;
j5eval[1]=IKsign(x9314);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x9313))+((r21*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x9315=cj6*cj6;
IkReal x9316=(cj6*r20);
IkReal x9317=(r01*r21);
IkReal x9318=(r21*sj6);
IkReal x9319=(((x9315*x9317))+(((-1.0)*r02*r22))+((r01*sj6*x9316))+((cj6*r00*x9318))+(((-1.0)*x9317))+(((-1.0)*r00*r20*x9315)));
j5eval[0]=x9319;
j5eval[1]=IKsign(x9319);
j5eval[2]=((IKabs((((cj3*x9318))+(((-1.0)*cj3*x9316)))))+(IKabs((cj3*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x9320=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x9320;
j5eval[1]=IKsign(x9320);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x9321=((1.0)*cj6);
IkReal x9322=((((-1.0)*r01*x9321))+(((-1.0)*r00*sj6)));
j5eval[0]=x9322;
j5eval[1]=IKsign(x9322);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x9321))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x9323=cj6*cj6;
IkReal x9324=r21*r21;
IkReal x9325=(r21*sj6);
IkReal x9326=(cj6*r20);
IkReal x9327=((((-1.0)*x9323*x9324))+x9324+(r22*r22)+(((-2.0)*x9325*x9326))+((x9323*(r20*r20))));
j5eval[0]=x9327;
j5eval[1]=IKsign(x9327);
j5eval[2]=((IKabs(((((-1.0)*x9326))+x9325)))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9328=cj6*cj6;
IkReal x9329=r21*r21;
IkReal x9330=(r21*sj6);
IkReal x9331=(cj6*r20);
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal((x9330+(((-1.0)*x9331)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign((x9329+((x9328*(r20*r20)))+(r22*r22)+(((-2.0)*x9330*x9331))+(((-1.0)*x9328*x9329)))),-1);
if(!x9333.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9332.value)+(((1.5707963267949)*(x9333.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9334=IKcos(j5);
IkReal x9335=IKsin(j5);
IkReal x9336=((1.0)*cj6);
IkReal x9337=(sj6*x9334);
IkReal x9338=(sj6*x9335);
IkReal x9339=((1.0)*x9334);
evalcond[0]=((((-1.0)*r20*x9334*x9336))+((r22*x9335))+((r21*x9337)));
evalcond[1]=((((-1.0)*r00*x9334*x9336))+((r01*x9337))+((r02*x9335)));
evalcond[2]=((((-1.0)*r12*x9339))+((r11*x9338))+(((-1.0)*r10*x9335*x9336)));
evalcond[3]=((((-1.0)*r02*x9339))+(((-1.0)*r00*x9335*x9336))+((r01*x9338)));
evalcond[4]=((-1.0)+((r11*x9337))+((r12*x9335))+(((-1.0)*r10*x9334*x9336)));
evalcond[5]=((-1.0)+(((-1.0)*r22*x9339))+(((-1.0)*r20*x9335*x9336))+((r21*x9338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9340=((1.0)*cj6);
CheckValue<IkReal> x9341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x9340)))),-1);
if(!x9341.valid){
continue;
}
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x9340)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9341.value)))+(x9342.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9343=IKcos(j5);
IkReal x9344=IKsin(j5);
IkReal x9345=((1.0)*cj6);
IkReal x9346=(sj6*x9343);
IkReal x9347=(sj6*x9344);
IkReal x9348=((1.0)*x9343);
evalcond[0]=((((-1.0)*r20*x9343*x9345))+((r21*x9346))+((r22*x9344)));
evalcond[1]=(((r01*x9346))+(((-1.0)*r00*x9343*x9345))+((r02*x9344)));
evalcond[2]=(((r11*x9347))+(((-1.0)*r10*x9344*x9345))+(((-1.0)*r12*x9348)));
evalcond[3]=((((-1.0)*r02*x9348))+((r01*x9347))+(((-1.0)*r00*x9344*x9345)));
evalcond[4]=((-1.0)+((r12*x9344))+((r11*x9346))+(((-1.0)*r10*x9343*x9345)));
evalcond[5]=((-1.0)+(((-1.0)*r22*x9348))+(((-1.0)*r20*x9344*x9345))+((r21*x9347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9349=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x9349.valid){
continue;
}
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9349.value)))+(x9350.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9351=IKcos(j5);
IkReal x9352=IKsin(j5);
IkReal x9353=((1.0)*cj6);
IkReal x9354=(sj6*x9351);
IkReal x9355=(sj6*x9352);
IkReal x9356=((1.0)*x9351);
evalcond[0]=((((-1.0)*r20*x9351*x9353))+((r21*x9354))+((r22*x9352)));
evalcond[1]=(((r01*x9354))+((r02*x9352))+(((-1.0)*r00*x9351*x9353)));
evalcond[2]=(((r11*x9355))+(((-1.0)*r12*x9356))+(((-1.0)*r10*x9352*x9353)));
evalcond[3]=((((-1.0)*r02*x9356))+((r01*x9355))+(((-1.0)*r00*x9352*x9353)));
evalcond[4]=((-1.0)+((r11*x9354))+(((-1.0)*r10*x9351*x9353))+((r12*x9352)));
evalcond[5]=((-1.0)+(((-1.0)*r20*x9352*x9353))+(((-1.0)*r22*x9356))+((r21*x9355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9357=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x9357;
j5eval[1]=IKsign(x9357);
j5eval[2]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9358=((1.0)*cj6);
IkReal x9359=((((-1.0)*r00*sj6))+(((-1.0)*r01*x9358)));
j5eval[0]=x9359;
j5eval[1]=IKsign(x9359);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x9358)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9360=r21*r21;
IkReal x9361=cj6*cj6;
IkReal x9362=(r21*sj6);
IkReal x9363=(cj6*r20);
IkReal x9364=((((-1.0)*x9360))+(((-1.0)*(r22*r22)))+((x9360*x9361))+(((2.0)*x9362*x9363))+(((-1.0)*x9361*(r20*r20))));
j5eval[0]=x9364;
j5eval[1]=IKsign(x9364);
j5eval[2]=((IKabs(r22))+(IKabs((x9362+(((-1.0)*x9363))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9365=r21*r21;
IkReal x9366=cj6*cj6;
IkReal x9367=(r21*sj6);
IkReal x9368=(cj6*r20);
CheckValue<IkReal> x9369=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9366*(r20*r20)))+(((-1.0)*x9365))+(((-1.0)*(r22*r22)))+((x9365*x9366))+(((2.0)*x9367*x9368)))),-1);
if(!x9369.valid){
continue;
}
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal((x9367+(((-1.0)*x9368)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9369.value)))+(x9370.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9371=IKcos(j5);
IkReal x9372=IKsin(j5);
IkReal x9373=((1.0)*cj6);
IkReal x9374=(sj6*x9371);
IkReal x9375=(sj6*x9372);
IkReal x9376=((1.0)*x9371);
evalcond[0]=(((r21*x9374))+((r22*x9372))+(((-1.0)*r20*x9371*x9373)));
evalcond[1]=(((r02*x9372))+(((-1.0)*r00*x9371*x9373))+((r01*x9374)));
evalcond[2]=(((r11*x9375))+(((-1.0)*r10*x9372*x9373))+(((-1.0)*r12*x9376)));
evalcond[3]=((((-1.0)*r00*x9372*x9373))+(((-1.0)*r02*x9376))+((r01*x9375)));
evalcond[4]=((-1.0)+((r11*x9374))+((r12*x9372))+(((-1.0)*r10*x9371*x9373)));
evalcond[5]=((1.0)+(((-1.0)*r20*x9372*x9373))+((r21*x9375))+(((-1.0)*r22*x9376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9377=((1.0)*cj6);
CheckValue<IkReal> x9378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x9377)))),-1);
if(!x9378.valid){
continue;
}
CheckValue<IkReal> x9379 = IKatan2WithCheck(IkReal((((r21*sj6))+(((-1.0)*r20*x9377)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9379.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9378.value)))+(x9379.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9380=IKcos(j5);
IkReal x9381=IKsin(j5);
IkReal x9382=((1.0)*cj6);
IkReal x9383=(sj6*x9380);
IkReal x9384=(sj6*x9381);
IkReal x9385=((1.0)*x9380);
evalcond[0]=(((r21*x9383))+(((-1.0)*r20*x9380*x9382))+((r22*x9381)));
evalcond[1]=(((r02*x9381))+(((-1.0)*r00*x9380*x9382))+((r01*x9383)));
evalcond[2]=(((r11*x9384))+(((-1.0)*r10*x9381*x9382))+(((-1.0)*r12*x9385)));
evalcond[3]=((((-1.0)*r00*x9381*x9382))+(((-1.0)*r02*x9385))+((r01*x9384)));
evalcond[4]=((-1.0)+((r11*x9383))+((r12*x9381))+(((-1.0)*r10*x9380*x9382)));
evalcond[5]=((1.0)+((r21*x9384))+(((-1.0)*r20*x9381*x9382))+(((-1.0)*r22*x9385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9386=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x9386.valid){
continue;
}
CheckValue<IkReal> x9387 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9387.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9386.value)))+(x9387.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9388=IKcos(j5);
IkReal x9389=IKsin(j5);
IkReal x9390=((1.0)*cj6);
IkReal x9391=(sj6*x9388);
IkReal x9392=(sj6*x9389);
IkReal x9393=((1.0)*x9388);
evalcond[0]=(((r22*x9389))+((r21*x9391))+(((-1.0)*r20*x9388*x9390)));
evalcond[1]=(((r01*x9391))+((r02*x9389))+(((-1.0)*r00*x9388*x9390)));
evalcond[2]=((((-1.0)*r10*x9389*x9390))+(((-1.0)*r12*x9393))+((r11*x9392)));
evalcond[3]=(((r01*x9392))+(((-1.0)*r00*x9389*x9390))+(((-1.0)*r02*x9393)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x9388*x9390))+((r11*x9391))+((r12*x9389)));
evalcond[5]=((1.0)+(((-1.0)*r22*x9393))+(((-1.0)*r20*x9389*x9390))+((r21*x9392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x9394=((-1.0)*pz);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9394);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9394);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=r22;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x9395=((-1.0)*pz);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x9395);
rxp1_0=(pz*r11);
rxp1_1=(r01*x9395);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9396=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9396.valid){
continue;
}
cj5array[0]=x9396.value;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9397=IKsin(j5);
IkReal x9398=IKcos(j5);
IkReal x9399=(r01*sj6);
IkReal x9400=((1.0)*cj6);
evalcond[0]=(r22*x9397);
evalcond[1]=((((-1.0)*sj3))+(((-1.0)*r22*x9398)));
evalcond[2]=(((r11*sj6*x9397))+(((-1.0)*r10*x9397*x9400)));
evalcond[3]=((((-1.0)*r00*x9397*x9400))+((x9397*x9399)));
evalcond[4]=(((x9398*x9399))+(((-1.0)*r00*x9398*x9400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x9401=IKPowWithIntegerCheck(r22,-1);
if(!x9401.valid){
continue;
}
cj5array[0]=((-1.0)*sj3*(x9401.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x9402=IKsin(j5);
IkReal x9403=IKcos(j5);
IkReal x9404=((1.0)*cj6);
IkReal x9405=(sj6*x9403);
IkReal x9406=(sj6*x9402);
evalcond[0]=(r22*x9402);
evalcond[1]=(((r11*x9406))+(((-1.0)*r10*x9402*x9404)));
evalcond[2]=(((r01*x9406))+(((-1.0)*r00*x9402*x9404)));
evalcond[3]=(((r01*x9405))+(((-1.0)*r00*x9403*x9404)));
evalcond[4]=((-1.0)+((r11*x9405))+(((-1.0)*r10*x9403*x9404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9407=cj6*cj6;
IkReal x9408=(cj6*r20);
IkReal x9409=(r01*r21);
IkReal x9410=(r21*sj6);
CheckValue<IkReal> x9411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((cj6*r00*x9410))+(((-1.0)*x9409))+(((-1.0)*r00*r20*x9407))+((x9407*x9409))+((r01*sj6*x9408)))),-1);
if(!x9411.valid){
continue;
}
CheckValue<IkReal> x9412 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x9408))+((cj3*x9410)))),IkReal(((-1.0)*cj3*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9412.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9411.value)))+(x9412.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9413=IKcos(j5);
IkReal x9414=IKsin(j5);
IkReal x9415=((1.0)*cj6);
IkReal x9416=(sj6*x9413);
IkReal x9417=(sj6*x9414);
IkReal x9418=((1.0)*x9413);
evalcond[0]=(((r21*x9416))+((r22*x9414))+(((-1.0)*r20*x9413*x9415)));
evalcond[1]=(((r02*x9414))+((r01*x9416))+(((-1.0)*r00*x9413*x9415)));
evalcond[2]=((((-1.0)*r12*x9418))+((r11*x9417))+(((-1.0)*r10*x9414*x9415)));
evalcond[3]=((-1.0)+((r12*x9414))+((r11*x9416))+(((-1.0)*r10*x9413*x9415)));
evalcond[4]=(cj3+(((-1.0)*r02*x9418))+((r01*x9417))+(((-1.0)*r00*x9414*x9415)));
evalcond[5]=(((r21*x9417))+(((-1.0)*sj3))+(((-1.0)*r22*x9418))+(((-1.0)*r20*x9414*x9415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9419=((1.0)*cj6);
CheckValue<IkReal> x9420 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9419))+((r21*sj6)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9420.valid){
continue;
}
CheckValue<IkReal> x9421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9419))+(((-1.0)*r00*sj6)))),-1);
if(!x9421.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9420.value)+(((1.5707963267949)*(x9421.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9422=IKcos(j5);
IkReal x9423=IKsin(j5);
IkReal x9424=((1.0)*cj6);
IkReal x9425=(sj6*x9422);
IkReal x9426=(sj6*x9423);
IkReal x9427=((1.0)*x9422);
evalcond[0]=((((-1.0)*r20*x9422*x9424))+((r21*x9425))+((r22*x9423)));
evalcond[1]=(((r01*x9425))+((r02*x9423))+(((-1.0)*r00*x9422*x9424)));
evalcond[2]=((((-1.0)*r12*x9427))+(((-1.0)*r10*x9423*x9424))+((r11*x9426)));
evalcond[3]=((-1.0)+((r12*x9423))+(((-1.0)*r10*x9422*x9424))+((r11*x9425)));
evalcond[4]=(((r01*x9426))+cj3+(((-1.0)*r02*x9427))+(((-1.0)*r00*x9423*x9424)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r20*x9423*x9424))+((r21*x9426))+(((-1.0)*r22*x9427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9428=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x9428.valid){
continue;
}
CheckValue<IkReal> x9429 = IKatan2WithCheck(IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9429.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9428.value)))+(x9429.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9430=IKcos(j5);
IkReal x9431=IKsin(j5);
IkReal x9432=((1.0)*cj6);
IkReal x9433=(sj6*x9430);
IkReal x9434=(sj6*x9431);
IkReal x9435=((1.0)*x9430);
evalcond[0]=(((r22*x9431))+(((-1.0)*r20*x9430*x9432))+((r21*x9433)));
evalcond[1]=((((-1.0)*r00*x9430*x9432))+((r02*x9431))+((r01*x9433)));
evalcond[2]=(((r11*x9434))+(((-1.0)*r10*x9431*x9432))+(((-1.0)*r12*x9435)));
evalcond[3]=((-1.0)+((r11*x9433))+(((-1.0)*r10*x9430*x9432))+((r12*x9431)));
evalcond[4]=(cj3+(((-1.0)*r02*x9435))+(((-1.0)*r00*x9431*x9432))+((r01*x9434)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r20*x9431*x9432))+((r21*x9434))+(((-1.0)*r22*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9436=cj6*cj6;
IkReal x9437=r21*r21;
IkReal x9438=(sj2*sj3);
IkReal x9439=(r21*sj6);
IkReal x9440=(cj6*r20);
CheckValue<IkReal> x9441=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x9439*x9440))+((x9436*(r20*r20)))+x9437+(((-1.0)*x9436*x9437)))),-1);
if(!x9441.valid){
continue;
}
CheckValue<IkReal> x9442 = IKatan2WithCheck(IkReal(((((-1.0)*x9438*x9439))+((cj2*r22))+((x9438*x9440)))),IkReal((((r22*x9438))+(((-1.0)*cj2*x9440))+((cj2*x9439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9442.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9441.value)))+(x9442.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9443=IKcos(j5);
IkReal x9444=IKsin(j5);
IkReal x9445=((1.0)*sj2);
IkReal x9446=(sj6*x9444);
IkReal x9447=((1.0)*cj2*sj3);
IkReal x9448=((1.0)*x9443);
IkReal x9449=(sj6*x9443);
IkReal x9450=((1.0)*cj6*x9444);
evalcond[0]=(((r22*x9444))+((r21*x9449))+(((-1.0)*cj6*r20*x9448))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x9446))+(((-1.0)*r22*x9448))+(((-1.0)*r20*x9450)));
evalcond[2]=(((r01*x9449))+(((-1.0)*cj6*r00*x9448))+((r02*x9444))+(((-1.0)*cj1*x9445)));
evalcond[3]=((((-1.0)*cj6*r10*x9448))+(((-1.0)*sj1*x9445))+((r12*x9444))+((r11*x9449)));
evalcond[4]=((((-1.0)*r10*x9450))+(((-1.0)*sj1*x9447))+((cj1*cj3))+((r11*x9446))+(((-1.0)*r12*x9448)));
evalcond[5]=(((r01*x9446))+(((-1.0)*r00*x9450))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9448))+(((-1.0)*cj1*x9447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9451=((1.0)*sj6);
IkReal x9452=((1.0)*sj1*sj2);
CheckValue<IkReal> x9453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9451))+(((-1.0)*cj6*r01)))),-1);
if(!x9453.valid){
continue;
}
CheckValue<IkReal> x9454 = IKatan2WithCheck(IkReal((((r21*sj1*sj2*sj6))+(((-1.0)*cj2*r11*x9451))+((cj2*cj6*r10))+(((-1.0)*cj6*r20*x9452)))),IkReal((((cj2*r12))+(((-1.0)*r22*x9452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9454.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9453.value)))+(x9454.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9455=IKcos(j5);
IkReal x9456=IKsin(j5);
IkReal x9457=((1.0)*sj2);
IkReal x9458=(sj6*x9456);
IkReal x9459=((1.0)*cj2*sj3);
IkReal x9460=((1.0)*x9455);
IkReal x9461=(sj6*x9455);
IkReal x9462=((1.0)*cj6*x9456);
evalcond[0]=(((r22*x9456))+((r21*x9461))+(((-1.0)*cj6*r20*x9460))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x9458))+(((-1.0)*r22*x9460))+(((-1.0)*r20*x9462)));
evalcond[2]=((((-1.0)*cj6*r00*x9460))+((r01*x9461))+((r02*x9456))+(((-1.0)*cj1*x9457)));
evalcond[3]=((((-1.0)*sj1*x9457))+((r12*x9456))+((r11*x9461))+(((-1.0)*cj6*r10*x9460)));
evalcond[4]=((((-1.0)*r10*x9462))+(((-1.0)*sj1*x9459))+(((-1.0)*r12*x9460))+((r11*x9458))+((cj1*cj3)));
evalcond[5]=(((r01*x9458))+(((-1.0)*r00*x9462))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9460))+(((-1.0)*cj1*x9459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9463=((1.0)*cj1*sj2);
CheckValue<IkReal> x9464 = IKatan2WithCheck(IkReal((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*sj6))+(((-1.0)*cj6*r20*x9463)))),IkReal(((((-1.0)*r22*x9463))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9464.valid){
continue;
}
CheckValue<IkReal> x9465=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x9465.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9464.value)+(((1.5707963267949)*(x9465.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9466=IKcos(j5);
IkReal x9467=IKsin(j5);
IkReal x9468=((1.0)*sj2);
IkReal x9469=(sj6*x9467);
IkReal x9470=((1.0)*cj2*sj3);
IkReal x9471=((1.0)*x9466);
IkReal x9472=(sj6*x9466);
IkReal x9473=((1.0)*cj6*x9467);
evalcond[0]=(((r22*x9467))+((r21*x9472))+(((-1.0)*cj6*r20*x9471))+(((-1.0)*cj2)));
evalcond[1]=(((sj2*sj3))+((r21*x9469))+(((-1.0)*r22*x9471))+(((-1.0)*r20*x9473)));
evalcond[2]=((((-1.0)*cj1*x9468))+(((-1.0)*cj6*r00*x9471))+((r01*x9472))+((r02*x9467)));
evalcond[3]=((((-1.0)*cj6*r10*x9471))+(((-1.0)*sj1*x9468))+((r11*x9472))+((r12*x9467)));
evalcond[4]=((((-1.0)*r10*x9473))+(((-1.0)*sj1*x9470))+(((-1.0)*r12*x9471))+((r11*x9469))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r02*x9471))+(((-1.0)*cj1*x9470))+((r01*x9469))+(((-1.0)*r00*x9473))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x9474=((1.0)*sj6);
IkReal x9475=((1.0)*cj1*sj2);
IkReal x9476=((((-1.0)*r10*x9474))+(((-1.0)*cj6*r11)));
j5eval[0]=x9476;
j5eval[1]=IKsign(x9476);
j5eval[2]=((IKabs(((((-1.0)*r22*x9475))+((cj2*r02)))))+(IKabs((((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj2*r01*x9474))+(((-1.0)*cj6*r20*x9475))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x9477=cj6*cj6;
IkReal x9478=r21*r21;
IkReal x9479=(sj2*sj3);
IkReal x9480=(cj6*r20);
IkReal x9481=((1.0)*cj2);
IkReal x9482=(r21*sj6);
IkReal x9483=((r22*r22)+(((-2.0)*x9480*x9482))+x9478+((x9477*(r20*r20)))+(((-1.0)*x9477*x9478)));
j5eval[0]=x9483;
j5eval[1]=((IKabs((((r22*x9479))+((cj2*x9480))+(((-1.0)*x9481*x9482)))))+(IKabs(((((-1.0)*x9479*x9482))+((x9479*x9480))+(((-1.0)*r22*x9481))))));
j5eval[2]=IKsign(x9483);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x9484=cj6*cj6;
IkReal x9485=((1.0)*sj2);
IkReal x9486=(r01*sj6);
IkReal x9487=(cj6*r00);
IkReal x9488=(sj2*sj3);
IkReal x9489=(r21*sj6);
IkReal x9490=(cj6*r20);
IkReal x9491=(r01*r21);
IkReal x9492=(((r00*r20*x9484))+x9491+(((-1.0)*x9486*x9490))+((r02*r22))+(((-1.0)*x9487*x9489))+(((-1.0)*x9484*x9491)));
j5eval[0]=x9492;
j5eval[1]=IKsign(x9492);
j5eval[2]=((IKabs(((((-1.0)*sj3*x9485*x9486))+((x9487*x9488))+(((-1.0)*cj1*r22*x9485)))))+(IKabs(((((-1.0)*cj1*x9485*x9489))+((r02*x9488))+((cj1*sj2*x9490))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x9493=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x9493;
j5eval[1]=IKsign(x9493);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x9494=((1.0)*sj6);
IkReal x9495=((((-1.0)*cj6*r11))+(((-1.0)*r10*x9494)));
j5eval[0]=x9495;
j5eval[1]=((IKabs(r02))+(IKabs((((cj6*r00))+(((-1.0)*r01*x9494))))));
j5eval[2]=IKsign(x9495);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x9496=r21*r21;
IkReal x9497=cj6*cj6;
IkReal x9498=(r21*sj6);
IkReal x9499=(cj6*r20);
IkReal x9500=((((2.0)*x9498*x9499))+(((-1.0)*x9497*(r20*r20)))+(((-1.0)*(r22*r22)))+((x9496*x9497))+(((-1.0)*x9496)));
j5eval[0]=x9500;
j5eval[1]=IKsign(x9500);
j5eval[2]=((IKabs((x9498+(((-1.0)*x9499)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x9501=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9501);
rxp0_2=(py*r00);
rxp1_0=(r21*x9501);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9502=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9502);
rxp0_2=(py*r00);
rxp1_0=(r21*x9502);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9503=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9503.valid){
continue;
}
CheckValue<IkReal> x9504=IKPowWithIntegerCheck(r12,-1);
if(!x9504.valid){
continue;
}
if( IKabs(((x9503.value)*((((cj1*sj3))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9504.value)*(((((-1.0)*sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9503.value)*((((cj1*sj3))+((cj3*sj1))))))+IKsqr(((x9504.value)*(((((-1.0)*sj1*sj3))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9503.value)*((((cj1*sj3))+((cj3*sj1))))), ((x9504.value)*(((((-1.0)*sj1*sj3))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9505=IKsin(j5);
IkReal x9506=IKcos(j5);
IkReal x9507=((1.0)*sj1);
IkReal x9508=(cj6*x9506);
IkReal x9509=(sj6*x9505);
IkReal x9510=((1.0)*sj6*x9506);
IkReal x9511=((1.0)*cj6*x9505);
evalcond[0]=((-1.0)*r12*x9505);
evalcond[1]=((((-1.0)*r20*x9511))+((r21*x9509)));
evalcond[2]=((((-1.0)*r12*x9506))+((cj1*cj3))+(((-1.0)*sj3*x9507)));
evalcond[3]=((((-1.0)*r01*x9510))+((r00*x9508)));
evalcond[4]=((-1.0)+(((-1.0)*r21*x9510))+((r20*x9508)));
evalcond[5]=((((-1.0)*cj3*x9507))+(((-1.0)*r00*x9511))+(((-1.0)*cj1*sj3))+((r01*x9509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9512=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9512.valid){
continue;
}
CheckValue<IkReal> x9513=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9513.valid){
continue;
}
if( IKabs(((x9512.value)*((((cj1*sj3))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9513.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9512.value)*((((cj1*sj3))+((cj3*sj1))))))+IKsqr(x9513.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9512.value)*((((cj1*sj3))+((cj3*sj1))))), x9513.value);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9514=IKsin(j5);
IkReal x9515=IKcos(j5);
IkReal x9516=((1.0)*sj1);
IkReal x9517=(cj6*x9515);
IkReal x9518=(sj6*x9514);
IkReal x9519=((1.0)*sj6*x9515);
IkReal x9520=((1.0)*cj6*x9514);
evalcond[0]=((-1.0)*r12*x9514);
evalcond[1]=(((r21*x9518))+(((-1.0)*r20*x9520)));
evalcond[2]=((((-1.0)*r12*x9515))+(((-1.0)*sj3*x9516))+((cj1*cj3)));
evalcond[3]=(((r00*x9517))+(((-1.0)*r01*x9519)));
evalcond[4]=((-1.0)+(((-1.0)*r21*x9519))+((r20*x9517)));
evalcond[5]=((((-1.0)*r00*x9520))+(((-1.0)*cj3*x9516))+((r01*x9518))+(((-1.0)*cj1*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x9521=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9521);
rxp1_1=(px*r21);
rxp1_2=(r11*x9521);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9522=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9522);
rxp1_1=(px*r21);
rxp1_2=(r11*x9522);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[1]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9523=((1.0)*cj1);
CheckValue<IkReal> x9524=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9524.valid){
continue;
}
CheckValue<IkReal> x9525=IKPowWithIntegerCheck(r02,-1);
if(!x9525.valid){
continue;
}
if( IKabs(((x9524.value)*((((sj1*sj3))+(((-1.0)*cj3*x9523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9525.value)*(((((-1.0)*sj3*x9523))+(((-1.0)*cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9524.value)*((((sj1*sj3))+(((-1.0)*cj3*x9523))))))+IKsqr(((x9525.value)*(((((-1.0)*sj3*x9523))+(((-1.0)*cj3*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9524.value)*((((sj1*sj3))+(((-1.0)*cj3*x9523))))), ((x9525.value)*(((((-1.0)*sj3*x9523))+(((-1.0)*cj3*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9526=IKsin(j5);
IkReal x9527=IKcos(j5);
IkReal x9528=((1.0)*sj3);
IkReal x9529=(sj6*x9526);
IkReal x9530=(cj6*x9527);
IkReal x9531=((1.0)*x9527);
IkReal x9532=((1.0)*cj6*x9526);
evalcond[0]=((-1.0)*r02*x9526);
evalcond[1]=((((-1.0)*r20*x9532))+((r21*x9529)));
evalcond[2]=(((r10*x9530))+(((-1.0)*r11*sj6*x9531)));
evalcond[3]=((((-1.0)*r02*x9531))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x9528)));
evalcond[4]=((-1.0)+((r20*x9530))+(((-1.0)*r21*sj6*x9531)));
evalcond[5]=((((-1.0)*r10*x9532))+((r11*x9529))+((cj1*cj3))+(((-1.0)*sj1*x9528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9533=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9533.valid){
continue;
}
CheckValue<IkReal> x9534=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9534.valid){
continue;
}
if( IKabs(((x9533.value)*(((((-1.0)*cj1*cj3))+((sj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9534.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9533.value)*(((((-1.0)*cj1*cj3))+((sj1*sj3))))))+IKsqr(x9534.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9533.value)*(((((-1.0)*cj1*cj3))+((sj1*sj3))))), x9534.value);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9535=IKsin(j5);
IkReal x9536=IKcos(j5);
IkReal x9537=((1.0)*sj3);
IkReal x9538=(sj6*x9535);
IkReal x9539=(cj6*x9536);
IkReal x9540=((1.0)*x9536);
IkReal x9541=((1.0)*cj6*x9535);
evalcond[0]=((-1.0)*r02*x9535);
evalcond[1]=(((r21*x9538))+(((-1.0)*r20*x9541)));
evalcond[2]=(((r10*x9539))+(((-1.0)*r11*sj6*x9540)));
evalcond[3]=((((-1.0)*r02*x9540))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x9537)));
evalcond[4]=((-1.0)+((r20*x9539))+(((-1.0)*r21*sj6*x9540)));
evalcond[5]=(((r11*x9538))+(((-1.0)*r10*x9541))+((cj1*cj3))+(((-1.0)*sj1*x9537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9542=r21*r21;
IkReal x9543=cj6*cj6;
IkReal x9544=(r21*sj6);
IkReal x9545=(cj6*r20);
CheckValue<IkReal> x9546 = IKatan2WithCheck(IkReal(r22),IkReal((x9544+(((-1.0)*x9545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9546.valid){
continue;
}
CheckValue<IkReal> x9547=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9543*(r20*r20)))+(((2.0)*x9544*x9545))+(((-1.0)*(r22*r22)))+((x9542*x9543))+(((-1.0)*x9542)))),-1);
if(!x9547.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9546.value)+(((1.5707963267949)*(x9547.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9548=IKsin(j5);
IkReal x9549=IKcos(j5);
IkReal x9550=((1.0)*sj3);
IkReal x9551=(sj6*x9548);
IkReal x9552=((1.0)*x9548);
IkReal x9553=((1.0)*x9549);
IkReal x9554=(cj6*x9549);
IkReal x9555=(sj6*x9553);
IkReal x9556=(cj6*x9552);
evalcond[0]=((((-1.0)*r20*x9556))+(((-1.0)*r22*x9553))+((r21*x9551)));
evalcond[1]=((((-1.0)*r01*x9555))+(((-1.0)*r02*x9552))+((r00*x9554)));
evalcond[2]=(((r10*x9554))+(((-1.0)*r12*x9552))+(((-1.0)*r11*x9555)));
evalcond[3]=((-1.0)+(((-1.0)*r21*x9555))+(((-1.0)*r22*x9552))+((r20*x9554)));
evalcond[4]=(((r11*x9551))+((cj1*cj3))+(((-1.0)*sj1*x9550))+(((-1.0)*r12*x9553))+(((-1.0)*r10*x9556)));
evalcond[5]=((((-1.0)*r00*x9556))+(((-1.0)*r02*x9553))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x9550))+((r01*x9551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9557=((1.0)*sj6);
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x9557))+((cj6*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
CheckValue<IkReal> x9559=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x9557)))),-1);
if(!x9559.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9558.value)+(((1.5707963267949)*(x9559.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9560=IKsin(j5);
IkReal x9561=IKcos(j5);
IkReal x9562=((1.0)*sj3);
IkReal x9563=(sj6*x9560);
IkReal x9564=((1.0)*x9560);
IkReal x9565=((1.0)*x9561);
IkReal x9566=(cj6*x9561);
IkReal x9567=(sj6*x9565);
IkReal x9568=(cj6*x9564);
evalcond[0]=(((r21*x9563))+(((-1.0)*r20*x9568))+(((-1.0)*r22*x9565)));
evalcond[1]=(((r00*x9566))+(((-1.0)*r01*x9567))+(((-1.0)*r02*x9564)));
evalcond[2]=((((-1.0)*r11*x9567))+(((-1.0)*r12*x9564))+((r10*x9566)));
evalcond[3]=((-1.0)+(((-1.0)*r21*x9567))+(((-1.0)*r22*x9564))+((r20*x9566)));
evalcond[4]=((((-1.0)*r10*x9568))+(((-1.0)*sj1*x9562))+((r11*x9563))+((cj1*cj3))+(((-1.0)*r12*x9565)));
evalcond[5]=(((r01*x9563))+(((-1.0)*r00*x9568))+(((-1.0)*cj1*x9562))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9569=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x9569.valid){
continue;
}
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9569.value)))+(x9570.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9571=IKsin(j5);
IkReal x9572=IKcos(j5);
IkReal x9573=((1.0)*sj3);
IkReal x9574=(sj6*x9571);
IkReal x9575=((1.0)*x9571);
IkReal x9576=((1.0)*x9572);
IkReal x9577=(cj6*x9572);
IkReal x9578=(sj6*x9576);
IkReal x9579=(cj6*x9575);
evalcond[0]=(((r21*x9574))+(((-1.0)*r20*x9579))+(((-1.0)*r22*x9576)));
evalcond[1]=((((-1.0)*r02*x9575))+((r00*x9577))+(((-1.0)*r01*x9578)));
evalcond[2]=((((-1.0)*r12*x9575))+(((-1.0)*r11*x9578))+((r10*x9577)));
evalcond[3]=((-1.0)+(((-1.0)*r21*x9578))+(((-1.0)*r22*x9575))+((r20*x9577)));
evalcond[4]=(((r11*x9574))+(((-1.0)*r12*x9576))+(((-1.0)*sj1*x9573))+(((-1.0)*r10*x9579))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r02*x9576))+((r01*x9574))+(((-1.0)*r00*x9579))+(((-1.0)*cj1*x9573))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x9580=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x9580;
j5eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj6))+((cj6*r00))))));
j5eval[2]=IKsign(x9580);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x9581=((1.0)*sj6);
IkReal x9582=((((-1.0)*cj6*r01))+(((-1.0)*r00*x9581)));
j5eval[0]=x9582;
j5eval[1]=IKsign(x9582);
j5eval[2]=((IKabs(r12))+(IKabs((((cj6*r10))+(((-1.0)*r11*x9581))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x9583=cj6*cj6;
IkReal x9584=r21*r21;
IkReal x9585=(r21*sj6);
IkReal x9586=(cj6*r20);
IkReal x9587=((r22*r22)+(((-1.0)*x9583*x9584))+x9584+((x9583*(r20*r20)))+(((-2.0)*x9585*x9586)));
j5eval[0]=x9587;
j5eval[1]=IKsign(x9587);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x9586))+x9585))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x9588=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9588);
rxp1_1=(px*r21);
rxp1_2=(r11*x9588);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9589=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9589);
rxp1_1=(px*r21);
rxp1_2=(r11*x9589);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*cj6*r10))+((r11*sj6)));
j5eval[1]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9590=((1.0)*cj3);
CheckValue<IkReal> x9591=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9591.valid){
continue;
}
CheckValue<IkReal> x9592=IKPowWithIntegerCheck(r02,-1);
if(!x9592.valid){
continue;
}
if( IKabs(((x9591.value)*(((((-1.0)*sj1*sj3))+(((-1.0)*cj1*x9590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9592.value)*(((((-1.0)*sj1*x9590))+((cj1*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9591.value)*(((((-1.0)*sj1*sj3))+(((-1.0)*cj1*x9590))))))+IKsqr(((x9592.value)*(((((-1.0)*sj1*x9590))+((cj1*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9591.value)*(((((-1.0)*sj1*sj3))+(((-1.0)*cj1*x9590))))), ((x9592.value)*(((((-1.0)*sj1*x9590))+((cj1*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9593=IKsin(j5);
IkReal x9594=IKcos(j5);
IkReal x9595=(sj6*x9593);
IkReal x9596=(cj6*x9594);
IkReal x9597=((1.0)*x9594);
IkReal x9598=((1.0)*cj6*x9593);
evalcond[0]=((-1.0)*r02*x9593);
evalcond[1]=((((-1.0)*r20*x9598))+((r21*x9595)));
evalcond[2]=(((cj1*sj3))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9597)));
evalcond[3]=((((-1.0)*r11*sj6*x9597))+((r10*x9596)));
evalcond[4]=((1.0)+((r20*x9596))+(((-1.0)*r21*sj6*x9597)));
evalcond[5]=(((r11*x9595))+((sj1*sj3))+(((-1.0)*r10*x9598))+((cj1*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9599=IKPowWithIntegerCheck(((((-1.0)*cj6*r10))+((r11*sj6))),-1);
if(!x9599.valid){
continue;
}
CheckValue<IkReal> x9600=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9600.valid){
continue;
}
if( IKabs(((x9599.value)*(((((-1.0)*sj1*sj3))+(((-1.0)*cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9600.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9599.value)*(((((-1.0)*sj1*sj3))+(((-1.0)*cj1*cj3))))))+IKsqr(((-1.0)*(x9600.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9599.value)*(((((-1.0)*sj1*sj3))+(((-1.0)*cj1*cj3))))), ((-1.0)*(x9600.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9601=IKsin(j5);
IkReal x9602=IKcos(j5);
IkReal x9603=(sj6*x9601);
IkReal x9604=(cj6*x9602);
IkReal x9605=((1.0)*x9602);
IkReal x9606=((1.0)*cj6*x9601);
evalcond[0]=((-1.0)*r02*x9601);
evalcond[1]=(((r21*x9603))+(((-1.0)*r20*x9606)));
evalcond[2]=(((cj1*sj3))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9605)));
evalcond[3]=((((-1.0)*r11*sj6*x9605))+((r10*x9604)));
evalcond[4]=((1.0)+((r20*x9604))+(((-1.0)*r21*sj6*x9605)));
evalcond[5]=(((sj1*sj3))+((r11*x9603))+((cj1*cj3))+(((-1.0)*r10*x9606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x9607=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9607);
rxp0_2=(py*r00);
rxp1_0=(r21*x9607);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9608=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9608);
rxp0_2=(py*r00);
rxp1_0=(r21*x9608);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9609=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9609.valid){
continue;
}
CheckValue<IkReal> x9610=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9610.valid){
continue;
}
if( IKabs(((x9609.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9610.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9609.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))))+IKsqr(((-1.0)*(x9610.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9609.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))), ((-1.0)*(x9610.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9611=IKsin(j5);
IkReal x9612=IKcos(j5);
IkReal x9613=(cj6*x9612);
IkReal x9614=(sj6*x9611);
IkReal x9615=((1.0)*sj6*x9612);
IkReal x9616=((1.0)*cj6*x9611);
evalcond[0]=((-1.0)*r12*x9611);
evalcond[1]=((((-1.0)*r12*x9612))+((sj1*sj3))+((cj1*cj3)));
evalcond[2]=(((r21*x9614))+(((-1.0)*r20*x9616)));
evalcond[3]=(((r00*x9613))+(((-1.0)*r01*x9615)));
evalcond[4]=((1.0)+(((-1.0)*r21*x9615))+((r20*x9613)));
evalcond[5]=(((r01*x9614))+((cj1*sj3))+(((-1.0)*r00*x9616))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9617=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9617.valid){
continue;
}
CheckValue<IkReal> x9618=IKPowWithIntegerCheck(r12,-1);
if(!x9618.valid){
continue;
}
if( IKabs(((x9617.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9618.value)*((((sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9617.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))))+IKsqr(((x9618.value)*((((sj1*sj3))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x9617.value)*(((((-1.0)*cj1*sj3))+((cj3*sj1))))), ((x9618.value)*((((sj1*sj3))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9619=IKsin(j5);
IkReal x9620=IKcos(j5);
IkReal x9621=(cj6*x9620);
IkReal x9622=(sj6*x9619);
IkReal x9623=((1.0)*sj6*x9620);
IkReal x9624=((1.0)*cj6*x9619);
evalcond[0]=((-1.0)*r12*x9619);
evalcond[1]=(((sj1*sj3))+((cj1*cj3))+(((-1.0)*r12*x9620)));
evalcond[2]=(((r21*x9622))+(((-1.0)*r20*x9624)));
evalcond[3]=(((r00*x9621))+(((-1.0)*r01*x9623)));
evalcond[4]=((1.0)+((r20*x9621))+(((-1.0)*r21*x9623)));
evalcond[5]=(((r01*x9622))+((cj1*sj3))+(((-1.0)*r00*x9624))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9625=cj6*cj6;
IkReal x9626=r21*r21;
IkReal x9627=(r21*sj6);
IkReal x9628=(cj6*r20);
CheckValue<IkReal> x9629=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9625*x9626))+(r22*r22)+((x9625*(r20*r20)))+x9626+(((-2.0)*x9627*x9628)))),-1);
if(!x9629.valid){
continue;
}
CheckValue<IkReal> x9630 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x9628))+x9627)),IKFAST_ATAN2_MAGTHRESH);
if(!x9630.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9629.value)))+(x9630.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9631=IKsin(j5);
IkReal x9632=IKcos(j5);
IkReal x9633=(sj6*x9631);
IkReal x9634=((1.0)*x9631);
IkReal x9635=((1.0)*x9632);
IkReal x9636=(cj6*x9632);
IkReal x9637=(sj6*x9635);
IkReal x9638=(cj6*x9634);
evalcond[0]=((((-1.0)*r22*x9635))+((r21*x9633))+(((-1.0)*r20*x9638)));
evalcond[1]=(((r00*x9636))+(((-1.0)*r01*x9637))+(((-1.0)*r02*x9634)));
evalcond[2]=(((r10*x9636))+(((-1.0)*r12*x9634))+(((-1.0)*r11*x9637)));
evalcond[3]=((1.0)+((r20*x9636))+(((-1.0)*r22*x9634))+(((-1.0)*r21*x9637)));
evalcond[4]=((((-1.0)*r10*x9638))+((sj1*sj3))+(((-1.0)*r12*x9635))+((r11*x9633))+((cj1*cj3)));
evalcond[5]=(((r01*x9633))+(((-1.0)*r00*x9638))+((cj1*sj3))+(((-1.0)*r02*x9635))+(((-1.0)*cj3*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9639=((1.0)*sj6);
CheckValue<IkReal> x9640 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9639))+((cj6*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9640.valid){
continue;
}
CheckValue<IkReal> x9641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9639))+(((-1.0)*cj6*r01)))),-1);
if(!x9641.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9640.value)+(((1.5707963267949)*(x9641.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9642=IKsin(j5);
IkReal x9643=IKcos(j5);
IkReal x9644=(sj6*x9642);
IkReal x9645=((1.0)*x9642);
IkReal x9646=((1.0)*x9643);
IkReal x9647=(cj6*x9643);
IkReal x9648=(sj6*x9646);
IkReal x9649=(cj6*x9645);
evalcond[0]=((((-1.0)*r20*x9649))+((r21*x9644))+(((-1.0)*r22*x9646)));
evalcond[1]=(((r00*x9647))+(((-1.0)*r01*x9648))+(((-1.0)*r02*x9645)));
evalcond[2]=((((-1.0)*r12*x9645))+(((-1.0)*r11*x9648))+((r10*x9647)));
evalcond[3]=((1.0)+(((-1.0)*r21*x9648))+((r20*x9647))+(((-1.0)*r22*x9645)));
evalcond[4]=((((-1.0)*r12*x9646))+((r11*x9644))+((sj1*sj3))+(((-1.0)*r10*x9649))+((cj1*cj3)));
evalcond[5]=(((cj1*sj3))+((r01*x9644))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x9649))+(((-1.0)*r02*x9646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9650 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9650.valid){
continue;
}
CheckValue<IkReal> x9651=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x9651.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9650.value)+(((1.5707963267949)*(x9651.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9652=IKsin(j5);
IkReal x9653=IKcos(j5);
IkReal x9654=(sj6*x9652);
IkReal x9655=((1.0)*x9652);
IkReal x9656=((1.0)*x9653);
IkReal x9657=(cj6*x9653);
IkReal x9658=(sj6*x9656);
IkReal x9659=(cj6*x9655);
evalcond[0]=(((r21*x9654))+(((-1.0)*r20*x9659))+(((-1.0)*r22*x9656)));
evalcond[1]=((((-1.0)*r01*x9658))+((r00*x9657))+(((-1.0)*r02*x9655)));
evalcond[2]=(((r10*x9657))+(((-1.0)*r11*x9658))+(((-1.0)*r12*x9655)));
evalcond[3]=((1.0)+(((-1.0)*r21*x9658))+((r20*x9657))+(((-1.0)*r22*x9655)));
evalcond[4]=((((-1.0)*r10*x9659))+((r11*x9654))+((sj1*sj3))+(((-1.0)*r12*x9656))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r00*x9659))+((cj1*sj3))+((r01*x9654))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9660=((-1.0)*r10);
IkReal x9662 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9662)==0){
continue;
}
IkReal x9661=pow(x9662,-0.5);
CheckValue<IkReal> x9663 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x9660),IKFAST_ATAN2_MAGTHRESH);
if(!x9663.valid){
continue;
}
IkReal gconst24=((-1.0)*(x9663.value));
IkReal gconst25=(r11*x9661);
IkReal gconst26=(x9660*x9661);
CheckValue<IkReal> x9664 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9664.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9664.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9665=((1.0)*sj1*sj2);
CheckValue<IkReal> x9666=IKPowWithIntegerCheck(IKsign((((gconst26*r01))+((gconst25*r00)))),-1);
if(!x9666.valid){
continue;
}
CheckValue<IkReal> x9667 = IKatan2WithCheck(IkReal((((gconst25*r21*sj1*sj2))+(((-1.0)*cj2*gconst25*r11))+((cj2*gconst26*r10))+(((-1.0)*gconst26*r20*x9665)))),IkReal((((cj2*r12))+(((-1.0)*r22*x9665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9667.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9666.value)))+(x9667.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9668=IKsin(j5);
IkReal x9669=IKcos(j5);
IkReal x9670=((1.0)*sj2);
IkReal x9671=(gconst26*x9669);
IkReal x9672=((1.0)*cj2*sj3);
IkReal x9673=(gconst25*x9668);
IkReal x9674=((1.0)*x9668);
IkReal x9675=((1.0)*x9669);
IkReal x9676=(gconst26*x9674);
IkReal x9677=(gconst25*x9675);
evalcond[0]=(((r21*x9673))+((sj2*sj3))+(((-1.0)*r20*x9676))+(((-1.0)*r22*x9675)));
evalcond[1]=((((-1.0)*r21*x9677))+((r20*x9671))+(((-1.0)*cj2))+(((-1.0)*r22*x9674)));
evalcond[2]=((((-1.0)*cj1*x9670))+((r00*x9671))+(((-1.0)*r02*x9674))+(((-1.0)*r01*x9677)));
evalcond[3]=((((-1.0)*sj1*x9670))+((r10*x9671))+(((-1.0)*r11*x9677))+(((-1.0)*r12*x9674)));
evalcond[4]=((((-1.0)*sj1*x9672))+((r11*x9673))+((cj1*cj3))+(((-1.0)*r12*x9675))+(((-1.0)*r10*x9676)));
evalcond[5]=((((-1.0)*r00*x9676))+(((-1.0)*cj1*x9672))+((r01*x9673))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x9675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9678=((-1.0)*r11);
IkReal x9680 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9680)==0){
continue;
}
IkReal x9679=pow(x9680,-0.5);
CheckValue<IkReal> x9681 = IKatan2WithCheck(IkReal(x9678),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9681.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x9681.value))));
IkReal gconst28=(x9678*x9679);
IkReal gconst29=((1.0)*r10*x9679);
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9682.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x9683=((-1.0)*r11);
CheckValue<IkReal> x9686 = IKatan2WithCheck(IkReal(x9683),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9686.valid){
continue;
}
IkReal x9684=((1.0)*(x9686.value));
IkReal x9685=x9679;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj6=gconst28;
cj6=gconst29;
j6=((3.14159265)+(((-1.0)*x9684)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x9684)));
IkReal gconst28=(x9683*x9685);
IkReal gconst29=((1.0)*r10*x9685);
IkReal x9687=r12*r12;
IkReal x9688=(cj2*r02);
CheckValue<IkReal> x9693=IKPowWithIntegerCheck(((-1.0)+x9687),-1);
if(!x9693.valid){
continue;
}
IkReal x9689=x9693.value;
IkReal x9690=((1.0)*cj1*r22*sj2);
if((((1.0)+(((-1.0)*x9687)))) < -0.00001)
continue;
IkReal x9691=IKsqrt(((1.0)+(((-1.0)*x9687))));
IkReal x9692=(r12*x9689*x9691);
j5eval[0]=0;
j5eval[1]=0;
j5eval[2]=((IKabs((x9688+(((-1.0)*x9690)))))+(IKabs(((((-1.0)*x9690*x9692))+((x9688*x9692))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9694=(sj2*sj3);
IkReal x9695=(gconst29*r20);
IkReal x9696=(gconst28*r21);
IkReal x9697=((1.0)*cj2);
CheckValue<IkReal> x9698=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9695*x9696))+(r22*r22)+(x9695*x9695)+(x9696*x9696))),-1);
if(!x9698.valid){
continue;
}
CheckValue<IkReal> x9699 = IKatan2WithCheck(IkReal(((((-1.0)*x9694*x9696))+((x9694*x9695))+(((-1.0)*r22*x9697)))),IkReal((((r22*x9694))+((cj2*x9695))+(((-1.0)*x9696*x9697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9699.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9698.value)))+(x9699.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9700=IKsin(j5);
IkReal x9701=IKcos(j5);
IkReal x9702=(gconst29*r10);
IkReal x9703=((1.0)*sj2);
IkReal x9704=(gconst29*r00);
IkReal x9705=(gconst29*r20);
IkReal x9706=((1.0)*x9700);
IkReal x9707=((1.0)*cj2*sj3);
IkReal x9708=(gconst28*x9700);
IkReal x9709=((1.0)*x9701);
IkReal x9710=(gconst28*x9709);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x9709))+((r21*x9708))+(((-1.0)*x9705*x9706)));
evalcond[1]=((((-1.0)*r22*x9706))+(((-1.0)*r21*x9710))+((x9701*x9705))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r01*x9710))+(((-1.0)*r02*x9706))+(((-1.0)*cj1*x9703))+((x9701*x9704)));
evalcond[3]=((((-1.0)*sj1*x9703))+((x9701*x9702))+(((-1.0)*r11*x9710))+(((-1.0)*r12*x9706)));
evalcond[4]=((((-1.0)*sj1*x9707))+((r11*x9708))+(((-1.0)*x9702*x9706))+(((-1.0)*r12*x9709))+((cj1*cj3)));
evalcond[5]=((((-1.0)*r02*x9709))+(((-1.0)*cj1*x9707))+((r01*x9708))+(((-1.0)*cj3*sj1))+(((-1.0)*x9704*x9706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9711=((1.0)*gconst28);
IkReal x9712=((1.0)*cj1*sj2);
CheckValue<IkReal> x9713 = IKatan2WithCheck(IkReal(((((-1.0)*gconst29*r20*x9712))+((cj1*gconst28*r21*sj2))+((cj2*gconst29*r00))+(((-1.0)*cj2*r01*x9711)))),IkReal((((cj2*r02))+(((-1.0)*r22*x9712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9713.valid){
continue;
}
CheckValue<IkReal> x9714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9711))+(((-1.0)*gconst29*r11)))),-1);
if(!x9714.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9713.value)+(((1.5707963267949)*(x9714.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9715=IKsin(j5);
IkReal x9716=IKcos(j5);
IkReal x9717=(gconst29*r10);
IkReal x9718=((1.0)*sj2);
IkReal x9719=(gconst29*r00);
IkReal x9720=(gconst29*r20);
IkReal x9721=((1.0)*x9715);
IkReal x9722=((1.0)*cj2*sj3);
IkReal x9723=(gconst28*x9715);
IkReal x9724=((1.0)*x9716);
IkReal x9725=(gconst28*x9724);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x9724))+((r21*x9723))+(((-1.0)*x9720*x9721)));
evalcond[1]=((((-1.0)*r21*x9725))+((x9716*x9720))+(((-1.0)*r22*x9721))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r02*x9721))+(((-1.0)*cj1*x9718))+(((-1.0)*r01*x9725))+((x9716*x9719)));
evalcond[3]=((((-1.0)*r12*x9721))+((x9716*x9717))+(((-1.0)*r11*x9725))+(((-1.0)*sj1*x9718)));
evalcond[4]=(((r11*x9723))+(((-1.0)*x9717*x9721))+(((-1.0)*r12*x9724))+(((-1.0)*sj1*x9722))+((cj1*cj3)));
evalcond[5]=(((r01*x9723))+(((-1.0)*r02*x9724))+(((-1.0)*cj1*x9722))+(((-1.0)*cj3*sj1))+(((-1.0)*x9719*x9721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x9726=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9726);
rxp0_2=(py*r00);
rxp1_0=(r21*x9726);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9727=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9727);
rxp0_2=(py*r00);
rxp1_0=(r21*x9727);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9728=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9728);
rxp0_2=(py*r00);
rxp1_0=(r21*x9728);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x9729=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9729);
rxp0_2=(py*r00);
rxp1_0=(r21*x9729);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x9730=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x9730;
j5eval[1]=((IKabs(cj2))+(IKabs(sj2)));
j5eval[2]=IKsign(x9730);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x9731=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9731);
rxp0_2=(py*r00);
rxp1_0=(r21*x9731);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x9732=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x9732;
j5eval[1]=IKsign(x9732);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9733=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9733);
rxp0_2=(py*r00);
rxp1_0=(r21*x9733);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9734=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9734.valid){
continue;
}
CheckValue<IkReal> x9735=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9735.valid){
continue;
}
if( IKabs((cj2*(x9734.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x9735.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*(x9734.value)))+IKsqr((cj2*(x9735.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*(x9734.value)), (cj2*(x9735.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9736=IKsin(j5);
IkReal x9737=IKcos(j5);
IkReal x9738=((1.0)*cj2);
IkReal x9739=(r01*sj6);
IkReal x9740=(r21*sj6);
IkReal x9741=((1.0)*x9737);
IkReal x9742=(cj6*x9737);
IkReal x9743=((-1.0)*r12);
IkReal x9744=((1.0)*cj6*x9736);
evalcond[0]=(x9737*x9743);
evalcond[1]=(x9736*x9743);
evalcond[2]=(sj2+((x9736*x9740))+(((-1.0)*r20*x9744)));
evalcond[3]=(((x9736*x9739))+(((-1.0)*r00*x9744))+(((-1.0)*x9738)));
evalcond[4]=((((-1.0)*x9738))+((r20*x9742))+(((-1.0)*x9740*x9741)));
evalcond[5]=((((-1.0)*x9739*x9741))+(((-1.0)*sj2))+((r00*x9742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9745=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x9745.valid){
continue;
}
CheckValue<IkReal> x9746 = IKatan2WithCheck(IkReal(((-1.0)*sj2)),IkReal(((-1.0)*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9746.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9745.value)))+(x9746.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9747=IKsin(j5);
IkReal x9748=IKcos(j5);
IkReal x9749=((1.0)*cj2);
IkReal x9750=(r01*sj6);
IkReal x9751=(r21*sj6);
IkReal x9752=((1.0)*x9748);
IkReal x9753=(cj6*x9748);
IkReal x9754=((-1.0)*r12);
IkReal x9755=((1.0)*cj6*x9747);
evalcond[0]=(x9748*x9754);
evalcond[1]=(x9747*x9754);
evalcond[2]=(sj2+((x9747*x9751))+(((-1.0)*r20*x9755)));
evalcond[3]=(((x9747*x9750))+(((-1.0)*x9749))+(((-1.0)*r00*x9755)));
evalcond[4]=((((-1.0)*x9751*x9752))+(((-1.0)*x9749))+((r20*x9753)));
evalcond[5]=((((-1.0)*sj2))+((r00*x9753))+(((-1.0)*x9750*x9752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9756 = IKatan2WithCheck(IkReal(cj2),IkReal(((-1.0)*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9756.valid){
continue;
}
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x9757.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9756.value)+(((1.5707963267949)*(x9757.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9758=IKsin(j5);
IkReal x9759=IKcos(j5);
IkReal x9760=((1.0)*cj2);
IkReal x9761=(r01*sj6);
IkReal x9762=(r21*sj6);
IkReal x9763=((1.0)*x9759);
IkReal x9764=(cj6*x9759);
IkReal x9765=((-1.0)*r12);
IkReal x9766=((1.0)*cj6*x9758);
evalcond[0]=(x9759*x9765);
evalcond[1]=(x9758*x9765);
evalcond[2]=(sj2+((x9758*x9762))+(((-1.0)*r20*x9766)));
evalcond[3]=(((x9758*x9761))+(((-1.0)*r00*x9766))+(((-1.0)*x9760)));
evalcond[4]=(((r20*x9764))+(((-1.0)*x9762*x9763))+(((-1.0)*x9760)));
evalcond[5]=((((-1.0)*sj2))+((r00*x9764))+(((-1.0)*x9761*x9763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x9767=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9767);
rxp0_2=(py*r00);
rxp1_0=(r21*x9767);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x9768=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x9768;
j5eval[1]=IKsign(x9768);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x9769=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9769);
rxp0_2=(py*r00);
rxp1_0=(r21*x9769);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x9770=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x9770;
j5eval[1]=IKsign(x9770);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9771=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9771);
rxp0_2=(py*r00);
rxp1_0=(r21*x9771);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=1.5707963267949;
sj3=1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9772=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9772.valid){
continue;
}
CheckValue<IkReal> x9773=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9773.valid){
continue;
}
if( IKabs(((-1.0)*cj2*(x9772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x9773.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj2*(x9772.value)))+IKsqr((cj2*(x9773.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*cj2*(x9772.value)), (cj2*(x9773.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9774=IKsin(j5);
IkReal x9775=IKcos(j5);
IkReal x9776=(r01*sj6);
IkReal x9777=(r21*sj6);
IkReal x9778=((1.0)*x9775);
IkReal x9779=(cj6*x9775);
IkReal x9780=((-1.0)*r12);
IkReal x9781=((1.0)*cj6*x9774);
evalcond[0]=(x9775*x9780);
evalcond[1]=(x9774*x9780);
evalcond[2]=(sj2+(((-1.0)*r20*x9781))+((x9774*x9777)));
evalcond[3]=(cj2+(((-1.0)*r00*x9781))+((x9774*x9776)));
evalcond[4]=(sj2+((r00*x9779))+(((-1.0)*x9776*x9778)));
evalcond[5]=((((-1.0)*x9777*x9778))+((r20*x9779))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9782=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x9782.valid){
continue;
}
CheckValue<IkReal> x9783 = IKatan2WithCheck(IkReal(((-1.0)*sj2)),IkReal(((-1.0)*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9783.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9782.value)))+(x9783.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9784=IKsin(j5);
IkReal x9785=IKcos(j5);
IkReal x9786=(r01*sj6);
IkReal x9787=(r21*sj6);
IkReal x9788=((1.0)*x9785);
IkReal x9789=(cj6*x9785);
IkReal x9790=((-1.0)*r12);
IkReal x9791=((1.0)*cj6*x9784);
evalcond[0]=(x9785*x9790);
evalcond[1]=(x9784*x9790);
evalcond[2]=(sj2+(((-1.0)*r20*x9791))+((x9784*x9787)));
evalcond[3]=(cj2+(((-1.0)*r00*x9791))+((x9784*x9786)));
evalcond[4]=(((r00*x9789))+(((-1.0)*x9786*x9788))+sj2);
evalcond[5]=((((-1.0)*x9787*x9788))+((r20*x9789))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9792=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x9792.valid){
continue;
}
CheckValue<IkReal> x9793 = IKatan2WithCheck(IkReal(((-1.0)*cj2)),IkReal(sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x9793.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9792.value)))+(x9793.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9794=IKsin(j5);
IkReal x9795=IKcos(j5);
IkReal x9796=(r01*sj6);
IkReal x9797=(r21*sj6);
IkReal x9798=((1.0)*x9795);
IkReal x9799=(cj6*x9795);
IkReal x9800=((-1.0)*r12);
IkReal x9801=((1.0)*cj6*x9794);
evalcond[0]=(x9795*x9800);
evalcond[1]=(x9794*x9800);
evalcond[2]=((((-1.0)*r20*x9801))+sj2+((x9794*x9797)));
evalcond[3]=(cj2+((x9794*x9796))+(((-1.0)*r00*x9801)));
evalcond[4]=(sj2+(((-1.0)*x9796*x9798))+((r00*x9799)));
evalcond[5]=((((-1.0)*x9797*x9798))+((r20*x9799))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x9802=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9802);
rxp0_2=(py*r00);
rxp1_0=(r21*x9802);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x9803=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x9803;
j5eval[1]=((IKabs(cj2))+(IKabs(sj2)));
j5eval[2]=IKsign(x9803);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x9804=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9804);
rxp0_2=(py*r00);
rxp1_0=(r21*x9804);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
IkReal x9805=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x9805;
j5eval[1]=((IKabs(cj2))+(IKabs(sj2)));
j5eval[2]=IKsign(x9805);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9806=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9806);
rxp0_2=(py*r00);
rxp1_0=(r21*x9806);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=0;
sj1=0;
cj1=1.0;
j5eval[0]=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[1]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9807=IKPowWithIntegerCheck(((((-1.0)*cj6*r20))+((r21*sj6))),-1);
if(!x9807.valid){
continue;
}
CheckValue<IkReal> x9808=IKPowWithIntegerCheck(((((-1.0)*r01*sj6))+((cj6*r00))),-1);
if(!x9808.valid){
continue;
}
if( IKabs((sj2*(x9807.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*(x9808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj2*(x9807.value)))+IKsqr((sj2*(x9808.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj2*(x9807.value)), (sj2*(x9808.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9809=IKsin(j5);
IkReal x9810=IKcos(j5);
IkReal x9811=((1.0)*sj2);
IkReal x9812=(r01*sj6);
IkReal x9813=(r21*sj6);
IkReal x9814=((1.0)*x9810);
IkReal x9815=(cj6*x9810);
IkReal x9816=((-1.0)*r12);
IkReal x9817=((1.0)*cj6*x9809);
evalcond[0]=(x9810*x9816);
evalcond[1]=(x9809*x9816);
evalcond[2]=(((x9809*x9812))+cj2+(((-1.0)*r00*x9817)));
evalcond[3]=(((x9809*x9813))+(((-1.0)*x9811))+(((-1.0)*r20*x9817)));
evalcond[4]=((((-1.0)*x9813*x9814))+(((-1.0)*cj2))+((r20*x9815)));
evalcond[5]=((((-1.0)*x9811))+(((-1.0)*x9812*x9814))+((r00*x9815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9818 = IKatan2WithCheck(IkReal(((-1.0)*cj2)),IkReal(((-1.0)*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9818.valid){
continue;
}
CheckValue<IkReal> x9819=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x9819.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9818.value)+(((1.5707963267949)*(x9819.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9820=IKsin(j5);
IkReal x9821=IKcos(j5);
IkReal x9822=((1.0)*sj2);
IkReal x9823=(r01*sj6);
IkReal x9824=(r21*sj6);
IkReal x9825=((1.0)*x9821);
IkReal x9826=(cj6*x9821);
IkReal x9827=((-1.0)*r12);
IkReal x9828=((1.0)*cj6*x9820);
evalcond[0]=(x9821*x9827);
evalcond[1]=(x9820*x9827);
evalcond[2]=((((-1.0)*r00*x9828))+cj2+((x9820*x9823)));
evalcond[3]=((((-1.0)*x9822))+((x9820*x9824))+(((-1.0)*r20*x9828)));
evalcond[4]=(((r20*x9826))+(((-1.0)*x9824*x9825))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*x9823*x9825))+(((-1.0)*x9822))+((r00*x9826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9829=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x9829.valid){
continue;
}
CheckValue<IkReal> x9830 = IKatan2WithCheck(IkReal(sj2),IkReal(((-1.0)*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9830.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9829.value)))+(x9830.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9831=IKsin(j5);
IkReal x9832=IKcos(j5);
IkReal x9833=((1.0)*sj2);
IkReal x9834=(r01*sj6);
IkReal x9835=(r21*sj6);
IkReal x9836=((1.0)*x9832);
IkReal x9837=(cj6*x9832);
IkReal x9838=((-1.0)*r12);
IkReal x9839=((1.0)*cj6*x9831);
evalcond[0]=(x9832*x9838);
evalcond[1]=(x9831*x9838);
evalcond[2]=(cj2+(((-1.0)*r00*x9839))+((x9831*x9834)));
evalcond[3]=((((-1.0)*x9833))+(((-1.0)*r20*x9839))+((x9831*x9835)));
evalcond[4]=((((-1.0)*x9835*x9836))+((r20*x9837))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*x9833))+((r00*x9837))+(((-1.0)*x9834*x9836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x9840=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9840);
rxp0_2=(py*r00);
rxp1_0=(r21*x9840);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x9841=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x9841;
j5eval[1]=IKsign(x9841);
j5eval[2]=((IKabs(cj2))+(IKabs(sj2)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x9842=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9842);
rxp0_2=(py*r00);
rxp1_0=(r21*x9842);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
IkReal x9843=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[0]=x9843;
j5eval[1]=((IKabs(cj2))+(IKabs(sj2)));
j5eval[2]=IKsign(x9843);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x9844=((-1.0)*py);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9844);
rxp0_2=(py*r00);
rxp1_0=(r21*x9844);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j3=-1.5707963267949;
sj3=-1.0;
cj3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9845=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x9845.valid){
continue;
}
CheckValue<IkReal> x9846=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9846.valid){
continue;
}
if( IKabs((cj2*(x9845.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x9846.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*(x9845.value)))+IKsqr((cj2*(x9846.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj2*(x9845.value)), (cj2*(x9846.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9847=IKcos(j5);
IkReal x9848=IKsin(j5);
IkReal x9849=((1.0)*cj2);
IkReal x9850=(cj6*x9847);
IkReal x9851=(sj6*x9848);
IkReal x9852=((-1.0)*r12);
IkReal x9853=((1.0)*sj6*x9847);
IkReal x9854=((1.0)*cj6*x9848);
evalcond[0]=(x9847*x9852);
evalcond[1]=(x9848*x9852);
evalcond[2]=(sj2+((r00*x9850))+(((-1.0)*r01*x9853)));
evalcond[3]=(((r21*x9851))+(((-1.0)*sj2))+(((-1.0)*r20*x9854)));
evalcond[4]=((((-1.0)*x9849))+(((-1.0)*r00*x9854))+((r01*x9851)));
evalcond[5]=(((r20*x9850))+(((-1.0)*x9849))+(((-1.0)*r21*x9853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9855=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r20))+((r21*sj6)))),-1);
if(!x9855.valid){
continue;
}
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal(sj2),IkReal(((-1.0)*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9855.value)))+(x9856.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9857=IKcos(j5);
IkReal x9858=IKsin(j5);
IkReal x9859=((1.0)*cj2);
IkReal x9860=(cj6*x9857);
IkReal x9861=(sj6*x9858);
IkReal x9862=((-1.0)*r12);
IkReal x9863=((1.0)*sj6*x9857);
IkReal x9864=((1.0)*cj6*x9858);
evalcond[0]=(x9857*x9862);
evalcond[1]=(x9858*x9862);
evalcond[2]=(sj2+(((-1.0)*r01*x9863))+((r00*x9860)));
evalcond[3]=((((-1.0)*sj2))+(((-1.0)*r20*x9864))+((r21*x9861)));
evalcond[4]=((((-1.0)*r00*x9864))+((r01*x9861))+(((-1.0)*x9859)));
evalcond[5]=((((-1.0)*r21*x9863))+(((-1.0)*x9859))+((r20*x9860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9865=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x9865.valid){
continue;
}
CheckValue<IkReal> x9866 = IKatan2WithCheck(IkReal(cj2),IkReal(sj2),IKFAST_ATAN2_MAGTHRESH);
if(!x9866.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9865.value)))+(x9866.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9867=IKcos(j5);
IkReal x9868=IKsin(j5);
IkReal x9869=((1.0)*cj2);
IkReal x9870=(cj6*x9867);
IkReal x9871=(sj6*x9868);
IkReal x9872=((-1.0)*r12);
IkReal x9873=((1.0)*sj6*x9867);
IkReal x9874=((1.0)*cj6*x9868);
evalcond[0]=(x9867*x9872);
evalcond[1]=(x9868*x9872);
evalcond[2]=(sj2+((r00*x9870))+(((-1.0)*r01*x9873)));
evalcond[3]=((((-1.0)*r20*x9874))+(((-1.0)*sj2))+((r21*x9871)));
evalcond[4]=((((-1.0)*x9869))+((r01*x9871))+(((-1.0)*r00*x9874)));
evalcond[5]=((((-1.0)*x9869))+(((-1.0)*r21*x9873))+((r20*x9870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9875=IKPowWithIntegerCheck(r12,-1);
if(!x9875.valid){
continue;
}
CheckValue<IkReal> x9876=IKPowWithIntegerCheck(((((-1.0)*r01*sj6))+((cj6*r00))),-1);
if(!x9876.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x9875.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x9876.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x9875.value)))+IKsqr((cj1*sj2*(x9876.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x9875.value)), (cj1*sj2*(x9876.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9877=IKsin(j5);
IkReal x9878=IKcos(j5);
IkReal x9879=((1.0)*sj1);
IkReal x9880=(cj2*sj3);
IkReal x9881=((1.0)*cj1);
IkReal x9882=(cj6*x9878);
IkReal x9883=(sj6*x9877);
IkReal x9884=((1.0)*x9877);
IkReal x9885=((1.0)*sj6*x9878);
evalcond[0]=((((-1.0)*sj2*x9879))+(((-1.0)*r12*x9884)));
evalcond[1]=((((-1.0)*r12*x9878))+((cj1*cj3))+(((-1.0)*x9879*x9880)));
evalcond[2]=(((sj2*sj3))+((r21*x9883))+(((-1.0)*cj6*r20*x9884)));
evalcond[3]=(((r20*x9882))+(((-1.0)*r21*x9885))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x9881))+((r00*x9882))+(((-1.0)*r01*x9885)));
evalcond[5]=(((r01*x9883))+(((-1.0)*cj3*x9879))+(((-1.0)*x9880*x9881))+(((-1.0)*cj6*r00*x9884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9886=IKPowWithIntegerCheck(r12,-1);
if(!x9886.valid){
continue;
}
CheckValue<IkReal> x9887=IKPowWithIntegerCheck((((cj6*r20))+(((-1.0)*r21*sj6))),-1);
if(!x9887.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x9886.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*(x9887.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x9886.value)))+IKsqr((cj2*(x9887.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x9886.value)), (cj2*(x9887.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9888=IKsin(j5);
IkReal x9889=IKcos(j5);
IkReal x9890=((1.0)*sj1);
IkReal x9891=(cj2*sj3);
IkReal x9892=((1.0)*cj1);
IkReal x9893=(cj6*x9889);
IkReal x9894=(sj6*x9888);
IkReal x9895=((1.0)*x9888);
IkReal x9896=((1.0)*sj6*x9889);
evalcond[0]=((((-1.0)*r12*x9895))+(((-1.0)*sj2*x9890)));
evalcond[1]=((((-1.0)*x9890*x9891))+((cj1*cj3))+(((-1.0)*r12*x9889)));
evalcond[2]=(((sj2*sj3))+((r21*x9894))+(((-1.0)*cj6*r20*x9895)));
evalcond[3]=((((-1.0)*r21*x9896))+((r20*x9893))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*r01*x9896))+((r00*x9893))+(((-1.0)*sj2*x9892)));
evalcond[5]=((((-1.0)*cj3*x9890))+(((-1.0)*cj6*r00*x9895))+((r01*x9894))+(((-1.0)*x9891*x9892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9897=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x9897.valid){
continue;
}
CheckValue<IkReal> x9898 = IKatan2WithCheck(IkReal(((-1.0)*sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9898.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9897.value)))+(x9898.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9899=IKsin(j5);
IkReal x9900=IKcos(j5);
IkReal x9901=((1.0)*sj1);
IkReal x9902=(cj2*sj3);
IkReal x9903=((1.0)*cj1);
IkReal x9904=(cj6*x9900);
IkReal x9905=(sj6*x9899);
IkReal x9906=((1.0)*x9899);
IkReal x9907=((1.0)*sj6*x9900);
evalcond[0]=((((-1.0)*r12*x9906))+(((-1.0)*sj2*x9901)));
evalcond[1]=((((-1.0)*r12*x9900))+(((-1.0)*x9901*x9902))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*cj6*r20*x9906))+((r21*x9905)));
evalcond[3]=(((r20*x9904))+(((-1.0)*r21*x9907))+(((-1.0)*cj2)));
evalcond[4]=(((r00*x9904))+(((-1.0)*sj2*x9903))+(((-1.0)*r01*x9907)));
evalcond[5]=((((-1.0)*cj6*r00*x9906))+(((-1.0)*x9902*x9903))+((r01*x9905))+(((-1.0)*cj3*x9901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9908=((1.0)*sj6);
IkReal x9909=((((-1.0)*cj6*r01))+(((-1.0)*r00*x9908)));
j5eval[0]=x9909;
j5eval[1]=((IKabs(r22))+(IKabs((((cj6*r20))+(((-1.0)*r21*x9908))))));
j5eval[2]=IKsign(x9909);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9910=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x9910;
j5eval[1]=((IKabs((r12*sj3)))+(IKabs((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3))))));
j5eval[2]=IKsign(x9910);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x9911=cj6*cj6;
IkReal x9912=r11*r11;
IkReal x9913=(r11*sj6);
IkReal x9914=(cj6*r10);
IkReal x9915=((((2.0)*x9913*x9914))+(((-1.0)*x9912))+((x9911*x9912))+(((-1.0)*(r12*r12)))+(((-1.0)*x9911*(r10*r10))));
j5eval[0]=x9915;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x9914))+x9913))));
j5eval[2]=IKsign(x9915);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x9916=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x9916;
j5eval[1]=IKsign(x9916);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x9917=((1.0)*cj6);
IkReal x9918=((((-1.0)*r10*sj6))+(((-1.0)*r11*x9917)));
j5eval[0]=x9918;
j5eval[1]=IKsign(x9918);
j5eval[2]=((IKabs(r22))+(IKabs((((r21*sj6))+(((-1.0)*r20*x9917))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x9919=cj6*cj6;
IkReal x9920=(r11*r21);
IkReal x9921=(r21*sj6);
IkReal x9922=(cj6*r20);
IkReal x9923=(((cj6*r10*x9921))+(((-1.0)*r12*r22))+(((-1.0)*x9920))+(((-1.0)*r10*r20*x9919))+((x9919*x9920))+((r11*sj6*x9922)));
j5eval[0]=x9923;
j5eval[1]=IKsign(x9923);
j5eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x9922))+x9921))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9924=cj6*cj6;
IkReal x9925=(r21*sj6);
IkReal x9926=(cj6*r20);
IkReal x9927=(r11*r21);
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x9926))+x9925)),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
CheckValue<IkReal> x9929=IKPowWithIntegerCheck(IKsign((((x9924*x9927))+((cj6*r10*x9925))+(((-1.0)*r12*r22))+(((-1.0)*x9927))+(((-1.0)*r10*r20*x9924))+((r11*sj6*x9926)))),-1);
if(!x9929.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9928.value)+(((1.5707963267949)*(x9929.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9930=IKsin(j5);
IkReal x9931=IKcos(j5);
IkReal x9932=(r01*sj6);
IkReal x9933=(r21*sj6);
IkReal x9934=(r11*sj6);
IkReal x9935=((1.0)*x9930);
IkReal x9936=((1.0)*x9931);
IkReal x9937=(cj6*x9931);
evalcond[0]=((((-1.0)*r22*x9936))+((x9930*x9933))+(((-1.0)*cj6*r20*x9935)));
evalcond[1]=(((x9930*x9934))+(((-1.0)*r12*x9936))+(((-1.0)*cj6*r10*x9935)));
evalcond[2]=((((-1.0)*r22*x9935))+(((-1.0)*x9933*x9936))+((r20*x9937)));
evalcond[3]=(((r00*x9937))+(((-1.0)*r02*x9935))+(((-1.0)*x9932*x9936)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9936))+((x9930*x9932))+(((-1.0)*cj6*r00*x9935)));
evalcond[5]=((-1.0)+((r10*x9937))+(((-1.0)*x9934*x9936))+(((-1.0)*r12*x9935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9938=((1.0)*cj6);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj6))+(((-1.0)*r20*x9938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
CheckValue<IkReal> x9940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x9938)))),-1);
if(!x9940.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9939.value)+(((1.5707963267949)*(x9940.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9941=IKsin(j5);
IkReal x9942=IKcos(j5);
IkReal x9943=(r01*sj6);
IkReal x9944=(r21*sj6);
IkReal x9945=(r11*sj6);
IkReal x9946=((1.0)*x9941);
IkReal x9947=((1.0)*x9942);
IkReal x9948=(cj6*x9942);
evalcond[0]=((((-1.0)*r22*x9947))+(((-1.0)*cj6*r20*x9946))+((x9941*x9944)));
evalcond[1]=((((-1.0)*cj6*r10*x9946))+(((-1.0)*r12*x9947))+((x9941*x9945)));
evalcond[2]=((((-1.0)*x9944*x9947))+((r20*x9948))+(((-1.0)*r22*x9946)));
evalcond[3]=(((r00*x9948))+(((-1.0)*x9943*x9947))+(((-1.0)*r02*x9946)));
evalcond[4]=((-1.0)+((x9941*x9943))+(((-1.0)*cj6*r00*x9946))+(((-1.0)*r02*x9947)));
evalcond[5]=((-1.0)+(((-1.0)*x9945*x9947))+(((-1.0)*r12*x9946))+((r10*x9948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9949=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x9949.valid){
continue;
}
CheckValue<IkReal> x9950 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9950.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9949.value)))+(x9950.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9951=IKsin(j5);
IkReal x9952=IKcos(j5);
IkReal x9953=(r01*sj6);
IkReal x9954=(r21*sj6);
IkReal x9955=(r11*sj6);
IkReal x9956=((1.0)*x9951);
IkReal x9957=((1.0)*x9952);
IkReal x9958=(cj6*x9952);
evalcond[0]=(((x9951*x9954))+(((-1.0)*r22*x9957))+(((-1.0)*cj6*r20*x9956)));
evalcond[1]=((((-1.0)*cj6*r10*x9956))+((x9951*x9955))+(((-1.0)*r12*x9957)));
evalcond[2]=(((r20*x9958))+(((-1.0)*r22*x9956))+(((-1.0)*x9954*x9957)));
evalcond[3]=((((-1.0)*r02*x9956))+(((-1.0)*x9953*x9957))+((r00*x9958)));
evalcond[4]=((-1.0)+((x9951*x9953))+(((-1.0)*r02*x9957))+(((-1.0)*cj6*r00*x9956)));
evalcond[5]=((-1.0)+(((-1.0)*x9955*x9957))+(((-1.0)*r12*x9956))+((r10*x9958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9959=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x9959;
j5eval[1]=IKsign(x9959);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9960=((1.0)*cj6);
IkReal x9961=((((-1.0)*r21*x9960))+(((-1.0)*r20*sj6)));
j5eval[0]=x9961;
j5eval[1]=((IKabs(r12))+(IKabs((((r11*sj6))+(((-1.0)*r10*x9960))))));
j5eval[2]=IKsign(x9961);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x9962=cj6*cj6;
IkReal x9963=(r11*r21);
IkReal x9964=(r21*sj6);
IkReal x9965=(cj6*r20);
IkReal x9966=(((x9962*x9963))+((r11*sj6*x9965))+(((-1.0)*r12*r22))+(((-1.0)*x9963))+((cj6*r10*x9964))+(((-1.0)*r10*r20*x9962)));
j5eval[0]=x9966;
j5eval[1]=IKsign(x9966);
j5eval[2]=((IKabs((x9964+(((-1.0)*x9965)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9967=cj6*cj6;
IkReal x9968=(r21*sj6);
IkReal x9969=(cj6*r20);
IkReal x9970=(r11*r21);
CheckValue<IkReal> x9971 = IKatan2WithCheck(IkReal(r22),IkReal((x9968+(((-1.0)*x9969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9971.valid){
continue;
}
CheckValue<IkReal> x9972=IKPowWithIntegerCheck(IKsign((((r11*sj6*x9969))+(((-1.0)*r12*r22))+(((-1.0)*x9970))+((x9967*x9970))+((cj6*r10*x9968))+(((-1.0)*r10*r20*x9967)))),-1);
if(!x9972.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9971.value)+(((1.5707963267949)*(x9972.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9973=IKsin(j5);
IkReal x9974=IKcos(j5);
IkReal x9975=(r01*sj6);
IkReal x9976=(r21*sj6);
IkReal x9977=(r11*sj6);
IkReal x9978=((1.0)*x9973);
IkReal x9979=((1.0)*x9974);
IkReal x9980=(cj6*x9974);
evalcond[0]=(((x9973*x9976))+(((-1.0)*r22*x9979))+(((-1.0)*cj6*r20*x9978)));
evalcond[1]=(((x9973*x9977))+(((-1.0)*cj6*r10*x9978))+(((-1.0)*r12*x9979)));
evalcond[2]=((((-1.0)*r22*x9978))+((r20*x9980))+(((-1.0)*x9976*x9979)));
evalcond[3]=((((-1.0)*r02*x9978))+(((-1.0)*x9975*x9979))+((r00*x9980)));
evalcond[4]=((1.0)+(((-1.0)*r02*x9979))+((x9973*x9975))+(((-1.0)*cj6*r00*x9978)));
evalcond[5]=((-1.0)+((r10*x9980))+(((-1.0)*r12*x9978))+(((-1.0)*x9977*x9979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x9981=((1.0)*cj6);
CheckValue<IkReal> x9982 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x9981))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9982.valid){
continue;
}
CheckValue<IkReal> x9983=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9981))+(((-1.0)*r20*sj6)))),-1);
if(!x9983.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9982.value)+(((1.5707963267949)*(x9983.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9984=IKsin(j5);
IkReal x9985=IKcos(j5);
IkReal x9986=(r01*sj6);
IkReal x9987=(r21*sj6);
IkReal x9988=(r11*sj6);
IkReal x9989=((1.0)*x9984);
IkReal x9990=((1.0)*x9985);
IkReal x9991=(cj6*x9985);
evalcond[0]=((((-1.0)*cj6*r20*x9989))+(((-1.0)*r22*x9990))+((x9984*x9987)));
evalcond[1]=(((x9984*x9988))+(((-1.0)*cj6*r10*x9989))+(((-1.0)*r12*x9990)));
evalcond[2]=((((-1.0)*r22*x9989))+((r20*x9991))+(((-1.0)*x9987*x9990)));
evalcond[3]=(((r00*x9991))+(((-1.0)*r02*x9989))+(((-1.0)*x9986*x9990)));
evalcond[4]=((1.0)+((x9984*x9986))+(((-1.0)*r02*x9990))+(((-1.0)*cj6*r00*x9989)));
evalcond[5]=((-1.0)+((r10*x9991))+(((-1.0)*x9988*x9990))+(((-1.0)*r12*x9989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x9992 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9992.valid){
continue;
}
CheckValue<IkReal> x9993=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x9993.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x9992.value)+(((1.5707963267949)*(x9993.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x9994=IKsin(j5);
IkReal x9995=IKcos(j5);
IkReal x9996=(r01*sj6);
IkReal x9997=(r21*sj6);
IkReal x9998=(r11*sj6);
IkReal x9999=((1.0)*x9994);
IkReal x10000=((1.0)*x9995);
IkReal x10001=(cj6*x9995);
evalcond[0]=((((-1.0)*cj6*r20*x9999))+(((-1.0)*r22*x10000))+((x9994*x9997)));
evalcond[1]=((((-1.0)*r12*x10000))+(((-1.0)*cj6*r10*x9999))+((x9994*x9998)));
evalcond[2]=((((-1.0)*r22*x9999))+(((-1.0)*x10000*x9997))+((r20*x10001)));
evalcond[3]=((((-1.0)*r02*x9999))+(((-1.0)*x10000*x9996))+((r00*x10001)));
evalcond[4]=((1.0)+(((-1.0)*r02*x10000))+(((-1.0)*cj6*r00*x9999))+((x9994*x9996)));
evalcond[5]=((-1.0)+((r10*x10001))+(((-1.0)*x10000*x9998))+(((-1.0)*r12*x9999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10002=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10002);
rxp1_1=(px*r21);
rxp1_2=(r11*x10002);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x10003=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10003);
rxp1_1=(px*r21);
rxp1_2=(r11*x10003);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10005=IKPowWithIntegerCheck(r02,-1);
if(!x10005.valid){
continue;
}
IkReal x10004=x10005.value;
cj5array[0]=((((-3.18106629342156)*px*x10004))+(((1.33846545362005)*x10004)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10006=IKsin(j5);
IkReal x10007=IKcos(j5);
IkReal x10008=(r21*sj6);
IkReal x10009=(r11*sj6);
IkReal x10010=((1.0)*x10007);
IkReal x10011=(cj6*x10007);
IkReal x10012=((1.0)*cj6*x10006);
evalcond[0]=((-1.0)*r02*x10006);
evalcond[1]=((((-1.0)*r20*x10012))+((x10006*x10008)));
evalcond[2]=(((x10006*x10009))+(((-1.0)*r10*x10012)));
evalcond[3]=((((-1.0)*x10008*x10010))+((r20*x10011)));
evalcond[4]=((-1.0)+((r10*x10011))+(((-1.0)*x10009*x10010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10013=IKPowWithIntegerCheck(((((-1.0)*r11*sj6))+((cj6*r10))),-1);
if(!x10013.valid){
continue;
}
cj5array[0]=x10013.value;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10014=IKsin(j5);
IkReal x10015=IKcos(j5);
IkReal x10016=(r21*sj6);
IkReal x10017=(cj6*r20);
IkReal x10018=((1.0)*x10015);
IkReal x10019=((1.0)*x10014);
evalcond[0]=((-1.0)*r02*x10014);
evalcond[1]=((1.33846545362005)+(((-1.0)*r02*x10018))+(((-3.18106629342156)*px)));
evalcond[2]=(((x10014*x10016))+(((-1.0)*x10017*x10019)));
evalcond[3]=(((r11*sj6*x10014))+(((-1.0)*cj6*r10*x10019)));
evalcond[4]=(((x10015*x10017))+(((-1.0)*x10016*x10018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10020=cj6*cj6;
IkReal x10021=r11*r11;
IkReal x10022=(r11*sj6);
IkReal x10023=(cj6*r10);
CheckValue<IkReal> x10024=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10020*(r10*r10)))+((x10020*x10021))+(((-1.0)*x10021))+(((2.0)*x10022*x10023))+(((-1.0)*(r12*r12))))),-1);
if(!x10024.valid){
continue;
}
CheckValue<IkReal> x10025 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10023))+x10022)),IKFAST_ATAN2_MAGTHRESH);
if(!x10025.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10024.value)))+(x10025.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10026=IKsin(j5);
IkReal x10027=IKcos(j5);
IkReal x10028=(r01*sj6);
IkReal x10029=(r21*sj6);
IkReal x10030=(r11*sj6);
IkReal x10031=((1.0)*x10026);
IkReal x10032=((1.0)*x10027);
IkReal x10033=(cj6*x10027);
evalcond[0]=((((-1.0)*cj6*r10*x10031))+((x10026*x10030))+(((-1.0)*r12*x10032)));
evalcond[1]=((((-1.0)*r22*x10031))+((r20*x10033))+(((-1.0)*x10029*x10032)));
evalcond[2]=((((-1.0)*r02*x10031))+(((-1.0)*x10028*x10032))+((r00*x10033)));
evalcond[3]=(sj3+((x10026*x10029))+(((-1.0)*r22*x10032))+(((-1.0)*cj6*r20*x10031)));
evalcond[4]=((-1.0)+((r10*x10033))+(((-1.0)*x10030*x10032))+(((-1.0)*r12*x10031)));
evalcond[5]=((((-1.0)*r02*x10032))+((x10026*x10028))+(((-1.0)*cj6*r00*x10031))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
CheckValue<IkReal> x10035=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x10035.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10034.value)+(((1.5707963267949)*(x10035.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10036=IKsin(j5);
IkReal x10037=IKcos(j5);
IkReal x10038=(r01*sj6);
IkReal x10039=(r21*sj6);
IkReal x10040=(r11*sj6);
IkReal x10041=((1.0)*x10036);
IkReal x10042=((1.0)*x10037);
IkReal x10043=(cj6*x10037);
evalcond[0]=((((-1.0)*r12*x10042))+(((-1.0)*cj6*r10*x10041))+((x10036*x10040)));
evalcond[1]=((((-1.0)*r22*x10041))+((r20*x10043))+(((-1.0)*x10039*x10042)));
evalcond[2]=((((-1.0)*r02*x10041))+(((-1.0)*x10038*x10042))+((r00*x10043)));
evalcond[3]=(sj3+((x10036*x10039))+(((-1.0)*r22*x10042))+(((-1.0)*cj6*r20*x10041)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x10041))+((r10*x10043))+(((-1.0)*x10040*x10042)));
evalcond[5]=((((-1.0)*r02*x10042))+((x10036*x10038))+(((-1.0)*cj6*r00*x10041))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10044=((1.0)*sj6);
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x10044)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
CheckValue<IkReal> x10046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10044))+(((-1.0)*cj6*r01)))),-1);
if(!x10046.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10045.value)+(((1.5707963267949)*(x10046.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10047=IKsin(j5);
IkReal x10048=IKcos(j5);
IkReal x10049=(r01*sj6);
IkReal x10050=(r21*sj6);
IkReal x10051=(r11*sj6);
IkReal x10052=((1.0)*x10047);
IkReal x10053=((1.0)*x10048);
IkReal x10054=(cj6*x10048);
evalcond[0]=((((-1.0)*cj6*r10*x10052))+(((-1.0)*r12*x10053))+((x10047*x10051)));
evalcond[1]=(((r20*x10054))+(((-1.0)*x10050*x10053))+(((-1.0)*r22*x10052)));
evalcond[2]=(((r00*x10054))+(((-1.0)*x10049*x10053))+(((-1.0)*r02*x10052)));
evalcond[3]=(sj3+(((-1.0)*cj6*r20*x10052))+(((-1.0)*r22*x10053))+((x10047*x10050)));
evalcond[4]=((-1.0)+((r10*x10054))+(((-1.0)*x10051*x10053))+(((-1.0)*r12*x10052)));
evalcond[5]=((((-1.0)*cj6*r00*x10052))+((x10047*x10049))+(((-1.0)*r02*x10053))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x10055=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x10055;
j5eval[1]=((IKabs((r12*sj3)))+(IKabs((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3))))));
j5eval[2]=IKsign(x10055);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x10056=((1.0)*cj6);
IkReal x10057=((((-1.0)*r21*x10056))+(((-1.0)*r20*sj6)));
j5eval[0]=x10057;
j5eval[1]=((IKabs((cj3*r12)))+(IKabs((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x10056))))));
j5eval[2]=IKsign(x10057);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x10058=cj6*cj6;
IkReal x10059=r11*r11;
IkReal x10060=(r11*sj6);
IkReal x10061=(cj6*r10);
IkReal x10062=((r12*r12)+((x10058*(r10*r10)))+x10059+(((-1.0)*x10058*x10059))+(((-2.0)*x10060*x10061)));
j5eval[0]=x10062;
j5eval[1]=IKsign(x10062);
j5eval[2]=((IKabs(r12))+(IKabs((x10060+(((-1.0)*x10061))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10063=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x10063;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j5eval[2]=IKsign(x10063);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10064=((1.0)*cj6);
IkReal x10065=((((-1.0)*r10*sj6))+(((-1.0)*r11*x10064)));
j5eval[0]=x10065;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10064))))));
j5eval[2]=IKsign(x10065);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10066=cj6*cj6;
IkReal x10067=r11*r11;
IkReal x10068=(r11*sj6);
IkReal x10069=(cj6*r10);
IkReal x10070=((r12*r12)+((x10066*(r10*r10)))+x10067+(((-2.0)*x10068*x10069))+(((-1.0)*x10066*x10067)));
j5eval[0]=x10070;
j5eval[1]=IKsign(x10070);
j5eval[2]=((IKabs(r12))+(IKabs((x10068+(((-1.0)*x10069))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10071=cj6*cj6;
IkReal x10072=r11*r11;
IkReal x10073=(r11*sj6);
IkReal x10074=(cj6*r10);
CheckValue<IkReal> x10075=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x10071*(r10*r10)))+(((-2.0)*x10073*x10074))+x10072+(((-1.0)*x10071*x10072)))),-1);
if(!x10075.valid){
continue;
}
CheckValue<IkReal> x10076 = IKatan2WithCheck(IkReal(r12),IkReal((x10073+(((-1.0)*x10074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10076.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10075.value)))+(x10076.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10077=IKsin(j5);
IkReal x10078=IKcos(j5);
IkReal x10079=(r01*sj6);
IkReal x10080=(cj6*r10);
IkReal x10081=(r21*sj6);
IkReal x10082=(r11*sj6);
IkReal x10083=((1.0)*x10077);
IkReal x10084=((1.0)*x10078);
IkReal x10085=(cj6*x10078);
evalcond[0]=((((-1.0)*x10080*x10083))+(((-1.0)*r12*x10084))+((x10077*x10082)));
evalcond[1]=((((-1.0)*cj6*r00*x10083))+(((-1.0)*r02*x10084))+((x10077*x10079)));
evalcond[2]=((((-1.0)*x10081*x10084))+((r20*x10085))+(((-1.0)*r22*x10083)));
evalcond[3]=(((r00*x10085))+(((-1.0)*x10079*x10084))+(((-1.0)*r02*x10083)));
evalcond[4]=((1.0)+(((-1.0)*cj6*r20*x10083))+(((-1.0)*r22*x10084))+((x10077*x10081)));
evalcond[5]=((1.0)+((x10078*x10080))+(((-1.0)*r12*x10083))+(((-1.0)*x10082*x10084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10086=((1.0)*cj6);
CheckValue<IkReal> x10087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x10086)))),-1);
if(!x10087.valid){
continue;
}
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj6))+(((-1.0)*r00*x10086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10087.value)))+(x10088.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10089=IKsin(j5);
IkReal x10090=IKcos(j5);
IkReal x10091=(r01*sj6);
IkReal x10092=(cj6*r10);
IkReal x10093=(r21*sj6);
IkReal x10094=(r11*sj6);
IkReal x10095=((1.0)*x10089);
IkReal x10096=((1.0)*x10090);
IkReal x10097=(cj6*x10090);
evalcond[0]=((((-1.0)*x10092*x10095))+(((-1.0)*r12*x10096))+((x10089*x10094)));
evalcond[1]=((((-1.0)*cj6*r00*x10095))+(((-1.0)*r02*x10096))+((x10089*x10091)));
evalcond[2]=((((-1.0)*x10093*x10096))+((r20*x10097))+(((-1.0)*r22*x10095)));
evalcond[3]=((((-1.0)*r02*x10095))+(((-1.0)*x10091*x10096))+((r00*x10097)));
evalcond[4]=((1.0)+(((-1.0)*cj6*r20*x10095))+((x10089*x10093))+(((-1.0)*r22*x10096)));
evalcond[5]=((1.0)+((x10090*x10092))+(((-1.0)*r12*x10095))+(((-1.0)*x10094*x10096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10098=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x10098.valid){
continue;
}
CheckValue<IkReal> x10099 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10099.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10098.value)))+(x10099.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10100=IKsin(j5);
IkReal x10101=IKcos(j5);
IkReal x10102=(r01*sj6);
IkReal x10103=(cj6*r10);
IkReal x10104=(r21*sj6);
IkReal x10105=(r11*sj6);
IkReal x10106=((1.0)*x10100);
IkReal x10107=((1.0)*x10101);
IkReal x10108=(cj6*x10101);
evalcond[0]=((((-1.0)*r12*x10107))+(((-1.0)*x10103*x10106))+((x10100*x10105)));
evalcond[1]=((((-1.0)*cj6*r00*x10106))+(((-1.0)*r02*x10107))+((x10100*x10102)));
evalcond[2]=((((-1.0)*x10104*x10107))+((r20*x10108))+(((-1.0)*r22*x10106)));
evalcond[3]=(((r00*x10108))+(((-1.0)*x10102*x10107))+(((-1.0)*r02*x10106)));
evalcond[4]=((1.0)+(((-1.0)*cj6*r20*x10106))+(((-1.0)*r22*x10107))+((x10100*x10104)));
evalcond[5]=((1.0)+((x10101*x10103))+(((-1.0)*r12*x10106))+(((-1.0)*x10105*x10107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10109=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x10109;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j5eval[2]=IKsign(x10109);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10110=((1.0)*cj6);
IkReal x10111=((((-1.0)*r01*x10110))+(((-1.0)*r00*sj6)));
j5eval[0]=x10111;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x10110))+((r11*sj6))))));
j5eval[2]=IKsign(x10111);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10112=cj6*cj6;
IkReal x10113=r11*r11;
IkReal x10114=(r11*sj6);
IkReal x10115=(cj6*r10);
IkReal x10116=((r12*r12)+(((-1.0)*x10112*x10113))+(((-2.0)*x10114*x10115))+x10113+((x10112*(r10*r10))));
j5eval[0]=x10116;
j5eval[1]=IKsign(x10116);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x10115))+x10114))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10117=cj6*cj6;
IkReal x10118=r11*r11;
IkReal x10119=(r11*sj6);
IkReal x10120=(cj6*r10);
CheckValue<IkReal> x10121=IKPowWithIntegerCheck(IKsign(((r12*r12)+x10118+(((-1.0)*x10117*x10118))+(((-2.0)*x10119*x10120))+((x10117*(r10*r10))))),-1);
if(!x10121.valid){
continue;
}
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(r12),IkReal((x10119+(((-1.0)*x10120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10121.value)))+(x10122.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10123=IKsin(j5);
IkReal x10124=IKcos(j5);
IkReal x10125=(r01*sj6);
IkReal x10126=(cj6*r10);
IkReal x10127=(r21*sj6);
IkReal x10128=(r11*sj6);
IkReal x10129=((1.0)*x10123);
IkReal x10130=((1.0)*x10124);
IkReal x10131=(cj6*x10124);
evalcond[0]=((((-1.0)*x10126*x10129))+((x10123*x10128))+(((-1.0)*r12*x10130)));
evalcond[1]=((((-1.0)*r02*x10130))+(((-1.0)*cj6*r00*x10129))+((x10123*x10125)));
evalcond[2]=(((r20*x10131))+(((-1.0)*x10127*x10130))+(((-1.0)*r22*x10129)));
evalcond[3]=((((-1.0)*r02*x10129))+((r00*x10131))+(((-1.0)*x10125*x10130)));
evalcond[4]=((-1.0)+((x10123*x10127))+(((-1.0)*cj6*r20*x10129))+(((-1.0)*r22*x10130)));
evalcond[5]=((1.0)+(((-1.0)*x10128*x10130))+((x10124*x10126))+(((-1.0)*r12*x10129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10132=((1.0)*cj6);
CheckValue<IkReal> x10133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x10132)))),-1);
if(!x10133.valid){
continue;
}
CheckValue<IkReal> x10134 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10132))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10134.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10133.value)))+(x10134.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10135=IKsin(j5);
IkReal x10136=IKcos(j5);
IkReal x10137=(r01*sj6);
IkReal x10138=(cj6*r10);
IkReal x10139=(r21*sj6);
IkReal x10140=(r11*sj6);
IkReal x10141=((1.0)*x10135);
IkReal x10142=((1.0)*x10136);
IkReal x10143=(cj6*x10136);
evalcond[0]=(((x10135*x10140))+(((-1.0)*r12*x10142))+(((-1.0)*x10138*x10141)));
evalcond[1]=((((-1.0)*r02*x10142))+(((-1.0)*cj6*r00*x10141))+((x10135*x10137)));
evalcond[2]=((((-1.0)*r22*x10141))+(((-1.0)*x10139*x10142))+((r20*x10143)));
evalcond[3]=((((-1.0)*r02*x10141))+(((-1.0)*x10137*x10142))+((r00*x10143)));
evalcond[4]=((-1.0)+(((-1.0)*cj6*r20*x10141))+((x10135*x10139))+(((-1.0)*r22*x10142)));
evalcond[5]=((1.0)+((x10136*x10138))+(((-1.0)*r12*x10141))+(((-1.0)*x10140*x10142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10144 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10144.valid){
continue;
}
CheckValue<IkReal> x10145=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x10145.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10144.value)+(((1.5707963267949)*(x10145.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10146=IKsin(j5);
IkReal x10147=IKcos(j5);
IkReal x10148=(r01*sj6);
IkReal x10149=(cj6*r10);
IkReal x10150=(r21*sj6);
IkReal x10151=(r11*sj6);
IkReal x10152=((1.0)*x10146);
IkReal x10153=((1.0)*x10147);
IkReal x10154=(cj6*x10147);
evalcond[0]=((((-1.0)*x10149*x10152))+(((-1.0)*r12*x10153))+((x10146*x10151)));
evalcond[1]=((((-1.0)*r02*x10153))+(((-1.0)*cj6*r00*x10152))+((x10146*x10148)));
evalcond[2]=((((-1.0)*x10150*x10153))+(((-1.0)*r22*x10152))+((r20*x10154)));
evalcond[3]=((((-1.0)*x10148*x10153))+(((-1.0)*r02*x10152))+((r00*x10154)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x10153))+((x10146*x10150))+(((-1.0)*cj6*r20*x10152)));
evalcond[5]=((1.0)+((x10147*x10149))+(((-1.0)*x10151*x10153))+(((-1.0)*r12*x10152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10155=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x10155;
j5eval[1]=IKsign(x10155);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10156=((1.0)*cj6);
IkReal x10157=((((-1.0)*r21*x10156))+(((-1.0)*r20*sj6)));
j5eval[0]=x10157;
j5eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x10156)))))+(IKabs(r12)));
j5eval[2]=IKsign(x10157);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10158=cj6*cj6;
IkReal x10159=r11*r11;
IkReal x10160=(r11*sj6);
IkReal x10161=(cj6*r10);
IkReal x10162=((r12*r12)+(((-1.0)*x10158*x10159))+x10159+(((-2.0)*x10160*x10161))+((x10158*(r10*r10))));
j5eval[0]=x10162;
j5eval[1]=IKsign(x10162);
j5eval[2]=((IKabs(((((-1.0)*x10161))+x10160)))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10163=cj6*cj6;
IkReal x10164=r11*r11;
IkReal x10165=(r11*sj6);
IkReal x10166=(cj6*r10);
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10165*x10166))+(r12*r12)+(((-1.0)*x10163*x10164))+x10164+((x10163*(r10*r10))))),-1);
if(!x10167.valid){
continue;
}
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10166))+x10165)),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10167.value)))+(x10168.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10169=IKsin(j5);
IkReal x10170=IKcos(j5);
IkReal x10171=(r01*sj6);
IkReal x10172=(r21*sj6);
IkReal x10173=(r11*sj6);
IkReal x10174=((1.0)*x10169);
IkReal x10175=((1.0)*x10170);
IkReal x10176=(cj6*x10170);
evalcond[0]=((((-1.0)*r22*x10175))+((x10169*x10172))+(((-1.0)*cj6*r20*x10174)));
evalcond[1]=((((-1.0)*cj6*r10*x10174))+(((-1.0)*r12*x10175))+((x10169*x10173)));
evalcond[2]=((((-1.0)*r22*x10174))+(((-1.0)*x10172*x10175))+((r20*x10176)));
evalcond[3]=(((r00*x10176))+(((-1.0)*x10171*x10175))+(((-1.0)*r02*x10174)));
evalcond[4]=((1.0)+(((-1.0)*cj6*r00*x10174))+((x10169*x10171))+(((-1.0)*r02*x10175)));
evalcond[5]=((1.0)+((r10*x10176))+(((-1.0)*r12*x10174))+(((-1.0)*x10173*x10175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10177=((1.0)*cj6);
CheckValue<IkReal> x10178 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj6))+(((-1.0)*r10*x10177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10178.valid){
continue;
}
CheckValue<IkReal> x10179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10177))+(((-1.0)*r20*sj6)))),-1);
if(!x10179.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10178.value)+(((1.5707963267949)*(x10179.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10180=IKsin(j5);
IkReal x10181=IKcos(j5);
IkReal x10182=(r01*sj6);
IkReal x10183=(r21*sj6);
IkReal x10184=(r11*sj6);
IkReal x10185=((1.0)*x10180);
IkReal x10186=((1.0)*x10181);
IkReal x10187=(cj6*x10181);
evalcond[0]=((((-1.0)*r22*x10186))+((x10180*x10183))+(((-1.0)*cj6*r20*x10185)));
evalcond[1]=((((-1.0)*cj6*r10*x10185))+(((-1.0)*r12*x10186))+((x10180*x10184)));
evalcond[2]=((((-1.0)*x10183*x10186))+((r20*x10187))+(((-1.0)*r22*x10185)));
evalcond[3]=((((-1.0)*r02*x10185))+(((-1.0)*x10182*x10186))+((r00*x10187)));
evalcond[4]=((1.0)+(((-1.0)*r02*x10186))+(((-1.0)*cj6*r00*x10185))+((x10180*x10182)));
evalcond[5]=((1.0)+((r10*x10187))+(((-1.0)*r12*x10185))+(((-1.0)*x10184*x10186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
CheckValue<IkReal> x10189=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x10189.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10188.value)+(((1.5707963267949)*(x10189.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10190=IKsin(j5);
IkReal x10191=IKcos(j5);
IkReal x10192=(r01*sj6);
IkReal x10193=(r21*sj6);
IkReal x10194=(r11*sj6);
IkReal x10195=((1.0)*x10190);
IkReal x10196=((1.0)*x10191);
IkReal x10197=(cj6*x10191);
evalcond[0]=((((-1.0)*r22*x10196))+(((-1.0)*cj6*r20*x10195))+((x10190*x10193)));
evalcond[1]=((((-1.0)*cj6*r10*x10195))+(((-1.0)*r12*x10196))+((x10190*x10194)));
evalcond[2]=(((r20*x10197))+(((-1.0)*x10193*x10196))+(((-1.0)*r22*x10195)));
evalcond[3]=((((-1.0)*r02*x10195))+((r00*x10197))+(((-1.0)*x10192*x10196)));
evalcond[4]=((1.0)+(((-1.0)*r02*x10196))+(((-1.0)*cj6*r00*x10195))+((x10190*x10192)));
evalcond[5]=((1.0)+((r10*x10197))+(((-1.0)*x10194*x10196))+(((-1.0)*r12*x10195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10198=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x10198;
j5eval[1]=IKsign(x10198);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10199=((1.0)*cj6);
IkReal x10200=((((-1.0)*r10*sj6))+(((-1.0)*r11*x10199)));
j5eval[0]=x10200;
j5eval[1]=IKsign(x10200);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x10199)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10201=cj6*cj6;
IkReal x10202=r11*r11;
IkReal x10203=(r11*sj6);
IkReal x10204=(cj6*r10);
IkReal x10205=((r12*r12)+((x10201*(r10*r10)))+(((-1.0)*x10201*x10202))+x10202+(((-2.0)*x10203*x10204)));
j5eval[0]=x10205;
j5eval[1]=IKsign(x10205);
j5eval[2]=((IKabs(((((-1.0)*x10204))+x10203)))+(IKabs(r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10206=cj6*cj6;
IkReal x10207=r11*r11;
IkReal x10208=(r11*sj6);
IkReal x10209=(cj6*r10);
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10209))+x10208)),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
CheckValue<IkReal> x10211=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10208*x10209))+((x10206*(r10*r10)))+(((-1.0)*x10206*x10207))+x10207)),-1);
if(!x10211.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10210.value)+(((1.5707963267949)*(x10211.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10212=IKsin(j5);
IkReal x10213=IKcos(j5);
IkReal x10214=(r01*sj6);
IkReal x10215=(r21*sj6);
IkReal x10216=(r11*sj6);
IkReal x10217=((1.0)*x10212);
IkReal x10218=((1.0)*x10213);
IkReal x10219=(cj6*x10213);
evalcond[0]=((((-1.0)*r22*x10218))+(((-1.0)*cj6*r20*x10217))+((x10212*x10215)));
evalcond[1]=((((-1.0)*cj6*r10*x10217))+(((-1.0)*r12*x10218))+((x10212*x10216)));
evalcond[2]=(((r20*x10219))+(((-1.0)*r22*x10217))+(((-1.0)*x10215*x10218)));
evalcond[3]=((((-1.0)*x10214*x10218))+((r00*x10219))+(((-1.0)*r02*x10217)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x10218))+(((-1.0)*cj6*r00*x10217))+((x10212*x10214)));
evalcond[5]=((1.0)+((r10*x10219))+(((-1.0)*x10216*x10218))+(((-1.0)*r12*x10217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10220=((1.0)*cj6);
CheckValue<IkReal> x10221 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10220))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10221.valid){
continue;
}
CheckValue<IkReal> x10222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x10220)))),-1);
if(!x10222.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10221.value)+(((1.5707963267949)*(x10222.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10223=IKsin(j5);
IkReal x10224=IKcos(j5);
IkReal x10225=(r01*sj6);
IkReal x10226=(r21*sj6);
IkReal x10227=(r11*sj6);
IkReal x10228=((1.0)*x10223);
IkReal x10229=((1.0)*x10224);
IkReal x10230=(cj6*x10224);
evalcond[0]=(((x10223*x10226))+(((-1.0)*cj6*r20*x10228))+(((-1.0)*r22*x10229)));
evalcond[1]=(((x10223*x10227))+(((-1.0)*cj6*r10*x10228))+(((-1.0)*r12*x10229)));
evalcond[2]=((((-1.0)*x10226*x10229))+(((-1.0)*r22*x10228))+((r20*x10230)));
evalcond[3]=((((-1.0)*r02*x10228))+(((-1.0)*x10225*x10229))+((r00*x10230)));
evalcond[4]=((-1.0)+((x10223*x10225))+(((-1.0)*r02*x10229))+(((-1.0)*cj6*r00*x10228)));
evalcond[5]=((1.0)+(((-1.0)*x10227*x10229))+(((-1.0)*r12*x10228))+((r10*x10230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10231=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x10231.valid){
continue;
}
CheckValue<IkReal> x10232 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10232.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10231.value)))+(x10232.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10233=IKsin(j5);
IkReal x10234=IKcos(j5);
IkReal x10235=(r01*sj6);
IkReal x10236=(r21*sj6);
IkReal x10237=(r11*sj6);
IkReal x10238=((1.0)*x10233);
IkReal x10239=((1.0)*x10234);
IkReal x10240=(cj6*x10234);
evalcond[0]=((((-1.0)*cj6*r20*x10238))+(((-1.0)*r22*x10239))+((x10233*x10236)));
evalcond[1]=((((-1.0)*cj6*r10*x10238))+(((-1.0)*r12*x10239))+((x10233*x10237)));
evalcond[2]=((((-1.0)*x10236*x10239))+((r20*x10240))+(((-1.0)*r22*x10238)));
evalcond[3]=((((-1.0)*x10235*x10239))+((r00*x10240))+(((-1.0)*r02*x10238)));
evalcond[4]=((-1.0)+(((-1.0)*cj6*r00*x10238))+(((-1.0)*r02*x10239))+((x10233*x10235)));
evalcond[5]=((1.0)+(((-1.0)*x10237*x10239))+((r10*x10240))+(((-1.0)*r12*x10238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10241=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10241);
rxp1_1=(px*r21);
rxp1_2=(r11*x10241);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x10242=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10242);
rxp1_1=(px*r21);
rxp1_2=(r11*x10242);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10243=IKPowWithIntegerCheck(((((-1.0)*r11*sj6))+((cj6*r10))),-1);
if(!x10243.valid){
continue;
}
cj5array[0]=((-1.0)*(x10243.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10244=IKsin(j5);
IkReal x10245=IKcos(j5);
IkReal x10246=(r21*sj6);
IkReal x10247=((1.0)*x10245);
IkReal x10248=((1.0)*cj6*x10244);
evalcond[0]=((-1.0)*r02*x10244);
evalcond[1]=(cj3+(((-1.0)*r02*x10247)));
evalcond[2]=((((-1.0)*r20*x10248))+((x10244*x10246)));
evalcond[3]=(((r11*sj6*x10244))+(((-1.0)*r10*x10248)));
evalcond[4]=(((cj6*r20*x10245))+(((-1.0)*x10246*x10247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10249=IKPowWithIntegerCheck(r02,-1);
if(!x10249.valid){
continue;
}
cj5array[0]=(cj3*(x10249.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10250=IKsin(j5);
IkReal x10251=IKcos(j5);
IkReal x10252=(r21*sj6);
IkReal x10253=(r11*sj6);
IkReal x10254=((1.0)*x10251);
IkReal x10255=(cj6*x10251);
IkReal x10256=((1.0)*cj6*x10250);
evalcond[0]=((-1.0)*r02*x10250);
evalcond[1]=((((-1.0)*r20*x10256))+((x10250*x10252)));
evalcond[2]=((((-1.0)*r10*x10256))+((x10250*x10253)));
evalcond[3]=((((-1.0)*x10252*x10254))+((r20*x10255)));
evalcond[4]=((1.0)+((r10*x10255))+(((-1.0)*x10253*x10254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10257=cj6*cj6;
IkReal x10258=r11*r11;
IkReal x10259=(r11*sj6);
IkReal x10260=(cj6*r10);
CheckValue<IkReal> x10261=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x10257*(r10*r10)))+(((-2.0)*x10259*x10260))+x10258+(((-1.0)*x10257*x10258)))),-1);
if(!x10261.valid){
continue;
}
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10260))+x10259)),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10261.value)))+(x10262.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10263=IKsin(j5);
IkReal x10264=IKcos(j5);
IkReal x10265=(r01*sj6);
IkReal x10266=(r21*sj6);
IkReal x10267=(r11*sj6);
IkReal x10268=((1.0)*x10263);
IkReal x10269=((1.0)*x10264);
IkReal x10270=(cj6*x10264);
evalcond[0]=(((x10263*x10267))+(((-1.0)*r12*x10269))+(((-1.0)*cj6*r10*x10268)));
evalcond[1]=((((-1.0)*r22*x10268))+(((-1.0)*x10266*x10269))+((r20*x10270)));
evalcond[2]=(((r00*x10270))+(((-1.0)*r02*x10268))+(((-1.0)*x10265*x10269)));
evalcond[3]=((((-1.0)*r22*x10269))+sj3+((x10263*x10266))+(((-1.0)*cj6*r20*x10268)));
evalcond[4]=(cj3+((x10263*x10265))+(((-1.0)*r02*x10269))+(((-1.0)*cj6*r00*x10268)));
evalcond[5]=((1.0)+(((-1.0)*x10267*x10269))+(((-1.0)*r12*x10268))+((r10*x10270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10271=((1.0)*cj6);
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10271))+(((-1.0)*r20*sj6)))),-1);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal((cj3*r12)),IkReal((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x10271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10272.value)))+(x10273.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10274=IKsin(j5);
IkReal x10275=IKcos(j5);
IkReal x10276=(r01*sj6);
IkReal x10277=(r21*sj6);
IkReal x10278=(r11*sj6);
IkReal x10279=((1.0)*x10274);
IkReal x10280=((1.0)*x10275);
IkReal x10281=(cj6*x10275);
evalcond[0]=((((-1.0)*r12*x10280))+(((-1.0)*cj6*r10*x10279))+((x10274*x10278)));
evalcond[1]=(((r20*x10281))+(((-1.0)*r22*x10279))+(((-1.0)*x10277*x10280)));
evalcond[2]=((((-1.0)*x10276*x10280))+(((-1.0)*r02*x10279))+((r00*x10281)));
evalcond[3]=(sj3+(((-1.0)*cj6*r20*x10279))+((x10274*x10277))+(((-1.0)*r22*x10280)));
evalcond[4]=((((-1.0)*cj6*r00*x10279))+cj3+((x10274*x10276))+(((-1.0)*r02*x10280)));
evalcond[5]=((1.0)+(((-1.0)*x10278*x10280))+(((-1.0)*r12*x10279))+((r10*x10281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*cj6*r10*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
CheckValue<IkReal> x10283=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x10283.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10282.value)+(((1.5707963267949)*(x10283.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10284=IKsin(j5);
IkReal x10285=IKcos(j5);
IkReal x10286=(r01*sj6);
IkReal x10287=(r21*sj6);
IkReal x10288=(r11*sj6);
IkReal x10289=((1.0)*x10284);
IkReal x10290=((1.0)*x10285);
IkReal x10291=(cj6*x10285);
evalcond[0]=((((-1.0)*cj6*r10*x10289))+(((-1.0)*r12*x10290))+((x10284*x10288)));
evalcond[1]=(((r20*x10291))+(((-1.0)*r22*x10289))+(((-1.0)*x10287*x10290)));
evalcond[2]=((((-1.0)*x10286*x10290))+(((-1.0)*r02*x10289))+((r00*x10291)));
evalcond[3]=((((-1.0)*cj6*r20*x10289))+sj3+(((-1.0)*r22*x10290))+((x10284*x10287)));
evalcond[4]=((((-1.0)*cj6*r00*x10289))+cj3+(((-1.0)*r02*x10290))+((x10284*x10286)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10289))+((r10*x10291))+(((-1.0)*x10288*x10290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x10292=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x10292;
j5eval[1]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs(r22)));
j5eval[2]=IKsign(x10292);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x10293=((1.0)*sj6);
IkReal x10294=((((-1.0)*cj6*r21))+(((-1.0)*r20*x10293)));
j5eval[0]=x10294;
j5eval[1]=((IKabs(((((-1.0)*r01*x10293))+((cj6*r00)))))+(IKabs(r02)));
j5eval[2]=IKsign(x10294);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
IkReal x10295=((1.0)*cj6);
IkReal x10296=((((-1.0)*r00*sj6))+(((-1.0)*r01*x10295)));
j5eval[0]=x10296;
j5eval[1]=((IKabs((((r11*sj3*sj6))+(((-1.0)*r10*sj3*x10295)))))+(IKabs((r12*sj3))));
j5eval[2]=IKsign(x10296);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10297=(((cj6*r21))+((r20*sj6)));
j5eval[0]=x10297;
j5eval[1]=IKsign(x10297);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10298=((1.0)*cj6);
IkReal x10299=((((-1.0)*r10*sj6))+(((-1.0)*r11*x10298)));
j5eval[0]=x10299;
j5eval[1]=IKsign(x10299);
j5eval[2]=((IKabs((((r21*sj6))+(((-1.0)*r20*x10298)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x10300=cj6*cj6;
IkReal x10301=r11*r11;
IkReal x10302=(r11*sj6);
IkReal x10303=(cj6*r10);
IkReal x10304=((r12*r12)+(((-1.0)*x10300*x10301))+((x10300*(r10*r10)))+x10301+(((-2.0)*x10302*x10303)));
j5eval[0]=x10304;
j5eval[1]=IKsign(x10304);
j5eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x10303))+x10302))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10305=cj6*cj6;
IkReal x10306=r11*r11;
IkReal x10307=(r11*sj6);
IkReal x10308=(cj6*r10);
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10308))+x10307)),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
CheckValue<IkReal> x10310=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x10305*x10306))+((x10305*(r10*r10)))+x10306+(((-2.0)*x10307*x10308)))),-1);
if(!x10310.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10309.value)+(((1.5707963267949)*(x10310.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10311=IKsin(j5);
IkReal x10312=IKcos(j5);
IkReal x10313=(r01*sj6);
IkReal x10314=(r21*sj6);
IkReal x10315=(r11*sj6);
IkReal x10316=((1.0)*x10311);
IkReal x10317=((1.0)*x10312);
IkReal x10318=(cj6*x10312);
evalcond[0]=(((x10311*x10314))+(((-1.0)*cj6*r20*x10316))+(((-1.0)*r22*x10317)));
evalcond[1]=((((-1.0)*cj6*r10*x10316))+(((-1.0)*r12*x10317))+((x10311*x10315)));
evalcond[2]=((((-1.0)*x10314*x10317))+(((-1.0)*r22*x10316))+((r20*x10318)));
evalcond[3]=((((-1.0)*x10313*x10317))+(((-1.0)*r02*x10316))+((r00*x10318)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x10317))+((x10311*x10313))+(((-1.0)*cj6*r00*x10316)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10316))+((r10*x10318))+(((-1.0)*x10315*x10317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10319=((1.0)*cj6);
CheckValue<IkReal> x10320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x10319)))),-1);
if(!x10320.valid){
continue;
}
CheckValue<IkReal> x10321 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj6))+(((-1.0)*r20*x10319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10321.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10320.value)))+(x10321.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10322=IKsin(j5);
IkReal x10323=IKcos(j5);
IkReal x10324=(r01*sj6);
IkReal x10325=(r21*sj6);
IkReal x10326=(r11*sj6);
IkReal x10327=((1.0)*x10322);
IkReal x10328=((1.0)*x10323);
IkReal x10329=(cj6*x10323);
evalcond[0]=(((x10322*x10325))+(((-1.0)*r22*x10328))+(((-1.0)*cj6*r20*x10327)));
evalcond[1]=(((x10322*x10326))+(((-1.0)*r12*x10328))+(((-1.0)*cj6*r10*x10327)));
evalcond[2]=((((-1.0)*r22*x10327))+((r20*x10329))+(((-1.0)*x10325*x10328)));
evalcond[3]=((((-1.0)*r02*x10327))+(((-1.0)*x10324*x10328))+((r00*x10329)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x10328))+((x10322*x10324))+(((-1.0)*cj6*r00*x10327)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10327))+((r10*x10329))+(((-1.0)*x10326*x10328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10330=IKPowWithIntegerCheck(IKsign((((cj6*r21))+((r20*sj6)))),-1);
if(!x10330.valid){
continue;
}
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10330.value)))+(x10331.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10332=IKsin(j5);
IkReal x10333=IKcos(j5);
IkReal x10334=(r01*sj6);
IkReal x10335=(r21*sj6);
IkReal x10336=(r11*sj6);
IkReal x10337=((1.0)*x10332);
IkReal x10338=((1.0)*x10333);
IkReal x10339=(cj6*x10333);
evalcond[0]=((((-1.0)*r22*x10338))+(((-1.0)*cj6*r20*x10337))+((x10332*x10335)));
evalcond[1]=((((-1.0)*r12*x10338))+(((-1.0)*cj6*r10*x10337))+((x10332*x10336)));
evalcond[2]=((((-1.0)*r22*x10337))+((r20*x10339))+(((-1.0)*x10335*x10338)));
evalcond[3]=((((-1.0)*x10334*x10338))+((r00*x10339))+(((-1.0)*r02*x10337)));
evalcond[4]=((-1.0)+(((-1.0)*cj6*r00*x10337))+((x10332*x10334))+(((-1.0)*r02*x10338)));
evalcond[5]=((1.0)+(((-1.0)*x10336*x10338))+(((-1.0)*r12*x10337))+((r10*x10339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10340=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x10340;
j5eval[1]=IKsign(x10340);
j5eval[2]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(r22)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10341=((1.0)*cj6);
IkReal x10342=((((-1.0)*r21*x10341))+(((-1.0)*r20*sj6)));
j5eval[0]=x10342;
j5eval[1]=((IKabs(((((-1.0)*r10*x10341))+((r11*sj6)))))+(IKabs(r12)));
j5eval[2]=IKsign(x10342);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x10343=cj6*cj6;
IkReal x10344=r11*r11;
IkReal x10345=(r11*sj6);
IkReal x10346=(cj6*r10);
IkReal x10347=((r12*r12)+(((-2.0)*x10345*x10346))+(((-1.0)*x10343*x10344))+x10344+((x10343*(r10*r10))));
j5eval[0]=x10347;
j5eval[1]=IKsign(x10347);
j5eval[2]=((IKabs(r12))+(IKabs((x10345+(((-1.0)*x10346))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10348=cj6*cj6;
IkReal x10349=r11*r11;
IkReal x10350=(r11*sj6);
IkReal x10351=(cj6*r10);
CheckValue<IkReal> x10352 = IKatan2WithCheck(IkReal(r12),IkReal((x10350+(((-1.0)*x10351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10352.valid){
continue;
}
CheckValue<IkReal> x10353=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x10348*x10349))+(((-2.0)*x10350*x10351))+x10349+((x10348*(r10*r10))))),-1);
if(!x10353.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10352.value)+(((1.5707963267949)*(x10353.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10354=IKsin(j5);
IkReal x10355=IKcos(j5);
IkReal x10356=(r01*sj6);
IkReal x10357=(r21*sj6);
IkReal x10358=(r11*sj6);
IkReal x10359=((1.0)*x10354);
IkReal x10360=((1.0)*x10355);
IkReal x10361=(cj6*x10355);
evalcond[0]=(((x10354*x10357))+(((-1.0)*r22*x10360))+(((-1.0)*cj6*r20*x10359)));
evalcond[1]=(((x10354*x10358))+(((-1.0)*r12*x10360))+(((-1.0)*cj6*r10*x10359)));
evalcond[2]=((((-1.0)*x10357*x10360))+(((-1.0)*r22*x10359))+((r20*x10361)));
evalcond[3]=(((r00*x10361))+(((-1.0)*x10356*x10360))+(((-1.0)*r02*x10359)));
evalcond[4]=((1.0)+((x10354*x10356))+(((-1.0)*r02*x10360))+(((-1.0)*cj6*r00*x10359)));
evalcond[5]=((1.0)+(((-1.0)*x10358*x10360))+((r10*x10361))+(((-1.0)*r12*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10362=((1.0)*cj6);
CheckValue<IkReal> x10363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10362))+(((-1.0)*r20*sj6)))),-1);
if(!x10363.valid){
continue;
}
CheckValue<IkReal> x10364 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj6))+(((-1.0)*r10*x10362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10364.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10363.value)))+(x10364.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10365=IKsin(j5);
IkReal x10366=IKcos(j5);
IkReal x10367=(r01*sj6);
IkReal x10368=(r21*sj6);
IkReal x10369=(r11*sj6);
IkReal x10370=((1.0)*x10365);
IkReal x10371=((1.0)*x10366);
IkReal x10372=(cj6*x10366);
evalcond[0]=(((x10365*x10368))+(((-1.0)*cj6*r20*x10370))+(((-1.0)*r22*x10371)));
evalcond[1]=(((x10365*x10369))+(((-1.0)*r12*x10371))+(((-1.0)*cj6*r10*x10370)));
evalcond[2]=((((-1.0)*x10368*x10371))+((r20*x10372))+(((-1.0)*r22*x10370)));
evalcond[3]=(((r00*x10372))+(((-1.0)*r02*x10370))+(((-1.0)*x10367*x10371)));
evalcond[4]=((1.0)+(((-1.0)*r02*x10371))+((x10365*x10367))+(((-1.0)*cj6*r00*x10370)));
evalcond[5]=((1.0)+(((-1.0)*x10369*x10371))+((r10*x10372))+(((-1.0)*r12*x10370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
CheckValue<IkReal> x10374=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x10374.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10373.value)+(((1.5707963267949)*(x10374.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10375=IKsin(j5);
IkReal x10376=IKcos(j5);
IkReal x10377=(r01*sj6);
IkReal x10378=(r21*sj6);
IkReal x10379=(r11*sj6);
IkReal x10380=((1.0)*x10375);
IkReal x10381=((1.0)*x10376);
IkReal x10382=(cj6*x10376);
evalcond[0]=((((-1.0)*cj6*r20*x10380))+((x10375*x10378))+(((-1.0)*r22*x10381)));
evalcond[1]=((((-1.0)*cj6*r10*x10380))+(((-1.0)*r12*x10381))+((x10375*x10379)));
evalcond[2]=((((-1.0)*x10378*x10381))+(((-1.0)*r22*x10380))+((r20*x10382)));
evalcond[3]=((((-1.0)*x10377*x10381))+(((-1.0)*r02*x10380))+((r00*x10382)));
evalcond[4]=((1.0)+(((-1.0)*r02*x10381))+((x10375*x10377))+(((-1.0)*cj6*r00*x10380)));
evalcond[5]=((1.0)+(((-1.0)*x10379*x10381))+((r10*x10382))+(((-1.0)*r12*x10380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10383=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10383);
rxp1_1=(px*r21);
rxp1_2=(r11*x10383);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x10384=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10384);
rxp1_1=(px*r21);
rxp1_2=(r11*x10384);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10386=IKPowWithIntegerCheck(r02,-1);
if(!x10386.valid){
continue;
}
IkReal x10385=x10386.value;
cj5array[0]=((((-3.18106629342156)*px*x10385))+(((1.33846545362005)*x10385)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10387=IKsin(j5);
IkReal x10388=IKcos(j5);
IkReal x10389=(r21*sj6);
IkReal x10390=(r11*sj6);
IkReal x10391=((1.0)*x10388);
IkReal x10392=(cj6*x10388);
IkReal x10393=((1.0)*cj6*x10387);
evalcond[0]=((-1.0)*r02*x10387);
evalcond[1]=((((-1.0)*r20*x10393))+((x10387*x10389)));
evalcond[2]=((((-1.0)*r10*x10393))+((x10387*x10390)));
evalcond[3]=((((-1.0)*x10389*x10391))+((r20*x10392)));
evalcond[4]=((1.0)+((r10*x10392))+(((-1.0)*x10390*x10391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10394=IKPowWithIntegerCheck(((((-1.0)*r11*sj6))+((cj6*r10))),-1);
if(!x10394.valid){
continue;
}
cj5array[0]=((-1.0)*(x10394.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10395=IKsin(j5);
IkReal x10396=IKcos(j5);
IkReal x10397=(r21*sj6);
IkReal x10398=(cj6*r20);
IkReal x10399=((1.0)*x10396);
IkReal x10400=((1.0)*x10395);
evalcond[0]=((-1.0)*r02*x10395);
evalcond[1]=((1.33846545362005)+(((-1.0)*r02*x10399))+(((-3.18106629342156)*px)));
evalcond[2]=(((x10395*x10397))+(((-1.0)*x10398*x10400)));
evalcond[3]=(((r11*sj6*x10395))+(((-1.0)*cj6*r10*x10400)));
evalcond[4]=((((-1.0)*x10397*x10399))+((x10396*x10398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10401=((1.0)*cj6);
CheckValue<IkReal> x10402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6))+(((-1.0)*r01*x10401)))),-1);
if(!x10402.valid){
continue;
}
CheckValue<IkReal> x10403 = IKatan2WithCheck(IkReal((r12*sj3)),IkReal((((r11*sj3*sj6))+(((-1.0)*r10*sj3*x10401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10403.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10402.value)))+(x10403.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10404=IKsin(j5);
IkReal x10405=IKcos(j5);
IkReal x10406=(r01*sj6);
IkReal x10407=(r21*sj6);
IkReal x10408=(r11*sj6);
IkReal x10409=((1.0)*x10404);
IkReal x10410=((1.0)*x10405);
IkReal x10411=(cj6*x10405);
evalcond[0]=((((-1.0)*r12*x10410))+((x10404*x10408))+(((-1.0)*cj6*r10*x10409)));
evalcond[1]=((((-1.0)*x10407*x10410))+(((-1.0)*r22*x10409))+((r20*x10411)));
evalcond[2]=(((r00*x10411))+(((-1.0)*x10406*x10410))+(((-1.0)*r02*x10409)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10409))+((r10*x10411))+(((-1.0)*x10408*x10410)));
evalcond[4]=((((-1.0)*sj3))+(((-1.0)*cj6*r20*x10409))+((x10404*x10407))+(((-1.0)*r22*x10410)));
evalcond[5]=((((-1.0)*r02*x10410))+((x10404*x10406))+(((-1.0)*cj6*r00*x10409))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10412=((1.0)*sj6);
CheckValue<IkReal> x10413=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21))+(((-1.0)*r20*x10412)))),-1);
if(!x10413.valid){
continue;
}
CheckValue<IkReal> x10414 = IKatan2WithCheck(IkReal((((cj6*r00))+(((-1.0)*r01*x10412)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10414.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10413.value)))+(x10414.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10415=IKsin(j5);
IkReal x10416=IKcos(j5);
IkReal x10417=(r01*sj6);
IkReal x10418=(r21*sj6);
IkReal x10419=(r11*sj6);
IkReal x10420=((1.0)*x10415);
IkReal x10421=((1.0)*x10416);
IkReal x10422=(cj6*x10416);
evalcond[0]=(((x10415*x10419))+(((-1.0)*r12*x10421))+(((-1.0)*cj6*r10*x10420)));
evalcond[1]=((((-1.0)*x10418*x10421))+(((-1.0)*r22*x10420))+((r20*x10422)));
evalcond[2]=(((r00*x10422))+(((-1.0)*x10417*x10421))+(((-1.0)*r02*x10420)));
evalcond[3]=((1.0)+(((-1.0)*x10419*x10421))+(((-1.0)*r12*x10420))+((r10*x10422)));
evalcond[4]=((((-1.0)*sj3))+((x10415*x10418))+(((-1.0)*cj6*r20*x10420))+(((-1.0)*r22*x10421)));
evalcond[5]=(((x10415*x10417))+(((-1.0)*r02*x10421))+(((-1.0)*cj6*r00*x10420))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10423=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x10423.valid){
continue;
}
CheckValue<IkReal> x10424 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10424.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10423.value)))+(x10424.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10425=IKsin(j5);
IkReal x10426=IKcos(j5);
IkReal x10427=(r01*sj6);
IkReal x10428=(r21*sj6);
IkReal x10429=(r11*sj6);
IkReal x10430=((1.0)*x10425);
IkReal x10431=((1.0)*x10426);
IkReal x10432=(cj6*x10426);
evalcond[0]=((((-1.0)*cj6*r10*x10430))+((x10425*x10429))+(((-1.0)*r12*x10431)));
evalcond[1]=((((-1.0)*x10428*x10431))+(((-1.0)*r22*x10430))+((r20*x10432)));
evalcond[2]=((((-1.0)*x10427*x10431))+(((-1.0)*r02*x10430))+((r00*x10432)));
evalcond[3]=((1.0)+((r10*x10432))+(((-1.0)*r12*x10430))+(((-1.0)*x10429*x10431)));
evalcond[4]=((((-1.0)*sj3))+((x10425*x10428))+(((-1.0)*cj6*r20*x10430))+(((-1.0)*r22*x10431)));
evalcond[5]=(((x10425*x10427))+(((-1.0)*r02*x10431))+(((-1.0)*cj6*r00*x10430))+(((-1.0)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x10433=((1.0)*sj6);
IkReal x10434=((((-1.0)*cj6*r01))+(((-1.0)*r00*x10433)));
j5eval[0]=x10434;
j5eval[1]=((IKabs(((((-1.0)*r21*x10433))+((cj6*r20)))))+(IKabs(r22)));
j5eval[2]=IKsign(x10434);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x10435=((1.0)*cj6);
IkReal x10436=((((-1.0)*r21*x10435))+(((-1.0)*r20*sj6)));
j5eval[0]=x10436;
j5eval[1]=((IKabs((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x10435)))))+(IKabs((cj3*r12))));
j5eval[2]=IKsign(x10436);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
IkReal x10437=cj6*cj6;
IkReal x10438=r11*r11;
IkReal x10439=(r11*sj6);
IkReal x10440=(cj6*r10);
IkReal x10441=(((x10437*x10438))+(((-1.0)*(r12*r12)))+(((2.0)*x10439*x10440))+(((-1.0)*x10438))+(((-1.0)*x10437*(r10*r10))));
j5eval[0]=x10441;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10440))+x10439))));
j5eval[2]=IKsign(x10441);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10442=(((r10*sj6))+((cj6*r11)));
j5eval[0]=x10442;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j5eval[2]=IKsign(x10442);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10443=((1.0)*cj6);
IkReal x10444=((((-1.0)*r00*sj6))+(((-1.0)*r01*x10443)));
j5eval[0]=x10444;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x10443))+((r11*sj6))))));
j5eval[2]=IKsign(x10444);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10445=cj6*cj6;
IkReal x10446=r11*r11;
IkReal x10447=(r11*sj6);
IkReal x10448=(cj6*r10);
IkReal x10449=(((x10445*x10446))+(((-1.0)*x10446))+(((2.0)*x10447*x10448))+(((-1.0)*x10445*(r10*r10)))+(((-1.0)*(r12*r12))));
j5eval[0]=x10449;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10448))+x10447))));
j5eval[2]=IKsign(x10449);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10450=cj6*cj6;
IkReal x10451=r11*r11;
IkReal x10452=(r11*sj6);
IkReal x10453=(cj6*r10);
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10453))+x10452)),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
CheckValue<IkReal> x10455=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10451))+(((2.0)*x10452*x10453))+(((-1.0)*x10450*(r10*r10)))+(((-1.0)*(r12*r12)))+((x10450*x10451)))),-1);
if(!x10455.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10454.value)+(((1.5707963267949)*(x10455.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10456=IKsin(j5);
IkReal x10457=IKcos(j5);
IkReal x10458=(r01*sj6);
IkReal x10459=(cj6*r10);
IkReal x10460=(r21*sj6);
IkReal x10461=(r11*sj6);
IkReal x10462=((1.0)*x10456);
IkReal x10463=((1.0)*x10457);
IkReal x10464=(cj6*x10457);
evalcond[0]=((((-1.0)*x10459*x10462))+((x10456*x10461))+(((-1.0)*r12*x10463)));
evalcond[1]=((((-1.0)*r02*x10463))+(((-1.0)*cj6*r00*x10462))+((x10456*x10458)));
evalcond[2]=(((r20*x10464))+(((-1.0)*x10460*x10463))+(((-1.0)*r22*x10462)));
evalcond[3]=((((-1.0)*r02*x10462))+((r00*x10464))+(((-1.0)*x10458*x10463)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x10463))+(((-1.0)*cj6*r20*x10462))+((x10456*x10460)));
evalcond[5]=((-1.0)+(((-1.0)*x10461*x10463))+((x10457*x10459))+(((-1.0)*r12*x10462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10465=((1.0)*cj6);
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj6))+(((-1.0)*r10*x10465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10465))+(((-1.0)*r00*sj6)))),-1);
if(!x10467.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10466.value)+(((1.5707963267949)*(x10467.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10468=IKsin(j5);
IkReal x10469=IKcos(j5);
IkReal x10470=(r01*sj6);
IkReal x10471=(cj6*r10);
IkReal x10472=(r21*sj6);
IkReal x10473=(r11*sj6);
IkReal x10474=((1.0)*x10468);
IkReal x10475=((1.0)*x10469);
IkReal x10476=(cj6*x10469);
evalcond[0]=(((x10468*x10473))+(((-1.0)*x10471*x10474))+(((-1.0)*r12*x10475)));
evalcond[1]=((((-1.0)*r02*x10475))+(((-1.0)*cj6*r00*x10474))+((x10468*x10470)));
evalcond[2]=(((r20*x10476))+(((-1.0)*x10472*x10475))+(((-1.0)*r22*x10474)));
evalcond[3]=((((-1.0)*r02*x10474))+(((-1.0)*x10470*x10475))+((r00*x10476)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x10475))+(((-1.0)*cj6*r20*x10474))+((x10468*x10472)));
evalcond[5]=((-1.0)+(((-1.0)*x10473*x10475))+(((-1.0)*r12*x10474))+((x10469*x10471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10477 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10477.valid){
continue;
}
CheckValue<IkReal> x10478=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x10478.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10477.value)+(((1.5707963267949)*(x10478.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10479=IKsin(j5);
IkReal x10480=IKcos(j5);
IkReal x10481=(r01*sj6);
IkReal x10482=(cj6*r10);
IkReal x10483=(r21*sj6);
IkReal x10484=(r11*sj6);
IkReal x10485=((1.0)*x10479);
IkReal x10486=((1.0)*x10480);
IkReal x10487=(cj6*x10480);
evalcond[0]=(((x10479*x10484))+(((-1.0)*r12*x10486))+(((-1.0)*x10482*x10485)));
evalcond[1]=(((x10479*x10481))+(((-1.0)*r02*x10486))+(((-1.0)*cj6*r00*x10485)));
evalcond[2]=((((-1.0)*r22*x10485))+(((-1.0)*x10483*x10486))+((r20*x10487)));
evalcond[3]=(((r00*x10487))+(((-1.0)*x10481*x10486))+(((-1.0)*r02*x10485)));
evalcond[4]=((-1.0)+((x10479*x10483))+(((-1.0)*r22*x10486))+(((-1.0)*cj6*r20*x10485)));
evalcond[5]=((-1.0)+((x10480*x10482))+(((-1.0)*r12*x10485))+(((-1.0)*x10484*x10486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10488=(((r00*sj6))+((cj6*r01)));
j5eval[0]=x10488;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j5eval[2]=IKsign(x10488);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10489=((1.0)*cj6);
IkReal x10490=((((-1.0)*r10*sj6))+(((-1.0)*r11*x10489)));
j5eval[0]=x10490;
j5eval[1]=((IKabs(r02))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10489))))));
j5eval[2]=IKsign(x10490);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10491=cj6*cj6;
IkReal x10492=r11*r11;
IkReal x10493=(r11*sj6);
IkReal x10494=(cj6*r10);
IkReal x10495=((((-1.0)*x10492))+(((2.0)*x10493*x10494))+(((-1.0)*x10491*(r10*r10)))+(((-1.0)*(r12*r12)))+((x10491*x10492)));
j5eval[0]=x10495;
j5eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10494))+x10493))));
j5eval[2]=IKsign(x10495);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10496=cj6*cj6;
IkReal x10497=r11*r11;
IkReal x10498=(r11*sj6);
IkReal x10499=(cj6*r10);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10499))+x10498)),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
CheckValue<IkReal> x10501=IKPowWithIntegerCheck(IKsign(((((2.0)*x10498*x10499))+(((-1.0)*x10497))+(((-1.0)*x10496*(r10*r10)))+((x10496*x10497))+(((-1.0)*(r12*r12))))),-1);
if(!x10501.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10500.value)+(((1.5707963267949)*(x10501.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10502=IKsin(j5);
IkReal x10503=IKcos(j5);
IkReal x10504=(r01*sj6);
IkReal x10505=(cj6*r10);
IkReal x10506=(r21*sj6);
IkReal x10507=(r11*sj6);
IkReal x10508=((1.0)*x10502);
IkReal x10509=((1.0)*x10503);
IkReal x10510=(cj6*x10503);
evalcond[0]=((((-1.0)*r12*x10509))+(((-1.0)*x10505*x10508))+((x10502*x10507)));
evalcond[1]=((((-1.0)*cj6*r00*x10508))+(((-1.0)*r02*x10509))+((x10502*x10504)));
evalcond[2]=((((-1.0)*r22*x10508))+((r20*x10510))+(((-1.0)*x10506*x10509)));
evalcond[3]=(((r00*x10510))+(((-1.0)*x10504*x10509))+(((-1.0)*r02*x10508)));
evalcond[4]=((1.0)+(((-1.0)*r22*x10509))+((x10502*x10506))+(((-1.0)*cj6*r20*x10508)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x10508))+(((-1.0)*x10507*x10509))+((x10503*x10505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10511=((1.0)*cj6);
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6))+(((-1.0)*r11*x10511)))),-1);
if(!x10512.valid){
continue;
}
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10511))+((r01*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10512.value)))+(x10513.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10514=IKsin(j5);
IkReal x10515=IKcos(j5);
IkReal x10516=(r01*sj6);
IkReal x10517=(cj6*r10);
IkReal x10518=(r21*sj6);
IkReal x10519=(r11*sj6);
IkReal x10520=((1.0)*x10514);
IkReal x10521=((1.0)*x10515);
IkReal x10522=(cj6*x10515);
evalcond[0]=((((-1.0)*r12*x10521))+(((-1.0)*x10517*x10520))+((x10514*x10519)));
evalcond[1]=((((-1.0)*r02*x10521))+(((-1.0)*cj6*r00*x10520))+((x10514*x10516)));
evalcond[2]=((((-1.0)*r22*x10520))+(((-1.0)*x10518*x10521))+((r20*x10522)));
evalcond[3]=((((-1.0)*r02*x10520))+((r00*x10522))+(((-1.0)*x10516*x10521)));
evalcond[4]=((1.0)+(((-1.0)*r22*x10521))+((x10514*x10518))+(((-1.0)*cj6*r20*x10520)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x10520))+((x10515*x10517))+(((-1.0)*x10519*x10521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10523=IKPowWithIntegerCheck(IKsign((((r00*sj6))+((cj6*r01)))),-1);
if(!x10523.valid){
continue;
}
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10523.value)))+(x10524.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10525=IKsin(j5);
IkReal x10526=IKcos(j5);
IkReal x10527=(r01*sj6);
IkReal x10528=(cj6*r10);
IkReal x10529=(r21*sj6);
IkReal x10530=(r11*sj6);
IkReal x10531=((1.0)*x10525);
IkReal x10532=((1.0)*x10526);
IkReal x10533=(cj6*x10526);
evalcond[0]=((((-1.0)*r12*x10532))+(((-1.0)*x10528*x10531))+((x10525*x10530)));
evalcond[1]=((((-1.0)*r02*x10532))+(((-1.0)*cj6*r00*x10531))+((x10525*x10527)));
evalcond[2]=((((-1.0)*r22*x10531))+(((-1.0)*x10529*x10532))+((r20*x10533)));
evalcond[3]=((((-1.0)*r02*x10531))+((r00*x10533))+(((-1.0)*x10527*x10532)));
evalcond[4]=((1.0)+(((-1.0)*r22*x10532))+(((-1.0)*cj6*r20*x10531))+((x10525*x10529)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x10531))+(((-1.0)*x10530*x10532))+((x10526*x10528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10534=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10534);
rxp1_1=(px*r21);
rxp1_2=(r11*x10534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x10535=((-1.0)*px);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10535);
rxp1_1=(px*r21);
rxp1_2=(r11*x10535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10536=IKPowWithIntegerCheck(((((-1.0)*r11*sj6))+((cj6*r10))),-1);
if(!x10536.valid){
continue;
}
cj5array[0]=x10536.value;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10537=IKsin(j5);
IkReal x10538=IKcos(j5);
IkReal x10539=(r21*sj6);
IkReal x10540=((1.0)*x10538);
IkReal x10541=((1.0)*cj6*x10537);
evalcond[0]=((-1.0)*r02*x10537);
evalcond[1]=(cj3+(((-1.0)*r02*x10540)));
evalcond[2]=(((x10537*x10539))+(((-1.0)*r20*x10541)));
evalcond[3]=((((-1.0)*r10*x10541))+((r11*sj6*x10537)));
evalcond[4]=(((cj6*r20*x10538))+(((-1.0)*x10539*x10540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x10542=IKPowWithIntegerCheck(r02,-1);
if(!x10542.valid){
continue;
}
cj5array[0]=(cj3*(x10542.value));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x10543=IKsin(j5);
IkReal x10544=IKcos(j5);
IkReal x10545=(r21*sj6);
IkReal x10546=(r11*sj6);
IkReal x10547=((1.0)*x10544);
IkReal x10548=(cj6*x10544);
IkReal x10549=((1.0)*cj6*x10543);
evalcond[0]=((-1.0)*r02*x10543);
evalcond[1]=(((x10543*x10545))+(((-1.0)*r20*x10549)));
evalcond[2]=((((-1.0)*r10*x10549))+((x10543*x10546)));
evalcond[3]=((((-1.0)*x10545*x10547))+((r20*x10548)));
evalcond[4]=((-1.0)+(((-1.0)*x10546*x10547))+((r10*x10548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10550=cj6*cj6;
IkReal x10551=r11*r11;
IkReal x10552=(r11*sj6);
IkReal x10553=(cj6*r10);
CheckValue<IkReal> x10554=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10550*(r10*r10)))+(((2.0)*x10552*x10553))+((x10550*x10551))+(((-1.0)*(r12*r12)))+(((-1.0)*x10551)))),-1);
if(!x10554.valid){
continue;
}
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10553))+x10552)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10554.value)))+(x10555.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10556=IKsin(j5);
IkReal x10557=IKcos(j5);
IkReal x10558=(r01*sj6);
IkReal x10559=(r21*sj6);
IkReal x10560=(r11*sj6);
IkReal x10561=((1.0)*x10556);
IkReal x10562=((1.0)*x10557);
IkReal x10563=(cj6*x10557);
evalcond[0]=((((-1.0)*cj6*r10*x10561))+((x10556*x10560))+(((-1.0)*r12*x10562)));
evalcond[1]=(((r20*x10563))+(((-1.0)*r22*x10561))+(((-1.0)*x10559*x10562)));
evalcond[2]=(((r00*x10563))+(((-1.0)*x10558*x10562))+(((-1.0)*r02*x10561)));
evalcond[3]=(cj3+(((-1.0)*cj6*r00*x10561))+(((-1.0)*r02*x10562))+((x10556*x10558)));
evalcond[4]=((-1.0)+((r10*x10563))+(((-1.0)*x10560*x10562))+(((-1.0)*r12*x10561)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r22*x10562))+((x10556*x10559))+(((-1.0)*cj6*r20*x10561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10564=((1.0)*cj6);
CheckValue<IkReal> x10565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10564))+(((-1.0)*r20*sj6)))),-1);
if(!x10565.valid){
continue;
}
CheckValue<IkReal> x10566 = IKatan2WithCheck(IkReal((cj3*r12)),IkReal((((cj3*r11*sj6))+(((-1.0)*cj3*r10*x10564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10566.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10565.value)))+(x10566.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10567=IKsin(j5);
IkReal x10568=IKcos(j5);
IkReal x10569=(r01*sj6);
IkReal x10570=(r21*sj6);
IkReal x10571=(r11*sj6);
IkReal x10572=((1.0)*x10567);
IkReal x10573=((1.0)*x10568);
IkReal x10574=(cj6*x10568);
evalcond[0]=((((-1.0)*cj6*r10*x10572))+(((-1.0)*r12*x10573))+((x10567*x10571)));
evalcond[1]=(((r20*x10574))+(((-1.0)*r22*x10572))+(((-1.0)*x10570*x10573)));
evalcond[2]=((((-1.0)*x10569*x10573))+((r00*x10574))+(((-1.0)*r02*x10572)));
evalcond[3]=((((-1.0)*cj6*r00*x10572))+cj3+(((-1.0)*r02*x10573))+((x10567*x10569)));
evalcond[4]=((-1.0)+(((-1.0)*x10571*x10573))+((r10*x10574))+(((-1.0)*r12*x10572)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r22*x10573))+((x10567*x10570))+(((-1.0)*cj6*r20*x10572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10575=((1.0)*sj6);
CheckValue<IkReal> x10576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10575))+(((-1.0)*cj6*r01)))),-1);
if(!x10576.valid){
continue;
}
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x10575)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10576.value)))+(x10577.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10578=IKsin(j5);
IkReal x10579=IKcos(j5);
IkReal x10580=(r01*sj6);
IkReal x10581=(r21*sj6);
IkReal x10582=(r11*sj6);
IkReal x10583=((1.0)*x10578);
IkReal x10584=((1.0)*x10579);
IkReal x10585=(cj6*x10579);
evalcond[0]=(((x10578*x10582))+(((-1.0)*cj6*r10*x10583))+(((-1.0)*r12*x10584)));
evalcond[1]=((((-1.0)*r22*x10583))+(((-1.0)*x10581*x10584))+((r20*x10585)));
evalcond[2]=((((-1.0)*r02*x10583))+(((-1.0)*x10580*x10584))+((r00*x10585)));
evalcond[3]=(cj3+(((-1.0)*cj6*r00*x10583))+((x10578*x10580))+(((-1.0)*r02*x10584)));
evalcond[4]=((-1.0)+((r10*x10585))+(((-1.0)*x10582*x10584))+(((-1.0)*r12*x10583)));
evalcond[5]=((((-1.0)*sj3))+(((-1.0)*r22*x10584))+(((-1.0)*cj6*r20*x10583))+((x10578*x10581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10586=cj6*cj6;
IkReal x10587=((1.0)*sj2);
IkReal x10588=(r01*sj6);
IkReal x10589=(cj6*r00);
IkReal x10590=(sj2*sj3);
IkReal x10591=(r21*sj6);
IkReal x10592=(cj6*r20);
IkReal x10593=(r01*r21);
CheckValue<IkReal> x10594 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x10587*x10588))+((x10589*x10590))+(((-1.0)*cj1*r22*x10587)))),IkReal(((((-1.0)*cj1*x10587*x10591))+((cj1*sj2*x10592))+((r02*x10590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10594.valid){
continue;
}
CheckValue<IkReal> x10595=IKPowWithIntegerCheck(IKsign((((r00*r20*x10586))+x10593+(((-1.0)*x10589*x10591))+((r02*r22))+(((-1.0)*x10586*x10593))+(((-1.0)*x10588*x10592)))),-1);
if(!x10595.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10594.value)+(((1.5707963267949)*(x10595.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10596=IKsin(j5);
IkReal x10597=IKcos(j5);
IkReal x10598=((1.0)*sj2);
IkReal x10599=(sj6*x10596);
IkReal x10600=((1.0)*cj2*sj3);
IkReal x10601=((1.0)*x10596);
IkReal x10602=((1.0)*x10597);
IkReal x10603=(cj6*x10597);
IkReal x10604=(sj6*x10602);
IkReal x10605=(cj6*x10601);
evalcond[0]=(((r21*x10599))+((sj2*sj3))+(((-1.0)*r20*x10605))+(((-1.0)*r22*x10602)));
evalcond[1]=((((-1.0)*r21*x10604))+(((-1.0)*r22*x10601))+((r20*x10603))+(((-1.0)*cj2)));
evalcond[2]=(((r00*x10603))+(((-1.0)*cj1*x10598))+(((-1.0)*r01*x10604))+(((-1.0)*r02*x10601)));
evalcond[3]=((((-1.0)*r11*x10604))+(((-1.0)*r12*x10601))+((r10*x10603))+(((-1.0)*sj1*x10598)));
evalcond[4]=((((-1.0)*r12*x10602))+((r11*x10599))+(((-1.0)*sj1*x10600))+((cj1*cj3))+(((-1.0)*r10*x10605)));
evalcond[5]=(((r01*x10599))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x10605))+(((-1.0)*cj1*x10600))+(((-1.0)*r02*x10602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10606=cj6*cj6;
IkReal x10607=r21*r21;
IkReal x10608=(sj2*sj3);
IkReal x10609=((1.0)*cj2);
IkReal x10610=(r21*sj6);
IkReal x10611=(cj6*r20);
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10610*x10611))+((x10606*(r20*r20)))+(r22*r22)+(((-1.0)*x10606*x10607))+x10607)),-1);
if(!x10612.valid){
continue;
}
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal((((x10608*x10611))+(((-1.0)*r22*x10609))+(((-1.0)*x10608*x10610)))),IkReal(((((-1.0)*x10609*x10610))+((cj2*x10611))+((r22*x10608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10612.value)))+(x10613.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10614=IKsin(j5);
IkReal x10615=IKcos(j5);
IkReal x10616=((1.0)*sj2);
IkReal x10617=(sj6*x10614);
IkReal x10618=((1.0)*cj2*sj3);
IkReal x10619=((1.0)*x10614);
IkReal x10620=((1.0)*x10615);
IkReal x10621=(cj6*x10615);
IkReal x10622=(sj6*x10620);
IkReal x10623=(cj6*x10619);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x10620))+(((-1.0)*r20*x10623))+((r21*x10617)));
evalcond[1]=(((r20*x10621))+(((-1.0)*r22*x10619))+(((-1.0)*r21*x10622))+(((-1.0)*cj2)));
evalcond[2]=(((r00*x10621))+(((-1.0)*r01*x10622))+(((-1.0)*r02*x10619))+(((-1.0)*cj1*x10616)));
evalcond[3]=(((r10*x10621))+(((-1.0)*r11*x10622))+(((-1.0)*r12*x10619))+(((-1.0)*sj1*x10616)));
evalcond[4]=((((-1.0)*r12*x10620))+(((-1.0)*r10*x10623))+((cj1*cj3))+(((-1.0)*sj1*x10618))+((r11*x10617)));
evalcond[5]=((((-1.0)*r02*x10620))+(((-1.0)*r00*x10623))+(((-1.0)*cj3*sj1))+((r01*x10617))+(((-1.0)*cj1*x10618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10624=((1.0)*sj6);
IkReal x10625=((1.0)*cj1*sj2);
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*r01*x10624))+((cj1*r21*sj2*sj6))+((cj2*cj6*r00))+(((-1.0)*cj6*r20*x10625)))),IkReal(((((-1.0)*r22*x10625))+((cj2*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
CheckValue<IkReal> x10627=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r11))+(((-1.0)*r10*x10624)))),-1);
if(!x10627.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10626.value)+(((1.5707963267949)*(x10627.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10628=IKsin(j5);
IkReal x10629=IKcos(j5);
IkReal x10630=((1.0)*sj2);
IkReal x10631=(sj6*x10628);
IkReal x10632=((1.0)*cj2*sj3);
IkReal x10633=((1.0)*x10628);
IkReal x10634=((1.0)*x10629);
IkReal x10635=(cj6*x10629);
IkReal x10636=(sj6*x10634);
IkReal x10637=(cj6*x10633);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x10634))+(((-1.0)*r20*x10637))+((r21*x10631)));
evalcond[1]=(((r20*x10635))+(((-1.0)*r22*x10633))+(((-1.0)*r21*x10636))+(((-1.0)*cj2)));
evalcond[2]=((((-1.0)*r02*x10633))+(((-1.0)*r01*x10636))+((r00*x10635))+(((-1.0)*cj1*x10630)));
evalcond[3]=((((-1.0)*sj1*x10630))+((r10*x10635))+(((-1.0)*r12*x10633))+(((-1.0)*r11*x10636)));
evalcond[4]=((((-1.0)*sj1*x10632))+(((-1.0)*r10*x10637))+(((-1.0)*r12*x10634))+((cj1*cj3))+((r11*x10631)));
evalcond[5]=((((-1.0)*r02*x10634))+(((-1.0)*r00*x10637))+((r01*x10631))+(((-1.0)*cj3*sj1))+(((-1.0)*cj1*x10632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10638=((-1.0)*r00);
IkReal x10640 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x10640)==0){
continue;
}
IkReal x10639=pow(x10640,-0.5);
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x10638),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
IkReal gconst0=((-1.0)*(x10641.value));
IkReal gconst1=(r01*x10639);
IkReal gconst2=(x10638*x10639);
CheckValue<IkReal> x10642 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x10642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10642.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10643=((1.0)*sj3);
IkReal x10644=(cj1*cj2);
IkReal x10645=(gconst2*sj3);
IkReal x10646=(cj3*sj1);
IkReal x10647=(gconst1*r21);
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj2*x10643))+(((-1.0)*r22*x10646))+(((-1.0)*r22*x10643*x10644)))),IkReal(((((-1.0)*gconst1*r01*sj2*x10643))+((r00*sj2*x10645))+((r20*x10644*x10645))+(((-1.0)*x10643*x10644*x10647))+(((-1.0)*x10646*x10647))+((gconst2*r20*x10646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
CheckValue<IkReal> x10649=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x10649.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10648.value)+(((1.5707963267949)*(x10649.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x10650=IKsin(j5);
IkReal x10651=IKcos(j5);
IkReal x10652=(gconst1*r20);
IkReal x10653=(cj1*sj3);
IkReal x10654=(gconst2*r21);
IkReal x10655=((1.0)*cj4);
IkReal x10656=(gconst1*r21);
IkReal x10657=(cj2*cj3);
IkReal x10658=(gconst2*r11);
IkReal x10659=((1.0)*sj1);
IkReal x10660=((1.0)*sj2);
IkReal x10661=(gconst1*r10);
IkReal x10662=(gconst1*r00);
IkReal x10663=(gconst1*r01);
IkReal x10664=(gconst1*r11);
IkReal x10665=(gconst2*r01);
IkReal x10666=((1.0)*cj2);
IkReal x10667=(cj4*x10650);
IkReal x10668=(cj4*x10651);
IkReal x10669=((1.0)*gconst2*r00);
IkReal x10670=(sj4*x10651);
IkReal x10671=((1.0)*gconst2*r20);
IkReal x10672=(gconst1*x10650);
IkReal x10673=((1.0)*x10651);
IkReal x10674=(sj4*x10650);
IkReal x10675=(gconst2*x10651);
IkReal x10676=((1.0)*gconst2*r10);
evalcond[0]=(((sj2*sj3))+(((-1.0)*x10650*x10671))+((x10650*x10656))+(((-1.0)*r22*x10673)));
evalcond[1]=(((x10650*x10664))+(((-1.0)*x10650*x10676))+((cj1*cj3))+(((-1.0)*cj2*sj3*x10659))+(((-1.0)*r12*x10673)));
evalcond[2]=(((x10650*x10663))+(((-1.0)*r02*x10673))+(((-1.0)*x10650*x10669))+(((-1.0)*x10653*x10666))+(((-1.0)*cj3*x10659)));
evalcond[3]=(((r22*x10667))+(((-1.0)*cj3*x10660))+((sj4*x10652))+((sj4*x10654))+((x10656*x10668))+(((-1.0)*r20*x10655*x10675)));
evalcond[4]=(((r22*x10674))+(((-1.0)*x10654*x10655))+((x10656*x10670))+(((-1.0)*x10652*x10655))+(((-1.0)*x10666))+(((-1.0)*x10670*x10671)));
evalcond[5]=((((-1.0)*x10669*x10670))+(((-1.0)*x10655*x10665))+(((-1.0)*x10655*x10662))+((r02*x10674))+(((-1.0)*cj1*x10660))+((x10663*x10670)));
evalcond[6]=(((x10664*x10670))+(((-1.0)*sj2*x10659))+(((-1.0)*x10655*x10661))+(((-1.0)*x10655*x10658))+(((-1.0)*x10670*x10676))+((r12*x10674)));
evalcond[7]=(((x10664*x10668))+((r12*x10667))+((sj1*x10657))+((sj4*x10661))+((sj4*x10658))+x10653+(((-1.0)*r10*x10655*x10675)));
evalcond[8]=(((r02*x10667))+(((-1.0)*sj3*x10659))+(((-1.0)*r00*x10655*x10675))+((sj4*x10662))+((sj4*x10665))+((x10663*x10668))+((cj1*x10657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10677=((-1.0)*r01);
IkReal x10679 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x10679)==0){
continue;
}
IkReal x10678=pow(x10679,-0.5);
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(x10677),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10680.value))));
IkReal gconst4=(x10677*x10678);
IkReal gconst5=((1.0)*r00*x10678);
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10681.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10682=((1.0)*r22);
IkReal x10683=(sj2*sj3);
IkReal x10684=(gconst5*r20);
IkReal x10685=(cj3*sj1);
IkReal x10686=((1.0)*gconst4);
IkReal x10687=(cj1*cj2*sj3);
CheckValue<IkReal> x10688 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x10683))+(((-1.0)*x10682*x10685))+(((-1.0)*x10682*x10687)))),IkReal(((((-1.0)*r21*x10685*x10686))+((gconst5*r00*x10683))+(((-1.0)*r21*x10686*x10687))+((x10684*x10685))+((x10684*x10687))+(((-1.0)*r01*x10683*x10686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10688.valid){
continue;
}
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10689.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10688.value)+(((1.5707963267949)*(x10689.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x10690=IKsin(j5);
IkReal x10691=IKcos(j5);
IkReal x10692=(r21*sj4);
IkReal x10693=((1.0)*gconst5);
IkReal x10694=(cj4*r11);
IkReal x10695=(cj1*cj2);
IkReal x10696=((1.0)*sj3);
IkReal x10697=(gconst4*sj4);
IkReal x10698=((1.0)*sj2);
IkReal x10699=(cj2*sj1);
IkReal x10700=(cj4*r01);
IkReal x10701=(gconst5*sj4);
IkReal x10702=(cj4*r21);
IkReal x10703=(gconst4*x10691);
IkReal x10704=(cj4*x10690);
IkReal x10705=(sj4*x10690);
IkReal x10706=((1.0)*cj4*gconst4);
IkReal x10707=(cj4*x10691);
IkReal x10708=((1.0)*x10691);
IkReal x10709=(gconst4*x10690);
IkReal x10710=(sj4*x10691);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x10708))+(((-1.0)*r20*x10690*x10693))+((r21*x10709)));
evalcond[1]=((((-1.0)*r12*x10708))+(((-1.0)*x10696*x10699))+((r11*x10709))+((cj1*cj3))+(((-1.0)*r10*x10690*x10693)));
evalcond[2]=(((r01*x10709))+(((-1.0)*r00*x10690*x10693))+(((-1.0)*x10695*x10696))+(((-1.0)*cj3*sj1))+(((-1.0)*r02*x10708)));
evalcond[3]=((((-1.0)*r20*x10693*x10707))+(((-1.0)*cj3*x10698))+((r22*x10704))+((x10702*x10703))+((gconst5*x10692))+((r20*x10697)));
evalcond[4]=(((x10692*x10703))+((r22*x10705))+(((-1.0)*x10693*x10702))+(((-1.0)*r20*x10693*x10710))+(((-1.0)*cj2))+(((-1.0)*r20*x10706)));
evalcond[5]=((((-1.0)*r00*x10693*x10710))+((r01*x10691*x10697))+(((-1.0)*cj1*x10698))+((r02*x10705))+(((-1.0)*x10693*x10700))+(((-1.0)*r00*x10706)));
evalcond[6]=((((-1.0)*x10693*x10694))+((r11*x10691*x10697))+(((-1.0)*r10*x10706))+(((-1.0)*r10*x10693*x10710))+((r12*x10705))+(((-1.0)*sj1*x10698)));
evalcond[7]=(((r10*x10697))+(((-1.0)*r10*x10693*x10707))+((cj3*x10699))+((cj1*sj3))+((r11*x10701))+((r12*x10704))+((x10694*x10703)));
evalcond[8]=(((x10700*x10703))+((r01*x10701))+((cj3*x10695))+(((-1.0)*r00*x10693*x10707))+((r02*x10704))+(((-1.0)*sj1*x10696))+((r00*x10697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10712 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10712)==0){
continue;
}
IkReal x10711=pow(x10712,-0.5);
CheckValue<IkReal> x10713 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10713.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10713.value));
IkReal gconst7=((-1.0)*r11*x10711);
IkReal gconst8=(r10*x10711);
CheckValue<IkReal> x10714 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10714.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10714.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10715=((1.0)*gconst8);
IkReal x10716=(cj1*cj3);
IkReal x10717=((1.0)*gconst7);
IkReal x10718=(sj2*sj3);
IkReal x10719=(cj2*sj1*sj3);
CheckValue<IkReal> x10720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10717))+(((-1.0)*r01*x10715)))),-1);
if(!x10720.valid){
continue;
}
CheckValue<IkReal> x10721 = IKatan2WithCheck(IkReal((((r22*x10716))+(((-1.0)*r22*x10719))+(((-1.0)*r12*x10718)))),IkReal((((gconst7*r21*x10716))+((gconst8*r20*x10719))+(((-1.0)*r21*x10717*x10719))+((gconst8*r10*x10718))+(((-1.0)*r20*x10715*x10716))+(((-1.0)*r11*x10717*x10718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10721.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10720.value)))+(x10721.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x10722=IKsin(j5);
IkReal x10723=IKcos(j5);
IkReal x10724=(r01*sj4);
IkReal x10725=(gconst7*r01);
IkReal x10726=((1.0)*gconst8);
IkReal x10727=(gconst7*r20);
IkReal x10728=((1.0)*cj4);
IkReal x10729=(cj2*cj3);
IkReal x10730=((1.0)*sj1);
IkReal x10731=(cj2*sj3);
IkReal x10732=((1.0)*sj2);
IkReal x10733=(r10*sj4);
IkReal x10734=(r21*sj4);
IkReal x10735=(gconst7*r00);
IkReal x10736=(r11*sj4);
IkReal x10737=(cj4*x10723);
IkReal x10738=(gconst7*x10722);
IkReal x10739=(cj4*x10722);
IkReal x10740=(gconst7*x10723);
IkReal x10741=(sj4*x10723);
IkReal x10742=((1.0)*x10723);
IkReal x10743=(sj4*x10722);
evalcond[0]=(((sj2*sj3))+((r21*x10738))+(((-1.0)*r20*x10722*x10726))+(((-1.0)*r22*x10742)));
evalcond[1]=((((-1.0)*r10*x10722*x10726))+(((-1.0)*x10730*x10731))+(((-1.0)*r12*x10742))+((cj1*cj3))+((r11*x10738)));
evalcond[2]=((((-1.0)*r02*x10742))+(((-1.0)*cj3*x10730))+((x10722*x10725))+(((-1.0)*r00*x10722*x10726))+(((-1.0)*cj1*x10731)));
evalcond[3]=((((-1.0)*r20*x10726*x10737))+(((-1.0)*cj3*x10732))+((sj4*x10727))+((gconst7*r21*x10737))+((gconst8*x10734))+((r22*x10739)));
evalcond[4]=((((-1.0)*r20*x10726*x10741))+((r22*x10743))+((x10734*x10740))+(((-1.0)*x10727*x10728))+(((-1.0)*cj4*r21*x10726))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*r00*x10726*x10741))+((r02*x10743))+(((-1.0)*x10728*x10735))+(((-1.0)*cj1*x10732))+((x10724*x10740))+(((-1.0)*cj4*r01*x10726)));
evalcond[6]=((((-1.0)*gconst7*r10*x10728))+((x10736*x10740))+(((-1.0)*x10723*x10726*x10733))+(((-1.0)*cj4*r11*x10726))+(((-1.0)*sj2*x10730))+((r12*x10743)));
evalcond[7]=((((-1.0)*r10*x10726*x10737))+((cj1*sj3))+((gconst7*r11*x10737))+((gconst7*x10733))+((sj1*x10729))+((gconst8*x10736))+((r12*x10739)));
evalcond[8]=(((r02*x10739))+((x10725*x10737))+((cj1*x10729))+((sj4*x10735))+((gconst8*x10724))+(((-1.0)*sj3*x10730))+(((-1.0)*r00*x10726*x10737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10745 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10745)==0){
continue;
}
IkReal x10744=pow(x10745,-0.5);
CheckValue<IkReal> x10746 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10746.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10746.value))));
IkReal gconst10=((1.0)*r11*x10744);
IkReal gconst11=((-1.0)*r10*x10744);
CheckValue<IkReal> x10747 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10747.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10747.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
CheckValue<IkReal> x10750 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10750.valid){
continue;
}
IkReal x10748=((1.0)*(x10750.value));
IkReal x10749=x10744;
sj6=gconst10;
cj6=gconst11;
j6=((3.14159265)+(((-1.0)*x10748)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10748)));
IkReal gconst10=((1.0)*r11*x10749);
IkReal gconst11=((-1.0)*r10*x10749);
j5eval[0]=0;
j5eval[1]=0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10751=((1.0)*gconst11);
IkReal x10752=(cj2*sj1);
IkReal x10753=(cj1*cj3);
IkReal x10754=(gconst11*sj3);
IkReal x10755=((1.0)*sj3);
IkReal x10756=(gconst10*x10755);
CheckValue<IkReal> x10757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x10751)))),-1);
if(!x10757.valid){
continue;
}
CheckValue<IkReal> x10758 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10752*x10755))+((r22*x10753))+(((-1.0)*r12*sj2*x10755)))),IkReal((((r10*sj2*x10754))+(((-1.0)*r21*x10752*x10756))+((gconst10*r21*x10753))+((r20*x10752*x10754))+(((-1.0)*r11*sj2*x10756))+(((-1.0)*r20*x10751*x10753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10758.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10757.value)))+(x10758.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x10759=IKsin(j5);
IkReal x10760=IKcos(j5);
IkReal x10761=((1.0)*gconst11);
IkReal x10762=(cj4*gconst10);
IkReal x10763=(cj2*cj3);
IkReal x10764=((1.0)*sj1);
IkReal x10765=(cj2*sj3);
IkReal x10766=(gconst11*sj4);
IkReal x10767=((1.0)*sj2);
IkReal x10768=(gconst10*sj4);
IkReal x10769=(sj4*x10760);
IkReal x10770=(cj4*x10759);
IkReal x10771=(gconst10*x10759);
IkReal x10772=(cj4*x10760);
IkReal x10773=((1.0)*x10760);
IkReal x10774=(sj4*x10759);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x10773))+(((-1.0)*r20*x10759*x10761))+((r21*x10771)));
evalcond[1]=(((r11*x10771))+(((-1.0)*r12*x10773))+(((-1.0)*x10764*x10765))+(((-1.0)*r10*x10759*x10761))+((cj1*cj3)));
evalcond[2]=((((-1.0)*cj3*x10764))+(((-1.0)*r02*x10773))+((r01*x10771))+(((-1.0)*cj1*x10765))+(((-1.0)*r00*x10759*x10761)));
evalcond[3]=((((-1.0)*cj3*x10767))+((r21*x10760*x10762))+(((-1.0)*r20*x10761*x10772))+((r20*x10768))+((r21*x10766))+((r22*x10770)));
evalcond[4]=((((-1.0)*r20*x10762))+((r21*x10760*x10768))+(((-1.0)*r20*x10761*x10769))+((r22*x10774))+(((-1.0)*cj4*r21*x10761))+(((-1.0)*cj2)));
evalcond[5]=((((-1.0)*r00*x10762))+(((-1.0)*cj1*x10767))+(((-1.0)*cj4*r01*x10761))+((r01*x10760*x10768))+((r02*x10774))+(((-1.0)*r00*x10761*x10769)));
evalcond[6]=((((-1.0)*r10*x10762))+((r12*x10774))+(((-1.0)*sj2*x10764))+((r11*x10760*x10768))+(((-1.0)*r10*x10761*x10769))+(((-1.0)*cj4*r11*x10761)));
evalcond[7]=(((r12*x10770))+((r11*x10766))+((cj1*sj3))+(((-1.0)*r10*x10761*x10772))+((r11*x10760*x10762))+((r10*x10768))+((sj1*x10763)));
evalcond[8]=((((-1.0)*r00*x10761*x10772))+((cj1*x10763))+((r01*x10766))+(((-1.0)*sj3*x10764))+((r00*x10768))+((r01*x10760*x10762))+((r02*x10770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10775=((1.0)*sj3);
IkReal x10776=(cj1*cj2);
IkReal x10777=(gconst10*r21);
IkReal x10778=(cj3*sj1);
IkReal x10779=(gconst11*sj3);
CheckValue<IkReal> x10780 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10775*x10776))+(((-1.0)*r02*sj2*x10775))+(((-1.0)*r22*x10778)))),IkReal(((((-1.0)*x10777*x10778))+(((-1.0)*gconst10*r01*sj2*x10775))+((r00*sj2*x10779))+((r20*x10776*x10779))+(((-1.0)*x10775*x10776*x10777))+((gconst11*r20*x10778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10780.valid){
continue;
}
CheckValue<IkReal> x10781=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10781.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10780.value)+(((1.5707963267949)*(x10781.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x10782=IKsin(j5);
IkReal x10783=IKcos(j5);
IkReal x10784=((1.0)*gconst11);
IkReal x10785=(cj4*gconst10);
IkReal x10786=(cj2*cj3);
IkReal x10787=((1.0)*sj1);
IkReal x10788=(cj2*sj3);
IkReal x10789=(gconst11*sj4);
IkReal x10790=((1.0)*sj2);
IkReal x10791=(gconst10*sj4);
IkReal x10792=(sj4*x10783);
IkReal x10793=(cj4*x10782);
IkReal x10794=(gconst10*x10782);
IkReal x10795=(cj4*x10783);
IkReal x10796=((1.0)*x10783);
IkReal x10797=(sj4*x10782);
evalcond[0]=(((sj2*sj3))+((r21*x10794))+(((-1.0)*r20*x10782*x10784))+(((-1.0)*r22*x10796)));
evalcond[1]=((((-1.0)*r10*x10782*x10784))+(((-1.0)*r12*x10796))+(((-1.0)*x10787*x10788))+((cj1*cj3))+((r11*x10794)));
evalcond[2]=((((-1.0)*r02*x10796))+(((-1.0)*r00*x10782*x10784))+(((-1.0)*cj3*x10787))+((r01*x10794))+(((-1.0)*cj1*x10788)));
evalcond[3]=(((r21*x10789))+(((-1.0)*cj3*x10790))+((r20*x10791))+((r21*x10783*x10785))+(((-1.0)*r20*x10784*x10795))+((r22*x10793)));
evalcond[4]=(((r21*x10783*x10791))+(((-1.0)*cj4*r21*x10784))+(((-1.0)*r20*x10784*x10792))+((r22*x10797))+(((-1.0)*cj2))+(((-1.0)*r20*x10785)));
evalcond[5]=(((r01*x10783*x10791))+(((-1.0)*r00*x10785))+((r02*x10797))+(((-1.0)*cj4*r01*x10784))+(((-1.0)*cj1*x10790))+(((-1.0)*r00*x10784*x10792)));
evalcond[6]=((((-1.0)*r10*x10784*x10792))+((r12*x10797))+((r11*x10783*x10791))+(((-1.0)*cj4*r11*x10784))+(((-1.0)*r10*x10785))+(((-1.0)*sj2*x10787)));
evalcond[7]=(((r10*x10791))+((r11*x10783*x10785))+(((-1.0)*r10*x10784*x10795))+((r11*x10789))+((r12*x10793))+((cj1*sj3))+((sj1*x10786)));
evalcond[8]=(((r01*x10783*x10785))+((r02*x10793))+((cj1*x10786))+((r01*x10789))+(((-1.0)*r00*x10784*x10795))+((r00*x10791))+(((-1.0)*sj3*x10787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x10798=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10798);
rxp0_2=(py*r00);
rxp1_0=(r21*x10798);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=((((-1.0)*cj6*r20))+((r21*sj6)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10799=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10799);
rxp0_2=(py*r00);
rxp1_0=(r21*x10799);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=r12;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10800=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10800);
rxp0_2=(py*r00);
rxp1_0=(r21*x10800);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j5eval[0]=cj4;
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x10801=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10801);
rxp0_2=(py*r00);
rxp1_0=(r21*x10801);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((cj1*cj3)))+(IKabs((cj1*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x10802=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10802);
rxp0_2=(py*r00);
rxp1_0=(r21*x10802);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
IkReal x10803=(cj1*cj2);
IkReal x10804=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x10804;
j5eval[1]=((IKabs((sj3*x10803)))+(IKabs((cj3*x10803))));
j5eval[2]=IKsign(x10804);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10805=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10805);
rxp0_2=(py*r00);
rxp1_0=(r21*x10805);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10806=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10806);
rxp0_2=(py*r00);
rxp1_0=(r21*x10806);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10807=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10807);
rxp0_2=(py*r00);
rxp1_0=(r21*x10807);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10808=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10808);
rxp0_2=(py*r00);
rxp1_0=(r21*x10808);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10809=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10809);
rxp0_2=(py*r00);
rxp1_0=(r21*x10809);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=1.0;
j4=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10810=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x10810.valid){
continue;
}
CheckValue<IkReal> x10811=IKPowWithIntegerCheck(r12,-1);
if(!x10811.valid){
continue;
}
if( IKabs((cj1*cj2*sj3*(x10810.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*cj3*(x10811.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*cj2*sj3*(x10810.value)))+IKsqr((cj1*cj3*(x10811.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj1*cj2*sj3*(x10810.value)), (cj1*cj3*(x10811.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10812=IKsin(j5);
IkReal x10813=IKcos(j5);
IkReal x10814=(cj1*sj3);
IkReal x10815=(cj6*r20);
IkReal x10816=(cj1*cj3);
IkReal x10817=(sj6*x10812);
IkReal x10818=((1.0)*cj6*r00);
IkReal x10819=(sj6*x10813);
IkReal x10820=((1.0)*x10813);
evalcond[0]=(((r12*x10812))+x10814);
evalcond[1]=((((-1.0)*r12*x10820))+x10816);
evalcond[2]=((((-1.0)*x10812*x10815))+((r21*x10817)));
evalcond[3]=((((-1.0)*x10815*x10820))+((r21*x10819)));
evalcond[4]=((((-1.0)*x10813*x10818))+((cj2*x10816))+((r01*x10819)));
evalcond[5]=((((-1.0)*cj2*x10814))+(((-1.0)*x10812*x10818))+((r01*x10817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10821=(cj1*cj2);
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal((sj3*x10821)),IkReal(((-1.0)*cj3*x10821)),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
CheckValue<IkReal> x10823=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x10823.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10822.value)+(((1.5707963267949)*(x10823.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10824=IKsin(j5);
IkReal x10825=IKcos(j5);
IkReal x10826=(cj1*sj3);
IkReal x10827=(cj6*r20);
IkReal x10828=(cj1*cj3);
IkReal x10829=(sj6*x10824);
IkReal x10830=((1.0)*cj6*r00);
IkReal x10831=(sj6*x10825);
IkReal x10832=((1.0)*x10825);
evalcond[0]=(((r12*x10824))+x10826);
evalcond[1]=((((-1.0)*r12*x10832))+x10828);
evalcond[2]=(((r21*x10829))+(((-1.0)*x10824*x10827)));
evalcond[3]=((((-1.0)*x10827*x10832))+((r21*x10831)));
evalcond[4]=((((-1.0)*x10825*x10830))+((r01*x10831))+((cj2*x10828)));
evalcond[5]=((((-1.0)*cj2*x10826))+((r01*x10829))+(((-1.0)*x10824*x10830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(((-1.0)*cj1*sj3)),IkReal((cj1*cj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
CheckValue<IkReal> x10834=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x10834.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10833.value)+(((1.5707963267949)*(x10834.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10835=IKsin(j5);
IkReal x10836=IKcos(j5);
IkReal x10837=(cj1*sj3);
IkReal x10838=(cj6*r20);
IkReal x10839=(cj1*cj3);
IkReal x10840=(sj6*x10835);
IkReal x10841=((1.0)*cj6*r00);
IkReal x10842=(sj6*x10836);
IkReal x10843=((1.0)*x10836);
evalcond[0]=(((r12*x10835))+x10837);
evalcond[1]=((((-1.0)*r12*x10843))+x10839);
evalcond[2]=(((r21*x10840))+(((-1.0)*x10835*x10838)));
evalcond[3]=(((r21*x10842))+(((-1.0)*x10838*x10843)));
evalcond[4]=(((r01*x10842))+(((-1.0)*x10836*x10841))+((cj2*x10839)));
evalcond[5]=(((r01*x10840))+(((-1.0)*cj2*x10837))+(((-1.0)*x10835*x10841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x10844=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10844);
rxp0_2=(py*r00);
rxp1_0=(r21*x10844);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=r12;
j5eval[1]=((IKabs((cj1*cj3)))+(IKabs((cj1*sj3))));
j5eval[2]=IKsign(r12);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x10845=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10845);
rxp0_2=(py*r00);
rxp1_0=(r21*x10845);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x10846=(cj1*cj2);
IkReal x10847=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[0]=x10847;
j5eval[1]=((IKabs((cj3*x10846)))+(IKabs((sj3*x10846))));
j5eval[2]=IKsign(x10847);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10848=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10848);
rxp0_2=(py*r00);
rxp1_0=(r21*x10848);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=(((r01*sj6))+(((-1.0)*cj6*r00)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10849=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10849);
rxp0_2=(py*r00);
rxp1_0=(r21*x10849);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10850=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10850);
rxp0_2=(py*r00);
rxp1_0=(r21*x10850);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10851=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10851);
rxp0_2=(py*r00);
rxp1_0=(r21*x10851);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x10852=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10852);
rxp0_2=(py*r00);
rxp1_0=(r21*x10852);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j5eval[0]=IKabs(r12);
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=r12;
op[1]=0;
op[2]=((-1.0)*r12);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10853=IKPowWithIntegerCheck((((r01*sj6))+(((-1.0)*cj6*r00))),-1);
if(!x10853.valid){
continue;
}
CheckValue<IkReal> x10854=IKPowWithIntegerCheck(r12,-1);
if(!x10854.valid){
continue;
}
if( IKabs((cj1*cj2*sj3*(x10853.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*cj3*(x10854.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*cj2*sj3*(x10853.value)))+IKsqr((cj1*cj3*(x10854.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj1*cj2*sj3*(x10853.value)), (cj1*cj3*(x10854.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10855=IKsin(j5);
IkReal x10856=IKcos(j5);
IkReal x10857=(cj1*sj3);
IkReal x10858=(cj1*cj3);
IkReal x10859=(cj6*x10856);
IkReal x10860=(sj6*x10855);
IkReal x10861=((1.0)*x10855);
IkReal x10862=((1.0)*sj6*x10856);
evalcond[0]=((((-1.0)*r12*x10856))+x10858);
evalcond[1]=((((-1.0)*r12*x10861))+x10857);
evalcond[2]=(((r21*x10860))+(((-1.0)*cj6*r20*x10861)));
evalcond[3]=(((r20*x10859))+(((-1.0)*r21*x10862)));
evalcond[4]=((((-1.0)*r01*x10862))+((r00*x10859))+((cj2*x10858)));
evalcond[5]=(((r01*x10860))+(((-1.0)*cj2*x10857))+(((-1.0)*cj6*r00*x10861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x10863=(cj1*cj2);
CheckValue<IkReal> x10864 = IKatan2WithCheck(IkReal((sj3*x10863)),IkReal((cj3*x10863)),IKFAST_ATAN2_MAGTHRESH);
if(!x10864.valid){
continue;
}
CheckValue<IkReal> x10865=IKPowWithIntegerCheck(IKsign((((r01*sj6))+(((-1.0)*cj6*r00)))),-1);
if(!x10865.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10864.value)+(((1.5707963267949)*(x10865.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10866=IKsin(j5);
IkReal x10867=IKcos(j5);
IkReal x10868=(cj1*sj3);
IkReal x10869=(cj1*cj3);
IkReal x10870=(cj6*x10867);
IkReal x10871=(sj6*x10866);
IkReal x10872=((1.0)*x10866);
IkReal x10873=((1.0)*sj6*x10867);
evalcond[0]=((((-1.0)*r12*x10867))+x10869);
evalcond[1]=((((-1.0)*r12*x10872))+x10868);
evalcond[2]=(((r21*x10871))+(((-1.0)*cj6*r20*x10872)));
evalcond[3]=((((-1.0)*r21*x10873))+((r20*x10870)));
evalcond[4]=(((cj2*x10869))+(((-1.0)*r01*x10873))+((r00*x10870)));
evalcond[5]=(((r01*x10871))+(((-1.0)*cj2*x10868))+(((-1.0)*cj6*r00*x10872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal((cj1*sj3)),IkReal((cj1*cj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
CheckValue<IkReal> x10875=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x10875.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10874.value)+(((1.5707963267949)*(x10875.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10876=IKsin(j5);
IkReal x10877=IKcos(j5);
IkReal x10878=(cj1*sj3);
IkReal x10879=(cj1*cj3);
IkReal x10880=(cj6*x10877);
IkReal x10881=(sj6*x10876);
IkReal x10882=((1.0)*x10876);
IkReal x10883=((1.0)*sj6*x10877);
evalcond[0]=((((-1.0)*r12*x10877))+x10879);
evalcond[1]=((((-1.0)*r12*x10882))+x10878);
evalcond[2]=((((-1.0)*cj6*r20*x10882))+((r21*x10881)));
evalcond[3]=((((-1.0)*r21*x10883))+((r20*x10880)));
evalcond[4]=((((-1.0)*r01*x10883))+((r00*x10880))+((cj2*x10879)));
evalcond[5]=((((-1.0)*cj2*x10878))+(((-1.0)*cj6*r00*x10882))+((r01*x10881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
IkReal gconst30=((-1.0)*(x10884.value));
IkReal gconst31=r20;
IkReal gconst32=r21;
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10885.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x10886=((-1.0)*r20);
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(x10886),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10887=((-1.0)*(x10888.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10886);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10887;
IkReal gconst30=x10887;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10889=((-1.0)*r20);
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(x10889),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
IkReal x10890=((-1.0)*(x10891.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10889);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10890;
IkReal gconst30=x10890;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10892=((-1.0)*r20);
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(x10892),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
IkReal x10893=((-1.0)*(x10894.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10892);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10893;
IkReal gconst30=x10893;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=cj4;
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x10895=((-1.0)*r20);
CheckValue<IkReal> x10897 = IKatan2WithCheck(IkReal(x10895),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10897.valid){
continue;
}
IkReal x10896=((-1.0)*(x10897.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10895);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10896;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst30=x10896;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x10898=((-1.0)*r20);
CheckValue<IkReal> x10900 = IKatan2WithCheck(IkReal(x10898),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10900.valid){
continue;
}
IkReal x10899=((-1.0)*(x10900.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10898);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10899;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst30=x10899;
IkReal gconst31=r20;
IkReal gconst32=r21;
IkReal x10901=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[0]=x10901;
j5eval[1]=IKsign(x10901);
j5eval[2]=((IKabs((((cj1*cj2*sj3))+((cj3*sj1)))))+(IKabs((cj1*sj2))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10902=((-1.0)*r20);
CheckValue<IkReal> x10904 = IKatan2WithCheck(IkReal(x10902),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10904.valid){
continue;
}
IkReal x10903=((-1.0)*(x10904.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10902);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10903;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst30=x10903;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=(((r01*r20))+(((-1.0)*r00*r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10905=IKPowWithIntegerCheck(r12,-1);
if(!x10905.valid){
continue;
}
CheckValue<IkReal> x10906=IKPowWithIntegerCheck(((((-1.0)*gconst32*r00))+((gconst31*r01))),-1);
if(!x10906.valid){
continue;
}
if( IKabs((sj1*sj2*(x10905.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x10906.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x10905.value)))+IKsqr((cj1*sj2*(x10906.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x10905.value)), (cj1*sj2*(x10906.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10907=IKsin(j5);
IkReal x10908=IKcos(j5);
IkReal x10909=((1.0)*sj1);
IkReal x10910=(cj2*sj3);
IkReal x10911=((1.0)*cj1);
IkReal x10912=((1.0)*gconst32*r00);
IkReal x10913=(gconst31*x10908);
IkReal x10914=((1.0)*gconst32*r20);
IkReal x10915=(gconst31*x10907);
evalcond[0]=(((r12*x10907))+(((-1.0)*sj2*x10909)));
evalcond[1]=(((cj1*cj3))+(((-1.0)*x10909*x10910))+(((-1.0)*r12*x10908)));
evalcond[2]=(((sj2*sj3))+((r21*x10915))+(((-1.0)*x10907*x10914)));
evalcond[3]=((((-1.0)*x10908*x10914))+((r21*x10913))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x10911))+(((-1.0)*x10908*x10912))+((r01*x10913)));
evalcond[5]=((((-1.0)*x10910*x10911))+((r01*x10915))+(((-1.0)*x10907*x10912))+(((-1.0)*cj3*x10909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal((((cj1*cj2*sj3))+((cj3*sj1)))),IkReal((cj1*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
CheckValue<IkReal> x10917=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*r00))+((gconst31*r01)))),-1);
if(!x10917.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10916.value)+(((1.5707963267949)*(x10917.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10918=IKsin(j5);
IkReal x10919=IKcos(j5);
IkReal x10920=((1.0)*sj1);
IkReal x10921=(cj2*sj3);
IkReal x10922=((1.0)*cj1);
IkReal x10923=((1.0)*gconst32*r00);
IkReal x10924=(gconst31*x10919);
IkReal x10925=((1.0)*gconst32*r20);
IkReal x10926=(gconst31*x10918);
evalcond[0]=((((-1.0)*sj2*x10920))+((r12*x10918)));
evalcond[1]=((((-1.0)*x10920*x10921))+(((-1.0)*r12*x10919))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*x10918*x10925))+((r21*x10926)));
evalcond[3]=((((-1.0)*x10919*x10925))+((r21*x10924))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x10922))+(((-1.0)*x10919*x10923))+((r01*x10924)));
evalcond[5]=((((-1.0)*x10918*x10923))+((r01*x10926))+(((-1.0)*x10921*x10922))+(((-1.0)*cj3*x10920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
CheckValue<IkReal> x10928=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x10928.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10927.value)+(((1.5707963267949)*(x10928.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10929=IKsin(j5);
IkReal x10930=IKcos(j5);
IkReal x10931=((1.0)*sj1);
IkReal x10932=(cj2*sj3);
IkReal x10933=((1.0)*cj1);
IkReal x10934=((1.0)*gconst32*r00);
IkReal x10935=(gconst31*x10930);
IkReal x10936=((1.0)*gconst32*r20);
IkReal x10937=(gconst31*x10929);
evalcond[0]=(((r12*x10929))+(((-1.0)*sj2*x10931)));
evalcond[1]=((((-1.0)*x10931*x10932))+(((-1.0)*r12*x10930))+((cj1*cj3)));
evalcond[2]=((((-1.0)*x10929*x10936))+((sj2*sj3))+((r21*x10937)));
evalcond[3]=(((r21*x10935))+(((-1.0)*x10930*x10936))+(((-1.0)*cj2)));
evalcond[4]=(((r01*x10935))+(((-1.0)*x10930*x10934))+(((-1.0)*sj2*x10933)));
evalcond[5]=((((-1.0)*x10929*x10934))+(((-1.0)*cj3*x10931))+((r01*x10937))+(((-1.0)*x10932*x10933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x10938=((-1.0)*r20);
CheckValue<IkReal> x10940 = IKatan2WithCheck(IkReal(x10938),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10940.valid){
continue;
}
IkReal x10939=((-1.0)*(x10940.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10938);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10939;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst30=x10939;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x10941=((-1.0)*r20);
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(x10941),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
IkReal x10942=((-1.0)*(x10943.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10941);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10942;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst30=x10942;
IkReal gconst31=r20;
IkReal gconst32=r21;
IkReal x10944=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[0]=x10944;
j5eval[1]=IKsign(x10944);
j5eval[2]=((IKabs((((cj1*cj2*sj3))+((cj3*sj1)))))+(IKabs((cj1*sj2))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10945=((-1.0)*r20);
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(x10945),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
IkReal x10946=((-1.0)*(x10947.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10945);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10946;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst30=x10946;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=(((r00*r21))+(((-1.0)*r01*r20)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10948=IKPowWithIntegerCheck(r12,-1);
if(!x10948.valid){
continue;
}
CheckValue<IkReal> x10949=IKPowWithIntegerCheck((((gconst32*r00))+(((-1.0)*gconst31*r01))),-1);
if(!x10949.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x10948.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x10949.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x10948.value)))+IKsqr((cj1*sj2*(x10949.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x10948.value)), (cj1*sj2*(x10949.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10950=IKsin(j5);
IkReal x10951=IKcos(j5);
IkReal x10952=((1.0)*sj1);
IkReal x10953=(cj2*sj3);
IkReal x10954=((1.0)*cj1);
IkReal x10955=((1.0)*r12);
IkReal x10956=(gconst31*r01);
IkReal x10957=(gconst31*r21);
IkReal x10958=(gconst32*x10951);
IkReal x10959=((1.0)*x10951);
IkReal x10960=((1.0)*gconst32*x10950);
evalcond[0]=((((-1.0)*x10950*x10955))+(((-1.0)*sj2*x10952)));
evalcond[1]=((((-1.0)*x10951*x10955))+((cj1*cj3))+(((-1.0)*x10952*x10953)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*r20*x10960))+((x10950*x10957)));
evalcond[3]=((((-1.0)*x10957*x10959))+((r20*x10958))+(((-1.0)*cj2)));
evalcond[4]=(((r00*x10958))+(((-1.0)*sj2*x10954))+(((-1.0)*x10956*x10959)));
evalcond[5]=((((-1.0)*cj3*x10952))+(((-1.0)*r00*x10960))+(((-1.0)*x10953*x10954))+((x10950*x10956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10961 = IKatan2WithCheck(IkReal((((cj1*cj2*sj3))+((cj3*sj1)))),IkReal(((-1.0)*cj1*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x10961.valid){
continue;
}
CheckValue<IkReal> x10962=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*r00))+((gconst31*r01)))),-1);
if(!x10962.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x10961.value)+(((1.5707963267949)*(x10962.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10963=IKsin(j5);
IkReal x10964=IKcos(j5);
IkReal x10965=((1.0)*sj1);
IkReal x10966=(cj2*sj3);
IkReal x10967=((1.0)*cj1);
IkReal x10968=((1.0)*r12);
IkReal x10969=(gconst31*r01);
IkReal x10970=(gconst31*r21);
IkReal x10971=(gconst32*x10964);
IkReal x10972=((1.0)*x10964);
IkReal x10973=((1.0)*gconst32*x10963);
evalcond[0]=((((-1.0)*x10963*x10968))+(((-1.0)*sj2*x10965)));
evalcond[1]=(((cj1*cj3))+(((-1.0)*x10964*x10968))+(((-1.0)*x10965*x10966)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*r20*x10973))+((x10963*x10970)));
evalcond[3]=((((-1.0)*x10970*x10972))+((r20*x10971))+(((-1.0)*cj2)));
evalcond[4]=(((r00*x10971))+(((-1.0)*sj2*x10967))+(((-1.0)*x10969*x10972)));
evalcond[5]=((((-1.0)*cj3*x10965))+((x10963*x10969))+(((-1.0)*x10966*x10967))+(((-1.0)*r00*x10973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10974=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x10974.valid){
continue;
}
CheckValue<IkReal> x10975 = IKatan2WithCheck(IkReal(((-1.0)*sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10975.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10974.value)))+(x10975.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x10976=IKsin(j5);
IkReal x10977=IKcos(j5);
IkReal x10978=((1.0)*sj1);
IkReal x10979=(cj2*sj3);
IkReal x10980=((1.0)*cj1);
IkReal x10981=((1.0)*r12);
IkReal x10982=(gconst31*r01);
IkReal x10983=(gconst31*r21);
IkReal x10984=(gconst32*x10977);
IkReal x10985=((1.0)*x10977);
IkReal x10986=((1.0)*gconst32*x10976);
evalcond[0]=((((-1.0)*sj2*x10978))+(((-1.0)*x10976*x10981)));
evalcond[1]=((((-1.0)*x10977*x10981))+((cj1*cj3))+(((-1.0)*x10978*x10979)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*r20*x10986))+((x10976*x10983)));
evalcond[3]=((((-1.0)*x10983*x10985))+((r20*x10984))+(((-1.0)*cj2)));
evalcond[4]=(((r00*x10984))+(((-1.0)*sj2*x10980))+(((-1.0)*x10982*x10985)));
evalcond[5]=((((-1.0)*cj3*x10978))+(((-1.0)*r00*x10986))+(((-1.0)*x10979*x10980))+((x10976*x10982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x10987=((-1.0)*r20);
CheckValue<IkReal> x10989 = IKatan2WithCheck(IkReal(x10987),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10989.valid){
continue;
}
IkReal x10988=((-1.0)*(x10989.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10987);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10988;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst30=x10988;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((cj1*cj3)))+(IKabs((cj1*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x10990=((-1.0)*r20);
CheckValue<IkReal> x10992 = IKatan2WithCheck(IkReal(x10990),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10992.valid){
continue;
}
IkReal x10991=((-1.0)*(x10992.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10990);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10991;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst30=x10991;
IkReal gconst31=r20;
IkReal gconst32=r21;
IkReal x10993=(cj1*cj2);
IkReal x10994=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[0]=x10994;
j5eval[1]=IKsign(x10994);
j5eval[2]=((IKabs((cj3*x10993)))+(IKabs((sj3*x10993))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x10995=((-1.0)*r20);
CheckValue<IkReal> x10997 = IKatan2WithCheck(IkReal(x10995),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x10997.valid){
continue;
}
IkReal x10996=((-1.0)*(x10997.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10995);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x10996;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst30=x10996;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x10998=IKPowWithIntegerCheck(((((-1.0)*gconst32*r00))+((gconst31*r01))),-1);
if(!x10998.valid){
continue;
}
CheckValue<IkReal> x10999=IKPowWithIntegerCheck(r12,-1);
if(!x10999.valid){
continue;
}
if( IKabs((cj1*cj2*sj3*(x10998.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*cj3*(x10999.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*cj2*sj3*(x10998.value)))+IKsqr((cj1*cj3*(x10999.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj1*cj2*sj3*(x10998.value)), (cj1*cj3*(x10999.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11000=IKsin(j5);
IkReal x11001=IKcos(j5);
IkReal x11002=(cj1*sj3);
IkReal x11003=(cj1*cj3);
IkReal x11004=((1.0)*gconst32*r00);
IkReal x11005=(gconst31*x11001);
IkReal x11006=((1.0)*gconst32*r20);
IkReal x11007=(gconst31*x11000);
evalcond[0]=(x11002+((r12*x11000)));
evalcond[1]=(x11003+(((-1.0)*r12*x11001)));
evalcond[2]=(((r21*x11007))+(((-1.0)*x11000*x11006)));
evalcond[3]=(((r21*x11005))+(((-1.0)*x11001*x11006)));
evalcond[4]=(((r01*x11005))+(((-1.0)*x11001*x11004))+((cj2*x11003)));
evalcond[5]=((((-1.0)*cj2*x11002))+((r01*x11007))+(((-1.0)*x11000*x11004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11008=(cj1*cj2);
CheckValue<IkReal> x11009 = IKatan2WithCheck(IkReal((sj3*x11008)),IkReal(((-1.0)*cj3*x11008)),IKFAST_ATAN2_MAGTHRESH);
if(!x11009.valid){
continue;
}
CheckValue<IkReal> x11010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*r00))+((gconst31*r01)))),-1);
if(!x11010.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11009.value)+(((1.5707963267949)*(x11010.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11011=IKsin(j5);
IkReal x11012=IKcos(j5);
IkReal x11013=(cj1*sj3);
IkReal x11014=(cj1*cj3);
IkReal x11015=((1.0)*gconst32*r00);
IkReal x11016=(gconst31*x11012);
IkReal x11017=((1.0)*gconst32*r20);
IkReal x11018=(gconst31*x11011);
evalcond[0]=(x11013+((r12*x11011)));
evalcond[1]=((((-1.0)*r12*x11012))+x11014);
evalcond[2]=((((-1.0)*x11011*x11017))+((r21*x11018)));
evalcond[3]=((((-1.0)*x11012*x11017))+((r21*x11016)));
evalcond[4]=((((-1.0)*x11012*x11015))+((r01*x11016))+((cj2*x11014)));
evalcond[5]=((((-1.0)*x11011*x11015))+((r01*x11018))+(((-1.0)*cj2*x11013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11019 = IKatan2WithCheck(IkReal(((-1.0)*cj1*sj3)),IkReal((cj1*cj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x11019.valid){
continue;
}
CheckValue<IkReal> x11020=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x11020.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11019.value)+(((1.5707963267949)*(x11020.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11021=IKsin(j5);
IkReal x11022=IKcos(j5);
IkReal x11023=(cj1*sj3);
IkReal x11024=(cj1*cj3);
IkReal x11025=((1.0)*gconst32*r00);
IkReal x11026=(gconst31*x11022);
IkReal x11027=((1.0)*gconst32*r20);
IkReal x11028=(gconst31*x11021);
evalcond[0]=(x11023+((r12*x11021)));
evalcond[1]=((((-1.0)*r12*x11022))+x11024);
evalcond[2]=(((r21*x11028))+(((-1.0)*x11021*x11027)));
evalcond[3]=(((r21*x11026))+(((-1.0)*x11022*x11027)));
evalcond[4]=(((r01*x11026))+((cj2*x11024))+(((-1.0)*x11022*x11025)));
evalcond[5]=(((r01*x11028))+(((-1.0)*x11021*x11025))+(((-1.0)*cj2*x11023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x11029=((-1.0)*r20);
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal(x11029),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
IkReal x11030=((-1.0)*(x11031.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11029);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x11030;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst30=x11030;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=r12;
j5eval[1]=((IKabs((cj1*cj3)))+(IKabs((cj1*sj3))));
j5eval[2]=IKsign(r12);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x11032=((-1.0)*r20);
CheckValue<IkReal> x11034 = IKatan2WithCheck(IkReal(x11032),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11034.valid){
continue;
}
IkReal x11033=((-1.0)*(x11034.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11032);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x11033;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst30=x11033;
IkReal gconst31=r20;
IkReal gconst32=r21;
IkReal x11035=(cj1*cj2);
IkReal x11036=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[0]=x11036;
j5eval[1]=IKsign(x11036);
j5eval[2]=((IKabs((cj3*x11035)))+(IKabs((sj3*x11035))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11037=((-1.0)*r20);
CheckValue<IkReal> x11039 = IKatan2WithCheck(IkReal(x11037),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11039.valid){
continue;
}
IkReal x11038=((-1.0)*(x11039.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11037);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst31;
cj6=gconst32;
j6=x11038;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst30=x11038;
IkReal gconst31=r20;
IkReal gconst32=r21;
j5eval[0]=(((r01*r20))+(((-1.0)*r00*r21)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11040=IKPowWithIntegerCheck(((((-1.0)*gconst32*r00))+((gconst31*r01))),-1);
if(!x11040.valid){
continue;
}
CheckValue<IkReal> x11041=IKPowWithIntegerCheck(r12,-1);
if(!x11041.valid){
continue;
}
if( IKabs((cj1*cj2*sj3*(x11040.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*cj3*(x11041.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*cj2*sj3*(x11040.value)))+IKsqr((cj1*cj3*(x11041.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj1*cj2*sj3*(x11040.value)), (cj1*cj3*(x11041.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11042=IKsin(j5);
IkReal x11043=IKcos(j5);
IkReal x11044=(cj1*sj3);
IkReal x11045=((1.0)*r12);
IkReal x11046=(gconst31*r01);
IkReal x11047=(gconst31*r21);
IkReal x11048=(cj1*cj3);
IkReal x11049=(gconst32*x11043);
IkReal x11050=((1.0)*x11043);
IkReal x11051=((1.0)*gconst32*x11042);
evalcond[0]=(x11048+(((-1.0)*x11043*x11045)));
evalcond[1]=(x11044+(((-1.0)*x11042*x11045)));
evalcond[2]=((((-1.0)*r20*x11051))+((x11042*x11047)));
evalcond[3]=(((r20*x11049))+(((-1.0)*x11047*x11050)));
evalcond[4]=(((cj2*x11048))+((r00*x11049))+(((-1.0)*x11046*x11050)));
evalcond[5]=((((-1.0)*r00*x11051))+((x11042*x11046))+(((-1.0)*cj2*x11044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11052=(cj1*cj2);
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal((sj3*x11052)),IkReal((cj3*x11052)),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
CheckValue<IkReal> x11054=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst32*r00))+((gconst31*r01)))),-1);
if(!x11054.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11053.value)+(((1.5707963267949)*(x11054.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11055=IKsin(j5);
IkReal x11056=IKcos(j5);
IkReal x11057=(cj1*sj3);
IkReal x11058=((1.0)*r12);
IkReal x11059=(gconst31*r01);
IkReal x11060=(gconst31*r21);
IkReal x11061=(cj1*cj3);
IkReal x11062=(gconst32*x11056);
IkReal x11063=((1.0)*x11056);
IkReal x11064=((1.0)*gconst32*x11055);
evalcond[0]=(x11061+(((-1.0)*x11056*x11058)));
evalcond[1]=(x11057+(((-1.0)*x11055*x11058)));
evalcond[2]=(((x11055*x11060))+(((-1.0)*r20*x11064)));
evalcond[3]=(((r20*x11062))+(((-1.0)*x11060*x11063)));
evalcond[4]=(((r00*x11062))+(((-1.0)*x11059*x11063))+((cj2*x11061)));
evalcond[5]=((((-1.0)*r00*x11064))+((x11055*x11059))+(((-1.0)*cj2*x11057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11065 = IKatan2WithCheck(IkReal((cj1*sj3)),IkReal((cj1*cj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x11065.valid){
continue;
}
CheckValue<IkReal> x11066=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x11066.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11065.value)+(((1.5707963267949)*(x11066.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11067=IKsin(j5);
IkReal x11068=IKcos(j5);
IkReal x11069=(cj1*sj3);
IkReal x11070=((1.0)*r12);
IkReal x11071=(gconst31*r01);
IkReal x11072=(gconst31*r21);
IkReal x11073=(cj1*cj3);
IkReal x11074=(gconst32*x11068);
IkReal x11075=((1.0)*x11068);
IkReal x11076=((1.0)*gconst32*x11067);
evalcond[0]=(x11073+(((-1.0)*x11068*x11070)));
evalcond[1]=((((-1.0)*x11067*x11070))+x11069);
evalcond[2]=((((-1.0)*r20*x11076))+((x11067*x11072)));
evalcond[3]=((((-1.0)*x11072*x11075))+((r20*x11074)));
evalcond[4]=((((-1.0)*x11071*x11075))+((cj2*x11073))+((r00*x11074)));
evalcond[5]=((((-1.0)*cj2*x11069))+(((-1.0)*r00*x11076))+((x11067*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11080=IKPowWithIntegerCheck(r12,-1);
if(!x11080.valid){
continue;
}
IkReal x11077=x11080.value;
IkReal x11078=((1.0)*sj3);
IkReal x11079=(cj2*sj1);
CheckValue<IkReal> x11081=IKPowWithIntegerCheck(cj4,-1);
if(!x11081.valid){
continue;
}
if( IKabs((x11077*(x11081.value)*(((((-1.0)*cj1*x11078))+(((-1.0)*cj3*x11079)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11077*(((((-1.0)*x11078*x11079))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11077*(x11081.value)*(((((-1.0)*cj1*x11078))+(((-1.0)*cj3*x11079))))))+IKsqr((x11077*(((((-1.0)*x11078*x11079))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x11077*(x11081.value)*(((((-1.0)*cj1*x11078))+(((-1.0)*cj3*x11079))))), (x11077*(((((-1.0)*x11078*x11079))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11082=IKsin(j5);
IkReal x11083=IKcos(j5);
IkReal x11084=(cj1*cj2);
IkReal x11085=((1.0)*sj3);
IkReal x11086=((1.0)*sj2);
IkReal x11087=(cj3*sj1);
IkReal x11088=((1.0)*gconst32);
IkReal x11089=(gconst31*r01);
IkReal x11090=(cj4*r21);
IkReal x11091=(gconst31*r21);
IkReal x11092=(gconst32*sj4);
IkReal x11093=(gconst31*sj4);
IkReal x11094=(r20*x11088);
IkReal x11095=(sj4*x11083);
IkReal x11096=((1.0)*cj4*gconst31);
IkReal x11097=(r12*x11082);
IkReal x11098=(cj4*x11083);
evalcond[0]=((((-1.0)*sj1*x11086))+((sj4*x11097)));
evalcond[1]=(((cj2*x11087))+((cj1*sj3))+((cj4*x11097)));
evalcond[2]=((((-1.0)*r12*x11083))+(((-1.0)*cj2*sj1*x11085))+((cj1*cj3)));
evalcond[3]=(((sj2*sj3))+((x11082*x11091))+(((-1.0)*x11082*x11094)));
evalcond[4]=(((x11082*x11089))+(((-1.0)*x11087))+(((-1.0)*x11084*x11085))+(((-1.0)*r00*x11082*x11088)));
evalcond[5]=(((gconst31*x11083*x11090))+(((-1.0)*x11094*x11098))+((r20*x11093))+(((-1.0)*cj3*x11086))+((r21*x11092)));
evalcond[6]=((((-1.0)*x11094*x11095))+(((-1.0)*r20*x11096))+((x11091*x11095))+(((-1.0)*cj2))+(((-1.0)*x11088*x11090)));
evalcond[7]=((((-1.0)*cj4*r01*x11088))+(((-1.0)*cj1*x11086))+(((-1.0)*r00*x11096))+((x11089*x11095))+(((-1.0)*r00*x11088*x11095)));
evalcond[8]=(((cj3*x11084))+(((-1.0)*sj1*x11085))+((r00*x11093))+((r01*x11092))+((x11089*x11098))+(((-1.0)*r00*x11088*x11098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11100=IKPowWithIntegerCheck(r12,-1);
if(!x11100.valid){
continue;
}
IkReal x11099=x11100.value;
CheckValue<IkReal> x11101=IKPowWithIntegerCheck(sj4,-1);
if(!x11101.valid){
continue;
}
if( IKabs((sj1*sj2*x11099*(x11101.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11099*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*x11099*(x11101.value)))+IKsqr((x11099*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*x11099*(x11101.value)), (x11099*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11102=IKsin(j5);
IkReal x11103=IKcos(j5);
IkReal x11104=(cj1*cj2);
IkReal x11105=((1.0)*sj3);
IkReal x11106=((1.0)*sj2);
IkReal x11107=(cj3*sj1);
IkReal x11108=((1.0)*gconst32);
IkReal x11109=(gconst31*r01);
IkReal x11110=(cj4*r21);
IkReal x11111=(gconst31*r21);
IkReal x11112=(gconst32*sj4);
IkReal x11113=(gconst31*sj4);
IkReal x11114=(r20*x11108);
IkReal x11115=(sj4*x11103);
IkReal x11116=((1.0)*cj4*gconst31);
IkReal x11117=(r12*x11102);
IkReal x11118=(cj4*x11103);
evalcond[0]=(((sj4*x11117))+(((-1.0)*sj1*x11106)));
evalcond[1]=(((cj4*x11117))+((cj1*sj3))+((cj2*x11107)));
evalcond[2]=(((cj1*cj3))+(((-1.0)*cj2*sj1*x11105))+(((-1.0)*r12*x11103)));
evalcond[3]=(((sj2*sj3))+((x11102*x11111))+(((-1.0)*x11102*x11114)));
evalcond[4]=((((-1.0)*x11107))+(((-1.0)*x11104*x11105))+((x11102*x11109))+(((-1.0)*r00*x11102*x11108)));
evalcond[5]=((((-1.0)*cj3*x11106))+(((-1.0)*x11114*x11118))+((gconst31*x11103*x11110))+((r21*x11112))+((r20*x11113)));
evalcond[6]=((((-1.0)*x11108*x11110))+((x11111*x11115))+(((-1.0)*x11114*x11115))+(((-1.0)*cj2))+(((-1.0)*r20*x11116)));
evalcond[7]=((((-1.0)*cj4*r01*x11108))+(((-1.0)*cj1*x11106))+(((-1.0)*r00*x11108*x11115))+(((-1.0)*r00*x11116))+((x11109*x11115)));
evalcond[8]=((((-1.0)*r00*x11108*x11118))+(((-1.0)*sj1*x11105))+((cj3*x11104))+((x11109*x11118))+((r00*x11113))+((r01*x11112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11119=(cj2*sj3);
CheckValue<IkReal> x11120=IKPowWithIntegerCheck(((((-1.0)*gconst32*r00))+((gconst31*r01))),-1);
if(!x11120.valid){
continue;
}
CheckValue<IkReal> x11121=IKPowWithIntegerCheck(r12,-1);
if(!x11121.valid){
continue;
}
if( IKabs(((x11120.value)*((((cj1*x11119))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11121.value)*(((((-1.0)*sj1*x11119))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11120.value)*((((cj1*x11119))+((cj3*sj1))))))+IKsqr(((x11121.value)*(((((-1.0)*sj1*x11119))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x11120.value)*((((cj1*x11119))+((cj3*sj1))))), ((x11121.value)*(((((-1.0)*sj1*x11119))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11122=IKsin(j5);
IkReal x11123=IKcos(j5);
IkReal x11124=(cj1*cj2);
IkReal x11125=((1.0)*sj3);
IkReal x11126=((1.0)*sj2);
IkReal x11127=(cj3*sj1);
IkReal x11128=((1.0)*gconst32);
IkReal x11129=(gconst31*r01);
IkReal x11130=(cj4*r21);
IkReal x11131=(gconst31*r21);
IkReal x11132=(gconst32*sj4);
IkReal x11133=(gconst31*sj4);
IkReal x11134=(r20*x11128);
IkReal x11135=(sj4*x11123);
IkReal x11136=((1.0)*cj4*gconst31);
IkReal x11137=(r12*x11122);
IkReal x11138=(cj4*x11123);
evalcond[0]=((((-1.0)*sj1*x11126))+((sj4*x11137)));
evalcond[1]=(((cj4*x11137))+((cj1*sj3))+((cj2*x11127)));
evalcond[2]=((((-1.0)*r12*x11123))+(((-1.0)*cj2*sj1*x11125))+((cj1*cj3)));
evalcond[3]=(((sj2*sj3))+((x11122*x11131))+(((-1.0)*x11122*x11134)));
evalcond[4]=((((-1.0)*x11127))+((x11122*x11129))+(((-1.0)*r00*x11122*x11128))+(((-1.0)*x11124*x11125)));
evalcond[5]=((((-1.0)*x11134*x11138))+(((-1.0)*cj3*x11126))+((r21*x11132))+((r20*x11133))+((gconst31*x11123*x11130)));
evalcond[6]=((((-1.0)*r20*x11136))+(((-1.0)*x11134*x11135))+((x11131*x11135))+(((-1.0)*x11128*x11130))+(((-1.0)*cj2)));
evalcond[7]=((((-1.0)*cj1*x11126))+((x11129*x11135))+(((-1.0)*cj4*r01*x11128))+(((-1.0)*r00*x11128*x11135))+(((-1.0)*r00*x11136)));
evalcond[8]=((((-1.0)*sj1*x11125))+((x11129*x11138))+(((-1.0)*r00*x11128*x11138))+((cj3*x11124))+((r01*x11132))+((r00*x11133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11139=((-1.0)*r20);
CheckValue<IkReal> x11140 = IKatan2WithCheck(IkReal(x11139),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11140.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x11140.value))));
IkReal gconst34=x11139;
IkReal gconst35=((-1.0)*r21);
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11141.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x11142=((-1.0)*r20);
IkReal x11143=((-1.0)*r21);
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(x11142),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
IkReal x11144=((1.0)*(x11145.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11142);
rxp0_2=(py*r00);
rxp1_0=(py*x11143);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11144)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11144)));
IkReal gconst34=x11142;
IkReal gconst35=x11143;
j5eval[0]=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11146=((-1.0)*r20);
IkReal x11147=((-1.0)*r21);
CheckValue<IkReal> x11149 = IKatan2WithCheck(IkReal(x11146),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11149.valid){
continue;
}
IkReal x11148=((1.0)*(x11149.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11146);
rxp0_2=(py*r00);
rxp1_0=(py*x11147);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11148)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11148)));
IkReal gconst34=x11146;
IkReal gconst35=x11147;
j5eval[0]=r12;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11150=((-1.0)*r20);
IkReal x11151=((-1.0)*r21);
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(x11150),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
IkReal x11152=((1.0)*(x11153.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11150);
rxp0_2=(py*r00);
rxp1_0=(py*x11151);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11152)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11152)));
IkReal gconst34=x11150;
IkReal gconst35=x11151;
j5eval[0]=cj4;
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x11154=((-1.0)*r20);
IkReal x11155=((-1.0)*r21);
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(x11154),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
IkReal x11156=((1.0)*(x11157.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11154);
rxp0_2=(py*r00);
rxp1_0=(py*x11155);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11156)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11156)));
IkReal gconst34=x11154;
IkReal gconst35=x11155;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x11158=((-1.0)*r20);
IkReal x11159=((-1.0)*r21);
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(x11158),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
IkReal x11160=((1.0)*(x11161.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11158);
rxp0_2=(py*r00);
rxp1_0=(py*x11159);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11160)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11160)));
IkReal gconst34=x11158;
IkReal gconst35=x11159;
IkReal x11162=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[0]=x11162;
j5eval[1]=IKsign(x11162);
j5eval[2]=((IKabs((((cj1*cj2*sj3))+((cj3*sj1)))))+(IKabs((cj1*sj2))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11163=((-1.0)*r20);
IkReal x11164=((-1.0)*r21);
CheckValue<IkReal> x11166 = IKatan2WithCheck(IkReal(x11163),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11166.valid){
continue;
}
IkReal x11165=((1.0)*(x11166.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11163);
rxp0_2=(py*r00);
rxp1_0=(py*x11164);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11165)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11165)));
IkReal gconst34=x11163;
IkReal gconst35=x11164;
j5eval[0]=r12;
j5eval[1]=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11167=IKPowWithIntegerCheck(r12,-1);
if(!x11167.valid){
continue;
}
CheckValue<IkReal> x11168=IKPowWithIntegerCheck(((((-1.0)*gconst35*r00))+((gconst34*r01))),-1);
if(!x11168.valid){
continue;
}
if( IKabs((sj1*sj2*(x11167.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x11168.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x11167.value)))+IKsqr((cj1*sj2*(x11168.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*(x11167.value)), (cj1*sj2*(x11168.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11169=IKsin(j5);
IkReal x11170=IKcos(j5);
IkReal x11171=((1.0)*sj1);
IkReal x11172=(cj2*sj3);
IkReal x11173=((1.0)*gconst35);
IkReal x11174=((1.0)*cj1);
IkReal x11175=(gconst34*x11170);
IkReal x11176=(gconst34*x11169);
evalcond[0]=(((r12*x11169))+(((-1.0)*sj2*x11171)));
evalcond[1]=((((-1.0)*r12*x11170))+(((-1.0)*x11171*x11172))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*r20*x11169*x11173))+((r21*x11176)));
evalcond[3]=((((-1.0)*r20*x11170*x11173))+((r21*x11175))+(((-1.0)*cj2)));
evalcond[4]=(((r01*x11175))+(((-1.0)*sj2*x11174))+(((-1.0)*r00*x11170*x11173)));
evalcond[5]=(((r01*x11176))+(((-1.0)*x11172*x11174))+(((-1.0)*r00*x11169*x11173))+(((-1.0)*cj3*x11171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11177 = IKatan2WithCheck(IkReal((((cj1*cj2*sj3))+((cj3*sj1)))),IkReal((cj1*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x11177.valid){
continue;
}
CheckValue<IkReal> x11178=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+((gconst34*r01)))),-1);
if(!x11178.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11177.value)+(((1.5707963267949)*(x11178.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11179=IKsin(j5);
IkReal x11180=IKcos(j5);
IkReal x11181=((1.0)*sj1);
IkReal x11182=(cj2*sj3);
IkReal x11183=((1.0)*gconst35);
IkReal x11184=((1.0)*cj1);
IkReal x11185=(gconst34*x11180);
IkReal x11186=(gconst34*x11179);
evalcond[0]=((((-1.0)*sj2*x11181))+((r12*x11179)));
evalcond[1]=((((-1.0)*x11181*x11182))+(((-1.0)*r12*x11180))+((cj1*cj3)));
evalcond[2]=(((sj2*sj3))+(((-1.0)*r20*x11179*x11183))+((r21*x11186)));
evalcond[3]=((((-1.0)*r20*x11180*x11183))+(((-1.0)*cj2))+((r21*x11185)));
evalcond[4]=((((-1.0)*sj2*x11184))+((r01*x11185))+(((-1.0)*r00*x11180*x11183)));
evalcond[5]=((((-1.0)*r00*x11179*x11183))+(((-1.0)*x11182*x11184))+((r01*x11186))+(((-1.0)*cj3*x11181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
CheckValue<IkReal> x11188=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x11188.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11187.value)+(((1.5707963267949)*(x11188.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11189=IKsin(j5);
IkReal x11190=IKcos(j5);
IkReal x11191=((1.0)*sj1);
IkReal x11192=(cj2*sj3);
IkReal x11193=((1.0)*gconst35);
IkReal x11194=((1.0)*cj1);
IkReal x11195=(gconst34*x11190);
IkReal x11196=(gconst34*x11189);
evalcond[0]=((((-1.0)*sj2*x11191))+((r12*x11189)));
evalcond[1]=((((-1.0)*r12*x11190))+(((-1.0)*x11191*x11192))+((cj1*cj3)));
evalcond[2]=(((r21*x11196))+((sj2*sj3))+(((-1.0)*r20*x11189*x11193)));
evalcond[3]=(((r21*x11195))+(((-1.0)*r20*x11190*x11193))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x11194))+(((-1.0)*r00*x11190*x11193))+((r01*x11195)));
evalcond[5]=((((-1.0)*r00*x11189*x11193))+((r01*x11196))+(((-1.0)*cj3*x11191))+(((-1.0)*x11192*x11194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x11197=((-1.0)*r20);
IkReal x11198=((-1.0)*r21);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11199=((1.0)*(x11200.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11197);
rxp0_2=(py*r00);
rxp1_0=(py*x11198);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11199)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst34=x11197;
IkReal gconst35=x11198;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((sj1*sj2)))+(IKabs(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x11201=((-1.0)*r20);
IkReal x11202=((-1.0)*r21);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(x11201),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11203=((1.0)*(x11204.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11201);
rxp0_2=(py*r00);
rxp1_0=(py*x11202);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11203)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11203)));
IkReal gconst34=x11201;
IkReal gconst35=x11202;
IkReal x11205=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[0]=x11205;
j5eval[1]=IKsign(x11205);
j5eval[2]=((IKabs((((cj1*cj2*sj3))+((cj3*sj1)))))+(IKabs((cj1*sj2))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11206=((-1.0)*r20);
IkReal x11207=((-1.0)*r21);
CheckValue<IkReal> x11209 = IKatan2WithCheck(IkReal(x11206),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11209.valid){
continue;
}
IkReal x11208=((1.0)*(x11209.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11206);
rxp0_2=(py*r00);
rxp1_0=(py*x11207);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11208)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11208)));
IkReal gconst34=x11206;
IkReal gconst35=x11207;
j5eval[0]=r12;
j5eval[1]=((((1.0)*r01*r20))+(((-1.0)*r00*r21)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11210=IKPowWithIntegerCheck(r12,-1);
if(!x11210.valid){
continue;
}
CheckValue<IkReal> x11211=IKPowWithIntegerCheck((((gconst35*r00))+(((-1.0)*gconst34*r01))),-1);
if(!x11211.valid){
continue;
}
if( IKabs(((-1.0)*sj1*sj2*(x11210.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*sj2*(x11211.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*sj2*(x11210.value)))+IKsqr((cj1*sj2*(x11211.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj1*sj2*(x11210.value)), (cj1*sj2*(x11211.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11212=IKsin(j5);
IkReal x11213=IKcos(j5);
IkReal x11214=((1.0)*sj1);
IkReal x11215=(cj2*sj3);
IkReal x11216=(gconst34*r01);
IkReal x11217=((1.0)*cj1);
IkReal x11218=(gconst34*r21);
IkReal x11219=((1.0)*x11213);
IkReal x11220=(gconst35*x11213);
IkReal x11221=((1.0)*gconst35*x11212);
evalcond[0]=((((-1.0)*r12*x11212))+(((-1.0)*sj2*x11214)));
evalcond[1]=((((-1.0)*r12*x11219))+((cj1*cj3))+(((-1.0)*x11214*x11215)));
evalcond[2]=(((sj2*sj3))+((x11212*x11218))+(((-1.0)*r20*x11221)));
evalcond[3]=((((-1.0)*x11218*x11219))+((r20*x11220))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*x11216*x11219))+((r00*x11220))+(((-1.0)*sj2*x11217)));
evalcond[5]=((((-1.0)*r00*x11221))+((x11212*x11216))+(((-1.0)*cj3*x11214))+(((-1.0)*x11215*x11217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11222 = IKatan2WithCheck(IkReal((((cj1*cj2*sj3))+((cj3*sj1)))),IkReal(((-1.0)*cj1*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x11222.valid){
continue;
}
CheckValue<IkReal> x11223=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+((gconst34*r01)))),-1);
if(!x11223.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11222.value)+(((1.5707963267949)*(x11223.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11224=IKsin(j5);
IkReal x11225=IKcos(j5);
IkReal x11226=((1.0)*sj1);
IkReal x11227=(cj2*sj3);
IkReal x11228=(gconst34*r01);
IkReal x11229=((1.0)*cj1);
IkReal x11230=(gconst34*r21);
IkReal x11231=((1.0)*x11225);
IkReal x11232=(gconst35*x11225);
IkReal x11233=((1.0)*gconst35*x11224);
evalcond[0]=((((-1.0)*sj2*x11226))+(((-1.0)*r12*x11224)));
evalcond[1]=(((cj1*cj3))+(((-1.0)*r12*x11231))+(((-1.0)*x11226*x11227)));
evalcond[2]=(((sj2*sj3))+((x11224*x11230))+(((-1.0)*r20*x11233)));
evalcond[3]=((((-1.0)*x11230*x11231))+((r20*x11232))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x11229))+(((-1.0)*x11228*x11231))+((r00*x11232)));
evalcond[5]=(((x11224*x11228))+(((-1.0)*r00*x11233))+(((-1.0)*cj3*x11226))+(((-1.0)*x11227*x11229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11234=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x11234.valid){
continue;
}
CheckValue<IkReal> x11235 = IKatan2WithCheck(IkReal(((-1.0)*sj1*sj2)),IkReal(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11235.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11234.value)))+(x11235.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11236=IKsin(j5);
IkReal x11237=IKcos(j5);
IkReal x11238=((1.0)*sj1);
IkReal x11239=(cj2*sj3);
IkReal x11240=(gconst34*r01);
IkReal x11241=((1.0)*cj1);
IkReal x11242=(gconst34*r21);
IkReal x11243=((1.0)*x11237);
IkReal x11244=(gconst35*x11237);
IkReal x11245=((1.0)*gconst35*x11236);
evalcond[0]=((((-1.0)*sj2*x11238))+(((-1.0)*r12*x11236)));
evalcond[1]=((((-1.0)*x11238*x11239))+((cj1*cj3))+(((-1.0)*r12*x11243)));
evalcond[2]=(((sj2*sj3))+((x11236*x11242))+(((-1.0)*r20*x11245)));
evalcond[3]=(((r20*x11244))+(((-1.0)*x11242*x11243))+(((-1.0)*cj2)));
evalcond[4]=((((-1.0)*sj2*x11241))+((r00*x11244))+(((-1.0)*x11240*x11243)));
evalcond[5]=((((-1.0)*cj3*x11238))+(((-1.0)*r00*x11245))+((x11236*x11240))+(((-1.0)*x11239*x11241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x11246=((-1.0)*r20);
IkReal x11247=((-1.0)*r21);
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal(x11246),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
IkReal x11248=((1.0)*(x11249.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11246);
rxp0_2=(py*r00);
rxp1_0=(py*x11247);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11248)));
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11248)));
IkReal gconst34=x11246;
IkReal gconst35=x11247;
j5eval[0]=r12;
j5eval[1]=IKsign(r12);
j5eval[2]=((IKabs((cj1*cj3)))+(IKabs((cj1*sj3))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x11250=((-1.0)*r20);
IkReal x11251=((-1.0)*r21);
CheckValue<IkReal> x11253 = IKatan2WithCheck(IkReal(x11250),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11253.valid){
continue;
}
IkReal x11252=((1.0)*(x11253.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11250);
rxp0_2=(py*r00);
rxp1_0=(py*x11251);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11252)));
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11252)));
IkReal gconst34=x11250;
IkReal gconst35=x11251;
IkReal x11254=(cj1*cj2);
IkReal x11255=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[0]=x11255;
j5eval[1]=IKsign(x11255);
j5eval[2]=((IKabs((cj3*x11254)))+(IKabs((sj3*x11254))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11256=((-1.0)*r20);
IkReal x11257=((-1.0)*r21);
CheckValue<IkReal> x11259 = IKatan2WithCheck(IkReal(x11256),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11259.valid){
continue;
}
IkReal x11258=((1.0)*(x11259.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11256);
rxp0_2=(py*r00);
rxp1_0=(py*x11257);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11258)));
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11258)));
IkReal gconst34=x11256;
IkReal gconst35=x11257;
j5eval[0]=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11260=IKPowWithIntegerCheck(((((-1.0)*gconst35*r00))+((gconst34*r01))),-1);
if(!x11260.valid){
continue;
}
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(r12,-1);
if(!x11261.valid){
continue;
}
if( IKabs((cj1*cj2*sj3*(x11260.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*cj3*(x11261.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*cj2*sj3*(x11260.value)))+IKsqr((cj1*cj3*(x11261.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj1*cj2*sj3*(x11260.value)), (cj1*cj3*(x11261.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11262=IKsin(j5);
IkReal x11263=IKcos(j5);
IkReal x11264=(gconst34*r01);
IkReal x11265=(cj1*sj3);
IkReal x11266=(gconst35*r20);
IkReal x11267=(cj1*cj3);
IkReal x11268=(gconst34*r21);
IkReal x11269=((1.0)*gconst35*r00);
IkReal x11270=((1.0)*x11263);
evalcond[0]=(x11265+((r12*x11262)));
evalcond[1]=((((-1.0)*r12*x11270))+x11267);
evalcond[2]=(((x11262*x11268))+(((-1.0)*x11262*x11266)));
evalcond[3]=(((x11263*x11268))+(((-1.0)*x11266*x11270)));
evalcond[4]=((((-1.0)*x11263*x11269))+((cj2*x11267))+((x11263*x11264)));
evalcond[5]=(((x11262*x11264))+(((-1.0)*cj2*x11265))+(((-1.0)*x11262*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11271=(cj1*cj2);
CheckValue<IkReal> x11272 = IKatan2WithCheck(IkReal((sj3*x11271)),IkReal(((-1.0)*cj3*x11271)),IKFAST_ATAN2_MAGTHRESH);
if(!x11272.valid){
continue;
}
CheckValue<IkReal> x11273=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+((gconst34*r01)))),-1);
if(!x11273.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11272.value)+(((1.5707963267949)*(x11273.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11274=IKsin(j5);
IkReal x11275=IKcos(j5);
IkReal x11276=(gconst34*r01);
IkReal x11277=(cj1*sj3);
IkReal x11278=(gconst35*r20);
IkReal x11279=(cj1*cj3);
IkReal x11280=(gconst34*r21);
IkReal x11281=((1.0)*gconst35*r00);
IkReal x11282=((1.0)*x11275);
evalcond[0]=(((r12*x11274))+x11277);
evalcond[1]=((((-1.0)*r12*x11282))+x11279);
evalcond[2]=((((-1.0)*x11274*x11278))+((x11274*x11280)));
evalcond[3]=(((x11275*x11280))+(((-1.0)*x11278*x11282)));
evalcond[4]=((((-1.0)*x11275*x11281))+((cj2*x11279))+((x11275*x11276)));
evalcond[5]=((((-1.0)*x11274*x11281))+(((-1.0)*cj2*x11277))+((x11274*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11283 = IKatan2WithCheck(IkReal(((-1.0)*cj1*sj3)),IkReal((cj1*cj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x11283.valid){
continue;
}
CheckValue<IkReal> x11284=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x11284.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11283.value)+(((1.5707963267949)*(x11284.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11285=IKsin(j5);
IkReal x11286=IKcos(j5);
IkReal x11287=(gconst34*r01);
IkReal x11288=(cj1*sj3);
IkReal x11289=(gconst35*r20);
IkReal x11290=(cj1*cj3);
IkReal x11291=(gconst34*r21);
IkReal x11292=((1.0)*gconst35*r00);
IkReal x11293=((1.0)*x11286);
evalcond[0]=(x11288+((r12*x11285)));
evalcond[1]=(x11290+(((-1.0)*r12*x11293)));
evalcond[2]=((((-1.0)*x11285*x11289))+((x11285*x11291)));
evalcond[3]=((((-1.0)*x11289*x11293))+((x11286*x11291)));
evalcond[4]=((((-1.0)*x11286*x11292))+((cj2*x11290))+((x11286*x11287)));
evalcond[5]=((((-1.0)*x11285*x11292))+((x11285*x11287))+(((-1.0)*cj2*x11288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
IkReal x11294=((-1.0)*r20);
IkReal x11295=((-1.0)*r21);
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(x11294),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
IkReal x11296=((1.0)*(x11297.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11294);
rxp0_2=(py*r00);
rxp1_0=(py*x11295);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11296)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11296)));
IkReal gconst34=x11294;
IkReal gconst35=x11295;
j5eval[0]=r12;
j5eval[1]=((IKabs((cj1*cj3)))+(IKabs((cj1*sj3))));
j5eval[2]=IKsign(r12);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x11298=((-1.0)*r20);
IkReal x11299=((-1.0)*r21);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(x11298),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11300=((1.0)*(x11301.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11298);
rxp0_2=(py*r00);
rxp1_0=(py*x11299);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11300)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11300)));
IkReal gconst34=x11298;
IkReal gconst35=x11299;
IkReal x11302=(cj1*cj2);
IkReal x11303=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[0]=x11303;
j5eval[1]=((IKabs((cj3*x11302)))+(IKabs((sj3*x11302))));
j5eval[2]=IKsign(x11303);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x11304=((-1.0)*r20);
IkReal x11305=((-1.0)*r21);
CheckValue<IkReal> x11307 = IKatan2WithCheck(IkReal(x11304),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x11307.valid){
continue;
}
IkReal x11306=((1.0)*(x11307.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11304);
rxp0_2=(py*r00);
rxp1_0=(py*x11305);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj6=gconst34;
cj6=gconst35;
j6=((3.14159265)+(((-1.0)*x11306)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11306)));
IkReal gconst34=x11304;
IkReal gconst35=x11305;
j5eval[0]=((((1.0)*r00*r21))+(((-1.0)*r01*r20)));
j5eval[1]=r12;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11308=IKPowWithIntegerCheck(((((-1.0)*gconst35*r00))+((gconst34*r01))),-1);
if(!x11308.valid){
continue;
}
CheckValue<IkReal> x11309=IKPowWithIntegerCheck(r12,-1);
if(!x11309.valid){
continue;
}
if( IKabs((cj1*cj2*sj3*(x11308.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj1*cj3*(x11309.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*cj2*sj3*(x11308.value)))+IKsqr((cj1*cj3*(x11309.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((cj1*cj2*sj3*(x11308.value)), (cj1*cj3*(x11309.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11310=IKsin(j5);
IkReal x11311=IKcos(j5);
IkReal x11312=(cj1*sj3);
IkReal x11313=(gconst34*r01);
IkReal x11314=(gconst34*r21);
IkReal x11315=(gconst35*r00);
IkReal x11316=(cj1*cj3);
IkReal x11317=(gconst35*r20);
IkReal x11318=((1.0)*x11311);
IkReal x11319=((1.0)*x11310);
evalcond[0]=(x11316+(((-1.0)*r12*x11318)));
evalcond[1]=(x11312+(((-1.0)*r12*x11319)));
evalcond[2]=((((-1.0)*x11317*x11319))+((x11310*x11314)));
evalcond[3]=(((x11311*x11317))+(((-1.0)*x11314*x11318)));
evalcond[4]=(((x11311*x11315))+(((-1.0)*x11313*x11318))+((cj2*x11316)));
evalcond[5]=((((-1.0)*cj2*x11312))+((x11310*x11313))+(((-1.0)*x11315*x11319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11320=(cj1*cj2);
CheckValue<IkReal> x11321=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+((gconst34*r01)))),-1);
if(!x11321.valid){
continue;
}
CheckValue<IkReal> x11322 = IKatan2WithCheck(IkReal((sj3*x11320)),IkReal((cj3*x11320)),IKFAST_ATAN2_MAGTHRESH);
if(!x11322.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11321.value)))+(x11322.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11323=IKsin(j5);
IkReal x11324=IKcos(j5);
IkReal x11325=(cj1*sj3);
IkReal x11326=(gconst34*r01);
IkReal x11327=(gconst34*r21);
IkReal x11328=(gconst35*r00);
IkReal x11329=(cj1*cj3);
IkReal x11330=(gconst35*r20);
IkReal x11331=((1.0)*x11324);
IkReal x11332=((1.0)*x11323);
evalcond[0]=((((-1.0)*r12*x11331))+x11329);
evalcond[1]=((((-1.0)*r12*x11332))+x11325);
evalcond[2]=(((x11323*x11327))+(((-1.0)*x11330*x11332)));
evalcond[3]=(((x11324*x11330))+(((-1.0)*x11327*x11331)));
evalcond[4]=(((cj2*x11329))+((x11324*x11328))+(((-1.0)*x11326*x11331)));
evalcond[5]=(((x11323*x11326))+(((-1.0)*cj2*x11325))+(((-1.0)*x11328*x11332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11333 = IKatan2WithCheck(IkReal((cj1*sj3)),IkReal((cj1*cj3)),IKFAST_ATAN2_MAGTHRESH);
if(!x11333.valid){
continue;
}
CheckValue<IkReal> x11334=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x11334.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11333.value)+(((1.5707963267949)*(x11334.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x11335=IKsin(j5);
IkReal x11336=IKcos(j5);
IkReal x11337=(cj1*sj3);
IkReal x11338=(gconst34*r01);
IkReal x11339=(gconst34*r21);
IkReal x11340=(gconst35*r00);
IkReal x11341=(cj1*cj3);
IkReal x11342=(gconst35*r20);
IkReal x11343=((1.0)*x11336);
IkReal x11344=((1.0)*x11335);
evalcond[0]=(x11341+(((-1.0)*r12*x11343)));
evalcond[1]=(x11337+(((-1.0)*r12*x11344)));
evalcond[2]=((((-1.0)*x11342*x11344))+((x11335*x11339)));
evalcond[3]=((((-1.0)*x11339*x11343))+((x11336*x11342)));
evalcond[4]=((((-1.0)*x11338*x11343))+((cj2*x11341))+((x11336*x11340)));
evalcond[5]=((((-1.0)*cj2*x11337))+((x11335*x11338))+(((-1.0)*x11340*x11344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11348=IKPowWithIntegerCheck(r12,-1);
if(!x11348.valid){
continue;
}
IkReal x11345=x11348.value;
IkReal x11346=((1.0)*sj3);
IkReal x11347=(cj2*sj1);
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(cj4,-1);
if(!x11349.valid){
continue;
}
if( IKabs((x11345*(x11349.value)*(((((-1.0)*cj3*x11347))+(((-1.0)*cj1*x11346)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11345*(((((-1.0)*x11346*x11347))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11345*(x11349.value)*(((((-1.0)*cj3*x11347))+(((-1.0)*cj1*x11346))))))+IKsqr((x11345*(((((-1.0)*x11346*x11347))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x11345*(x11349.value)*(((((-1.0)*cj3*x11347))+(((-1.0)*cj1*x11346))))), (x11345*(((((-1.0)*x11346*x11347))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11350=IKsin(j5);
IkReal x11351=IKcos(j5);
IkReal x11352=(gconst34*r01);
IkReal x11353=(cj1*cj2);
IkReal x11354=((1.0)*sj3);
IkReal x11355=((1.0)*gconst35);
IkReal x11356=(gconst34*r21);
IkReal x11357=(cj3*sj1);
IkReal x11358=((1.0)*sj2);
IkReal x11359=(gconst34*r20);
IkReal x11360=((1.0)*cj4);
IkReal x11361=(gconst35*sj4);
IkReal x11362=(gconst34*r00);
IkReal x11363=(cj4*x11351);
IkReal x11364=(r12*x11350);
IkReal x11365=(sj4*x11351);
evalcond[0]=(((sj4*x11364))+(((-1.0)*sj1*x11358)));
evalcond[1]=(((cj1*sj3))+((cj4*x11364))+((cj2*x11357)));
evalcond[2]=((((-1.0)*cj2*sj1*x11354))+(((-1.0)*r12*x11351))+((cj1*cj3)));
evalcond[3]=(((sj2*sj3))+(((-1.0)*r20*x11350*x11355))+((x11350*x11356)));
evalcond[4]=((((-1.0)*x11353*x11354))+(((-1.0)*r00*x11350*x11355))+(((-1.0)*x11357))+((x11350*x11352)));
evalcond[5]=(((r21*x11361))+(((-1.0)*cj3*x11358))+(((-1.0)*r20*x11355*x11363))+((x11356*x11363))+((sj4*x11359)));
evalcond[6]=((((-1.0)*r20*x11355*x11365))+(((-1.0)*x11359*x11360))+(((-1.0)*cj4*r21*x11355))+((x11356*x11365))+(((-1.0)*cj2)));
evalcond[7]=((((-1.0)*cj1*x11358))+(((-1.0)*cj4*r01*x11355))+(((-1.0)*x11360*x11362))+((x11352*x11365))+(((-1.0)*r00*x11355*x11365)));
evalcond[8]=(((r01*x11361))+((sj4*x11362))+(((-1.0)*sj1*x11354))+((cj3*x11353))+((x11352*x11363))+(((-1.0)*r00*x11355*x11363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11367=IKPowWithIntegerCheck(r12,-1);
if(!x11367.valid){
continue;
}
IkReal x11366=x11367.value;
CheckValue<IkReal> x11368=IKPowWithIntegerCheck(sj4,-1);
if(!x11368.valid){
continue;
}
if( IKabs((sj1*sj2*x11366*(x11368.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11366*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*x11366*(x11368.value)))+IKsqr((x11366*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*x11366*(x11368.value)), (x11366*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11369=IKsin(j5);
IkReal x11370=IKcos(j5);
IkReal x11371=(gconst34*r01);
IkReal x11372=(cj1*cj2);
IkReal x11373=((1.0)*sj3);
IkReal x11374=((1.0)*gconst35);
IkReal x11375=(gconst34*r21);
IkReal x11376=(cj3*sj1);
IkReal x11377=((1.0)*sj2);
IkReal x11378=(gconst34*r20);
IkReal x11379=((1.0)*cj4);
IkReal x11380=(gconst35*sj4);
IkReal x11381=(gconst34*r00);
IkReal x11382=(cj4*x11370);
IkReal x11383=(r12*x11369);
IkReal x11384=(sj4*x11370);
evalcond[0]=((((-1.0)*sj1*x11377))+((sj4*x11383)));
evalcond[1]=(((cj2*x11376))+((cj1*sj3))+((cj4*x11383)));
evalcond[2]=((((-1.0)*r12*x11370))+((cj1*cj3))+(((-1.0)*cj2*sj1*x11373)));
evalcond[3]=(((sj2*sj3))+((x11369*x11375))+(((-1.0)*r20*x11369*x11374)));
evalcond[4]=((((-1.0)*x11376))+((x11369*x11371))+(((-1.0)*r00*x11369*x11374))+(((-1.0)*x11372*x11373)));
evalcond[5]=(((x11375*x11382))+((sj4*x11378))+((r21*x11380))+(((-1.0)*cj3*x11377))+(((-1.0)*r20*x11374*x11382)));
evalcond[6]=((((-1.0)*cj4*r21*x11374))+((x11375*x11384))+(((-1.0)*x11378*x11379))+(((-1.0)*r20*x11374*x11384))+(((-1.0)*cj2)));
evalcond[7]=((((-1.0)*cj4*r01*x11374))+(((-1.0)*x11379*x11381))+(((-1.0)*cj1*x11377))+(((-1.0)*r00*x11374*x11384))+((x11371*x11384)));
evalcond[8]=((((-1.0)*sj1*x11373))+((cj3*x11372))+((r01*x11380))+((sj4*x11381))+(((-1.0)*r00*x11374*x11382))+((x11371*x11382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11385=(cj2*sj3);
CheckValue<IkReal> x11386=IKPowWithIntegerCheck(((((-1.0)*gconst35*r00))+((gconst34*r01))),-1);
if(!x11386.valid){
continue;
}
CheckValue<IkReal> x11387=IKPowWithIntegerCheck(r12,-1);
if(!x11387.valid){
continue;
}
if( IKabs(((x11386.value)*((((cj1*x11385))+((cj3*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11387.value)*(((((-1.0)*sj1*x11385))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11386.value)*((((cj1*x11385))+((cj3*sj1))))))+IKsqr(((x11387.value)*(((((-1.0)*sj1*x11385))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x11386.value)*((((cj1*x11385))+((cj3*sj1))))), ((x11387.value)*(((((-1.0)*sj1*x11385))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11388=IKsin(j5);
IkReal x11389=IKcos(j5);
IkReal x11390=(gconst34*r01);
IkReal x11391=(cj1*cj2);
IkReal x11392=((1.0)*sj3);
IkReal x11393=((1.0)*gconst35);
IkReal x11394=(gconst34*r21);
IkReal x11395=(cj3*sj1);
IkReal x11396=((1.0)*sj2);
IkReal x11397=(gconst34*r20);
IkReal x11398=((1.0)*cj4);
IkReal x11399=(gconst35*sj4);
IkReal x11400=(gconst34*r00);
IkReal x11401=(cj4*x11389);
IkReal x11402=(r12*x11388);
IkReal x11403=(sj4*x11389);
evalcond[0]=((((-1.0)*sj1*x11396))+((sj4*x11402)));
evalcond[1]=(((cj1*sj3))+((cj2*x11395))+((cj4*x11402)));
evalcond[2]=((((-1.0)*r12*x11389))+((cj1*cj3))+(((-1.0)*cj2*sj1*x11392)));
evalcond[3]=(((sj2*sj3))+((x11388*x11394))+(((-1.0)*r20*x11388*x11393)));
evalcond[4]=((((-1.0)*r00*x11388*x11393))+(((-1.0)*x11391*x11392))+(((-1.0)*x11395))+((x11388*x11390)));
evalcond[5]=((((-1.0)*cj3*x11396))+((sj4*x11397))+((x11394*x11401))+((r21*x11399))+(((-1.0)*r20*x11393*x11401)));
evalcond[6]=((((-1.0)*cj4*r21*x11393))+((x11394*x11403))+(((-1.0)*x11397*x11398))+(((-1.0)*r20*x11393*x11403))+(((-1.0)*cj2)));
evalcond[7]=((((-1.0)*cj1*x11396))+(((-1.0)*cj4*r01*x11393))+((x11390*x11403))+(((-1.0)*r00*x11393*x11403))+(((-1.0)*x11398*x11400)));
evalcond[8]=(((r01*x11399))+(((-1.0)*sj1*x11392))+((cj3*x11391))+((x11390*x11401))+((sj4*x11400))+(((-1.0)*r00*x11393*x11401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11407=IKPowWithIntegerCheck(r12,-1);
if(!x11407.valid){
continue;
}
IkReal x11404=x11407.value;
IkReal x11405=((1.0)*sj3);
IkReal x11406=(cj2*sj1);
CheckValue<IkReal> x11408=IKPowWithIntegerCheck(cj4,-1);
if(!x11408.valid){
continue;
}
if( IKabs((x11404*(x11408.value)*(((((-1.0)*cj1*x11405))+(((-1.0)*cj3*x11406)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11404*(((((-1.0)*x11405*x11406))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11404*(x11408.value)*(((((-1.0)*cj1*x11405))+(((-1.0)*cj3*x11406))))))+IKsqr((x11404*(((((-1.0)*x11405*x11406))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x11404*(x11408.value)*(((((-1.0)*cj1*x11405))+(((-1.0)*cj3*x11406))))), (x11404*(((((-1.0)*x11405*x11406))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11409=IKsin(j5);
IkReal x11410=IKcos(j5);
IkReal x11411=((1.0)*cj1);
IkReal x11412=(sj4*sj6);
IkReal x11413=(cj2*sj3);
IkReal x11414=(cj2*cj3);
IkReal x11415=((1.0)*sj1);
IkReal x11416=(cj4*sj6);
IkReal x11417=((1.0)*r20);
IkReal x11418=((1.0)*r00);
IkReal x11419=(cj6*sj4);
IkReal x11420=(sj6*x11409);
IkReal x11421=(r21*x11410);
IkReal x11422=(r12*x11409);
IkReal x11423=(r01*x11410);
IkReal x11424=(cj6*x11410);
IkReal x11425=(cj6*x11409);
IkReal x11426=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*sj2*x11415))+((sj4*x11422)));
evalcond[1]=(((cj1*sj3))+((sj1*x11414))+((cj4*x11422)));
evalcond[2]=((((-1.0)*x11413*x11415))+((cj1*cj3))+(((-1.0)*r12*x11410)));
evalcond[3]=((((-1.0)*x11417*x11425))+((sj2*sj3))+((r21*x11420)));
evalcond[4]=(((r01*x11420))+(((-1.0)*cj3*x11415))+(((-1.0)*x11411*x11413))+(((-1.0)*x11418*x11425)));
evalcond[5]=((((-1.0)*cj4*x11417*x11424))+((r21*x11419))+(((-1.0)*cj3*sj2))+((x11416*x11421))+((r20*x11412)));
evalcond[6]=(((x11412*x11421))+(((-1.0)*x11416*x11417))+(((-1.0)*r21*x11426))+(((-1.0)*x11410*x11417*x11419))+(((-1.0)*cj2)));
evalcond[7]=(((x11412*x11423))+(((-1.0)*r01*x11426))+(((-1.0)*sj2*x11411))+(((-1.0)*x11416*x11418))+(((-1.0)*x11410*x11418*x11419)));
evalcond[8]=(((r01*x11419))+(((-1.0)*sj3*x11415))+((r00*x11412))+(((-1.0)*cj4*x11418*x11424))+((x11416*x11423))+((cj1*x11414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11428=IKPowWithIntegerCheck(r12,-1);
if(!x11428.valid){
continue;
}
IkReal x11427=x11428.value;
CheckValue<IkReal> x11429=IKPowWithIntegerCheck(sj4,-1);
if(!x11429.valid){
continue;
}
if( IKabs((sj1*sj2*x11427*(x11429.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11427*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*x11427*(x11429.value)))+IKsqr((x11427*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((sj1*sj2*x11427*(x11429.value)), (x11427*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11430=IKsin(j5);
IkReal x11431=IKcos(j5);
IkReal x11432=((1.0)*cj1);
IkReal x11433=(sj4*sj6);
IkReal x11434=(cj2*sj3);
IkReal x11435=(cj2*cj3);
IkReal x11436=((1.0)*sj1);
IkReal x11437=(cj4*sj6);
IkReal x11438=((1.0)*r20);
IkReal x11439=((1.0)*r00);
IkReal x11440=(cj6*sj4);
IkReal x11441=(sj6*x11430);
IkReal x11442=(r21*x11431);
IkReal x11443=(r12*x11430);
IkReal x11444=(r01*x11431);
IkReal x11445=(cj6*x11431);
IkReal x11446=(cj6*x11430);
IkReal x11447=((1.0)*cj4*cj6);
evalcond[0]=(((sj4*x11443))+(((-1.0)*sj2*x11436)));
evalcond[1]=(((cj1*sj3))+((sj1*x11435))+((cj4*x11443)));
evalcond[2]=((((-1.0)*r12*x11431))+(((-1.0)*x11434*x11436))+((cj1*cj3)));
evalcond[3]=(((sj2*sj3))+(((-1.0)*x11438*x11446))+((r21*x11441)));
evalcond[4]=((((-1.0)*x11439*x11446))+(((-1.0)*cj3*x11436))+(((-1.0)*x11432*x11434))+((r01*x11441)));
evalcond[5]=(((r20*x11433))+(((-1.0)*cj4*x11438*x11445))+((x11437*x11442))+(((-1.0)*cj3*sj2))+((r21*x11440)));
evalcond[6]=(((x11433*x11442))+(((-1.0)*r21*x11447))+(((-1.0)*x11437*x11438))+(((-1.0)*x11431*x11438*x11440))+(((-1.0)*cj2)));
evalcond[7]=(((x11433*x11444))+(((-1.0)*x11437*x11439))+(((-1.0)*x11431*x11439*x11440))+(((-1.0)*r01*x11447))+(((-1.0)*sj2*x11432)));
evalcond[8]=(((x11437*x11444))+(((-1.0)*cj4*x11439*x11445))+((r00*x11433))+((cj1*x11435))+(((-1.0)*sj3*x11436))+((r01*x11440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(((((-1.0)*cj6*r20))+((r21*sj6))),-1);
if(!x11448.valid){
continue;
}
CheckValue<IkReal> x11449=IKPowWithIntegerCheck(r12,-1);
if(!x11449.valid){
continue;
}
if( IKabs(((-1.0)*sj2*sj3*(x11448.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11449.value)*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj2*sj3*(x11448.value)))+IKsqr(((x11449.value)*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*sj2*sj3*(x11448.value)), ((x11449.value)*(((((-1.0)*cj2*sj1*sj3))+((cj1*cj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11450=IKsin(j5);
IkReal x11451=IKcos(j5);
IkReal x11452=((1.0)*cj1);
IkReal x11453=(sj4*sj6);
IkReal x11454=(cj2*sj3);
IkReal x11455=(cj2*cj3);
IkReal x11456=((1.0)*sj1);
IkReal x11457=(cj4*sj6);
IkReal x11458=((1.0)*r20);
IkReal x11459=((1.0)*r00);
IkReal x11460=(cj6*sj4);
IkReal x11461=(sj6*x11450);
IkReal x11462=(r21*x11451);
IkReal x11463=(r12*x11450);
IkReal x11464=(r01*x11451);
IkReal x11465=(cj6*x11451);
IkReal x11466=(cj6*x11450);
IkReal x11467=((1.0)*cj4*cj6);
evalcond[0]=((((-1.0)*sj2*x11456))+((sj4*x11463)));
evalcond[1]=(((sj1*x11455))+((cj1*sj3))+((cj4*x11463)));
evalcond[2]=((((-1.0)*x11454*x11456))+((cj1*cj3))+(((-1.0)*r12*x11451)));
evalcond[3]=(((sj2*sj3))+(((-1.0)*x11458*x11466))+((r21*x11461)));
evalcond[4]=(((r01*x11461))+(((-1.0)*x11452*x11454))+(((-1.0)*x11459*x11466))+(((-1.0)*cj3*x11456)));
evalcond[5]=(((x11457*x11462))+((r20*x11453))+(((-1.0)*cj3*sj2))+(((-1.0)*cj4*x11458*x11465))+((r21*x11460)));
evalcond[6]=((((-1.0)*r21*x11467))+(((-1.0)*x11451*x11458*x11460))+(((-1.0)*x11457*x11458))+((x11453*x11462))+(((-1.0)*cj2)));
evalcond[7]=((((-1.0)*sj2*x11452))+(((-1.0)*x11457*x11459))+(((-1.0)*x11451*x11459*x11460))+(((-1.0)*r01*x11467))+((x11453*x11464)));
evalcond[8]=((((-1.0)*cj4*x11459*x11465))+((r01*x11460))+((x11457*x11464))+(((-1.0)*sj3*x11456))+((r00*x11453))+((cj1*x11455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11468=r21*r21;
IkReal x11469=cj6*cj6;
IkReal x11470=r20*r20;
IkReal x11471=(sj2*sj3);
IkReal x11472=(cj6*r20);
IkReal x11473=((1.0)*cj4);
IkReal x11474=(r21*sj4);
IkReal x11475=(cj6*sj4*sj6);
IkReal x11476=(cj4*r21*sj6);
IkReal x11477=((1.0)*x11470);
IkReal x11478=((1.0)*cj3*sj2);
IkReal x11479=(cj4*x11469);
CheckValue<IkReal> x11480=IKPowWithIntegerCheck(IKsign((((x11468*x11479))+(((-1.0)*x11473*(r22*r22)))+(((-1.0)*x11469*x11470*x11473))+(((-1.0)*x11468*x11473))+(((2.0)*x11472*x11476)))),-1);
if(!x11480.valid){
continue;
}
CheckValue<IkReal> x11481 = IKatan2WithCheck(IkReal((((x11471*x11476))+((r20*r22*sj4*sj6))+(((-1.0)*x11471*x11472*x11473))+(((-1.0)*r22*x11478))+((cj6*r22*x11474)))),IkReal((((x11468*x11475))+((cj3*sj2*x11472))+(((-1.0)*r21*sj6*x11478))+(((-1.0)*x11475*x11477))+(((-2.0)*r20*x11469*x11474))+((r20*x11474))+(((-1.0)*r22*x11471*x11473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11481.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11480.value)))+(x11481.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11482=IKsin(j5);
IkReal x11483=IKcos(j5);
IkReal x11484=((1.0)*sj2);
IkReal x11485=(r21*sj6);
IkReal x11486=(cj2*cj3);
IkReal x11487=(r20*sj6);
IkReal x11488=((1.0)*cj4);
IkReal x11489=(r11*sj6);
IkReal x11490=(r01*sj6);
IkReal x11491=(sj4*sj6);
IkReal x11492=((1.0)*cj6);
IkReal x11493=(cj6*r11);
IkReal x11494=(cj6*sj4);
IkReal x11495=(cj1*sj3);
IkReal x11496=((1.0)*cj2);
IkReal x11497=(sj6*x11482);
IkReal x11498=(sj4*x11483);
IkReal x11499=(cj4*x11482);
IkReal x11500=(r10*x11492);
IkReal x11501=(cj4*x11483);
IkReal x11502=((1.0)*sj1*sj3);
IkReal x11503=((1.0)*x11483);
IkReal x11504=(sj4*x11482);
evalcond[0]=(((sj2*sj3))+((x11482*x11485))+(((-1.0)*r20*x11482*x11492))+(((-1.0)*r22*x11503)));
evalcond[1]=((((-1.0)*r12*x11503))+(((-1.0)*sj1*sj3*x11496))+((x11482*x11489))+(((-1.0)*x11482*x11500))+((cj1*cj3)));
evalcond[2]=(((x11482*x11490))+(((-1.0)*r02*x11503))+(((-1.0)*r00*x11482*x11492))+(((-1.0)*x11495*x11496))+(((-1.0)*cj3*sj1)));
evalcond[3]=(((r22*x11499))+((r21*x11494))+((x11485*x11501))+(((-1.0)*cj6*r20*x11483*x11488))+((sj4*x11487))+(((-1.0)*cj3*x11484)));
evalcond[4]=((((-1.0)*x11496))+(((-1.0)*r20*x11492*x11498))+((x11485*x11498))+(((-1.0)*cj6*r21*x11488))+(((-1.0)*x11487*x11488))+((r22*x11504)));
evalcond[5]=(((x11490*x11498))+(((-1.0)*r00*x11492*x11498))+(((-1.0)*cj6*r01*x11488))+(((-1.0)*r00*sj6*x11488))+(((-1.0)*cj1*x11484))+((r02*x11504)));
evalcond[6]=((((-1.0)*x11498*x11500))+((r12*x11504))+(((-1.0)*r10*sj6*x11488))+(((-1.0)*sj1*x11484))+((x11489*x11498))+(((-1.0)*x11488*x11493)));
evalcond[7]=(((x11489*x11501))+x11495+((r10*x11491))+((r12*x11499))+((sj1*x11486))+(((-1.0)*cj6*r10*x11483*x11488))+((sj4*x11493)));
evalcond[8]=(((r00*x11491))+(((-1.0)*x11502))+((x11490*x11501))+(((-1.0)*cj6*r00*x11483*x11488))+((cj1*x11486))+((r02*x11499))+((r01*x11494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11505=((1.0)*sj6);
IkReal x11506=(sj2*sj3);
IkReal x11507=((1.0)*cj6);
IkReal x11508=(cj1*cj3);
IkReal x11509=(cj2*sj1*sj3);
CheckValue<IkReal> x11510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11505))+(((-1.0)*r01*x11507)))),-1);
if(!x11510.valid){
continue;
}
CheckValue<IkReal> x11511 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11506))+(((-1.0)*r22*x11509))+((r22*x11508)))),IkReal((((cj6*r20*x11509))+(((-1.0)*r21*x11505*x11509))+((cj6*r10*x11506))+((r21*sj6*x11508))+(((-1.0)*r11*x11505*x11506))+(((-1.0)*r20*x11507*x11508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11511.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11510.value)))+(x11511.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11512=IKsin(j5);
IkReal x11513=IKcos(j5);
IkReal x11514=((1.0)*sj2);
IkReal x11515=(r21*sj6);
IkReal x11516=(cj2*cj3);
IkReal x11517=(r20*sj6);
IkReal x11518=((1.0)*cj4);
IkReal x11519=(r11*sj6);
IkReal x11520=(r01*sj6);
IkReal x11521=(sj4*sj6);
IkReal x11522=((1.0)*cj6);
IkReal x11523=(cj6*r11);
IkReal x11524=(cj6*sj4);
IkReal x11525=(cj1*sj3);
IkReal x11526=((1.0)*cj2);
IkReal x11527=(sj6*x11512);
IkReal x11528=(sj4*x11513);
IkReal x11529=(cj4*x11512);
IkReal x11530=(r10*x11522);
IkReal x11531=(cj4*x11513);
IkReal x11532=((1.0)*sj1*sj3);
IkReal x11533=((1.0)*x11513);
IkReal x11534=(sj4*x11512);
evalcond[0]=((((-1.0)*r20*x11512*x11522))+((sj2*sj3))+((x11512*x11515))+(((-1.0)*r22*x11533)));
evalcond[1]=((((-1.0)*r12*x11533))+(((-1.0)*sj1*sj3*x11526))+((x11512*x11519))+((cj1*cj3))+(((-1.0)*x11512*x11530)));
evalcond[2]=(((x11512*x11520))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x11512*x11522))+(((-1.0)*r02*x11533))+(((-1.0)*x11525*x11526)));
evalcond[3]=(((x11515*x11531))+((sj4*x11517))+((r21*x11524))+(((-1.0)*cj6*r20*x11513*x11518))+(((-1.0)*cj3*x11514))+((r22*x11529)));
evalcond[4]=(((r22*x11534))+((x11515*x11528))+(((-1.0)*cj6*r21*x11518))+(((-1.0)*x11517*x11518))+(((-1.0)*x11526))+(((-1.0)*r20*x11522*x11528)));
evalcond[5]=((((-1.0)*r00*sj6*x11518))+(((-1.0)*cj6*r01*x11518))+(((-1.0)*cj1*x11514))+(((-1.0)*r00*x11522*x11528))+((x11520*x11528))+((r02*x11534)));
evalcond[6]=(((r12*x11534))+(((-1.0)*x11518*x11523))+((x11519*x11528))+(((-1.0)*sj1*x11514))+(((-1.0)*r10*sj6*x11518))+(((-1.0)*x11528*x11530)));
evalcond[7]=(x11525+((x11519*x11531))+((sj1*x11516))+((r12*x11529))+((r10*x11521))+((sj4*x11523))+(((-1.0)*cj6*r10*x11513*x11518)));
evalcond[8]=(((r01*x11524))+((r00*x11521))+(((-1.0)*cj6*r00*x11513*x11518))+((cj1*x11516))+((x11520*x11531))+((r02*x11529))+(((-1.0)*x11532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11535=((1.0)*sj3);
IkReal x11536=(cj1*cj2);
IkReal x11537=(r21*sj6);
IkReal x11538=(cj6*sj3);
IkReal x11539=(cj3*sj1);
CheckValue<IkReal> x11540 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11535*x11536))+(((-1.0)*r02*sj2*x11535))+(((-1.0)*r22*x11539)))),IkReal((((cj6*r20*x11539))+((r00*sj2*x11538))+(((-1.0)*x11537*x11539))+((r20*x11536*x11538))+(((-1.0)*x11535*x11536*x11537))+(((-1.0)*r01*sj2*sj6*x11535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11540.valid){
continue;
}
CheckValue<IkReal> x11541=IKPowWithIntegerCheck(IKsign((((r10*sj6))+((cj6*r11)))),-1);
if(!x11541.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11540.value)+(((1.5707963267949)*(x11541.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x11542=IKsin(j5);
IkReal x11543=IKcos(j5);
IkReal x11544=((1.0)*sj2);
IkReal x11545=(r21*sj6);
IkReal x11546=(cj2*cj3);
IkReal x11547=(r20*sj6);
IkReal x11548=((1.0)*cj4);
IkReal x11549=(r11*sj6);
IkReal x11550=(r01*sj6);
IkReal x11551=(sj4*sj6);
IkReal x11552=((1.0)*cj6);
IkReal x11553=(cj6*r11);
IkReal x11554=(cj6*sj4);
IkReal x11555=(cj1*sj3);
IkReal x11556=((1.0)*cj2);
IkReal x11557=(sj6*x11542);
IkReal x11558=(sj4*x11543);
IkReal x11559=(cj4*x11542);
IkReal x11560=(r10*x11552);
IkReal x11561=(cj4*x11543);
IkReal x11562=((1.0)*sj1*sj3);
IkReal x11563=((1.0)*x11543);
IkReal x11564=(sj4*x11542);
evalcond[0]=(((sj2*sj3))+((x11542*x11545))+(((-1.0)*r20*x11542*x11552))+(((-1.0)*r22*x11563)));
evalcond[1]=(((x11542*x11549))+(((-1.0)*r12*x11563))+((cj1*cj3))+(((-1.0)*sj1*sj3*x11556))+(((-1.0)*x11542*x11560)));
evalcond[2]=((((-1.0)*x11555*x11556))+(((-1.0)*cj3*sj1))+(((-1.0)*r00*x11542*x11552))+(((-1.0)*r02*x11563))+((x11542*x11550)));
evalcond[3]=(((r21*x11554))+((r22*x11559))+((x11545*x11561))+((sj4*x11547))+(((-1.0)*cj3*x11544))+(((-1.0)*cj6*r20*x11543*x11548)));
evalcond[4]=((((-1.0)*x11556))+(((-1.0)*cj6*r21*x11548))+((r22*x11564))+(((-1.0)*x11547*x11548))+(((-1.0)*r20*x11552*x11558))+((x11545*x11558)));
evalcond[5]=((((-1.0)*r00*sj6*x11548))+(((-1.0)*cj6*r01*x11548))+((x11550*x11558))+((r02*x11564))+(((-1.0)*cj1*x11544))+(((-1.0)*r00*x11552*x11558)));
evalcond[6]=((((-1.0)*x11548*x11553))+(((-1.0)*x11558*x11560))+(((-1.0)*r10*sj6*x11548))+((r12*x11564))+(((-1.0)*sj1*x11544))+((x11549*x11558)));
evalcond[7]=(((sj4*x11553))+((r12*x11559))+((x11549*x11561))+((sj1*x11546))+x11555+(((-1.0)*cj6*r10*x11543*x11548))+((r10*x11551)));
evalcond[8]=(((r02*x11559))+(((-1.0)*x11562))+((r00*x11551))+((r01*x11554))+(((-1.0)*cj6*r00*x11543*x11548))+((cj1*x11546))+((x11550*x11561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x11565=r21*r21;
IkReal x11566=cj6*cj6;
IkReal x11567=r20*r20;
IkReal x11568=(r20*sj6);
IkReal x11569=(cj6*r21);
IkReal x11570=((1.0)*sj4);
IkReal x11571=(sj2*sj3);
IkReal x11572=((1.0)*sj6);
IkReal x11573=(cj4*cj6);
IkReal x11574=(cj6*r20);
IkReal x11575=((1.0)*cj4*r22);
IkReal x11576=(sj4*x11566);
IkReal x11577=(cj4*r20*r21);
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal(((((-1.0)*x11570*x11571*x11574))+(((-1.0)*cj2*r22))+(((-1.0)*x11569*x11575))+((r21*sj4*sj6*x11571))+(((-1.0)*x11568*x11575)))),IkReal(((((-1.0)*x11565*x11572*x11573))+(((-1.0)*cj2*r21*x11572))+(((-1.0)*x11577))+(((2.0)*x11566*x11577))+(((-1.0)*r22*x11570*x11571))+((sj6*x11567*x11573))+((cj2*x11574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
CheckValue<IkReal> x11579=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11570*(r22*r22)))+((x11565*x11576))+(((-1.0)*x11566*x11567*x11570))+(((2.0)*sj4*x11568*x11569))+(((-1.0)*x11565*x11570)))),-1);
if(!x11579.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x11578.value)+(((1.5707963267949)*(x11579.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x11580=IKsin(j5);
IkReal x11581=IKcos(j5);
IkReal x11582=((1.0)*cj4);
IkReal x11583=(r20*sj6);
IkReal x11584=(cj6*r21);
IkReal x11585=(r21*sj6);
IkReal x11586=(r22*x11580);
IkReal x11587=(cj6*r20*x11581);
evalcond[0]=(((sj2*sj3))+(((-1.0)*r22*x11581))+((x11580*x11585))+(((-1.0)*cj6*r20*x11580)));
evalcond[1]=(((sj4*x11584))+((sj4*x11583))+(((-1.0)*cj3*sj2))+((cj4*x11581*x11585))+((cj4*x11586))+(((-1.0)*x11582*x11587)));
evalcond[2]=(((sj4*x11581*x11585))+((sj4*x11586))+(((-1.0)*sj4*x11587))+(((-1.0)*x11582*x11583))+(((-1.0)*x11582*x11584))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x11588=cj2*cj2;
IkReal x11589=cj3*cj3;
IkReal x11590=(x11588+x11589+(((-1.0)*x11588*x11589)));
j1eval[0]=x11590;
j1eval[1]=IKsign(x11590);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj2;
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11591=(sj3*sj5);
IkReal x11592=(r01*sj6);
IkReal x11593=((1.0)*cj5);
IkReal x11594=(r11*sj6);
IkReal x11595=(cj3*sj5);
IkReal x11596=(cj6*r10);
IkReal x11597=((1.0)*cj6*r00);
if( IKabs(((((-1.0)*cj3*r02*x11593))+((x11592*x11595))+(((-1.0)*x11595*x11597))+((x11591*x11594))+(((-1.0)*x11591*x11596))+(((-1.0)*r12*sj3*x11593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x11591*x11592))+(((-1.0)*x11591*x11597))+(((-1.0)*r02*sj3*x11593))+((x11595*x11596))+(((-1.0)*x11594*x11595))+((cj3*cj5*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*r02*x11593))+((x11592*x11595))+(((-1.0)*x11595*x11597))+((x11591*x11594))+(((-1.0)*x11591*x11596))+(((-1.0)*r12*sj3*x11593))))+IKsqr((((x11591*x11592))+(((-1.0)*x11591*x11597))+(((-1.0)*r02*sj3*x11593))+((x11595*x11596))+(((-1.0)*x11594*x11595))+((cj3*cj5*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj3*r02*x11593))+((x11592*x11595))+(((-1.0)*x11595*x11597))+((x11591*x11594))+(((-1.0)*x11591*x11596))+(((-1.0)*r12*sj3*x11593))), (((x11591*x11592))+(((-1.0)*x11591*x11597))+(((-1.0)*r02*sj3*x11593))+((x11595*x11596))+(((-1.0)*x11594*x11595))+((cj3*cj5*r12))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x11598=IKcos(j1);
IkReal x11599=IKsin(j1);
IkReal x11600=((1.0)*sj3);
IkReal x11601=(cj4*sj5);
IkReal x11602=(r11*sj6);
IkReal x11603=(cj4*cj5);
IkReal x11604=(r00*sj6);
IkReal x11605=(cj6*r01);
IkReal x11606=(r01*sj6);
IkReal x11607=(cj6*r11);
IkReal x11608=(r10*sj6);
IkReal x11609=((1.0)*cj5);
IkReal x11610=(cj3*x11598);
IkReal x11611=(cj3*x11599);
IkReal x11612=((1.0)*cj6*r10);
IkReal x11613=((1.0)*cj6*r00);
IkReal x11614=(sj3*x11598);
IkReal x11615=(x11599*x11600);
evalcond[0]=(x11610+(((-1.0)*x11615))+(((-1.0)*r12*x11609))+((sj5*x11602))+(((-1.0)*sj5*x11612)));
evalcond[1]=((((-1.0)*x11611))+(((-1.0)*x11598*x11600))+(((-1.0)*r02*x11609))+((sj5*x11606))+(((-1.0)*sj5*x11613)));
evalcond[2]=((((-1.0)*px))+(((0.31436)*x11614))+(((0.31436)*x11611))+(((0.0003501)*x11604))+(((0.0003501)*x11605))+(((0.42076)*x11599)));
evalcond[3]=((((-1.0)*py))+(((-0.42076)*x11598))+(((0.0003501)*x11608))+(((0.0003501)*x11607))+(((0.31436)*sj3*x11599))+(((-0.31436)*x11610)));
evalcond[4]=((((-1.0)*x11603*x11612))+x11614+x11611+((x11602*x11603))+((sj4*x11607))+((sj4*x11608))+((r12*x11601)));
evalcond[5]=((((-1.0)*x11603*x11613))+x11610+(((-1.0)*x11615))+((x11603*x11606))+((sj4*x11604))+((sj4*x11605))+((r02*x11601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11616=(cj3*cj5);
IkReal x11617=(cj5*sj3);
IkReal x11618=(cj6*sj5);
IkReal x11619=((1.0)*cj3);
IkReal x11620=(sj5*sj6);
IkReal x11621=((1.0)*sj3*x11620);
if( IKabs((((r10*sj3*x11618))+((r12*x11617))+(((-1.0)*r11*x11621))+(((-1.0)*r00*x11618*x11619))+(((-1.0)*r02*x11616))+((cj3*r01*x11620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x11616))+((r00*sj3*x11618))+((r02*x11617))+(((-1.0)*r01*x11621))+((cj3*r10*x11618))+(((-1.0)*r11*x11619*x11620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj3*x11618))+((r12*x11617))+(((-1.0)*r11*x11621))+(((-1.0)*r00*x11618*x11619))+(((-1.0)*r02*x11616))+((cj3*r01*x11620))))+IKsqr((((r12*x11616))+((r00*sj3*x11618))+((r02*x11617))+(((-1.0)*r01*x11621))+((cj3*r10*x11618))+(((-1.0)*r11*x11619*x11620))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj3*x11618))+((r12*x11617))+(((-1.0)*r11*x11621))+(((-1.0)*r00*x11618*x11619))+(((-1.0)*r02*x11616))+((cj3*r01*x11620))), (((r12*x11616))+((r00*sj3*x11618))+((r02*x11617))+(((-1.0)*r01*x11621))+((cj3*r10*x11618))+(((-1.0)*r11*x11619*x11620))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x11622=IKcos(j1);
IkReal x11623=IKsin(j1);
IkReal x11624=(cj4*sj5);
IkReal x11625=(r11*sj6);
IkReal x11626=(cj4*cj5);
IkReal x11627=(r00*sj6);
IkReal x11628=(cj6*r01);
IkReal x11629=(r01*sj6);
IkReal x11630=(cj6*r11);
IkReal x11631=(r10*sj6);
IkReal x11632=((1.0)*cj5);
IkReal x11633=(sj3*x11622);
IkReal x11634=(cj3*x11623);
IkReal x11635=((1.0)*cj6*r10);
IkReal x11636=(sj3*x11623);
IkReal x11637=((1.0)*cj6*r00);
IkReal x11638=(cj3*x11622);
IkReal x11639=((1.0)*x11634);
evalcond[0]=(x11638+x11636+(((-1.0)*sj5*x11635))+((sj5*x11625))+(((-1.0)*r12*x11632)));
evalcond[1]=((((-1.0)*x11639))+(((-1.0)*r02*x11632))+x11633+(((-1.0)*sj5*x11637))+((sj5*x11629)));
evalcond[2]=((((0.0003501)*x11628))+(((0.0003501)*x11627))+(((-0.31436)*x11633))+(((0.31436)*x11634))+(((-1.0)*px))+(((0.42076)*x11623)));
evalcond[3]=((((0.0003501)*x11631))+(((0.0003501)*x11630))+(((-0.31436)*x11638))+(((-0.31436)*x11636))+(((-1.0)*py))+(((-0.42076)*x11622)));
evalcond[4]=(((sj4*x11631))+((sj4*x11630))+(((-1.0)*x11639))+((x11625*x11626))+x11633+((r12*x11624))+(((-1.0)*x11626*x11635)));
evalcond[5]=(((sj4*x11627))+((sj4*x11628))+(((-1.0)*x11636))+(((-1.0)*x11638))+((x11626*x11629))+((r02*x11624))+(((-1.0)*x11626*x11637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11640=((1.0)*cj5);
IkReal x11641=(sj5*sj6);
IkReal x11642=((1.0)*cj6*sj5);
j1eval[0]=cj2;
j1eval[1]=IKsign(cj2);
j1eval[2]=((IKabs(((((-1.0)*r00*x11642))+((r01*x11641))+(((-1.0)*r02*x11640)))))+(IKabs(((((-1.0)*r12*x11640))+((r11*x11641))+(((-1.0)*r10*x11642))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=((((-1.0)*cj2*sj2))+(((24.6556862745098)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11643=(cj6*r01);
IkReal x11644=((2.51903849000464e-5)*sj6);
IkReal x11645=((0.000831302458866157)*sj6);
IkReal x11646=(cj6*r11);
if( IKabs(((((-0.0719519705799668)*py))+(((2.51903849000464e-5)*x11646))+((r10*x11644))+(((2.374471462057)*px))+(((-0.000831302458866157)*x11643))+(((-1.0)*r00*x11645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0719519705799668)*px))+(((2.51903849000464e-5)*x11643))+((r10*x11645))+(((0.000831302458866157)*x11646))+((r00*x11644))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0719519705799668)*py))+(((2.51903849000464e-5)*x11646))+((r10*x11644))+(((2.374471462057)*px))+(((-0.000831302458866157)*x11643))+(((-1.0)*r00*x11645))))+IKsqr(((((-0.0719519705799668)*px))+(((2.51903849000464e-5)*x11643))+((r10*x11645))+(((0.000831302458866157)*x11646))+((r00*x11644))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.0719519705799668)*py))+(((2.51903849000464e-5)*x11646))+((r10*x11644))+(((2.374471462057)*px))+(((-0.000831302458866157)*x11643))+(((-1.0)*r00*x11645))), ((((-0.0719519705799668)*px))+(((2.51903849000464e-5)*x11643))+((r10*x11645))+(((0.000831302458866157)*x11646))+((r00*x11644))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x11647=IKcos(j1);
IkReal x11648=IKsin(j1);
IkReal x11649=(r02*sj5);
IkReal x11650=(cj4*cj5);
IkReal x11651=(r11*sj6);
IkReal x11652=(r00*sj6);
IkReal x11653=(cj6*r01);
IkReal x11654=((1.0)*cj6);
IkReal x11655=(r01*sj6);
IkReal x11656=(cj5*sj4);
IkReal x11657=(cj6*r11);
IkReal x11658=(r12*sj5);
IkReal x11659=(r10*sj6);
IkReal x11660=((1.0)*cj4);
IkReal x11661=((1.0)*x11648);
evalcond[0]=((((-1.0)*px))+(((0.42076)*x11648))+(((-0.01275)*x11647))+(((0.0003501)*x11652))+(((0.0003501)*x11653)));
evalcond[1]=((((-1.0)*py))+(((-0.01275)*x11648))+(((-0.42076)*x11647))+(((0.0003501)*x11659))+(((0.0003501)*x11657)));
evalcond[2]=(((sj4*x11659))+((sj4*x11657))+x11647+(((-1.0)*r10*x11650*x11654))+((x11650*x11651))+((cj4*x11658)));
evalcond[3]=(((sj4*x11653))+((sj4*x11652))+(((-1.0)*r00*x11650*x11654))+((x11650*x11655))+(((-1.0)*x11661))+((cj4*x11649)));
evalcond[4]=(((sj4*x11649))+(((-1.0)*x11647))+(((-1.0)*x11653*x11660))+((x11655*x11656))+(((-1.0)*x11652*x11660))+(((-1.0)*r00*x11654*x11656)));
evalcond[5]=(((sj4*x11658))+(((-1.0)*cj4*r11*x11654))+(((-1.0)*x11659*x11660))+((x11651*x11656))+(((-1.0)*x11661))+(((-1.0)*r10*x11654*x11656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11662=(cj6*r01);
IkReal x11663=((2.51903849000464e-5)*sj6);
IkReal x11664=((0.000831302458866157)*sj6);
IkReal x11665=(cj6*r11);
if( IKabs(((((-1.0)*r00*x11664))+(((2.374471462057)*px))+(((-0.000831302458866157)*x11662))+(((-2.51903849000464e-5)*x11665))+(((-1.0)*r10*x11663))+(((0.0719519705799668)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x11663))+(((0.000831302458866157)*x11665))+(((-2.51903849000464e-5)*x11662))+((r10*x11664))+(((0.0719519705799668)*px))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x11664))+(((2.374471462057)*px))+(((-0.000831302458866157)*x11662))+(((-2.51903849000464e-5)*x11665))+(((-1.0)*r10*x11663))+(((0.0719519705799668)*py))))+IKsqr(((((-1.0)*r00*x11663))+(((0.000831302458866157)*x11665))+(((-2.51903849000464e-5)*x11662))+((r10*x11664))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x11664))+(((2.374471462057)*px))+(((-0.000831302458866157)*x11662))+(((-2.51903849000464e-5)*x11665))+(((-1.0)*r10*x11663))+(((0.0719519705799668)*py))), ((((-1.0)*r00*x11663))+(((0.000831302458866157)*x11665))+(((-2.51903849000464e-5)*x11662))+((r10*x11664))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x11666=IKsin(j1);
IkReal x11667=IKcos(j1);
IkReal x11668=(r02*sj5);
IkReal x11669=(cj4*cj5);
IkReal x11670=(r11*sj6);
IkReal x11671=(r00*sj6);
IkReal x11672=(cj6*r01);
IkReal x11673=((1.0)*cj6);
IkReal x11674=(r01*sj6);
IkReal x11675=(cj5*sj4);
IkReal x11676=(r12*sj5);
IkReal x11677=(cj6*r11);
IkReal x11678=(r10*sj6);
IkReal x11679=((1.0)*cj4);
evalcond[0]=((((0.0003501)*x11671))+(((0.0003501)*x11672))+(((-1.0)*px))+(((0.01275)*x11667))+(((0.42076)*x11666)));
evalcond[1]=((((-0.42076)*x11667))+(((0.0003501)*x11678))+(((0.0003501)*x11677))+(((-1.0)*py))+(((0.01275)*x11666)));
evalcond[2]=(x11667+((cj4*x11676))+((x11669*x11670))+((sj4*x11677))+((sj4*x11678))+(((-1.0)*r10*x11669*x11673)));
evalcond[3]=(x11667+(((-1.0)*x11671*x11679))+(((-1.0)*x11672*x11679))+(((-1.0)*r00*x11673*x11675))+((sj4*x11668))+((x11674*x11675)));
evalcond[4]=((((-1.0)*x11678*x11679))+x11666+((x11670*x11675))+(((-1.0)*r10*x11673*x11675))+(((-1.0)*cj4*r11*x11673))+((sj4*x11676)));
evalcond[5]=(((cj4*x11668))+(((-1.0)*r00*x11669*x11673))+((x11669*x11674))+(((-1.0)*x11666))+((sj4*x11672))+((sj4*x11671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11680=((8.7525)*cj2);
IkReal x11681=((10519.0)*sj5);
IkReal x11682=(r11*sj6);
IkReal x11683=(cj6*r10);
IkReal x11684=(cj5*r12);
CheckValue<IkReal> x11685=IKPowWithIntegerCheck(cj2,-1);
if(!x11685.valid){
continue;
}
CheckValue<IkReal> x11686=IKPowWithIntegerCheck(((((7859.0)*(cj2*cj2)))+(((-318.75)*cj2*sj2))),-1);
if(!x11686.valid){
continue;
}
if( IKabs(((x11685.value)*(((((-1.0)*x11684))+((sj5*x11682))+(((-1.0)*sj5*x11683)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11686.value)*(((((-1.0)*cj6*r01*x11680))+(((10519.0)*x11684))+(((-1.0)*x11681*x11682))+((x11681*x11683))+(((-1.0)*r00*sj6*x11680))+(((25000.0)*cj2*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11685.value)*(((((-1.0)*x11684))+((sj5*x11682))+(((-1.0)*sj5*x11683))))))+IKsqr(((x11686.value)*(((((-1.0)*cj6*r01*x11680))+(((10519.0)*x11684))+(((-1.0)*x11681*x11682))+((x11681*x11683))+(((-1.0)*r00*sj6*x11680))+(((25000.0)*cj2*px))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x11685.value)*(((((-1.0)*x11684))+((sj5*x11682))+(((-1.0)*sj5*x11683))))), ((x11686.value)*(((((-1.0)*cj6*r01*x11680))+(((10519.0)*x11684))+(((-1.0)*x11681*x11682))+((x11681*x11683))+(((-1.0)*r00*sj6*x11680))+(((25000.0)*cj2*px))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11687=IKcos(j1);
IkReal x11688=IKsin(j1);
IkReal x11689=(r02*sj5);
IkReal x11690=(sj5*sj6);
IkReal x11691=(r00*sj6);
IkReal x11692=((0.0003501)*cj6);
IkReal x11693=(cj5*sj4);
IkReal x11694=(cj4*cj5);
IkReal x11695=(r01*sj6);
IkReal x11696=(r12*sj5);
IkReal x11697=((1.0)*cj4);
IkReal x11698=(cj6*r11);
IkReal x11699=(cj6*r01);
IkReal x11700=(r11*sj6);
IkReal x11701=(r10*sj6);
IkReal x11702=((1.0)*cj5);
IkReal x11703=(cj2*x11687);
IkReal x11704=((1.0)*cj6*r10);
IkReal x11705=(sj2*x11687);
IkReal x11706=(sj2*x11688);
IkReal x11707=((1.0)*cj6*r00);
IkReal x11708=((1.0)*x11688);
evalcond[0]=((((-1.0)*sj5*x11704))+((r11*x11690))+(((-1.0)*r12*x11702))+(((-1.0)*cj2*x11708)));
evalcond[1]=(((r01*x11690))+(((-1.0)*x11703))+(((-1.0)*sj5*x11707))+(((-1.0)*r02*x11702)));
evalcond[2]=(x11687+(((-1.0)*x11694*x11704))+((cj4*x11696))+((sj4*x11701))+((sj4*x11698))+((x11694*x11700)));
evalcond[3]=((((0.31436)*x11703))+((r01*x11692))+(((-1.0)*px))+(((0.42076)*x11688))+(((0.0003501)*x11691))+(((-0.01275)*x11705)));
evalcond[4]=((((-1.0)*py))+(((0.0003501)*x11701))+(((-0.42076)*x11687))+(((0.31436)*cj2*x11688))+((r11*x11692))+(((-0.01275)*x11706)));
evalcond[5]=((((-1.0)*x11694*x11707))+((x11694*x11695))+(((-1.0)*x11708))+((sj4*x11691))+((sj4*x11699))+((cj4*x11689)));
evalcond[6]=((((-1.0)*x11697*x11699))+((sj4*x11689))+(((-1.0)*x11691*x11697))+((x11693*x11695))+(((-1.0)*x11705))+(((-1.0)*x11693*x11707)));
evalcond[7]=((((-1.0)*x11697*x11698))+((x11693*x11700))+(((-1.0)*x11697*x11701))+(((-1.0)*x11706))+((sj4*x11696))+(((-1.0)*x11693*x11704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11709=((1.0)*cj4);
IkReal x11710=(r11*sj6);
IkReal x11711=(cj6*r10);
IkReal x11712=((1.0)*sj4);
CheckValue<IkReal> x11713=IKPowWithIntegerCheck(cj2,-1);
if(!x11713.valid){
continue;
}
if( IKabs(((x11713.value)*(((((-1.0)*cj5*r12))+(((-1.0)*sj5*x11711))+((sj5*x11710)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x11709*x11710))+(((-1.0)*r10*sj6*x11712))+(((-1.0)*cj6*r11*x11712))+(((-1.0)*r12*sj5*x11709))+((cj4*cj5*x11711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11713.value)*(((((-1.0)*cj5*r12))+(((-1.0)*sj5*x11711))+((sj5*x11710))))))+IKsqr(((((-1.0)*cj5*x11709*x11710))+(((-1.0)*r10*sj6*x11712))+(((-1.0)*cj6*r11*x11712))+(((-1.0)*r12*sj5*x11709))+((cj4*cj5*x11711))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x11713.value)*(((((-1.0)*cj5*r12))+(((-1.0)*sj5*x11711))+((sj5*x11710))))), ((((-1.0)*cj5*x11709*x11710))+(((-1.0)*r10*sj6*x11712))+(((-1.0)*cj6*r11*x11712))+(((-1.0)*r12*sj5*x11709))+((cj4*cj5*x11711))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11714=IKcos(j1);
IkReal x11715=IKsin(j1);
IkReal x11716=(r02*sj5);
IkReal x11717=(sj5*sj6);
IkReal x11718=(r00*sj6);
IkReal x11719=((0.0003501)*cj6);
IkReal x11720=(cj5*sj4);
IkReal x11721=(cj4*cj5);
IkReal x11722=(r01*sj6);
IkReal x11723=(r12*sj5);
IkReal x11724=((1.0)*cj4);
IkReal x11725=(cj6*r11);
IkReal x11726=(cj6*r01);
IkReal x11727=(r11*sj6);
IkReal x11728=(r10*sj6);
IkReal x11729=((1.0)*cj5);
IkReal x11730=(cj2*x11714);
IkReal x11731=((1.0)*cj6*r10);
IkReal x11732=(sj2*x11714);
IkReal x11733=(sj2*x11715);
IkReal x11734=((1.0)*cj6*r00);
IkReal x11735=((1.0)*x11715);
evalcond[0]=((((-1.0)*cj2*x11735))+(((-1.0)*r12*x11729))+(((-1.0)*sj5*x11731))+((r11*x11717)));
evalcond[1]=(((r01*x11717))+(((-1.0)*x11730))+(((-1.0)*sj5*x11734))+(((-1.0)*r02*x11729)));
evalcond[2]=(x11714+((sj4*x11728))+((sj4*x11725))+(((-1.0)*x11721*x11731))+((x11721*x11727))+((cj4*x11723)));
evalcond[3]=((((-0.01275)*x11732))+((r01*x11719))+(((-1.0)*px))+(((0.0003501)*x11718))+(((0.31436)*x11730))+(((0.42076)*x11715)));
evalcond[4]=((((-0.42076)*x11714))+(((-0.01275)*x11733))+(((-1.0)*py))+(((0.31436)*cj2*x11715))+(((0.0003501)*x11728))+((r11*x11719)));
evalcond[5]=((((-1.0)*x11735))+((sj4*x11726))+((sj4*x11718))+(((-1.0)*x11721*x11734))+((x11721*x11722))+((cj4*x11716)));
evalcond[6]=((((-1.0)*x11720*x11734))+(((-1.0)*x11732))+((sj4*x11716))+(((-1.0)*x11724*x11726))+(((-1.0)*x11718*x11724))+((x11720*x11722)));
evalcond[7]=(((sj4*x11723))+(((-1.0)*x11720*x11731))+(((-1.0)*x11733))+(((-1.0)*x11724*x11728))+(((-1.0)*x11724*x11725))+((x11720*x11727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11736=((1.0)*cj5);
IkReal x11737=(sj5*sj6);
IkReal x11738=((1.0)*cj6*sj5);
CheckValue<IkReal> x11739 = IKatan2WithCheck(IkReal((((r11*x11737))+(((-1.0)*r10*x11738))+(((-1.0)*r12*x11736)))),IkReal((((r01*x11737))+(((-1.0)*r00*x11738))+(((-1.0)*r02*x11736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11739.valid){
continue;
}
CheckValue<IkReal> x11740=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x11740.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x11739.value)+(((1.5707963267949)*(x11740.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11741=IKcos(j1);
IkReal x11742=IKsin(j1);
IkReal x11743=(r02*sj5);
IkReal x11744=(sj5*sj6);
IkReal x11745=(r00*sj6);
IkReal x11746=((0.0003501)*cj6);
IkReal x11747=(cj5*sj4);
IkReal x11748=(cj4*cj5);
IkReal x11749=(r01*sj6);
IkReal x11750=(r12*sj5);
IkReal x11751=((1.0)*cj4);
IkReal x11752=(cj6*r11);
IkReal x11753=(cj6*r01);
IkReal x11754=(r11*sj6);
IkReal x11755=(r10*sj6);
IkReal x11756=((1.0)*cj5);
IkReal x11757=(cj2*x11741);
IkReal x11758=((1.0)*cj6*r10);
IkReal x11759=(sj2*x11741);
IkReal x11760=(sj2*x11742);
IkReal x11761=((1.0)*cj6*r00);
IkReal x11762=((1.0)*x11742);
evalcond[0]=((((-1.0)*r12*x11756))+(((-1.0)*cj2*x11762))+(((-1.0)*sj5*x11758))+((r11*x11744)));
evalcond[1]=(((r01*x11744))+(((-1.0)*x11757))+(((-1.0)*sj5*x11761))+(((-1.0)*r02*x11756)));
evalcond[2]=(((sj4*x11752))+((sj4*x11755))+x11741+((x11748*x11754))+((cj4*x11750))+(((-1.0)*x11748*x11758)));
evalcond[3]=((((0.42076)*x11742))+((r01*x11746))+(((-0.01275)*x11759))+(((0.31436)*x11757))+(((-1.0)*px))+(((0.0003501)*x11745)));
evalcond[4]=((((-0.42076)*x11741))+(((-0.01275)*x11760))+(((-1.0)*py))+(((0.31436)*cj2*x11742))+(((0.0003501)*x11755))+((r11*x11746)));
evalcond[5]=(((x11748*x11749))+((sj4*x11753))+((cj4*x11743))+((sj4*x11745))+(((-1.0)*x11748*x11761))+(((-1.0)*x11762)));
evalcond[6]=((((-1.0)*x11745*x11751))+((x11747*x11749))+(((-1.0)*x11759))+(((-1.0)*x11751*x11753))+((sj4*x11743))+(((-1.0)*x11747*x11761)));
evalcond[7]=(((sj4*x11750))+(((-1.0)*x11760))+(((-1.0)*x11751*x11752))+(((-1.0)*x11751*x11755))+((x11747*x11754))+(((-1.0)*x11747*x11758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11763=(cj6*sj5);
IkReal x11764=((1.0)*sj5*sj6);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((cj5*r12))+(((-1.0)*r11*x11764))+((r10*x11763)))))+(IKabs((((r00*x11763))+(((-1.0)*r01*x11764))+((cj5*r02))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=((((-1.0)*cj2*sj2))+(((-24.6556862745098)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11765=(cj6*r01);
IkReal x11766=((2.51903849000464e-5)*sj6);
IkReal x11767=((0.000831302458866157)*sj6);
IkReal x11768=(cj6*r11);
if( IKabs(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+((r10*x11766))+(((2.51903849000464e-5)*x11768))+(((-0.000831302458866157)*x11765))+(((-1.0)*r00*x11767)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0719519705799668)*px))+((r10*x11767))+(((0.000831302458866157)*x11768))+(((2.51903849000464e-5)*x11765))+((r00*x11766))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+((r10*x11766))+(((2.51903849000464e-5)*x11768))+(((-0.000831302458866157)*x11765))+(((-1.0)*r00*x11767))))+IKsqr(((((-0.0719519705799668)*px))+((r10*x11767))+(((0.000831302458866157)*x11768))+(((2.51903849000464e-5)*x11765))+((r00*x11766))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+((r10*x11766))+(((2.51903849000464e-5)*x11768))+(((-0.000831302458866157)*x11765))+(((-1.0)*r00*x11767))), ((((-0.0719519705799668)*px))+((r10*x11767))+(((0.000831302458866157)*x11768))+(((2.51903849000464e-5)*x11765))+((r00*x11766))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x11769=IKcos(j1);
IkReal x11770=IKsin(j1);
IkReal x11771=(cj6*r01);
IkReal x11772=(r02*sj5);
IkReal x11773=(cj4*cj5);
IkReal x11774=(r11*sj6);
IkReal x11775=(r00*sj6);
IkReal x11776=((1.0)*cj6);
IkReal x11777=(r01*sj6);
IkReal x11778=(cj5*sj4);
IkReal x11779=(r12*sj5);
IkReal x11780=(cj6*r11);
IkReal x11781=(r10*sj6);
IkReal x11782=((1.0)*cj4);
IkReal x11783=((1.0)*x11769);
evalcond[0]=((((0.42076)*x11770))+(((-0.01275)*x11769))+(((-1.0)*px))+(((0.0003501)*x11775))+(((0.0003501)*x11771)));
evalcond[1]=((((-0.01275)*x11770))+(((-0.42076)*x11769))+(((-1.0)*py))+(((0.0003501)*x11780))+(((0.0003501)*x11781)));
evalcond[2]=(x11770+((sj4*x11771))+((sj4*x11775))+(((-1.0)*r00*x11773*x11776))+((cj4*x11772))+((x11773*x11777)));
evalcond[3]=(((sj4*x11781))+((sj4*x11780))+(((-1.0)*r10*x11773*x11776))+((cj4*x11779))+((x11773*x11774))+(((-1.0)*x11783)));
evalcond[4]=(((x11777*x11778))+((sj4*x11772))+(((-1.0)*r00*x11776*x11778))+(((-1.0)*x11771*x11782))+(((-1.0)*x11775*x11782))+(((-1.0)*x11783)));
evalcond[5]=((((-1.0)*r10*x11776*x11778))+((sj4*x11779))+(((-1.0)*x11770))+(((-1.0)*cj4*r11*x11776))+(((-1.0)*x11781*x11782))+((x11774*x11778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11784=(cj6*r01);
IkReal x11785=((2.51903849000464e-5)*sj6);
IkReal x11786=((0.000831302458866157)*sj6);
IkReal x11787=(cj6*r11);
if( IKabs(((((2.374471462057)*px))+(((-1.0)*r10*x11785))+(((-1.0)*r00*x11786))+(((-2.51903849000464e-5)*x11787))+(((-0.000831302458866157)*x11784))+(((0.0719519705799668)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x11786))+(((0.000831302458866157)*x11787))+(((-1.0)*r00*x11785))+(((-2.51903849000464e-5)*x11784))+(((0.0719519705799668)*px))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.374471462057)*px))+(((-1.0)*r10*x11785))+(((-1.0)*r00*x11786))+(((-2.51903849000464e-5)*x11787))+(((-0.000831302458866157)*x11784))+(((0.0719519705799668)*py))))+IKsqr((((r10*x11786))+(((0.000831302458866157)*x11787))+(((-1.0)*r00*x11785))+(((-2.51903849000464e-5)*x11784))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.374471462057)*px))+(((-1.0)*r10*x11785))+(((-1.0)*r00*x11786))+(((-2.51903849000464e-5)*x11787))+(((-0.000831302458866157)*x11784))+(((0.0719519705799668)*py))), (((r10*x11786))+(((0.000831302458866157)*x11787))+(((-1.0)*r00*x11785))+(((-2.51903849000464e-5)*x11784))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x11788=IKsin(j1);
IkReal x11789=IKcos(j1);
IkReal x11790=(r02*sj5);
IkReal x11791=(cj4*cj5);
IkReal x11792=(r11*sj6);
IkReal x11793=(r00*sj6);
IkReal x11794=(cj6*r01);
IkReal x11795=((1.0)*cj6);
IkReal x11796=(r01*sj6);
IkReal x11797=(cj5*sj4);
IkReal x11798=(r12*sj5);
IkReal x11799=(cj6*r11);
IkReal x11800=(r10*sj6);
IkReal x11801=((1.0)*cj4);
evalcond[0]=((((0.0003501)*x11793))+(((0.0003501)*x11794))+(((0.42076)*x11788))+(((-1.0)*px))+(((0.01275)*x11789)));
evalcond[1]=((((0.0003501)*x11799))+(((-0.42076)*x11789))+(((0.0003501)*x11800))+(((-1.0)*py))+(((0.01275)*x11788)));
evalcond[2]=(x11788+(((-1.0)*r00*x11791*x11795))+((sj4*x11793))+((sj4*x11794))+((cj4*x11790))+((x11791*x11796)));
evalcond[3]=(x11789+(((-1.0)*r00*x11795*x11797))+(((-1.0)*x11794*x11801))+(((-1.0)*x11793*x11801))+((sj4*x11790))+((x11796*x11797)));
evalcond[4]=(x11788+((x11792*x11797))+((sj4*x11798))+(((-1.0)*r10*x11795*x11797))+(((-1.0)*cj4*r11*x11795))+(((-1.0)*x11800*x11801)));
evalcond[5]=(((sj4*x11799))+((cj4*x11798))+(((-1.0)*x11789))+(((-1.0)*r10*x11791*x11795))+((x11791*x11792))+((sj4*x11800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11802=(cj5*r12);
IkReal x11803=((8.7525)*cj2);
IkReal x11804=(r11*sj5*sj6);
IkReal x11805=(cj6*r10*sj5);
CheckValue<IkReal> x11806=IKPowWithIntegerCheck(cj2,-1);
if(!x11806.valid){
continue;
}
CheckValue<IkReal> x11807=IKPowWithIntegerCheck(((((-318.75)*cj2*sj2))+(((-7859.0)*(cj2*cj2)))),-1);
if(!x11807.valid){
continue;
}
if( IKabs(((x11806.value)*(((((-1.0)*x11804))+x11802+x11805)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11807.value)*(((((25000.0)*cj2*px))+(((-10519.0)*x11805))+(((-10519.0)*x11802))+(((-1.0)*cj6*r01*x11803))+(((10519.0)*x11804))+(((-1.0)*r00*sj6*x11803)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11806.value)*(((((-1.0)*x11804))+x11802+x11805))))+IKsqr(((x11807.value)*(((((25000.0)*cj2*px))+(((-10519.0)*x11805))+(((-10519.0)*x11802))+(((-1.0)*cj6*r01*x11803))+(((10519.0)*x11804))+(((-1.0)*r00*sj6*x11803))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x11806.value)*(((((-1.0)*x11804))+x11802+x11805))), ((x11807.value)*(((((25000.0)*cj2*px))+(((-10519.0)*x11805))+(((-10519.0)*x11802))+(((-1.0)*cj6*r01*x11803))+(((10519.0)*x11804))+(((-1.0)*r00*sj6*x11803))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11808=IKsin(j1);
IkReal x11809=IKcos(j1);
IkReal x11810=(cj4*cj5);
IkReal x11811=(r02*sj5);
IkReal x11812=(r11*sj6);
IkReal x11813=(r00*sj6);
IkReal x11814=((0.0003501)*cj6);
IkReal x11815=(cj5*sj4);
IkReal x11816=((0.01275)*sj2);
IkReal x11817=(r01*sj6);
IkReal x11818=(r12*sj5);
IkReal x11819=((1.0)*cj4);
IkReal x11820=(cj6*r11);
IkReal x11821=(cj6*r01);
IkReal x11822=(r10*sj6);
IkReal x11823=((1.0)*cj5);
IkReal x11824=((1.0)*cj6*r10);
IkReal x11825=(cj2*x11809);
IkReal x11826=((1.0)*x11809);
IkReal x11827=((1.0)*cj6*r00);
IkReal x11828=(cj2*x11808);
evalcond[0]=((((-1.0)*sj5*x11824))+(((-1.0)*r12*x11823))+((sj5*x11812))+x11828);
evalcond[1]=((((-1.0)*sj5*x11827))+(((-1.0)*r02*x11823))+((sj5*x11817))+x11825);
evalcond[2]=((((-1.0)*x11810*x11827))+((sj4*x11821))+((sj4*x11813))+((cj4*x11811))+((x11810*x11817))+x11808);
evalcond[3]=((((0.0003501)*x11813))+(((0.42076)*x11808))+((r01*x11814))+(((-0.31436)*x11825))+(((-1.0)*px))+(((-1.0)*x11809*x11816)));
evalcond[4]=((((-0.31436)*x11828))+(((-1.0)*x11808*x11816))+(((-1.0)*py))+(((0.0003501)*x11822))+((r11*x11814))+(((-0.42076)*x11809)));
evalcond[5]=((((-1.0)*x11810*x11824))+((sj4*x11820))+((sj4*x11822))+((cj4*x11818))+(((-1.0)*x11826))+((x11810*x11812)));
evalcond[6]=(((x11815*x11817))+(((-1.0)*x11819*x11821))+((sj4*x11811))+(((-1.0)*x11813*x11819))+(((-1.0)*sj2*x11826))+(((-1.0)*x11815*x11827)));
evalcond[7]=(((x11812*x11815))+(((-1.0)*x11819*x11820))+(((-1.0)*x11819*x11822))+((sj4*x11818))+(((-1.0)*sj2*x11808))+(((-1.0)*x11815*x11824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11829=((1.0)*sj6);
IkReal x11830=(cj6*r00);
IkReal x11831=(cj4*cj5);
CheckValue<IkReal> x11832=IKPowWithIntegerCheck(cj2,-1);
if(!x11832.valid){
continue;
}
if( IKabs(((((-1.0)*r00*sj4*x11829))+(((-1.0)*cj4*r02*sj5))+((x11830*x11831))+(((-1.0)*r01*x11829*x11831))+(((-1.0)*cj6*r01*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11832.value)*((((sj5*x11830))+(((-1.0)*r01*sj5*x11829))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj4*x11829))+(((-1.0)*cj4*r02*sj5))+((x11830*x11831))+(((-1.0)*r01*x11829*x11831))+(((-1.0)*cj6*r01*sj4))))+IKsqr(((x11832.value)*((((sj5*x11830))+(((-1.0)*r01*sj5*x11829))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj4*x11829))+(((-1.0)*cj4*r02*sj5))+((x11830*x11831))+(((-1.0)*r01*x11829*x11831))+(((-1.0)*cj6*r01*sj4))), ((x11832.value)*((((sj5*x11830))+(((-1.0)*r01*sj5*x11829))+((cj5*r02))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11833=IKsin(j1);
IkReal x11834=IKcos(j1);
IkReal x11835=(cj4*cj5);
IkReal x11836=(r02*sj5);
IkReal x11837=(r11*sj6);
IkReal x11838=(r00*sj6);
IkReal x11839=((0.0003501)*cj6);
IkReal x11840=(cj5*sj4);
IkReal x11841=((0.01275)*sj2);
IkReal x11842=(r01*sj6);
IkReal x11843=(r12*sj5);
IkReal x11844=((1.0)*cj4);
IkReal x11845=(cj6*r11);
IkReal x11846=(cj6*r01);
IkReal x11847=(r10*sj6);
IkReal x11848=((1.0)*cj5);
IkReal x11849=((1.0)*cj6*r10);
IkReal x11850=(cj2*x11834);
IkReal x11851=((1.0)*x11834);
IkReal x11852=((1.0)*cj6*r00);
IkReal x11853=(cj2*x11833);
evalcond[0]=((((-1.0)*sj5*x11849))+((sj5*x11837))+(((-1.0)*r12*x11848))+x11853);
evalcond[1]=((((-1.0)*r02*x11848))+((sj5*x11842))+(((-1.0)*sj5*x11852))+x11850);
evalcond[2]=(((x11835*x11842))+((sj4*x11846))+(((-1.0)*x11835*x11852))+((cj4*x11836))+((sj4*x11838))+x11833);
evalcond[3]=((((0.42076)*x11833))+(((-0.31436)*x11850))+(((-1.0)*px))+(((0.0003501)*x11838))+(((-1.0)*x11834*x11841))+((r01*x11839)));
evalcond[4]=((((-1.0)*x11833*x11841))+(((-0.31436)*x11853))+(((-1.0)*py))+((r11*x11839))+(((0.0003501)*x11847))+(((-0.42076)*x11834)));
evalcond[5]=((((-1.0)*x11851))+((cj4*x11843))+((sj4*x11847))+((sj4*x11845))+(((-1.0)*x11835*x11849))+((x11835*x11837)));
evalcond[6]=(((x11840*x11842))+(((-1.0)*sj2*x11851))+(((-1.0)*x11844*x11846))+(((-1.0)*x11840*x11852))+(((-1.0)*x11838*x11844))+((sj4*x11836)));
evalcond[7]=((((-1.0)*x11844*x11847))+(((-1.0)*x11844*x11845))+(((-1.0)*x11840*x11849))+((sj4*x11843))+((x11837*x11840))+(((-1.0)*sj2*x11833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11854=(cj6*sj5);
IkReal x11855=((1.0)*sj5*sj6);
CheckValue<IkReal> x11856=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x11856.valid){
continue;
}
CheckValue<IkReal> x11857 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x11855))+((r10*x11854)))),IkReal((((r00*x11854))+(((-1.0)*r01*x11855))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11857.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11856.value)))+(x11857.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11858=IKsin(j1);
IkReal x11859=IKcos(j1);
IkReal x11860=(cj4*cj5);
IkReal x11861=(r02*sj5);
IkReal x11862=(r11*sj6);
IkReal x11863=(r00*sj6);
IkReal x11864=((0.0003501)*cj6);
IkReal x11865=(cj5*sj4);
IkReal x11866=((0.01275)*sj2);
IkReal x11867=(r01*sj6);
IkReal x11868=(r12*sj5);
IkReal x11869=((1.0)*cj4);
IkReal x11870=(cj6*r11);
IkReal x11871=(cj6*r01);
IkReal x11872=(r10*sj6);
IkReal x11873=((1.0)*cj5);
IkReal x11874=((1.0)*cj6*r10);
IkReal x11875=(cj2*x11859);
IkReal x11876=((1.0)*x11859);
IkReal x11877=((1.0)*cj6*r00);
IkReal x11878=(cj2*x11858);
evalcond[0]=((((-1.0)*sj5*x11874))+(((-1.0)*r12*x11873))+x11878+((sj5*x11862)));
evalcond[1]=((((-1.0)*sj5*x11877))+(((-1.0)*r02*x11873))+x11875+((sj5*x11867)));
evalcond[2]=(((cj4*x11861))+(((-1.0)*x11860*x11877))+((sj4*x11863))+((sj4*x11871))+((x11860*x11867))+x11858);
evalcond[3]=((((-1.0)*x11859*x11866))+(((-0.31436)*x11875))+((r01*x11864))+(((-1.0)*px))+(((0.42076)*x11858))+(((0.0003501)*x11863)));
evalcond[4]=((((-0.31436)*x11878))+(((-1.0)*py))+((r11*x11864))+(((-1.0)*x11858*x11866))+(((-0.42076)*x11859))+(((0.0003501)*x11872)));
evalcond[5]=((((-1.0)*x11876))+((cj4*x11868))+(((-1.0)*x11860*x11874))+((sj4*x11870))+((sj4*x11872))+((x11860*x11862)));
evalcond[6]=((((-1.0)*sj2*x11876))+(((-1.0)*x11865*x11877))+((sj4*x11861))+(((-1.0)*x11863*x11869))+(((-1.0)*x11869*x11871))+((x11865*x11867)));
evalcond[7]=((((-1.0)*sj2*x11858))+(((-1.0)*x11865*x11874))+((sj4*x11868))+((x11862*x11865))+(((-1.0)*x11869*x11872))+(((-1.0)*x11869*x11870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x11879=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x11879))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x11879))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((((1.33846545362005)*cj3))+(cj3*cj3));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x11886=IKPowWithIntegerCheck(cj3,-1);
if(!x11886.valid){
continue;
}
IkReal x11880=x11886.value;
IkReal x11881=((1257.44)*cj3);
IkReal x11882=(cj5*r12);
IkReal x11883=((1.4004)*cj3);
IkReal x11884=(r11*sj5*sj6);
IkReal x11885=(cj6*r10*sj5);
if( IKabs(((0.0196078431372549)*x11880*(((((1683.04)*x11884))+((x11881*x11884))+(((-1.0)*x11881*x11885))+(((-1.0)*x11881*x11882))+(((-4000.0)*cj3*py))+(((-1683.04)*x11882))+(((-1683.04)*x11885))+((r10*sj6*x11883))+((cj6*r11*x11883)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11880*(((((-1.0)*x11884))+x11882+x11885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0196078431372549)*x11880*(((((1683.04)*x11884))+((x11881*x11884))+(((-1.0)*x11881*x11885))+(((-1.0)*x11881*x11882))+(((-4000.0)*cj3*py))+(((-1683.04)*x11882))+(((-1683.04)*x11885))+((r10*sj6*x11883))+((cj6*r11*x11883))))))+IKsqr((x11880*(((((-1.0)*x11884))+x11882+x11885))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0196078431372549)*x11880*(((((1683.04)*x11884))+((x11881*x11884))+(((-1.0)*x11881*x11885))+(((-1.0)*x11881*x11882))+(((-4000.0)*cj3*py))+(((-1683.04)*x11882))+(((-1683.04)*x11885))+((r10*sj6*x11883))+((cj6*r11*x11883))))), (x11880*(((((-1.0)*x11884))+x11882+x11885))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11887=IKsin(j1);
IkReal x11888=IKcos(j1);
IkReal x11889=(r02*sj5);
IkReal x11890=(r11*sj6);
IkReal x11891=(cj4*cj5);
IkReal x11892=(r00*sj6);
IkReal x11893=(cj6*r01);
IkReal x11894=(cj5*sj4);
IkReal x11895=(r01*sj6);
IkReal x11896=(r12*sj5);
IkReal x11897=(cj6*r11);
IkReal x11898=((1.0)*cj4);
IkReal x11899=(r10*sj6);
IkReal x11900=((1.0)*cj5);
IkReal x11901=(cj3*x11887);
IkReal x11902=((1.0)*cj6*r10);
IkReal x11903=((1.0)*x11887);
IkReal x11904=((1.0)*cj6*r00);
IkReal x11905=(cj3*x11888);
evalcond[0]=(x11905+(((-1.0)*r12*x11900))+(((-1.0)*sj5*x11902))+((sj5*x11890)));
evalcond[1]=((((-1.0)*r02*x11900))+(((-1.0)*x11901))+(((-1.0)*sj5*x11904))+((sj5*x11895)));
evalcond[2]=((((0.0003501)*x11892))+(((0.0003501)*x11893))+(((0.42076)*x11887))+(((-1.0)*px))+(((0.31436)*x11901))+(((-0.01275)*x11888)));
evalcond[3]=((((0.0003501)*x11897))+(((0.0003501)*x11899))+(((-0.31436)*x11905))+(((-0.42076)*x11888))+(((-1.0)*py))+(((-0.01275)*x11887)));
evalcond[4]=(((sj4*x11899))+((sj4*x11897))+(((-1.0)*x11891*x11902))+((cj4*x11896))+((x11890*x11891))+((sj3*x11888)));
evalcond[5]=(((sj4*x11893))+((sj4*x11892))+(((-1.0)*x11891*x11904))+(((-1.0)*sj3*x11903))+((cj4*x11889))+((x11891*x11895)));
evalcond[6]=(((x11894*x11895))+(((-1.0)*x11888))+((sj4*x11889))+(((-1.0)*x11894*x11904))+(((-1.0)*x11892*x11898))+(((-1.0)*x11893*x11898)));
evalcond[7]=(((sj4*x11896))+(((-1.0)*x11897*x11898))+(((-1.0)*x11898*x11899))+(((-1.0)*x11894*x11902))+((x11890*x11894))+(((-1.0)*x11903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11906=((1.4004)*cj3);
IkReal x11907=(cj5*r12);
IkReal x11908=(r11*sj5*sj6);
IkReal x11909=(cj6*r10*sj5);
CheckValue<IkReal> x11910=IKPowWithIntegerCheck(((((1257.44)*(cj3*cj3)))+(((1683.04)*cj3))),-1);
if(!x11910.valid){
continue;
}
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(cj3,-1);
if(!x11911.valid){
continue;
}
if( IKabs(((x11910.value)*(((((-1.0)*r00*sj6*x11906))+(((-51.0)*x11908))+(((51.0)*x11909))+(((51.0)*x11907))+(((4000.0)*cj3*px))+(((-1.0)*cj6*r01*x11906)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11911.value)*((x11907+x11909+(((-1.0)*x11908)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11910.value)*(((((-1.0)*r00*sj6*x11906))+(((-51.0)*x11908))+(((51.0)*x11909))+(((51.0)*x11907))+(((4000.0)*cj3*px))+(((-1.0)*cj6*r01*x11906))))))+IKsqr(((x11911.value)*((x11907+x11909+(((-1.0)*x11908))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x11910.value)*(((((-1.0)*r00*sj6*x11906))+(((-51.0)*x11908))+(((51.0)*x11909))+(((51.0)*x11907))+(((4000.0)*cj3*px))+(((-1.0)*cj6*r01*x11906))))), ((x11911.value)*((x11907+x11909+(((-1.0)*x11908))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11912=IKsin(j1);
IkReal x11913=IKcos(j1);
IkReal x11914=(r02*sj5);
IkReal x11915=(r11*sj6);
IkReal x11916=(cj4*cj5);
IkReal x11917=(r00*sj6);
IkReal x11918=(cj6*r01);
IkReal x11919=(cj5*sj4);
IkReal x11920=(r01*sj6);
IkReal x11921=(r12*sj5);
IkReal x11922=(cj6*r11);
IkReal x11923=((1.0)*cj4);
IkReal x11924=(r10*sj6);
IkReal x11925=((1.0)*cj5);
IkReal x11926=(cj3*x11912);
IkReal x11927=((1.0)*cj6*r10);
IkReal x11928=((1.0)*x11912);
IkReal x11929=((1.0)*cj6*r00);
IkReal x11930=(cj3*x11913);
evalcond[0]=(x11930+(((-1.0)*sj5*x11927))+((sj5*x11915))+(((-1.0)*r12*x11925)));
evalcond[1]=(((sj5*x11920))+(((-1.0)*sj5*x11929))+(((-1.0)*r02*x11925))+(((-1.0)*x11926)));
evalcond[2]=((((-1.0)*px))+(((-0.01275)*x11913))+(((0.42076)*x11912))+(((0.0003501)*x11917))+(((0.0003501)*x11918))+(((0.31436)*x11926)));
evalcond[3]=((((0.0003501)*x11924))+(((0.0003501)*x11922))+(((-0.42076)*x11913))+(((-1.0)*py))+(((-0.31436)*x11930))+(((-0.01275)*x11912)));
evalcond[4]=(((cj4*x11921))+((sj4*x11924))+((sj4*x11922))+((sj3*x11913))+((x11915*x11916))+(((-1.0)*x11916*x11927)));
evalcond[5]=((((-1.0)*sj3*x11928))+((x11916*x11920))+((cj4*x11914))+(((-1.0)*x11916*x11929))+((sj4*x11917))+((sj4*x11918)));
evalcond[6]=((((-1.0)*x11917*x11923))+(((-1.0)*x11918*x11923))+(((-1.0)*x11913))+(((-1.0)*x11919*x11929))+((x11919*x11920))+((sj4*x11914)));
evalcond[7]=((((-1.0)*x11928))+((sj4*x11921))+((x11915*x11919))+(((-1.0)*x11919*x11927))+(((-1.0)*x11923*x11924))+(((-1.0)*x11922*x11923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11931=((1.0)*sj5);
CheckValue<IkReal> x11932=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x11932.valid){
continue;
}
CheckValue<IkReal> x11933 = IKatan2WithCheck(IkReal((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x11931))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*r11*sj6*x11931))+((cj6*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11933.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11932.value)))+(x11933.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11934=IKsin(j1);
IkReal x11935=IKcos(j1);
IkReal x11936=(r02*sj5);
IkReal x11937=(r11*sj6);
IkReal x11938=(cj4*cj5);
IkReal x11939=(r00*sj6);
IkReal x11940=(cj6*r01);
IkReal x11941=(cj5*sj4);
IkReal x11942=(r01*sj6);
IkReal x11943=(r12*sj5);
IkReal x11944=(cj6*r11);
IkReal x11945=((1.0)*cj4);
IkReal x11946=(r10*sj6);
IkReal x11947=((1.0)*cj5);
IkReal x11948=(cj3*x11934);
IkReal x11949=((1.0)*cj6*r10);
IkReal x11950=((1.0)*x11934);
IkReal x11951=((1.0)*cj6*r00);
IkReal x11952=(cj3*x11935);
evalcond[0]=(x11952+((sj5*x11937))+(((-1.0)*sj5*x11949))+(((-1.0)*r12*x11947)));
evalcond[1]=((((-1.0)*sj5*x11951))+(((-1.0)*r02*x11947))+(((-1.0)*x11948))+((sj5*x11942)));
evalcond[2]=((((0.42076)*x11934))+(((0.0003501)*x11939))+(((-0.01275)*x11935))+(((0.31436)*x11948))+(((-1.0)*px))+(((0.0003501)*x11940)));
evalcond[3]=((((-0.31436)*x11952))+(((-0.01275)*x11934))+(((-1.0)*py))+(((0.0003501)*x11946))+(((0.0003501)*x11944))+(((-0.42076)*x11935)));
evalcond[4]=(((cj4*x11943))+((sj4*x11946))+((sj4*x11944))+(((-1.0)*x11938*x11949))+((x11937*x11938))+((sj3*x11935)));
evalcond[5]=(((cj4*x11936))+(((-1.0)*x11938*x11951))+((sj4*x11940))+(((-1.0)*sj3*x11950))+((sj4*x11939))+((x11938*x11942)));
evalcond[6]=((((-1.0)*x11940*x11945))+((sj4*x11936))+(((-1.0)*x11935))+(((-1.0)*x11939*x11945))+((x11941*x11942))+(((-1.0)*x11941*x11951)));
evalcond[7]=((((-1.0)*x11950))+(((-1.0)*x11945*x11946))+((sj4*x11943))+(((-1.0)*x11944*x11945))+((x11937*x11941))+(((-1.0)*x11941*x11949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x11953=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x11953)))))+(IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x11953))+(((-1.0)*cj5*r02))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=((((1.33846545362005)*cj3))+(cj3*cj3));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x11960=IKPowWithIntegerCheck(cj3,-1);
if(!x11960.valid){
continue;
}
IkReal x11954=x11960.value;
IkReal x11955=((1257.44)*cj3);
IkReal x11956=(cj5*r12);
IkReal x11957=((1.4004)*cj3);
IkReal x11958=(r11*sj5*sj6);
IkReal x11959=(cj6*r10*sj5);
if( IKabs(((0.0196078431372549)*x11954*(((((-1683.04)*x11958))+(((-1.0)*cj6*r11*x11957))+((x11955*x11959))+((x11955*x11956))+(((4000.0)*cj3*py))+(((-1.0)*x11955*x11958))+(((1683.04)*x11956))+(((1683.04)*x11959))+(((-1.0)*r10*sj6*x11957)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11954*((x11959+x11956+(((-1.0)*x11958)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0196078431372549)*x11954*(((((-1683.04)*x11958))+(((-1.0)*cj6*r11*x11957))+((x11955*x11959))+((x11955*x11956))+(((4000.0)*cj3*py))+(((-1.0)*x11955*x11958))+(((1683.04)*x11956))+(((1683.04)*x11959))+(((-1.0)*r10*sj6*x11957))))))+IKsqr((x11954*((x11959+x11956+(((-1.0)*x11958))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0196078431372549)*x11954*(((((-1683.04)*x11958))+(((-1.0)*cj6*r11*x11957))+((x11955*x11959))+((x11955*x11956))+(((4000.0)*cj3*py))+(((-1.0)*x11955*x11958))+(((1683.04)*x11956))+(((1683.04)*x11959))+(((-1.0)*r10*sj6*x11957))))), (x11954*((x11959+x11956+(((-1.0)*x11958))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11961=IKsin(j1);
IkReal x11962=IKcos(j1);
IkReal x11963=(r02*sj5);
IkReal x11964=(r11*sj6);
IkReal x11965=(cj4*cj5);
IkReal x11966=(r00*sj6);
IkReal x11967=(cj6*r01);
IkReal x11968=(cj5*sj4);
IkReal x11969=(r01*sj6);
IkReal x11970=(r12*sj5);
IkReal x11971=(cj6*r11);
IkReal x11972=((1.0)*cj4);
IkReal x11973=(r10*sj6);
IkReal x11974=((1.0)*cj5);
IkReal x11975=(cj3*x11961);
IkReal x11976=((1.0)*cj6*r10);
IkReal x11977=((1.0)*cj6*r00);
IkReal x11978=(cj3*x11962);
evalcond[0]=(x11978+(((-1.0)*r12*x11974))+(((-1.0)*sj5*x11976))+((sj5*x11964)));
evalcond[1]=((((-1.0)*x11975))+(((-1.0)*sj5*x11977))+((sj5*x11969))+(((-1.0)*r02*x11974)));
evalcond[2]=((((0.01275)*x11962))+(((0.31436)*x11975))+(((-1.0)*px))+(((0.42076)*x11961))+(((0.0003501)*x11966))+(((0.0003501)*x11967)));
evalcond[3]=((((0.0003501)*x11973))+(((0.0003501)*x11971))+(((0.01275)*x11961))+(((-1.0)*py))+(((-0.42076)*x11962))+(((-0.31436)*x11978)));
evalcond[4]=(x11962+((x11968*x11969))+(((-1.0)*x11966*x11972))+(((-1.0)*x11967*x11972))+((sj4*x11963))+(((-1.0)*x11968*x11977)));
evalcond[5]=(x11961+(((-1.0)*x11971*x11972))+((sj4*x11970))+(((-1.0)*x11972*x11973))+((x11964*x11968))+(((-1.0)*x11968*x11976)));
evalcond[6]=((((-1.0)*x11965*x11976))+((sj3*x11962))+((sj4*x11971))+((sj4*x11973))+((cj4*x11970))+((x11964*x11965)));
evalcond[7]=((((-1.0)*x11965*x11977))+((sj4*x11967))+((sj4*x11966))+((x11965*x11969))+((cj4*x11963))+(((-1.0)*sj3*x11961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x11979=((1.4004)*cj3);
IkReal x11980=(cj5*r12);
IkReal x11981=(r11*sj5*sj6);
IkReal x11982=(cj6*r10*sj5);
CheckValue<IkReal> x11983=IKPowWithIntegerCheck(((((1257.44)*(cj3*cj3)))+(((1683.04)*cj3))),-1);
if(!x11983.valid){
continue;
}
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(cj3,-1);
if(!x11984.valid){
continue;
}
if( IKabs(((x11983.value)*(((((51.0)*x11981))+(((-1.0)*cj6*r01*x11979))+(((-1.0)*r00*sj6*x11979))+(((4000.0)*cj3*px))+(((-51.0)*x11982))+(((-51.0)*x11980)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11984.value)*((x11980+x11982+(((-1.0)*x11981)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11983.value)*(((((51.0)*x11981))+(((-1.0)*cj6*r01*x11979))+(((-1.0)*r00*sj6*x11979))+(((4000.0)*cj3*px))+(((-51.0)*x11982))+(((-51.0)*x11980))))))+IKsqr(((x11984.value)*((x11980+x11982+(((-1.0)*x11981))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x11983.value)*(((((51.0)*x11981))+(((-1.0)*cj6*r01*x11979))+(((-1.0)*r00*sj6*x11979))+(((4000.0)*cj3*px))+(((-51.0)*x11982))+(((-51.0)*x11980))))), ((x11984.value)*((x11980+x11982+(((-1.0)*x11981))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x11985=IKsin(j1);
IkReal x11986=IKcos(j1);
IkReal x11987=(r02*sj5);
IkReal x11988=(r11*sj6);
IkReal x11989=(cj4*cj5);
IkReal x11990=(r00*sj6);
IkReal x11991=(cj6*r01);
IkReal x11992=(cj5*sj4);
IkReal x11993=(r01*sj6);
IkReal x11994=(r12*sj5);
IkReal x11995=(cj6*r11);
IkReal x11996=((1.0)*cj4);
IkReal x11997=(r10*sj6);
IkReal x11998=((1.0)*cj5);
IkReal x11999=(cj3*x11985);
IkReal x12000=((1.0)*cj6*r10);
IkReal x12001=((1.0)*cj6*r00);
IkReal x12002=(cj3*x11986);
evalcond[0]=((((-1.0)*sj5*x12000))+x12002+(((-1.0)*r12*x11998))+((sj5*x11988)));
evalcond[1]=((((-1.0)*r02*x11998))+(((-1.0)*sj5*x12001))+(((-1.0)*x11999))+((sj5*x11993)));
evalcond[2]=((((0.42076)*x11985))+(((0.01275)*x11986))+(((0.0003501)*x11991))+(((0.0003501)*x11990))+(((-1.0)*px))+(((0.31436)*x11999)));
evalcond[3]=((((0.01275)*x11985))+(((0.0003501)*x11995))+(((0.0003501)*x11997))+(((-1.0)*py))+(((-0.42076)*x11986))+(((-0.31436)*x12002)));
evalcond[4]=(x11986+(((-1.0)*x11990*x11996))+((x11992*x11993))+(((-1.0)*x11991*x11996))+((sj4*x11987))+(((-1.0)*x11992*x12001)));
evalcond[5]=(x11985+((x11988*x11992))+((sj4*x11994))+(((-1.0)*x11995*x11996))+(((-1.0)*x11996*x11997))+(((-1.0)*x11992*x12000)));
evalcond[6]=(((sj3*x11986))+(((-1.0)*x11989*x12000))+((sj4*x11995))+((sj4*x11997))+((cj4*x11994))+((x11988*x11989)));
evalcond[7]=((((-1.0)*x11989*x12001))+((cj4*x11987))+((x11989*x11993))+((sj4*x11990))+((sj4*x11991))+(((-1.0)*sj3*x11985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12003=((1.0)*sj5);
CheckValue<IkReal> x12004=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x12004.valid){
continue;
}
CheckValue<IkReal> x12005 = IKatan2WithCheck(IkReal((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x12003))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x12003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12005.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12004.value)))+(x12005.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12006=IKsin(j1);
IkReal x12007=IKcos(j1);
IkReal x12008=(r02*sj5);
IkReal x12009=(r11*sj6);
IkReal x12010=(cj4*cj5);
IkReal x12011=(r00*sj6);
IkReal x12012=(cj6*r01);
IkReal x12013=(cj5*sj4);
IkReal x12014=(r01*sj6);
IkReal x12015=(r12*sj5);
IkReal x12016=(cj6*r11);
IkReal x12017=((1.0)*cj4);
IkReal x12018=(r10*sj6);
IkReal x12019=((1.0)*cj5);
IkReal x12020=(cj3*x12006);
IkReal x12021=((1.0)*cj6*r10);
IkReal x12022=((1.0)*cj6*r00);
IkReal x12023=(cj3*x12007);
evalcond[0]=((((-1.0)*sj5*x12021))+(((-1.0)*r12*x12019))+x12023+((sj5*x12009)));
evalcond[1]=((((-1.0)*r02*x12019))+(((-1.0)*x12020))+(((-1.0)*sj5*x12022))+((sj5*x12014)));
evalcond[2]=((((0.42076)*x12006))+(((0.0003501)*x12011))+(((0.0003501)*x12012))+(((-1.0)*px))+(((0.31436)*x12020))+(((0.01275)*x12007)));
evalcond[3]=((((-0.31436)*x12023))+(((0.0003501)*x12016))+(((0.0003501)*x12018))+(((-1.0)*py))+(((-0.42076)*x12007))+(((0.01275)*x12006)));
evalcond[4]=((((-1.0)*x12011*x12017))+((sj4*x12008))+x12007+(((-1.0)*x12012*x12017))+((x12013*x12014))+(((-1.0)*x12013*x12022)));
evalcond[5]=(((x12009*x12013))+(((-1.0)*x12016*x12017))+(((-1.0)*x12017*x12018))+x12006+((sj4*x12015))+(((-1.0)*x12013*x12021)));
evalcond[6]=(((x12009*x12010))+((cj4*x12015))+(((-1.0)*x12010*x12021))+((sj3*x12007))+((sj4*x12016))+((sj4*x12018)));
evalcond[7]=((((-1.0)*sj3*x12006))+((cj4*x12008))+((x12010*x12014))+(((-1.0)*x12010*x12022))+((sj4*x12011))+((sj4*x12012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x12035=IKPowWithIntegerCheck(sj2,-1);
if(!x12035.valid){
continue;
}
IkReal x12024=x12035.value;
IkReal x12025=((1.0)*sj6);
IkReal x12026=(cj4*r10);
IkReal x12027=(r11*sj6);
IkReal x12028=(sj2*sj5);
IkReal x12029=((1.0)*cj6);
IkReal x12030=(cj2*sj3);
IkReal x12031=(cj4*r11);
IkReal x12032=(cj5*sj4);
IkReal x12033=(r12*sj4*sj5);
IkReal x12034=(x12030*x12032);
CheckValue<IkReal> x12036=IKPowWithIntegerCheck(cj3,-1);
if(!x12036.valid){
continue;
}
if( IKabs((x12024*(((((-1.0)*x12029*x12031))+((x12027*x12032))+(((-1.0)*r10*x12029*x12032))+(((-1.0)*x12025*x12026))+x12033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12024*(x12036.value)*((((cj5*r12*sj2))+((cj6*r10*x12028))+((x12027*x12034))+(((-1.0)*r10*x12029*x12034))+((x12030*x12033))+(((-1.0)*x12025*x12026*x12030))+(((-1.0)*r11*x12025*x12028))+(((-1.0)*x12029*x12030*x12031)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12024*(((((-1.0)*x12029*x12031))+((x12027*x12032))+(((-1.0)*r10*x12029*x12032))+(((-1.0)*x12025*x12026))+x12033))))+IKsqr((x12024*(x12036.value)*((((cj5*r12*sj2))+((cj6*r10*x12028))+((x12027*x12034))+(((-1.0)*r10*x12029*x12034))+((x12030*x12033))+(((-1.0)*x12025*x12026*x12030))+(((-1.0)*r11*x12025*x12028))+(((-1.0)*x12029*x12030*x12031))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x12024*(((((-1.0)*x12029*x12031))+((x12027*x12032))+(((-1.0)*r10*x12029*x12032))+(((-1.0)*x12025*x12026))+x12033))), (x12024*(x12036.value)*((((cj5*r12*sj2))+((cj6*r10*x12028))+((x12027*x12034))+(((-1.0)*r10*x12029*x12034))+((x12030*x12033))+(((-1.0)*x12025*x12026*x12030))+(((-1.0)*r11*x12025*x12028))+(((-1.0)*x12029*x12030*x12031))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12037=IKcos(j1);
IkReal x12038=IKsin(j1);
IkReal x12039=((0.31436)*sj3);
IkReal x12040=(r02*sj5);
IkReal x12041=(r11*sj6);
IkReal x12042=(cj4*cj5);
IkReal x12043=(sj4*sj6);
IkReal x12044=(r00*sj6);
IkReal x12045=((0.0003501)*cj6);
IkReal x12046=(cj5*sj4);
IkReal x12047=(r12*sj5);
IkReal x12048=(r01*sj6);
IkReal x12049=(cj6*r11);
IkReal x12050=((1.0)*cj4);
IkReal x12051=(cj6*r01);
IkReal x12052=((1.0)*sj3);
IkReal x12053=((1.0)*cj5);
IkReal x12054=(r10*sj6);
IkReal x12055=(cj2*x12037);
IkReal x12056=(cj3*x12038);
IkReal x12057=((1.0)*cj6*r10);
IkReal x12058=(sj2*x12037);
IkReal x12059=(sj2*x12038);
IkReal x12060=((1.0)*cj6*r00);
IkReal x12061=(cj2*x12038);
IkReal x12062=(cj3*x12037);
evalcond[0]=(((sj5*x12041))+(((-1.0)*sj5*x12057))+x12062+(((-1.0)*x12052*x12061))+(((-1.0)*r12*x12053)));
evalcond[1]=(((sj5*x12048))+(((-1.0)*x12056))+(((-1.0)*r02*x12053))+(((-1.0)*sj5*x12060))+(((-1.0)*x12052*x12055)));
evalcond[2]=(((cj5*r01*x12043))+(((-1.0)*x12058))+(((-1.0)*x12044*x12050))+((sj4*x12040))+(((-1.0)*x12046*x12060))+(((-1.0)*x12050*x12051)));
evalcond[3]=((((-1.0)*x12046*x12057))+(((-1.0)*x12049*x12050))+(((-1.0)*x12059))+((sj4*x12047))+((x12041*x12046))+(((-1.0)*x12050*x12054)));
evalcond[4]=(((r10*x12043))+((cj4*x12047))+((sj4*x12049))+((cj2*x12056))+((x12041*x12042))+(((-1.0)*x12042*x12057))+((sj3*x12037)));
evalcond[5]=((((0.42076)*x12038))+((x12039*x12055))+(((-1.0)*px))+(((0.31436)*x12056))+((r01*x12045))+(((0.0003501)*x12044))+(((-0.01275)*x12058)));
evalcond[6]=((((-1.0)*py))+((x12039*x12061))+((r11*x12045))+(((0.0003501)*x12054))+(((-0.01275)*x12059))+(((-0.42076)*x12037))+(((-0.31436)*x12062)));
evalcond[7]=((((-1.0)*x12042*x12060))+((cj4*x12040))+((sj4*x12051))+((r00*x12043))+((cj3*x12055))+(((-1.0)*x12038*x12052))+((x12042*x12048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12063=(cj4*sj5);
IkReal x12064=(cj3*cj5);
IkReal x12065=(r11*sj6);
IkReal x12066=(sj3*sj5);
IkReal x12067=(cj3*cj6);
IkReal x12068=((1.0)*sj4);
IkReal x12069=((1.0)*cj4);
IkReal x12070=(r10*sj6);
IkReal x12071=((1.0)*cj3);
IkReal x12072=((1.0)*r12*sj3);
IkReal x12073=(cj4*cj5*cj6*r10);
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(cj2,-1);
if(!x12074.valid){
continue;
}
if( IKabs(((x12074.value)*((((cj4*cj6*r10*x12064))+(((-1.0)*cj5*x12072))+(((-1.0)*cj6*r10*x12066))+((x12065*x12066))+(((-1.0)*r12*x12063*x12071))+(((-1.0)*x12064*x12065*x12069))+(((-1.0)*r11*x12067*x12068))+(((-1.0)*cj3*x12068*x12070)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x12065*x12071))+((r12*x12064))+(((-1.0)*sj3*x12068*x12070))+((r10*sj5*x12067))+(((-1.0)*cj5*sj3*x12065*x12069))+(((-1.0)*cj6*r11*sj3*x12068))+((sj3*x12073))+(((-1.0)*x12063*x12072)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12074.value)*((((cj4*cj6*r10*x12064))+(((-1.0)*cj5*x12072))+(((-1.0)*cj6*r10*x12066))+((x12065*x12066))+(((-1.0)*r12*x12063*x12071))+(((-1.0)*x12064*x12065*x12069))+(((-1.0)*r11*x12067*x12068))+(((-1.0)*cj3*x12068*x12070))))))+IKsqr(((((-1.0)*sj5*x12065*x12071))+((r12*x12064))+(((-1.0)*sj3*x12068*x12070))+((r10*sj5*x12067))+(((-1.0)*cj5*sj3*x12065*x12069))+(((-1.0)*cj6*r11*sj3*x12068))+((sj3*x12073))+(((-1.0)*x12063*x12072))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12074.value)*((((cj4*cj6*r10*x12064))+(((-1.0)*cj5*x12072))+(((-1.0)*cj6*r10*x12066))+((x12065*x12066))+(((-1.0)*r12*x12063*x12071))+(((-1.0)*x12064*x12065*x12069))+(((-1.0)*r11*x12067*x12068))+(((-1.0)*cj3*x12068*x12070))))), ((((-1.0)*sj5*x12065*x12071))+((r12*x12064))+(((-1.0)*sj3*x12068*x12070))+((r10*sj5*x12067))+(((-1.0)*cj5*sj3*x12065*x12069))+(((-1.0)*cj6*r11*sj3*x12068))+((sj3*x12073))+(((-1.0)*x12063*x12072))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12075=IKcos(j1);
IkReal x12076=IKsin(j1);
IkReal x12077=((0.31436)*sj3);
IkReal x12078=(r02*sj5);
IkReal x12079=(r11*sj6);
IkReal x12080=(cj4*cj5);
IkReal x12081=(sj4*sj6);
IkReal x12082=(r00*sj6);
IkReal x12083=((0.0003501)*cj6);
IkReal x12084=(cj5*sj4);
IkReal x12085=(r12*sj5);
IkReal x12086=(r01*sj6);
IkReal x12087=(cj6*r11);
IkReal x12088=((1.0)*cj4);
IkReal x12089=(cj6*r01);
IkReal x12090=((1.0)*sj3);
IkReal x12091=((1.0)*cj5);
IkReal x12092=(r10*sj6);
IkReal x12093=(cj2*x12075);
IkReal x12094=(cj3*x12076);
IkReal x12095=((1.0)*cj6*r10);
IkReal x12096=(sj2*x12075);
IkReal x12097=(sj2*x12076);
IkReal x12098=((1.0)*cj6*r00);
IkReal x12099=(cj2*x12076);
IkReal x12100=(cj3*x12075);
evalcond[0]=(((sj5*x12079))+x12100+(((-1.0)*x12090*x12099))+(((-1.0)*sj5*x12095))+(((-1.0)*r12*x12091)));
evalcond[1]=((((-1.0)*x12094))+(((-1.0)*r02*x12091))+(((-1.0)*x12090*x12093))+(((-1.0)*sj5*x12098))+((sj5*x12086)));
evalcond[2]=(((sj4*x12078))+(((-1.0)*x12088*x12089))+(((-1.0)*x12096))+(((-1.0)*x12084*x12098))+((cj5*r01*x12081))+(((-1.0)*x12082*x12088)));
evalcond[3]=((((-1.0)*x12097))+((sj4*x12085))+(((-1.0)*x12084*x12095))+(((-1.0)*x12088*x12092))+((x12079*x12084))+(((-1.0)*x12087*x12088)));
evalcond[4]=((((-1.0)*x12080*x12095))+((sj4*x12087))+((x12079*x12080))+((cj4*x12085))+((sj3*x12075))+((r10*x12081))+((cj2*x12094)));
evalcond[5]=((((-0.01275)*x12096))+(((0.31436)*x12094))+((r01*x12083))+(((0.42076)*x12076))+((x12077*x12093))+(((-1.0)*px))+(((0.0003501)*x12082)));
evalcond[6]=((((-0.31436)*x12100))+(((-0.01275)*x12097))+(((-0.42076)*x12075))+((x12077*x12099))+(((-1.0)*py))+(((0.0003501)*x12092))+((r11*x12083)));
evalcond[7]=((((-1.0)*x12080*x12098))+((sj4*x12089))+((r00*x12081))+(((-1.0)*x12076*x12090))+((cj4*x12078))+((x12080*x12086))+((cj3*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12101=cj2*cj2;
IkReal x12102=cj3*cj3;
IkReal x12103=((1.0)*cj5);
IkReal x12104=(cj2*sj3);
IkReal x12105=(sj5*sj6);
IkReal x12106=((1.0)*cj6*sj5);
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(IKsign((x12101+x12102+(((-1.0)*x12101*x12102)))),-1);
if(!x12107.valid){
continue;
}
CheckValue<IkReal> x12108 = IKatan2WithCheck(IkReal((((r11*x12104*x12105))+((cj3*r01*x12105))+(((-1.0)*r12*x12103*x12104))+(((-1.0)*r10*x12104*x12106))+(((-1.0)*cj3*r00*x12106))+(((-1.0)*cj3*r02*x12103)))),IkReal(((((-1.0)*cj3*r11*x12105))+((r01*x12104*x12105))+((cj3*cj6*r10*sj5))+(((-1.0)*r02*x12103*x12104))+((cj3*cj5*r12))+(((-1.0)*r00*x12104*x12106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12108.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12107.value)))+(x12108.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12109=IKcos(j1);
IkReal x12110=IKsin(j1);
IkReal x12111=((0.31436)*sj3);
IkReal x12112=(r02*sj5);
IkReal x12113=(r11*sj6);
IkReal x12114=(cj4*cj5);
IkReal x12115=(sj4*sj6);
IkReal x12116=(r00*sj6);
IkReal x12117=((0.0003501)*cj6);
IkReal x12118=(cj5*sj4);
IkReal x12119=(r12*sj5);
IkReal x12120=(r01*sj6);
IkReal x12121=(cj6*r11);
IkReal x12122=((1.0)*cj4);
IkReal x12123=(cj6*r01);
IkReal x12124=((1.0)*sj3);
IkReal x12125=((1.0)*cj5);
IkReal x12126=(r10*sj6);
IkReal x12127=(cj2*x12109);
IkReal x12128=(cj3*x12110);
IkReal x12129=((1.0)*cj6*r10);
IkReal x12130=(sj2*x12109);
IkReal x12131=(sj2*x12110);
IkReal x12132=((1.0)*cj6*r00);
IkReal x12133=(cj2*x12110);
IkReal x12134=(cj3*x12109);
evalcond[0]=((((-1.0)*sj5*x12129))+(((-1.0)*x12124*x12133))+x12134+((sj5*x12113))+(((-1.0)*r12*x12125)));
evalcond[1]=((((-1.0)*sj5*x12132))+((sj5*x12120))+(((-1.0)*x12124*x12127))+(((-1.0)*r02*x12125))+(((-1.0)*x12128)));
evalcond[2]=(((sj4*x12112))+(((-1.0)*x12116*x12122))+(((-1.0)*x12118*x12132))+((cj5*r01*x12115))+(((-1.0)*x12130))+(((-1.0)*x12122*x12123)));
evalcond[3]=(((sj4*x12119))+(((-1.0)*x12118*x12129))+(((-1.0)*x12121*x12122))+((x12113*x12118))+(((-1.0)*x12131))+(((-1.0)*x12122*x12126)));
evalcond[4]=(((r10*x12115))+((cj2*x12128))+((sj3*x12109))+(((-1.0)*x12114*x12129))+((cj4*x12119))+((x12113*x12114))+((sj4*x12121)));
evalcond[5]=((((0.31436)*x12128))+(((-0.01275)*x12130))+((x12111*x12127))+((r01*x12117))+(((-1.0)*px))+(((0.0003501)*x12116))+(((0.42076)*x12110)));
evalcond[6]=((((0.0003501)*x12126))+(((-0.01275)*x12131))+((x12111*x12133))+(((-0.42076)*x12109))+(((-1.0)*py))+((r11*x12117))+(((-0.31436)*x12134)));
evalcond[7]=(((x12114*x12120))+((cj3*x12127))+((r00*x12115))+(((-1.0)*x12114*x12132))+((cj4*x12112))+((sj4*x12123))+(((-1.0)*x12110*x12124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x12135=r21*r21;
IkReal x12136=cj6*cj6;
IkReal x12137=r20*r20;
IkReal x12138=(sj2*sj3);
IkReal x12139=(cj6*r20);
IkReal x12140=((1.0)*cj4);
IkReal x12141=(r21*sj4);
IkReal x12142=(cj6*sj4*sj6);
IkReal x12143=(cj4*r21*sj6);
IkReal x12144=((1.0)*x12137);
IkReal x12145=((1.0)*cj3*sj2);
IkReal x12146=(cj4*x12136);
CheckValue<IkReal> x12147 = IKatan2WithCheck(IkReal((((r20*r22*sj4*sj6))+(((-1.0)*r22*x12145))+((x12138*x12143))+(((-1.0)*x12138*x12139*x12140))+((cj6*r22*x12141)))),IkReal(((((-1.0)*x12142*x12144))+(((-1.0)*r21*sj6*x12145))+((x12135*x12142))+(((-1.0)*r22*x12138*x12140))+((r20*x12141))+(((-2.0)*r20*x12136*x12141))+((cj3*sj2*x12139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12147.valid){
continue;
}
CheckValue<IkReal> x12148=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12140*(r22*r22)))+(((-1.0)*x12136*x12137*x12140))+(((2.0)*x12139*x12143))+((x12135*x12146))+(((-1.0)*x12135*x12140)))),-1);
if(!x12148.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x12147.value)+(((1.5707963267949)*(x12148.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x12149=IKsin(j5);
IkReal x12150=IKcos(j5);
IkReal x12151=((1.0)*cj4);
IkReal x12152=(r20*sj6);
IkReal x12153=(cj6*r21);
IkReal x12154=(r21*sj6);
IkReal x12155=(r22*x12149);
IkReal x12156=(cj6*r20*x12150);
evalcond[0]=(((sj2*sj3))+(((-1.0)*cj6*r20*x12149))+((x12149*x12154))+(((-1.0)*r22*x12150)));
evalcond[1]=(((cj4*x12150*x12154))+((sj4*x12152))+((sj4*x12153))+((cj4*x12155))+(((-1.0)*cj3*sj2))+(((-1.0)*x12151*x12156)));
evalcond[2]=((((-1.0)*sj4*x12156))+((sj4*x12150*x12154))+((sj4*x12155))+(((-1.0)*x12151*x12152))+(((-1.0)*x12151*x12153))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x12157=cj2*cj2;
IkReal x12158=cj3*cj3;
IkReal x12159=(x12158+x12157+(((-1.0)*x12157*x12158)));
j1eval[0]=x12159;
j1eval[1]=IKsign(x12159);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj2;
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12160=(sj3*sj5);
IkReal x12161=(r01*sj6);
IkReal x12162=((1.0)*cj5);
IkReal x12163=(r11*sj6);
IkReal x12164=(cj3*sj5);
IkReal x12165=(cj6*r10);
IkReal x12166=((1.0)*cj6*r00);
if( IKabs(((((-1.0)*r12*sj3*x12162))+(((-1.0)*x12164*x12166))+((x12160*x12163))+(((-1.0)*cj3*r02*x12162))+((x12161*x12164))+(((-1.0)*x12160*x12165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12163*x12164))+(((-1.0)*x12160*x12166))+((x12164*x12165))+((x12160*x12161))+((cj3*cj5*r12))+(((-1.0)*r02*sj3*x12162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj3*x12162))+(((-1.0)*x12164*x12166))+((x12160*x12163))+(((-1.0)*cj3*r02*x12162))+((x12161*x12164))+(((-1.0)*x12160*x12165))))+IKsqr(((((-1.0)*x12163*x12164))+(((-1.0)*x12160*x12166))+((x12164*x12165))+((x12160*x12161))+((cj3*cj5*r12))+(((-1.0)*r02*sj3*x12162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*sj3*x12162))+(((-1.0)*x12164*x12166))+((x12160*x12163))+(((-1.0)*cj3*r02*x12162))+((x12161*x12164))+(((-1.0)*x12160*x12165))), ((((-1.0)*x12163*x12164))+(((-1.0)*x12160*x12166))+((x12164*x12165))+((x12160*x12161))+((cj3*cj5*r12))+(((-1.0)*r02*sj3*x12162))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x12167=IKcos(j1);
IkReal x12168=IKsin(j1);
IkReal x12169=((1.0)*sj3);
IkReal x12170=(cj4*sj5);
IkReal x12171=(r11*sj6);
IkReal x12172=(cj4*cj5);
IkReal x12173=(r00*sj6);
IkReal x12174=(cj6*r01);
IkReal x12175=(r01*sj6);
IkReal x12176=(cj6*r11);
IkReal x12177=(r10*sj6);
IkReal x12178=((1.0)*cj5);
IkReal x12179=(cj3*x12167);
IkReal x12180=(cj3*x12168);
IkReal x12181=((1.0)*cj6*r10);
IkReal x12182=((1.0)*cj6*r00);
IkReal x12183=(sj3*x12167);
IkReal x12184=(x12168*x12169);
evalcond[0]=((((-1.0)*x12184))+x12179+((sj5*x12171))+(((-1.0)*sj5*x12181))+(((-1.0)*r12*x12178)));
evalcond[1]=((((-1.0)*x12180))+(((-1.0)*x12167*x12169))+((sj5*x12175))+(((-1.0)*sj5*x12182))+(((-1.0)*r02*x12178)));
evalcond[2]=((((0.31436)*x12180))+(((0.31436)*x12183))+(((-1.0)*px))+(((0.0003501)*x12173))+(((0.0003501)*x12174))+(((0.42076)*x12168)));
evalcond[3]=((((-0.31436)*x12179))+(((-0.42076)*x12167))+(((-1.0)*py))+(((0.0003501)*x12177))+(((0.0003501)*x12176))+(((0.31436)*sj3*x12168)));
evalcond[4]=(((sj4*x12176))+((sj4*x12177))+x12180+x12183+(((-1.0)*x12172*x12181))+((x12171*x12172))+((r12*x12170)));
evalcond[5]=(((sj4*x12173))+((sj4*x12174))+(((-1.0)*x12184))+x12179+(((-1.0)*x12172*x12182))+((x12172*x12175))+((r02*x12170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12185=(cj3*cj5);
IkReal x12186=(cj5*sj3);
IkReal x12187=(cj6*sj5);
IkReal x12188=((1.0)*cj3);
IkReal x12189=(sj5*sj6);
IkReal x12190=((1.0)*sj3*x12189);
if( IKabs((((r12*x12186))+(((-1.0)*r02*x12185))+(((-1.0)*r11*x12190))+(((-1.0)*r00*x12187*x12188))+((r10*sj3*x12187))+((cj3*r01*x12189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x12188*x12189))+((r12*x12185))+((r02*x12186))+((cj3*r10*x12187))+((r00*sj3*x12187))+(((-1.0)*r01*x12190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x12186))+(((-1.0)*r02*x12185))+(((-1.0)*r11*x12190))+(((-1.0)*r00*x12187*x12188))+((r10*sj3*x12187))+((cj3*r01*x12189))))+IKsqr(((((-1.0)*r11*x12188*x12189))+((r12*x12185))+((r02*x12186))+((cj3*r10*x12187))+((r00*sj3*x12187))+(((-1.0)*r01*x12190))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x12186))+(((-1.0)*r02*x12185))+(((-1.0)*r11*x12190))+(((-1.0)*r00*x12187*x12188))+((r10*sj3*x12187))+((cj3*r01*x12189))), ((((-1.0)*r11*x12188*x12189))+((r12*x12185))+((r02*x12186))+((cj3*r10*x12187))+((r00*sj3*x12187))+(((-1.0)*r01*x12190))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x12191=IKcos(j1);
IkReal x12192=IKsin(j1);
IkReal x12193=(cj4*sj5);
IkReal x12194=(r11*sj6);
IkReal x12195=(cj4*cj5);
IkReal x12196=(r00*sj6);
IkReal x12197=(cj6*r01);
IkReal x12198=(r01*sj6);
IkReal x12199=(cj6*r11);
IkReal x12200=(r10*sj6);
IkReal x12201=((1.0)*cj5);
IkReal x12202=(sj3*x12191);
IkReal x12203=(cj3*x12192);
IkReal x12204=((1.0)*cj6*r10);
IkReal x12205=(sj3*x12192);
IkReal x12206=((1.0)*cj6*r00);
IkReal x12207=(cj3*x12191);
IkReal x12208=((1.0)*x12203);
evalcond[0]=(((sj5*x12194))+(((-1.0)*sj5*x12204))+(((-1.0)*r12*x12201))+x12207+x12205);
evalcond[1]=(((sj5*x12198))+(((-1.0)*r02*x12201))+(((-1.0)*sj5*x12206))+x12202+(((-1.0)*x12208)));
evalcond[2]=((((-0.31436)*x12202))+(((0.0003501)*x12197))+(((0.0003501)*x12196))+(((0.42076)*x12192))+(((-1.0)*px))+(((0.31436)*x12203)));
evalcond[3]=((((-0.42076)*x12191))+(((0.0003501)*x12200))+(((-0.31436)*x12207))+(((-0.31436)*x12205))+(((0.0003501)*x12199))+(((-1.0)*py)));
evalcond[4]=(((r12*x12193))+((x12194*x12195))+x12202+((sj4*x12200))+((sj4*x12199))+(((-1.0)*x12195*x12204))+(((-1.0)*x12208)));
evalcond[5]=((((-1.0)*x12205))+(((-1.0)*x12207))+((x12195*x12198))+((r02*x12193))+((sj4*x12196))+((sj4*x12197))+(((-1.0)*x12195*x12206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12209=((1.0)*cj5);
IkReal x12210=(sj5*sj6);
IkReal x12211=((1.0)*cj6*sj5);
j1eval[0]=cj2;
j1eval[1]=IKsign(cj2);
j1eval[2]=((IKabs(((((-1.0)*r12*x12209))+(((-1.0)*r10*x12211))+((r11*x12210)))))+(IKabs(((((-1.0)*r02*x12209))+(((-1.0)*r00*x12211))+((r01*x12210))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=((((-1.0)*cj2*sj2))+(((24.6556862745098)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12212=(cj6*r01);
IkReal x12213=((2.51903849000464e-5)*sj6);
IkReal x12214=((0.000831302458866157)*sj6);
IkReal x12215=(cj6*r11);
if( IKabs(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12212))+(((2.51903849000464e-5)*x12215))+(((-1.0)*r00*x12214))+((r10*x12213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0719519705799668)*px))+(((2.51903849000464e-5)*x12212))+((r10*x12214))+((r00*x12213))+(((0.000831302458866157)*x12215))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12212))+(((2.51903849000464e-5)*x12215))+(((-1.0)*r00*x12214))+((r10*x12213))))+IKsqr(((((-0.0719519705799668)*px))+(((2.51903849000464e-5)*x12212))+((r10*x12214))+((r00*x12213))+(((0.000831302458866157)*x12215))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12212))+(((2.51903849000464e-5)*x12215))+(((-1.0)*r00*x12214))+((r10*x12213))), ((((-0.0719519705799668)*px))+(((2.51903849000464e-5)*x12212))+((r10*x12214))+((r00*x12213))+(((0.000831302458866157)*x12215))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x12216=IKcos(j1);
IkReal x12217=IKsin(j1);
IkReal x12218=(r02*sj5);
IkReal x12219=(cj4*cj5);
IkReal x12220=(r11*sj6);
IkReal x12221=(r00*sj6);
IkReal x12222=(cj6*r01);
IkReal x12223=((1.0)*cj6);
IkReal x12224=(r01*sj6);
IkReal x12225=(cj5*sj4);
IkReal x12226=(cj6*r11);
IkReal x12227=(r12*sj5);
IkReal x12228=(r10*sj6);
IkReal x12229=((1.0)*cj4);
IkReal x12230=((1.0)*x12217);
evalcond[0]=((((0.0003501)*x12221))+(((0.0003501)*x12222))+(((-1.0)*px))+(((0.42076)*x12217))+(((-0.01275)*x12216)));
evalcond[1]=((((-0.42076)*x12216))+(((0.0003501)*x12228))+(((0.0003501)*x12226))+(((-1.0)*py))+(((-0.01275)*x12217)));
evalcond[2]=((((-1.0)*r10*x12219*x12223))+((cj4*x12227))+((x12219*x12220))+x12216+((sj4*x12228))+((sj4*x12226)));
evalcond[3]=(((cj4*x12218))+(((-1.0)*r00*x12219*x12223))+((x12219*x12224))+(((-1.0)*x12230))+((sj4*x12222))+((sj4*x12221)));
evalcond[4]=((((-1.0)*r00*x12223*x12225))+((sj4*x12218))+((x12224*x12225))+(((-1.0)*x12222*x12229))+(((-1.0)*x12221*x12229))+(((-1.0)*x12216)));
evalcond[5]=((((-1.0)*x12228*x12229))+(((-1.0)*x12230))+((sj4*x12227))+(((-1.0)*r10*x12223*x12225))+(((-1.0)*cj4*r11*x12223))+((x12220*x12225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12231=(cj6*r01);
IkReal x12232=((2.51903849000464e-5)*sj6);
IkReal x12233=((0.000831302458866157)*sj6);
IkReal x12234=(cj6*r11);
if( IKabs(((((-0.000831302458866157)*x12231))+(((-1.0)*r00*x12233))+(((2.374471462057)*px))+(((-2.51903849000464e-5)*x12234))+(((-1.0)*r10*x12232))+(((0.0719519705799668)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x12233))+(((-1.0)*r00*x12232))+(((-2.51903849000464e-5)*x12231))+(((0.000831302458866157)*x12234))+(((0.0719519705799668)*px))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.000831302458866157)*x12231))+(((-1.0)*r00*x12233))+(((2.374471462057)*px))+(((-2.51903849000464e-5)*x12234))+(((-1.0)*r10*x12232))+(((0.0719519705799668)*py))))+IKsqr((((r10*x12233))+(((-1.0)*r00*x12232))+(((-2.51903849000464e-5)*x12231))+(((0.000831302458866157)*x12234))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.000831302458866157)*x12231))+(((-1.0)*r00*x12233))+(((2.374471462057)*px))+(((-2.51903849000464e-5)*x12234))+(((-1.0)*r10*x12232))+(((0.0719519705799668)*py))), (((r10*x12233))+(((-1.0)*r00*x12232))+(((-2.51903849000464e-5)*x12231))+(((0.000831302458866157)*x12234))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x12235=IKsin(j1);
IkReal x12236=IKcos(j1);
IkReal x12237=(r02*sj5);
IkReal x12238=(cj4*cj5);
IkReal x12239=(r11*sj6);
IkReal x12240=(r00*sj6);
IkReal x12241=(cj6*r01);
IkReal x12242=((1.0)*cj6);
IkReal x12243=(r01*sj6);
IkReal x12244=(cj5*sj4);
IkReal x12245=(r12*sj5);
IkReal x12246=(cj6*r11);
IkReal x12247=(r10*sj6);
IkReal x12248=((1.0)*cj4);
evalcond[0]=((((0.01275)*x12236))+(((0.42076)*x12235))+(((-1.0)*px))+(((0.0003501)*x12240))+(((0.0003501)*x12241)));
evalcond[1]=((((0.01275)*x12235))+(((-1.0)*py))+(((0.0003501)*x12246))+(((0.0003501)*x12247))+(((-0.42076)*x12236)));
evalcond[2]=(((x12238*x12239))+((sj4*x12247))+((sj4*x12246))+((cj4*x12245))+x12236+(((-1.0)*r10*x12238*x12242)));
evalcond[3]=(((sj4*x12237))+x12236+(((-1.0)*r00*x12242*x12244))+((x12243*x12244))+(((-1.0)*x12241*x12248))+(((-1.0)*x12240*x12248)));
evalcond[4]=((((-1.0)*cj4*r11*x12242))+((sj4*x12245))+x12235+(((-1.0)*r10*x12242*x12244))+((x12239*x12244))+(((-1.0)*x12247*x12248)));
evalcond[5]=(((x12238*x12243))+(((-1.0)*r00*x12238*x12242))+((sj4*x12241))+((sj4*x12240))+(((-1.0)*x12235))+((cj4*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12249=((8.7525)*cj2);
IkReal x12250=((10519.0)*sj5);
IkReal x12251=(r11*sj6);
IkReal x12252=(cj6*r10);
IkReal x12253=(cj5*r12);
CheckValue<IkReal> x12254=IKPowWithIntegerCheck(cj2,-1);
if(!x12254.valid){
continue;
}
CheckValue<IkReal> x12255=IKPowWithIntegerCheck(((((7859.0)*(cj2*cj2)))+(((-318.75)*cj2*sj2))),-1);
if(!x12255.valid){
continue;
}
if( IKabs(((x12254.value)*(((((-1.0)*x12253))+(((-1.0)*sj5*x12252))+((sj5*x12251)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12255.value)*(((((-1.0)*cj6*r01*x12249))+(((-1.0)*x12250*x12251))+(((25000.0)*cj2*px))+((x12250*x12252))+(((10519.0)*x12253))+(((-1.0)*r00*sj6*x12249)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12254.value)*(((((-1.0)*x12253))+(((-1.0)*sj5*x12252))+((sj5*x12251))))))+IKsqr(((x12255.value)*(((((-1.0)*cj6*r01*x12249))+(((-1.0)*x12250*x12251))+(((25000.0)*cj2*px))+((x12250*x12252))+(((10519.0)*x12253))+(((-1.0)*r00*sj6*x12249))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12254.value)*(((((-1.0)*x12253))+(((-1.0)*sj5*x12252))+((sj5*x12251))))), ((x12255.value)*(((((-1.0)*cj6*r01*x12249))+(((-1.0)*x12250*x12251))+(((25000.0)*cj2*px))+((x12250*x12252))+(((10519.0)*x12253))+(((-1.0)*r00*sj6*x12249))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12256=IKcos(j1);
IkReal x12257=IKsin(j1);
IkReal x12258=(r02*sj5);
IkReal x12259=(sj5*sj6);
IkReal x12260=(r00*sj6);
IkReal x12261=((0.0003501)*cj6);
IkReal x12262=(cj5*sj4);
IkReal x12263=(cj4*cj5);
IkReal x12264=(r01*sj6);
IkReal x12265=(r12*sj5);
IkReal x12266=((1.0)*cj4);
IkReal x12267=(cj6*r11);
IkReal x12268=(cj6*r01);
IkReal x12269=(r11*sj6);
IkReal x12270=(r10*sj6);
IkReal x12271=((1.0)*cj5);
IkReal x12272=(cj2*x12256);
IkReal x12273=((1.0)*cj6*r10);
IkReal x12274=(sj2*x12256);
IkReal x12275=(sj2*x12257);
IkReal x12276=((1.0)*cj6*r00);
IkReal x12277=((1.0)*x12257);
evalcond[0]=((((-1.0)*sj5*x12273))+((r11*x12259))+(((-1.0)*cj2*x12277))+(((-1.0)*r12*x12271)));
evalcond[1]=((((-1.0)*x12272))+(((-1.0)*sj5*x12276))+(((-1.0)*r02*x12271))+((r01*x12259)));
evalcond[2]=(((x12263*x12269))+x12256+((sj4*x12267))+((cj4*x12265))+(((-1.0)*x12263*x12273))+((sj4*x12270)));
evalcond[3]=((((0.42076)*x12257))+(((0.31436)*x12272))+((r01*x12261))+(((-1.0)*px))+(((-0.01275)*x12274))+(((0.0003501)*x12260)));
evalcond[4]=((((0.0003501)*x12270))+((r11*x12261))+(((-1.0)*py))+(((-0.42076)*x12256))+(((-0.01275)*x12275))+(((0.31436)*cj2*x12257)));
evalcond[5]=(((x12263*x12264))+(((-1.0)*x12277))+((cj4*x12258))+((sj4*x12268))+((sj4*x12260))+(((-1.0)*x12263*x12276)));
evalcond[6]=((((-1.0)*x12274))+(((-1.0)*x12262*x12276))+((sj4*x12258))+(((-1.0)*x12260*x12266))+(((-1.0)*x12266*x12268))+((x12262*x12264)));
evalcond[7]=((((-1.0)*x12275))+(((-1.0)*x12266*x12270))+(((-1.0)*x12262*x12273))+((sj4*x12265))+(((-1.0)*x12266*x12267))+((x12262*x12269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12278=((1.0)*cj4);
IkReal x12279=(r11*sj6);
IkReal x12280=(cj6*r10);
IkReal x12281=((1.0)*sj4);
CheckValue<IkReal> x12282=IKPowWithIntegerCheck(cj2,-1);
if(!x12282.valid){
continue;
}
if( IKabs(((x12282.value)*(((((-1.0)*cj5*r12))+(((-1.0)*sj5*x12280))+((sj5*x12279)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*cj5*x12280))+(((-1.0)*cj6*r11*x12281))+(((-1.0)*r10*sj6*x12281))+(((-1.0)*cj5*x12278*x12279))+(((-1.0)*r12*sj5*x12278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12282.value)*(((((-1.0)*cj5*r12))+(((-1.0)*sj5*x12280))+((sj5*x12279))))))+IKsqr((((cj4*cj5*x12280))+(((-1.0)*cj6*r11*x12281))+(((-1.0)*r10*sj6*x12281))+(((-1.0)*cj5*x12278*x12279))+(((-1.0)*r12*sj5*x12278))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12282.value)*(((((-1.0)*cj5*r12))+(((-1.0)*sj5*x12280))+((sj5*x12279))))), (((cj4*cj5*x12280))+(((-1.0)*cj6*r11*x12281))+(((-1.0)*r10*sj6*x12281))+(((-1.0)*cj5*x12278*x12279))+(((-1.0)*r12*sj5*x12278))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12283=IKcos(j1);
IkReal x12284=IKsin(j1);
IkReal x12285=(r02*sj5);
IkReal x12286=(sj5*sj6);
IkReal x12287=(r00*sj6);
IkReal x12288=((0.0003501)*cj6);
IkReal x12289=(cj5*sj4);
IkReal x12290=(cj4*cj5);
IkReal x12291=(r01*sj6);
IkReal x12292=(r12*sj5);
IkReal x12293=((1.0)*cj4);
IkReal x12294=(cj6*r11);
IkReal x12295=(cj6*r01);
IkReal x12296=(r11*sj6);
IkReal x12297=(r10*sj6);
IkReal x12298=((1.0)*cj5);
IkReal x12299=(cj2*x12283);
IkReal x12300=((1.0)*cj6*r10);
IkReal x12301=(sj2*x12283);
IkReal x12302=(sj2*x12284);
IkReal x12303=((1.0)*cj6*r00);
IkReal x12304=((1.0)*x12284);
evalcond[0]=((((-1.0)*sj5*x12300))+(((-1.0)*cj2*x12304))+((r11*x12286))+(((-1.0)*r12*x12298)));
evalcond[1]=((((-1.0)*sj5*x12303))+((r01*x12286))+(((-1.0)*x12299))+(((-1.0)*r02*x12298)));
evalcond[2]=(((sj4*x12294))+((sj4*x12297))+x12283+((cj4*x12292))+((x12290*x12296))+(((-1.0)*x12290*x12300)));
evalcond[3]=((((0.31436)*x12299))+(((-1.0)*px))+((r01*x12288))+(((-0.01275)*x12301))+(((0.42076)*x12284))+(((0.0003501)*x12287)));
evalcond[4]=((((0.31436)*cj2*x12284))+(((-1.0)*py))+((r11*x12288))+(((0.0003501)*x12297))+(((-0.01275)*x12302))+(((-0.42076)*x12283)));
evalcond[5]=(((sj4*x12295))+((cj4*x12285))+((sj4*x12287))+((x12290*x12291))+(((-1.0)*x12304))+(((-1.0)*x12290*x12303)));
evalcond[6]=((((-1.0)*x12301))+(((-1.0)*x12287*x12293))+(((-1.0)*x12289*x12303))+((sj4*x12285))+((x12289*x12291))+(((-1.0)*x12293*x12295)));
evalcond[7]=(((sj4*x12292))+(((-1.0)*x12302))+(((-1.0)*x12289*x12300))+((x12289*x12296))+(((-1.0)*x12293*x12294))+(((-1.0)*x12293*x12297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12305=((1.0)*cj5);
IkReal x12306=(sj5*sj6);
IkReal x12307=((1.0)*cj6*sj5);
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal((((r11*x12306))+(((-1.0)*r10*x12307))+(((-1.0)*r12*x12305)))),IkReal(((((-1.0)*r02*x12305))+(((-1.0)*r00*x12307))+((r01*x12306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
CheckValue<IkReal> x12309=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x12309.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x12308.value)+(((1.5707963267949)*(x12309.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12310=IKcos(j1);
IkReal x12311=IKsin(j1);
IkReal x12312=(r02*sj5);
IkReal x12313=(sj5*sj6);
IkReal x12314=(r00*sj6);
IkReal x12315=((0.0003501)*cj6);
IkReal x12316=(cj5*sj4);
IkReal x12317=(cj4*cj5);
IkReal x12318=(r01*sj6);
IkReal x12319=(r12*sj5);
IkReal x12320=((1.0)*cj4);
IkReal x12321=(cj6*r11);
IkReal x12322=(cj6*r01);
IkReal x12323=(r11*sj6);
IkReal x12324=(r10*sj6);
IkReal x12325=((1.0)*cj5);
IkReal x12326=(cj2*x12310);
IkReal x12327=((1.0)*cj6*r10);
IkReal x12328=(sj2*x12310);
IkReal x12329=(sj2*x12311);
IkReal x12330=((1.0)*cj6*r00);
IkReal x12331=((1.0)*x12311);
evalcond[0]=(((r11*x12313))+(((-1.0)*sj5*x12327))+(((-1.0)*cj2*x12331))+(((-1.0)*r12*x12325)));
evalcond[1]=((((-1.0)*sj5*x12330))+((r01*x12313))+(((-1.0)*x12326))+(((-1.0)*r02*x12325)));
evalcond[2]=(((sj4*x12321))+((sj4*x12324))+x12310+((cj4*x12319))+((x12317*x12323))+(((-1.0)*x12317*x12327)));
evalcond[3]=((((0.31436)*x12326))+(((-1.0)*px))+(((0.0003501)*x12314))+((r01*x12315))+(((0.42076)*x12311))+(((-0.01275)*x12328)));
evalcond[4]=((((0.0003501)*x12324))+((r11*x12315))+(((-1.0)*py))+(((-0.42076)*x12310))+(((0.31436)*cj2*x12311))+(((-0.01275)*x12329)));
evalcond[5]=(((sj4*x12322))+(((-1.0)*x12331))+((cj4*x12312))+((sj4*x12314))+(((-1.0)*x12317*x12330))+((x12317*x12318)));
evalcond[6]=((((-1.0)*x12320*x12322))+(((-1.0)*x12314*x12320))+(((-1.0)*x12316*x12330))+((sj4*x12312))+(((-1.0)*x12328))+((x12316*x12318)));
evalcond[7]=((((-1.0)*x12320*x12324))+(((-1.0)*x12320*x12321))+((x12316*x12323))+((sj4*x12319))+(((-1.0)*x12316*x12327))+(((-1.0)*x12329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12332=(cj6*sj5);
IkReal x12333=((1.0)*sj5*sj6);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((r00*x12332))+(((-1.0)*r01*x12333))+((cj5*r02)))))+(IKabs((((cj5*r12))+((r10*x12332))+(((-1.0)*r11*x12333))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj2;
j1eval[1]=((((-1.0)*cj2*sj2))+(((-24.6556862745098)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12334=(cj6*r01);
IkReal x12335=((2.51903849000464e-5)*sj6);
IkReal x12336=((0.000831302458866157)*sj6);
IkReal x12337=(cj6*r11);
if( IKabs(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12334))+(((2.51903849000464e-5)*x12337))+(((-1.0)*r00*x12336))+((r10*x12335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0719519705799668)*px))+((r00*x12335))+(((2.51903849000464e-5)*x12334))+((r10*x12336))+(((0.000831302458866157)*x12337))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12334))+(((2.51903849000464e-5)*x12337))+(((-1.0)*r00*x12336))+((r10*x12335))))+IKsqr(((((-0.0719519705799668)*px))+((r00*x12335))+(((2.51903849000464e-5)*x12334))+((r10*x12336))+(((0.000831302458866157)*x12337))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.0719519705799668)*py))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12334))+(((2.51903849000464e-5)*x12337))+(((-1.0)*r00*x12336))+((r10*x12335))), ((((-0.0719519705799668)*px))+((r00*x12335))+(((2.51903849000464e-5)*x12334))+((r10*x12336))+(((0.000831302458866157)*x12337))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x12338=IKcos(j1);
IkReal x12339=IKsin(j1);
IkReal x12340=(cj6*r01);
IkReal x12341=(r02*sj5);
IkReal x12342=(cj4*cj5);
IkReal x12343=(r11*sj6);
IkReal x12344=(r00*sj6);
IkReal x12345=((1.0)*cj6);
IkReal x12346=(r01*sj6);
IkReal x12347=(cj5*sj4);
IkReal x12348=(r12*sj5);
IkReal x12349=(cj6*r11);
IkReal x12350=(r10*sj6);
IkReal x12351=((1.0)*cj4);
IkReal x12352=((1.0)*x12338);
evalcond[0]=((((0.0003501)*x12344))+(((0.0003501)*x12340))+(((0.42076)*x12339))+(((-1.0)*px))+(((-0.01275)*x12338)));
evalcond[1]=((((0.0003501)*x12349))+(((-0.42076)*x12338))+(((-1.0)*py))+(((0.0003501)*x12350))+(((-0.01275)*x12339)));
evalcond[2]=(((sj4*x12344))+((sj4*x12340))+(((-1.0)*r00*x12342*x12345))+x12339+((cj4*x12341))+((x12342*x12346)));
evalcond[3]=(((sj4*x12349))+((sj4*x12350))+(((-1.0)*r10*x12342*x12345))+(((-1.0)*x12352))+((cj4*x12348))+((x12342*x12343)));
evalcond[4]=(((sj4*x12341))+(((-1.0)*x12344*x12351))+(((-1.0)*x12340*x12351))+(((-1.0)*x12352))+((x12346*x12347))+(((-1.0)*r00*x12345*x12347)));
evalcond[5]=(((sj4*x12348))+(((-1.0)*cj4*r11*x12345))+((x12343*x12347))+(((-1.0)*r10*x12345*x12347))+(((-1.0)*x12350*x12351))+(((-1.0)*x12339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12353=(cj6*r01);
IkReal x12354=((2.51903849000464e-5)*sj6);
IkReal x12355=((0.000831302458866157)*sj6);
IkReal x12356=(cj6*r11);
if( IKabs(((((-2.51903849000464e-5)*x12356))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12353))+(((-1.0)*r10*x12354))+(((-1.0)*r00*x12355))+(((0.0719519705799668)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.51903849000464e-5)*x12353))+(((0.000831302458866157)*x12356))+(((-1.0)*r00*x12354))+((r10*x12355))+(((0.0719519705799668)*px))+(((-2.374471462057)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.51903849000464e-5)*x12356))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12353))+(((-1.0)*r10*x12354))+(((-1.0)*r00*x12355))+(((0.0719519705799668)*py))))+IKsqr(((((-2.51903849000464e-5)*x12353))+(((0.000831302458866157)*x12356))+(((-1.0)*r00*x12354))+((r10*x12355))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.51903849000464e-5)*x12356))+(((2.374471462057)*px))+(((-0.000831302458866157)*x12353))+(((-1.0)*r10*x12354))+(((-1.0)*r00*x12355))+(((0.0719519705799668)*py))), ((((-2.51903849000464e-5)*x12353))+(((0.000831302458866157)*x12356))+(((-1.0)*r00*x12354))+((r10*x12355))+(((0.0719519705799668)*px))+(((-2.374471462057)*py))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x12357=IKsin(j1);
IkReal x12358=IKcos(j1);
IkReal x12359=(r02*sj5);
IkReal x12360=(cj4*cj5);
IkReal x12361=(r11*sj6);
IkReal x12362=(r00*sj6);
IkReal x12363=(cj6*r01);
IkReal x12364=((1.0)*cj6);
IkReal x12365=(r01*sj6);
IkReal x12366=(cj5*sj4);
IkReal x12367=(r12*sj5);
IkReal x12368=(cj6*r11);
IkReal x12369=(r10*sj6);
IkReal x12370=((1.0)*cj4);
evalcond[0]=((((0.0003501)*x12363))+(((0.0003501)*x12362))+(((0.01275)*x12358))+(((-1.0)*px))+(((0.42076)*x12357)));
evalcond[1]=((((-0.42076)*x12358))+(((0.0003501)*x12368))+(((0.0003501)*x12369))+(((0.01275)*x12357))+(((-1.0)*py)));
evalcond[2]=(x12357+(((-1.0)*r00*x12360*x12364))+((cj4*x12359))+((x12360*x12365))+((sj4*x12362))+((sj4*x12363)));
evalcond[3]=(((sj4*x12359))+x12358+((x12365*x12366))+(((-1.0)*r00*x12364*x12366))+(((-1.0)*x12363*x12370))+(((-1.0)*x12362*x12370)));
evalcond[4]=((((-1.0)*r10*x12364*x12366))+x12357+(((-1.0)*x12369*x12370))+((x12361*x12366))+((sj4*x12367))+(((-1.0)*cj4*r11*x12364)));
evalcond[5]=((((-1.0)*x12358))+((cj4*x12367))+((x12360*x12361))+((sj4*x12368))+((sj4*x12369))+(((-1.0)*r10*x12360*x12364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12371=(cj5*r12);
IkReal x12372=((8.7525)*cj2);
IkReal x12373=(r11*sj5*sj6);
IkReal x12374=(cj6*r10*sj5);
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(cj2,-1);
if(!x12375.valid){
continue;
}
CheckValue<IkReal> x12376=IKPowWithIntegerCheck(((((-318.75)*cj2*sj2))+(((-7859.0)*(cj2*cj2)))),-1);
if(!x12376.valid){
continue;
}
if( IKabs(((x12375.value)*((x12371+x12374+(((-1.0)*x12373)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12376.value)*(((((-1.0)*cj6*r01*x12372))+(((-10519.0)*x12371))+(((-10519.0)*x12374))+(((10519.0)*x12373))+(((-1.0)*r00*sj6*x12372))+(((25000.0)*cj2*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12375.value)*((x12371+x12374+(((-1.0)*x12373))))))+IKsqr(((x12376.value)*(((((-1.0)*cj6*r01*x12372))+(((-10519.0)*x12371))+(((-10519.0)*x12374))+(((10519.0)*x12373))+(((-1.0)*r00*sj6*x12372))+(((25000.0)*cj2*px))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12375.value)*((x12371+x12374+(((-1.0)*x12373))))), ((x12376.value)*(((((-1.0)*cj6*r01*x12372))+(((-10519.0)*x12371))+(((-10519.0)*x12374))+(((10519.0)*x12373))+(((-1.0)*r00*sj6*x12372))+(((25000.0)*cj2*px))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12377=IKsin(j1);
IkReal x12378=IKcos(j1);
IkReal x12379=(cj4*cj5);
IkReal x12380=(r02*sj5);
IkReal x12381=(r11*sj6);
IkReal x12382=(r00*sj6);
IkReal x12383=((0.0003501)*cj6);
IkReal x12384=(cj5*sj4);
IkReal x12385=((0.01275)*sj2);
IkReal x12386=(r01*sj6);
IkReal x12387=(r12*sj5);
IkReal x12388=((1.0)*cj4);
IkReal x12389=(cj6*r11);
IkReal x12390=(cj6*r01);
IkReal x12391=(r10*sj6);
IkReal x12392=((1.0)*cj5);
IkReal x12393=((1.0)*cj6*r10);
IkReal x12394=(cj2*x12378);
IkReal x12395=((1.0)*x12378);
IkReal x12396=((1.0)*cj6*r00);
IkReal x12397=(cj2*x12377);
evalcond[0]=((((-1.0)*sj5*x12393))+(((-1.0)*r12*x12392))+x12397+((sj5*x12381)));
evalcond[1]=((((-1.0)*sj5*x12396))+(((-1.0)*r02*x12392))+x12394+((sj5*x12386)));
evalcond[2]=(((sj4*x12382))+x12377+((sj4*x12390))+((cj4*x12380))+(((-1.0)*x12379*x12396))+((x12379*x12386)));
evalcond[3]=((((0.0003501)*x12382))+(((0.42076)*x12377))+(((-0.31436)*x12394))+((r01*x12383))+(((-1.0)*px))+(((-1.0)*x12378*x12385)));
evalcond[4]=(((r11*x12383))+(((0.0003501)*x12391))+(((-0.31436)*x12397))+(((-1.0)*py))+(((-0.42076)*x12378))+(((-1.0)*x12377*x12385)));
evalcond[5]=(((sj4*x12389))+((sj4*x12391))+(((-1.0)*x12395))+((cj4*x12387))+(((-1.0)*x12379*x12393))+((x12379*x12381)));
evalcond[6]=((((-1.0)*x12382*x12388))+(((-1.0)*sj2*x12395))+((sj4*x12380))+((x12384*x12386))+(((-1.0)*x12388*x12390))+(((-1.0)*x12384*x12396)));
evalcond[7]=(((x12381*x12384))+((sj4*x12387))+(((-1.0)*x12388*x12389))+(((-1.0)*x12388*x12391))+(((-1.0)*sj2*x12377))+(((-1.0)*x12384*x12393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12398=((1.0)*sj6);
IkReal x12399=(cj6*r00);
IkReal x12400=(cj4*cj5);
CheckValue<IkReal> x12401=IKPowWithIntegerCheck(cj2,-1);
if(!x12401.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02*sj5))+(((-1.0)*r01*x12398*x12400))+(((-1.0)*r00*sj4*x12398))+(((-1.0)*cj6*r01*sj4))+((x12399*x12400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12401.value)*(((((-1.0)*r01*sj5*x12398))+((sj5*x12399))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02*sj5))+(((-1.0)*r01*x12398*x12400))+(((-1.0)*r00*sj4*x12398))+(((-1.0)*cj6*r01*sj4))+((x12399*x12400))))+IKsqr(((x12401.value)*(((((-1.0)*r01*sj5*x12398))+((sj5*x12399))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj4*r02*sj5))+(((-1.0)*r01*x12398*x12400))+(((-1.0)*r00*sj4*x12398))+(((-1.0)*cj6*r01*sj4))+((x12399*x12400))), ((x12401.value)*(((((-1.0)*r01*sj5*x12398))+((sj5*x12399))+((cj5*r02))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12402=IKsin(j1);
IkReal x12403=IKcos(j1);
IkReal x12404=(cj4*cj5);
IkReal x12405=(r02*sj5);
IkReal x12406=(r11*sj6);
IkReal x12407=(r00*sj6);
IkReal x12408=((0.0003501)*cj6);
IkReal x12409=(cj5*sj4);
IkReal x12410=((0.01275)*sj2);
IkReal x12411=(r01*sj6);
IkReal x12412=(r12*sj5);
IkReal x12413=((1.0)*cj4);
IkReal x12414=(cj6*r11);
IkReal x12415=(cj6*r01);
IkReal x12416=(r10*sj6);
IkReal x12417=((1.0)*cj5);
IkReal x12418=((1.0)*cj6*r10);
IkReal x12419=(cj2*x12403);
IkReal x12420=((1.0)*x12403);
IkReal x12421=((1.0)*cj6*r00);
IkReal x12422=(cj2*x12402);
evalcond[0]=(((sj5*x12406))+(((-1.0)*r12*x12417))+x12422+(((-1.0)*sj5*x12418)));
evalcond[1]=(((sj5*x12411))+(((-1.0)*r02*x12417))+(((-1.0)*sj5*x12421))+x12419);
evalcond[2]=(((sj4*x12407))+((x12404*x12411))+(((-1.0)*x12404*x12421))+((sj4*x12415))+x12402+((cj4*x12405)));
evalcond[3]=((((0.42076)*x12402))+(((-1.0)*px))+(((-1.0)*x12403*x12410))+((r01*x12408))+(((-0.31436)*x12419))+(((0.0003501)*x12407)));
evalcond[4]=((((-1.0)*py))+(((-0.31436)*x12422))+(((0.0003501)*x12416))+(((-0.42076)*x12403))+(((-1.0)*x12402*x12410))+((r11*x12408)));
evalcond[5]=((((-1.0)*x12420))+(((-1.0)*x12404*x12418))+((sj4*x12416))+((sj4*x12414))+((cj4*x12412))+((x12404*x12406)));
evalcond[6]=(((sj4*x12405))+((x12409*x12411))+(((-1.0)*x12409*x12421))+(((-1.0)*sj2*x12420))+(((-1.0)*x12413*x12415))+(((-1.0)*x12407*x12413)));
evalcond[7]=((((-1.0)*x12409*x12418))+((sj4*x12412))+(((-1.0)*sj2*x12402))+((x12406*x12409))+(((-1.0)*x12413*x12414))+(((-1.0)*x12413*x12416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12423=(cj6*sj5);
IkReal x12424=((1.0)*sj5*sj6);
CheckValue<IkReal> x12425=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x12425.valid){
continue;
}
CheckValue<IkReal> x12426 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x12424))+((r10*x12423)))),IkReal(((((-1.0)*r01*x12424))+((r00*x12423))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12426.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12425.value)))+(x12426.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12427=IKsin(j1);
IkReal x12428=IKcos(j1);
IkReal x12429=(cj4*cj5);
IkReal x12430=(r02*sj5);
IkReal x12431=(r11*sj6);
IkReal x12432=(r00*sj6);
IkReal x12433=((0.0003501)*cj6);
IkReal x12434=(cj5*sj4);
IkReal x12435=((0.01275)*sj2);
IkReal x12436=(r01*sj6);
IkReal x12437=(r12*sj5);
IkReal x12438=((1.0)*cj4);
IkReal x12439=(cj6*r11);
IkReal x12440=(cj6*r01);
IkReal x12441=(r10*sj6);
IkReal x12442=((1.0)*cj5);
IkReal x12443=((1.0)*cj6*r10);
IkReal x12444=(cj2*x12428);
IkReal x12445=((1.0)*x12428);
IkReal x12446=((1.0)*cj6*r00);
IkReal x12447=(cj2*x12427);
evalcond[0]=((((-1.0)*r12*x12442))+(((-1.0)*sj5*x12443))+x12447+((sj5*x12431)));
evalcond[1]=((((-1.0)*r02*x12442))+(((-1.0)*sj5*x12446))+x12444+((sj5*x12436)));
evalcond[2]=(((x12429*x12436))+((sj4*x12440))+(((-1.0)*x12429*x12446))+((sj4*x12432))+x12427+((cj4*x12430)));
evalcond[3]=((((-1.0)*x12428*x12435))+(((-1.0)*px))+(((-0.31436)*x12444))+(((0.42076)*x12427))+(((0.0003501)*x12432))+((r01*x12433)));
evalcond[4]=((((-1.0)*x12427*x12435))+(((-1.0)*py))+(((-0.42076)*x12428))+(((-0.31436)*x12447))+((r11*x12433))+(((0.0003501)*x12441)));
evalcond[5]=((((-1.0)*x12445))+((x12429*x12431))+((sj4*x12441))+(((-1.0)*x12429*x12443))+((sj4*x12439))+((cj4*x12437)));
evalcond[6]=(((sj4*x12430))+(((-1.0)*x12438*x12440))+(((-1.0)*x12434*x12446))+(((-1.0)*sj2*x12445))+(((-1.0)*x12432*x12438))+((x12434*x12436)));
evalcond[7]=(((sj4*x12437))+(((-1.0)*x12438*x12441))+(((-1.0)*x12434*x12443))+((x12431*x12434))+(((-1.0)*sj2*x12427))+(((-1.0)*x12438*x12439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x12448=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs(((((-1.0)*r11*sj6*x12448))+((cj5*r12))+((cj6*r10*sj5)))))+(IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x12448))+(((-1.0)*cj5*r02))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=((((1.33846545362005)*cj3))+(cj3*cj3));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x12455=IKPowWithIntegerCheck(cj3,-1);
if(!x12455.valid){
continue;
}
IkReal x12449=x12455.value;
IkReal x12450=((1257.44)*cj3);
IkReal x12451=(cj5*r12);
IkReal x12452=((1.4004)*cj3);
IkReal x12453=(r11*sj5*sj6);
IkReal x12454=(cj6*r10*sj5);
if( IKabs(((0.0196078431372549)*x12449*((((x12450*x12453))+((r10*sj6*x12452))+(((-1.0)*x12450*x12451))+(((-1.0)*x12450*x12454))+(((-4000.0)*cj3*py))+(((-1683.04)*x12454))+(((-1683.04)*x12451))+((cj6*r11*x12452))+(((1683.04)*x12453)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12449*(((((-1.0)*x12453))+x12454+x12451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0196078431372549)*x12449*((((x12450*x12453))+((r10*sj6*x12452))+(((-1.0)*x12450*x12451))+(((-1.0)*x12450*x12454))+(((-4000.0)*cj3*py))+(((-1683.04)*x12454))+(((-1683.04)*x12451))+((cj6*r11*x12452))+(((1683.04)*x12453))))))+IKsqr((x12449*(((((-1.0)*x12453))+x12454+x12451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0196078431372549)*x12449*((((x12450*x12453))+((r10*sj6*x12452))+(((-1.0)*x12450*x12451))+(((-1.0)*x12450*x12454))+(((-4000.0)*cj3*py))+(((-1683.04)*x12454))+(((-1683.04)*x12451))+((cj6*r11*x12452))+(((1683.04)*x12453))))), (x12449*(((((-1.0)*x12453))+x12454+x12451))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12456=IKsin(j1);
IkReal x12457=IKcos(j1);
IkReal x12458=(r02*sj5);
IkReal x12459=(r11*sj6);
IkReal x12460=(cj4*cj5);
IkReal x12461=(r00*sj6);
IkReal x12462=(cj6*r01);
IkReal x12463=(cj5*sj4);
IkReal x12464=(r01*sj6);
IkReal x12465=(r12*sj5);
IkReal x12466=(cj6*r11);
IkReal x12467=((1.0)*cj4);
IkReal x12468=(r10*sj6);
IkReal x12469=((1.0)*cj5);
IkReal x12470=(cj3*x12456);
IkReal x12471=((1.0)*cj6*r10);
IkReal x12472=((1.0)*x12456);
IkReal x12473=((1.0)*cj6*r00);
IkReal x12474=(cj3*x12457);
evalcond[0]=(((sj5*x12459))+(((-1.0)*sj5*x12471))+x12474+(((-1.0)*r12*x12469)));
evalcond[1]=(((sj5*x12464))+(((-1.0)*r02*x12469))+(((-1.0)*x12470))+(((-1.0)*sj5*x12473)));
evalcond[2]=((((-0.01275)*x12457))+(((-1.0)*px))+(((0.0003501)*x12461))+(((0.0003501)*x12462))+(((0.31436)*x12470))+(((0.42076)*x12456)));
evalcond[3]=((((-0.42076)*x12457))+(((-0.01275)*x12456))+(((-1.0)*py))+(((0.0003501)*x12468))+(((0.0003501)*x12466))+(((-0.31436)*x12474)));
evalcond[4]=(((sj3*x12457))+(((-1.0)*x12460*x12471))+((x12459*x12460))+((cj4*x12465))+((sj4*x12468))+((sj4*x12466)));
evalcond[5]=(((cj4*x12458))+(((-1.0)*x12460*x12473))+((sj4*x12461))+((sj4*x12462))+((x12460*x12464))+(((-1.0)*sj3*x12472)));
evalcond[6]=(((x12463*x12464))+(((-1.0)*x12463*x12473))+(((-1.0)*x12457))+(((-1.0)*x12462*x12467))+(((-1.0)*x12461*x12467))+((sj4*x12458)));
evalcond[7]=((((-1.0)*x12463*x12471))+(((-1.0)*x12466*x12467))+(((-1.0)*x12467*x12468))+((x12459*x12463))+(((-1.0)*x12472))+((sj4*x12465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12475=((1.4004)*cj3);
IkReal x12476=(cj5*r12);
IkReal x12477=(r11*sj5*sj6);
IkReal x12478=(cj6*r10*sj5);
CheckValue<IkReal> x12479=IKPowWithIntegerCheck(((((1257.44)*(cj3*cj3)))+(((1683.04)*cj3))),-1);
if(!x12479.valid){
continue;
}
CheckValue<IkReal> x12480=IKPowWithIntegerCheck(cj3,-1);
if(!x12480.valid){
continue;
}
if( IKabs(((x12479.value)*(((((51.0)*x12478))+(((51.0)*x12476))+(((-1.0)*r00*sj6*x12475))+(((-51.0)*x12477))+(((4000.0)*cj3*px))+(((-1.0)*cj6*r01*x12475)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12480.value)*(((((-1.0)*x12477))+x12476+x12478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12479.value)*(((((51.0)*x12478))+(((51.0)*x12476))+(((-1.0)*r00*sj6*x12475))+(((-51.0)*x12477))+(((4000.0)*cj3*px))+(((-1.0)*cj6*r01*x12475))))))+IKsqr(((x12480.value)*(((((-1.0)*x12477))+x12476+x12478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12479.value)*(((((51.0)*x12478))+(((51.0)*x12476))+(((-1.0)*r00*sj6*x12475))+(((-51.0)*x12477))+(((4000.0)*cj3*px))+(((-1.0)*cj6*r01*x12475))))), ((x12480.value)*(((((-1.0)*x12477))+x12476+x12478))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12481=IKsin(j1);
IkReal x12482=IKcos(j1);
IkReal x12483=(r02*sj5);
IkReal x12484=(r11*sj6);
IkReal x12485=(cj4*cj5);
IkReal x12486=(r00*sj6);
IkReal x12487=(cj6*r01);
IkReal x12488=(cj5*sj4);
IkReal x12489=(r01*sj6);
IkReal x12490=(r12*sj5);
IkReal x12491=(cj6*r11);
IkReal x12492=((1.0)*cj4);
IkReal x12493=(r10*sj6);
IkReal x12494=((1.0)*cj5);
IkReal x12495=(cj3*x12481);
IkReal x12496=((1.0)*cj6*r10);
IkReal x12497=((1.0)*x12481);
IkReal x12498=((1.0)*cj6*r00);
IkReal x12499=(cj3*x12482);
evalcond[0]=((((-1.0)*sj5*x12496))+((sj5*x12484))+x12499+(((-1.0)*r12*x12494)));
evalcond[1]=((((-1.0)*sj5*x12498))+(((-1.0)*r02*x12494))+((sj5*x12489))+(((-1.0)*x12495)));
evalcond[2]=((((0.31436)*x12495))+(((0.42076)*x12481))+(((-0.01275)*x12482))+(((-1.0)*px))+(((0.0003501)*x12486))+(((0.0003501)*x12487)));
evalcond[3]=((((0.0003501)*x12491))+(((0.0003501)*x12493))+(((-0.01275)*x12481))+(((-0.31436)*x12499))+(((-0.42076)*x12482))+(((-1.0)*py)));
evalcond[4]=(((x12484*x12485))+((sj3*x12482))+((sj4*x12493))+((sj4*x12491))+((cj4*x12490))+(((-1.0)*x12485*x12496)));
evalcond[5]=((((-1.0)*sj3*x12497))+((x12485*x12489))+((cj4*x12483))+(((-1.0)*x12485*x12498))+((sj4*x12487))+((sj4*x12486)));
evalcond[6]=((((-1.0)*x12482))+(((-1.0)*x12486*x12492))+(((-1.0)*x12487*x12492))+(((-1.0)*x12488*x12498))+((x12488*x12489))+((sj4*x12483)));
evalcond[7]=(((x12484*x12488))+((sj4*x12490))+(((-1.0)*x12497))+(((-1.0)*x12491*x12492))+(((-1.0)*x12488*x12496))+(((-1.0)*x12492*x12493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12500=((1.0)*sj5);
CheckValue<IkReal> x12501 = IKatan2WithCheck(IkReal((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x12500))+(((-1.0)*cj5*r02)))),IkReal(((((-1.0)*r11*sj6*x12500))+((cj5*r12))+((cj6*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12501.valid){
continue;
}
CheckValue<IkReal> x12502=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x12502.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x12501.value)+(((1.5707963267949)*(x12502.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12503=IKsin(j1);
IkReal x12504=IKcos(j1);
IkReal x12505=(r02*sj5);
IkReal x12506=(r11*sj6);
IkReal x12507=(cj4*cj5);
IkReal x12508=(r00*sj6);
IkReal x12509=(cj6*r01);
IkReal x12510=(cj5*sj4);
IkReal x12511=(r01*sj6);
IkReal x12512=(r12*sj5);
IkReal x12513=(cj6*r11);
IkReal x12514=((1.0)*cj4);
IkReal x12515=(r10*sj6);
IkReal x12516=((1.0)*cj5);
IkReal x12517=(cj3*x12503);
IkReal x12518=((1.0)*cj6*r10);
IkReal x12519=((1.0)*x12503);
IkReal x12520=((1.0)*cj6*r00);
IkReal x12521=(cj3*x12504);
evalcond[0]=((((-1.0)*r12*x12516))+x12521+(((-1.0)*sj5*x12518))+((sj5*x12506)));
evalcond[1]=((((-1.0)*sj5*x12520))+((sj5*x12511))+(((-1.0)*r02*x12516))+(((-1.0)*x12517)));
evalcond[2]=((((-0.01275)*x12504))+(((0.0003501)*x12508))+(((0.0003501)*x12509))+(((0.31436)*x12517))+(((-1.0)*px))+(((0.42076)*x12503)));
evalcond[3]=((((-0.01275)*x12503))+(((-0.42076)*x12504))+(((0.0003501)*x12513))+(((0.0003501)*x12515))+(((-0.31436)*x12521))+(((-1.0)*py)));
evalcond[4]=(((sj3*x12504))+((sj4*x12513))+((sj4*x12515))+(((-1.0)*x12507*x12518))+((x12506*x12507))+((cj4*x12512)));
evalcond[5]=((((-1.0)*x12507*x12520))+((x12507*x12511))+((sj4*x12508))+((sj4*x12509))+((cj4*x12505))+(((-1.0)*sj3*x12519)));
evalcond[6]=(((x12510*x12511))+(((-1.0)*x12504))+((sj4*x12505))+(((-1.0)*x12510*x12520))+(((-1.0)*x12509*x12514))+(((-1.0)*x12508*x12514)));
evalcond[7]=((((-1.0)*x12519))+(((-1.0)*x12514*x12515))+((sj4*x12512))+(((-1.0)*x12513*x12514))+((x12506*x12510))+(((-1.0)*x12510*x12518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x12522=((1.0)*sj5);
j1eval[0]=cj3;
j1eval[1]=IKsign(cj3);
j1eval[2]=((IKabs((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x12522))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x12522))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=((((1.33846545362005)*cj3))+(cj3*cj3));
j1eval[1]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j1eval[0]=cj3;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x12529=IKPowWithIntegerCheck(cj3,-1);
if(!x12529.valid){
continue;
}
IkReal x12523=x12529.value;
IkReal x12524=((1257.44)*cj3);
IkReal x12525=(cj5*r12);
IkReal x12526=((1.4004)*cj3);
IkReal x12527=(r11*sj5*sj6);
IkReal x12528=(cj6*r10*sj5);
if( IKabs(((0.0196078431372549)*x12523*(((((-1683.04)*x12527))+(((-1.0)*x12524*x12527))+((x12524*x12528))+((x12524*x12525))+(((4000.0)*cj3*py))+(((-1.0)*cj6*r11*x12526))+(((1683.04)*x12528))+(((1683.04)*x12525))+(((-1.0)*r10*sj6*x12526)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12523*((x12525+x12528+(((-1.0)*x12527)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0196078431372549)*x12523*(((((-1683.04)*x12527))+(((-1.0)*x12524*x12527))+((x12524*x12528))+((x12524*x12525))+(((4000.0)*cj3*py))+(((-1.0)*cj6*r11*x12526))+(((1683.04)*x12528))+(((1683.04)*x12525))+(((-1.0)*r10*sj6*x12526))))))+IKsqr((x12523*((x12525+x12528+(((-1.0)*x12527))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((0.0196078431372549)*x12523*(((((-1683.04)*x12527))+(((-1.0)*x12524*x12527))+((x12524*x12528))+((x12524*x12525))+(((4000.0)*cj3*py))+(((-1.0)*cj6*r11*x12526))+(((1683.04)*x12528))+(((1683.04)*x12525))+(((-1.0)*r10*sj6*x12526))))), (x12523*((x12525+x12528+(((-1.0)*x12527))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12530=IKsin(j1);
IkReal x12531=IKcos(j1);
IkReal x12532=(r02*sj5);
IkReal x12533=(r11*sj6);
IkReal x12534=(cj4*cj5);
IkReal x12535=(r00*sj6);
IkReal x12536=(cj6*r01);
IkReal x12537=(cj5*sj4);
IkReal x12538=(r01*sj6);
IkReal x12539=(r12*sj5);
IkReal x12540=(cj6*r11);
IkReal x12541=((1.0)*cj4);
IkReal x12542=(r10*sj6);
IkReal x12543=((1.0)*cj5);
IkReal x12544=(cj3*x12530);
IkReal x12545=((1.0)*cj6*r10);
IkReal x12546=((1.0)*cj6*r00);
IkReal x12547=(cj3*x12531);
evalcond[0]=(((sj5*x12533))+(((-1.0)*sj5*x12545))+x12547+(((-1.0)*r12*x12543)));
evalcond[1]=((((-1.0)*x12544))+((sj5*x12538))+(((-1.0)*sj5*x12546))+(((-1.0)*r02*x12543)));
evalcond[2]=((((0.31436)*x12544))+(((0.01275)*x12531))+(((-1.0)*px))+(((0.42076)*x12530))+(((0.0003501)*x12536))+(((0.0003501)*x12535)));
evalcond[3]=((((-0.42076)*x12531))+(((0.01275)*x12530))+(((-0.31436)*x12547))+(((-1.0)*py))+(((0.0003501)*x12542))+(((0.0003501)*x12540)));
evalcond[4]=((((-1.0)*x12535*x12541))+(((-1.0)*x12536*x12541))+(((-1.0)*x12537*x12546))+((sj4*x12532))+((x12537*x12538))+x12531);
evalcond[5]=((((-1.0)*x12541*x12542))+(((-1.0)*x12537*x12545))+((sj4*x12539))+((x12533*x12537))+(((-1.0)*x12540*x12541))+x12530);
evalcond[6]=(((sj4*x12540))+((sj4*x12542))+(((-1.0)*x12534*x12545))+((x12533*x12534))+((sj3*x12531))+((cj4*x12539)));
evalcond[7]=(((sj4*x12536))+((sj4*x12535))+((x12534*x12538))+(((-1.0)*x12534*x12546))+(((-1.0)*sj3*x12530))+((cj4*x12532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12548=((1.4004)*cj3);
IkReal x12549=(cj5*r12);
IkReal x12550=(r11*sj5*sj6);
IkReal x12551=(cj6*r10*sj5);
CheckValue<IkReal> x12552=IKPowWithIntegerCheck(((((1257.44)*(cj3*cj3)))+(((1683.04)*cj3))),-1);
if(!x12552.valid){
continue;
}
CheckValue<IkReal> x12553=IKPowWithIntegerCheck(cj3,-1);
if(!x12553.valid){
continue;
}
if( IKabs(((x12552.value)*(((((-1.0)*cj6*r01*x12548))+(((-1.0)*r00*sj6*x12548))+(((51.0)*x12550))+(((-51.0)*x12549))+(((-51.0)*x12551))+(((4000.0)*cj3*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12553.value)*(((((-1.0)*x12550))+x12549+x12551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12552.value)*(((((-1.0)*cj6*r01*x12548))+(((-1.0)*r00*sj6*x12548))+(((51.0)*x12550))+(((-51.0)*x12549))+(((-51.0)*x12551))+(((4000.0)*cj3*px))))))+IKsqr(((x12553.value)*(((((-1.0)*x12550))+x12549+x12551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12552.value)*(((((-1.0)*cj6*r01*x12548))+(((-1.0)*r00*sj6*x12548))+(((51.0)*x12550))+(((-51.0)*x12549))+(((-51.0)*x12551))+(((4000.0)*cj3*px))))), ((x12553.value)*(((((-1.0)*x12550))+x12549+x12551))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12554=IKsin(j1);
IkReal x12555=IKcos(j1);
IkReal x12556=(r02*sj5);
IkReal x12557=(r11*sj6);
IkReal x12558=(cj4*cj5);
IkReal x12559=(r00*sj6);
IkReal x12560=(cj6*r01);
IkReal x12561=(cj5*sj4);
IkReal x12562=(r01*sj6);
IkReal x12563=(r12*sj5);
IkReal x12564=(cj6*r11);
IkReal x12565=((1.0)*cj4);
IkReal x12566=(r10*sj6);
IkReal x12567=((1.0)*cj5);
IkReal x12568=(cj3*x12554);
IkReal x12569=((1.0)*cj6*r10);
IkReal x12570=((1.0)*cj6*r00);
IkReal x12571=(cj3*x12555);
evalcond[0]=((((-1.0)*r12*x12567))+((sj5*x12557))+(((-1.0)*sj5*x12569))+x12571);
evalcond[1]=((((-1.0)*sj5*x12570))+((sj5*x12562))+(((-1.0)*r02*x12567))+(((-1.0)*x12568)));
evalcond[2]=((((0.0003501)*x12560))+(((0.31436)*x12568))+(((0.0003501)*x12559))+(((-1.0)*px))+(((0.01275)*x12555))+(((0.42076)*x12554)));
evalcond[3]=((((-0.31436)*x12571))+(((0.0003501)*x12564))+(((0.0003501)*x12566))+(((-0.42076)*x12555))+(((-1.0)*py))+(((0.01275)*x12554)));
evalcond[4]=((((-1.0)*x12560*x12565))+((sj4*x12556))+((x12561*x12562))+(((-1.0)*x12561*x12570))+(((-1.0)*x12559*x12565))+x12555);
evalcond[5]=((((-1.0)*x12564*x12565))+(((-1.0)*x12565*x12566))+(((-1.0)*x12561*x12569))+((sj4*x12563))+((x12557*x12561))+x12554);
evalcond[6]=(((x12557*x12558))+((sj4*x12564))+((sj4*x12566))+((cj4*x12563))+(((-1.0)*x12558*x12569))+((sj3*x12555)));
evalcond[7]=(((x12558*x12562))+((sj4*x12559))+((sj4*x12560))+(((-1.0)*sj3*x12554))+((cj4*x12556))+(((-1.0)*x12558*x12570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12572=((1.0)*sj5);
CheckValue<IkReal> x12573=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x12573.valid){
continue;
}
CheckValue<IkReal> x12574 = IKatan2WithCheck(IkReal((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x12572))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+((cj6*r10*sj5))+(((-1.0)*r11*sj6*x12572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12574.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12573.value)))+(x12574.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12575=IKsin(j1);
IkReal x12576=IKcos(j1);
IkReal x12577=(r02*sj5);
IkReal x12578=(r11*sj6);
IkReal x12579=(cj4*cj5);
IkReal x12580=(r00*sj6);
IkReal x12581=(cj6*r01);
IkReal x12582=(cj5*sj4);
IkReal x12583=(r01*sj6);
IkReal x12584=(r12*sj5);
IkReal x12585=(cj6*r11);
IkReal x12586=((1.0)*cj4);
IkReal x12587=(r10*sj6);
IkReal x12588=((1.0)*cj5);
IkReal x12589=(cj3*x12575);
IkReal x12590=((1.0)*cj6*r10);
IkReal x12591=((1.0)*cj6*r00);
IkReal x12592=(cj3*x12576);
evalcond[0]=(((sj5*x12578))+(((-1.0)*r12*x12588))+(((-1.0)*sj5*x12590))+x12592);
evalcond[1]=((((-1.0)*sj5*x12591))+(((-1.0)*r02*x12588))+((sj5*x12583))+(((-1.0)*x12589)));
evalcond[2]=((((0.01275)*x12576))+(((0.31436)*x12589))+(((-1.0)*px))+(((0.42076)*x12575))+(((0.0003501)*x12580))+(((0.0003501)*x12581)));
evalcond[3]=((((-0.31436)*x12592))+(((0.01275)*x12575))+(((-1.0)*py))+(((0.0003501)*x12585))+(((0.0003501)*x12587))+(((-0.42076)*x12576)));
evalcond[4]=((((-1.0)*x12580*x12586))+(((-1.0)*x12582*x12591))+(((-1.0)*x12581*x12586))+((x12582*x12583))+((sj4*x12577))+x12576);
evalcond[5]=(((x12578*x12582))+((sj4*x12584))+(((-1.0)*x12586*x12587))+(((-1.0)*x12585*x12586))+(((-1.0)*x12582*x12590))+x12575);
evalcond[6]=((((-1.0)*x12579*x12590))+((sj4*x12587))+((sj4*x12585))+((sj3*x12576))+((cj4*x12584))+((x12578*x12579)));
evalcond[7]=((((-1.0)*x12579*x12591))+((sj4*x12581))+((sj4*x12580))+(((-1.0)*sj3*x12575))+((cj4*x12577))+((x12579*x12583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x12604=IKPowWithIntegerCheck(sj2,-1);
if(!x12604.valid){
continue;
}
IkReal x12593=x12604.value;
IkReal x12594=((1.0)*sj6);
IkReal x12595=(cj4*r10);
IkReal x12596=(r11*sj6);
IkReal x12597=(sj2*sj5);
IkReal x12598=((1.0)*cj6);
IkReal x12599=(cj2*sj3);
IkReal x12600=(cj4*r11);
IkReal x12601=(cj5*sj4);
IkReal x12602=(r12*sj4*sj5);
IkReal x12603=(x12599*x12601);
CheckValue<IkReal> x12605=IKPowWithIntegerCheck(cj3,-1);
if(!x12605.valid){
continue;
}
if( IKabs((x12593*(((((-1.0)*r10*x12598*x12601))+(((-1.0)*x12598*x12600))+x12602+((x12596*x12601))+(((-1.0)*x12594*x12595)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12593*(x12605.value)*((((cj5*r12*sj2))+((x12599*x12602))+(((-1.0)*x12598*x12599*x12600))+(((-1.0)*r10*x12598*x12603))+(((-1.0)*x12594*x12595*x12599))+(((-1.0)*r11*x12594*x12597))+((x12596*x12603))+((cj6*r10*x12597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12593*(((((-1.0)*r10*x12598*x12601))+(((-1.0)*x12598*x12600))+x12602+((x12596*x12601))+(((-1.0)*x12594*x12595))))))+IKsqr((x12593*(x12605.value)*((((cj5*r12*sj2))+((x12599*x12602))+(((-1.0)*x12598*x12599*x12600))+(((-1.0)*r10*x12598*x12603))+(((-1.0)*x12594*x12595*x12599))+(((-1.0)*r11*x12594*x12597))+((x12596*x12603))+((cj6*r10*x12597))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((x12593*(((((-1.0)*r10*x12598*x12601))+(((-1.0)*x12598*x12600))+x12602+((x12596*x12601))+(((-1.0)*x12594*x12595))))), (x12593*(x12605.value)*((((cj5*r12*sj2))+((x12599*x12602))+(((-1.0)*x12598*x12599*x12600))+(((-1.0)*r10*x12598*x12603))+(((-1.0)*x12594*x12595*x12599))+(((-1.0)*r11*x12594*x12597))+((x12596*x12603))+((cj6*r10*x12597))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12606=IKcos(j1);
IkReal x12607=IKsin(j1);
IkReal x12608=((0.31436)*sj3);
IkReal x12609=(r02*sj5);
IkReal x12610=(r11*sj6);
IkReal x12611=(cj4*cj5);
IkReal x12612=(sj4*sj6);
IkReal x12613=(r00*sj6);
IkReal x12614=((0.0003501)*cj6);
IkReal x12615=(cj5*sj4);
IkReal x12616=(r12*sj5);
IkReal x12617=(r01*sj6);
IkReal x12618=(cj6*r11);
IkReal x12619=((1.0)*cj4);
IkReal x12620=(cj6*r01);
IkReal x12621=((1.0)*sj3);
IkReal x12622=((1.0)*cj5);
IkReal x12623=(r10*sj6);
IkReal x12624=(cj2*x12606);
IkReal x12625=(cj3*x12607);
IkReal x12626=((1.0)*cj6*r10);
IkReal x12627=(sj2*x12606);
IkReal x12628=(sj2*x12607);
IkReal x12629=((1.0)*cj6*r00);
IkReal x12630=(cj2*x12607);
IkReal x12631=(cj3*x12606);
evalcond[0]=((((-1.0)*r12*x12622))+(((-1.0)*sj5*x12626))+((sj5*x12610))+x12631+(((-1.0)*x12621*x12630)));
evalcond[1]=((((-1.0)*x12621*x12624))+(((-1.0)*r02*x12622))+(((-1.0)*x12625))+(((-1.0)*sj5*x12629))+((sj5*x12617)));
evalcond[2]=(((sj4*x12609))+(((-1.0)*x12627))+(((-1.0)*x12615*x12629))+(((-1.0)*x12613*x12619))+(((-1.0)*x12619*x12620))+((cj5*r01*x12612)));
evalcond[3]=(((sj4*x12616))+(((-1.0)*x12628))+(((-1.0)*x12615*x12626))+(((-1.0)*x12619*x12623))+(((-1.0)*x12618*x12619))+((x12610*x12615)));
evalcond[4]=(((sj4*x12618))+(((-1.0)*x12611*x12626))+((cj2*x12625))+((cj4*x12616))+((x12610*x12611))+((sj3*x12606))+((r10*x12612)));
evalcond[5]=((((-0.01275)*x12627))+(((0.42076)*x12607))+(((-1.0)*px))+((x12608*x12624))+(((0.0003501)*x12613))+(((0.31436)*x12625))+((r01*x12614)));
evalcond[6]=((((-0.01275)*x12628))+(((-0.31436)*x12631))+(((-1.0)*py))+((r11*x12614))+(((-0.42076)*x12606))+((x12608*x12630))+(((0.0003501)*x12623)));
evalcond[7]=(((sj4*x12620))+((x12611*x12617))+(((-1.0)*x12611*x12629))+((cj4*x12609))+((cj3*x12624))+(((-1.0)*x12607*x12621))+((r00*x12612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12632=(cj4*sj5);
IkReal x12633=(cj3*cj5);
IkReal x12634=(r11*sj6);
IkReal x12635=(sj3*sj5);
IkReal x12636=(cj3*cj6);
IkReal x12637=((1.0)*sj4);
IkReal x12638=((1.0)*cj4);
IkReal x12639=(r10*sj6);
IkReal x12640=((1.0)*cj3);
IkReal x12641=((1.0)*r12*sj3);
IkReal x12642=(cj4*cj5*cj6*r10);
CheckValue<IkReal> x12643=IKPowWithIntegerCheck(cj2,-1);
if(!x12643.valid){
continue;
}
if( IKabs(((x12643.value)*((((cj4*cj6*r10*x12633))+(((-1.0)*x12633*x12634*x12638))+(((-1.0)*cj6*r10*x12635))+(((-1.0)*cj3*x12637*x12639))+(((-1.0)*r12*x12632*x12640))+(((-1.0)*cj5*x12641))+(((-1.0)*r11*x12636*x12637))+((x12634*x12635)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x12633))+((sj3*x12642))+(((-1.0)*sj5*x12634*x12640))+(((-1.0)*sj3*x12637*x12639))+(((-1.0)*x12632*x12641))+(((-1.0)*cj5*sj3*x12634*x12638))+((r10*sj5*x12636))+(((-1.0)*cj6*r11*sj3*x12637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12643.value)*((((cj4*cj6*r10*x12633))+(((-1.0)*x12633*x12634*x12638))+(((-1.0)*cj6*r10*x12635))+(((-1.0)*cj3*x12637*x12639))+(((-1.0)*r12*x12632*x12640))+(((-1.0)*cj5*x12641))+(((-1.0)*r11*x12636*x12637))+((x12634*x12635))))))+IKsqr((((r12*x12633))+((sj3*x12642))+(((-1.0)*sj5*x12634*x12640))+(((-1.0)*sj3*x12637*x12639))+(((-1.0)*x12632*x12641))+(((-1.0)*cj5*sj3*x12634*x12638))+((r10*sj5*x12636))+(((-1.0)*cj6*r11*sj3*x12637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x12643.value)*((((cj4*cj6*r10*x12633))+(((-1.0)*x12633*x12634*x12638))+(((-1.0)*cj6*r10*x12635))+(((-1.0)*cj3*x12637*x12639))+(((-1.0)*r12*x12632*x12640))+(((-1.0)*cj5*x12641))+(((-1.0)*r11*x12636*x12637))+((x12634*x12635))))), (((r12*x12633))+((sj3*x12642))+(((-1.0)*sj5*x12634*x12640))+(((-1.0)*sj3*x12637*x12639))+(((-1.0)*x12632*x12641))+(((-1.0)*cj5*sj3*x12634*x12638))+((r10*sj5*x12636))+(((-1.0)*cj6*r11*sj3*x12637))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12644=IKcos(j1);
IkReal x12645=IKsin(j1);
IkReal x12646=((0.31436)*sj3);
IkReal x12647=(r02*sj5);
IkReal x12648=(r11*sj6);
IkReal x12649=(cj4*cj5);
IkReal x12650=(sj4*sj6);
IkReal x12651=(r00*sj6);
IkReal x12652=((0.0003501)*cj6);
IkReal x12653=(cj5*sj4);
IkReal x12654=(r12*sj5);
IkReal x12655=(r01*sj6);
IkReal x12656=(cj6*r11);
IkReal x12657=((1.0)*cj4);
IkReal x12658=(cj6*r01);
IkReal x12659=((1.0)*sj3);
IkReal x12660=((1.0)*cj5);
IkReal x12661=(r10*sj6);
IkReal x12662=(cj2*x12644);
IkReal x12663=(cj3*x12645);
IkReal x12664=((1.0)*cj6*r10);
IkReal x12665=(sj2*x12644);
IkReal x12666=(sj2*x12645);
IkReal x12667=((1.0)*cj6*r00);
IkReal x12668=(cj2*x12645);
IkReal x12669=(cj3*x12644);
evalcond[0]=(((sj5*x12648))+(((-1.0)*x12659*x12668))+(((-1.0)*r12*x12660))+x12669+(((-1.0)*sj5*x12664)));
evalcond[1]=((((-1.0)*r02*x12660))+(((-1.0)*x12659*x12662))+(((-1.0)*x12663))+(((-1.0)*sj5*x12667))+((sj5*x12655)));
evalcond[2]=((((-1.0)*x12665))+(((-1.0)*x12651*x12657))+((sj4*x12647))+(((-1.0)*x12653*x12667))+((cj5*r01*x12650))+(((-1.0)*x12657*x12658)));
evalcond[3]=((((-1.0)*x12656*x12657))+((sj4*x12654))+(((-1.0)*x12657*x12661))+((x12648*x12653))+(((-1.0)*x12666))+(((-1.0)*x12653*x12664)));
evalcond[4]=(((sj4*x12656))+((sj3*x12644))+((r10*x12650))+((cj2*x12663))+(((-1.0)*x12649*x12664))+((cj4*x12654))+((x12648*x12649)));
evalcond[5]=((((0.31436)*x12663))+(((0.42076)*x12645))+(((-1.0)*px))+(((0.0003501)*x12651))+((x12646*x12662))+(((-0.01275)*x12665))+((r01*x12652)));
evalcond[6]=((((-0.42076)*x12644))+((r11*x12652))+(((-1.0)*py))+((x12646*x12668))+(((0.0003501)*x12661))+(((-0.31436)*x12669))+(((-0.01275)*x12666)));
evalcond[7]=(((cj4*x12647))+(((-1.0)*x12645*x12659))+((sj4*x12658))+(((-1.0)*x12649*x12667))+((cj3*x12662))+((x12649*x12655))+((r00*x12650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x12670=cj2*cj2;
IkReal x12671=cj3*cj3;
IkReal x12672=((1.0)*cj5);
IkReal x12673=(cj2*sj3);
IkReal x12674=(sj5*sj6);
IkReal x12675=((1.0)*cj6*sj5);
CheckValue<IkReal> x12676 = IKatan2WithCheck(IkReal((((cj3*r01*x12674))+((r11*x12673*x12674))+(((-1.0)*r10*x12673*x12675))+(((-1.0)*cj3*r00*x12675))+(((-1.0)*r12*x12672*x12673))+(((-1.0)*cj3*r02*x12672)))),IkReal(((((-1.0)*r00*x12673*x12675))+(((-1.0)*cj3*r11*x12674))+(((-1.0)*r02*x12672*x12673))+((cj3*cj6*r10*sj5))+((r01*x12673*x12674))+((cj3*cj5*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12676.valid){
continue;
}
CheckValue<IkReal> x12677=IKPowWithIntegerCheck(IKsign((x12671+x12670+(((-1.0)*x12670*x12671)))),-1);
if(!x12677.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x12676.value)+(((1.5707963267949)*(x12677.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x12678=IKcos(j1);
IkReal x12679=IKsin(j1);
IkReal x12680=((0.31436)*sj3);
IkReal x12681=(r02*sj5);
IkReal x12682=(r11*sj6);
IkReal x12683=(cj4*cj5);
IkReal x12684=(sj4*sj6);
IkReal x12685=(r00*sj6);
IkReal x12686=((0.0003501)*cj6);
IkReal x12687=(cj5*sj4);
IkReal x12688=(r12*sj5);
IkReal x12689=(r01*sj6);
IkReal x12690=(cj6*r11);
IkReal x12691=((1.0)*cj4);
IkReal x12692=(cj6*r01);
IkReal x12693=((1.0)*sj3);
IkReal x12694=((1.0)*cj5);
IkReal x12695=(r10*sj6);
IkReal x12696=(cj2*x12678);
IkReal x12697=(cj3*x12679);
IkReal x12698=((1.0)*cj6*r10);
IkReal x12699=(sj2*x12678);
IkReal x12700=(sj2*x12679);
IkReal x12701=((1.0)*cj6*r00);
IkReal x12702=(cj2*x12679);
IkReal x12703=(cj3*x12678);
evalcond[0]=(((sj5*x12682))+(((-1.0)*r12*x12694))+x12703+(((-1.0)*x12693*x12702))+(((-1.0)*sj5*x12698)));
evalcond[1]=(((sj5*x12689))+(((-1.0)*sj5*x12701))+(((-1.0)*r02*x12694))+(((-1.0)*x12693*x12696))+(((-1.0)*x12697)));
evalcond[2]=((((-1.0)*x12687*x12701))+(((-1.0)*x12691*x12692))+((sj4*x12681))+((cj5*r01*x12684))+(((-1.0)*x12699))+(((-1.0)*x12685*x12691)));
evalcond[3]=(((x12682*x12687))+(((-1.0)*x12691*x12695))+(((-1.0)*x12687*x12698))+((sj4*x12688))+(((-1.0)*x12690*x12691))+(((-1.0)*x12700)));
evalcond[4]=(((x12682*x12683))+((cj2*x12697))+(((-1.0)*x12683*x12698))+((sj4*x12690))+((r10*x12684))+((cj4*x12688))+((sj3*x12678)));
evalcond[5]=(((r01*x12686))+(((0.0003501)*x12685))+((x12680*x12696))+(((-1.0)*px))+(((0.31436)*x12697))+(((0.42076)*x12679))+(((-0.01275)*x12699)));
evalcond[6]=((((-0.01275)*x12700))+((x12680*x12702))+((r11*x12686))+(((0.0003501)*x12695))+(((-1.0)*py))+(((-0.31436)*x12703))+(((-0.42076)*x12678)));
evalcond[7]=(((r00*x12684))+((x12683*x12689))+((cj3*x12696))+(((-1.0)*x12683*x12701))+((sj4*x12692))+((cj4*x12681))+(((-1.0)*x12679*x12693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "0554529c005b8493034aba9af77214f4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

// start python bindings
// https://github.com/caelan/ss-pybullet/blob/c5efe7ad32381a7a7a15c2bd147b5a8731d21342/pybullet_tools/ikfast/pr2/left_arm_ik.cpp#L12972
// https://github.com/yijiangh/conrob_pybullet/blob/master/utils/ikfast/kuka_kr6_r900/ikfast0x1000004a.Transform6D.0_1_2_3_4_5.cpp#L9923

static PyObject *get_ik(PyObject *self, PyObject *args)
{
    IkSolutionList<IkReal> solutions;

    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9], eetrans[3];

    // First list if 3x3 rotation matrix, easier to compute in Python.
    // Next list is [x, y, z] translation matrix.
    // Last list is free joints.
    PyObject *rotList; // 3x3 rotation matrix
    PyObject *transList; // [x,y,z]
    PyObject *freeList; // can be empty

    // format 'O!': pass C object pointer with the pointer's address.
    if(!PyArg_ParseTuple(args, "O!O!O!", &PyList_Type, &rotList, &PyList_Type, &transList, &PyList_Type, &freeList))
    {
        fprintf(stderr,"Failed to parse input to python objects\n");
        return NULL;
    }

    for(std::size_t i = 0; i < 3; ++i)
    {
        eetrans[i] = PyFloat_AsDouble(PyList_GetItem(transList, i));

        PyObject* rowList = PyList_GetItem(rotList, i);
        for( std::size_t j = 0; j < 3; ++j)
        {
            eerot[3*i + j] = PyFloat_AsDouble(PyList_GetItem(rowList, j));
        }
    }

    for(int i = 0; i < GetNumFreeParameters(); ++i)
    {
        vfree[i] = PyFloat_AsDouble(PyList_GetItem(freeList, i));
    }

    // call ikfast routine
    bool bSuccess = ComputeIk(eetrans, eerot, &vfree[0], solutions);

    if (!bSuccess)
    {
        //fprintf(stderr,"Failed to get ik solution\n");
        return Py_BuildValue(""); // Equivalent to returning None in python
    }

    std::vector<IkReal> solvalues(GetNumJoints());
    PyObject *solutionList = PyList_New(solutions.GetNumSolutions());

    // convert all ikfast solutions into a python list
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);

        PyObject *individualSolution = PyList_New(GetNumJoints());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            // I think IkReal is just a wrapper for double. So this should work.
            PyList_SetItem(individualSolution, j, PyFloat_FromDouble(solvalues[j]));
        }
        PyList_SetItem(solutionList, i, individualSolution);
    }

    return solutionList;
}

static PyObject *get_fk(PyObject *self, PyObject *args)
{
    std::vector<IkReal> joints(GetNumJoints());
    // eerot is a flattened 3x3 rotation matrix
    IkReal eerot[9], eetrans[3];

    PyObject *jointList;
    if(!PyArg_ParseTuple(args, "O!", &PyList_Type, &jointList))
    {
        return NULL;
    }

    for(std::size_t i = 0; i < GetNumJoints(); ++i)
    {
        joints[i] = PyFloat_AsDouble(PyList_GetItem(jointList, i));
    }

    // call ikfast routine
    ComputeFk(&joints[0], eetrans, eerot);

    // convert computed EE pose to a python object
    PyObject *pose = PyList_New(2);
    PyObject *pos = PyList_New(3);
    PyObject *rot = PyList_New(3);

    for(std::size_t i = 0; i < 3; ++i)
    {
        PyList_SetItem(pos, i, PyFloat_FromDouble(eetrans[i]));

        PyObject *row = PyList_New(3);
        for( std::size_t j = 0; j < 3; ++j)
        {
            PyList_SetItem(row, j, PyFloat_FromDouble(eerot[3*i + j]));
        }
        PyList_SetItem(rot, i, row);
    }

    PyList_SetItem(pose, 0, pos);
    PyList_SetItem(pose, 1, rot);

    return pose;
}

static PyMethodDef ikfast_methods[] =
{
    {"get_ik", get_ik, METH_VARARGS, "Compute ik solutions using ikfast."},
    {"get_fk", get_fk, METH_VARARGS, "Compute fk solutions using ikfast."},
    {NULL, NULL, 0, NULL}
    // Not sure why/if this is needed. It shows up in the examples though(something about Sentinel).
};

#if PY_MAJOR_VERSION >= 3

static struct PyModuleDef ikfast_kortex_module = {
    PyModuleDef_HEAD_INIT,
    "ikfast_kortex",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    ikfast_methods
};

#define INITERROR return NULL

PyMODINIT_FUNC
PyInit_ikfast_kortex(void)

#else // PY_MAJOR_VERSION < 3
#define INITERROR return

PyMODINIT_FUNC
initikfast_kortex(void)
#endif
{
#if PY_MAJOR_VERSION >= 3
    PyObject *module = PyModule_Create(&ikfast_kortex_module);
#else
    PyObject *module = Py_InitModule("ikfast_kortex", ikfast_methods);
#endif

if (module == NULL)
    INITERROR;

#if PY_MAJOR_VERSION >= 3
    return module;
#endif
}

// end python bindings
